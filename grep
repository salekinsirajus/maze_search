start:<class 'list'>, start_t <class 'tuple'>
goal:<class 'list'>, goal_t <class 'tuple'>
[1, 1] (1, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 1] 1 1
the point we are trying to find neighbors for  [1, 1]
neighboring cells are:  [[1, 2], [1, 0], [0, 1], [2, 1]]
dealing with [1, 2] at loop 0
[1, 2] is NOT a wall
dealing with [1, 0] at loop 1
dealing with [0, 1] at loop 2
dealing with [2, 1] at loop 3
[2, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
0[1, 1][1, 2]
the points are:  [1, 1] [1, 2]
type for point in is_valid_node  <class 'list'>
[1, 1] 1 1
type for point in is_valid_node  <class 'list'>
[1, 2] 1 2
the point we are trying to find neighbors for  [1, 2]
neighboring cells are:  [[1, 3], [1, 1], [0, 2], [2, 2]]
dealing with [1, 3] at loop 0
[1, 3] is NOT a wall
dealing with [1, 1] at loop 1
[1, 1] is NOT a wall
dealing with [0, 2] at loop 2
dealing with [2, 2] at loop 3
neighbors of b [[1, 3], [1, 1]]
cost from [1, 1] to [1, 2] is 1
<class 'int'>
9 10 19
9 10 19
19 <class 'int'>
9 10 19
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
0[1, 1][2, 1]
the points are:  [1, 1] [2, 1]
type for point in is_valid_node  <class 'list'>
[1, 1] 1 1
type for point in is_valid_node  <class 'list'>
[2, 1] 2 1
the point we are trying to find neighbors for  [2, 1]
neighboring cells are:  [[2, 2], [2, 0], [1, 1], [3, 1]]
dealing with [2, 2] at loop 0
dealing with [2, 0] at loop 1
dealing with [1, 1] at loop 2
[1, 1] is NOT a wall
dealing with [3, 1] at loop 3
[3, 1] is NOT a wall
neighbors of b [[1, 1], [3, 1]]
cost from [1, 1] to [2, 1] is 1
<class 'int'>
8 11 19
8 11 19
19 <class 'int'>
8 11 19
[1, 2] (1, 2)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 2] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 2] 1 2
the point we are trying to find neighbors for  [1, 2]
neighboring cells are:  [[1, 3], [1, 1], [0, 2], [2, 2]]
dealing with [1, 3] at loop 0
[1, 3] is NOT a wall
dealing with [1, 1] at loop 1
[1, 1] is NOT a wall
dealing with [0, 2] at loop 2
dealing with [2, 2] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
1[1, 2][1, 3]
the points are:  [1, 2] [1, 3]
type for point in is_valid_node  <class 'list'>
[1, 2] 1 2
type for point in is_valid_node  <class 'list'>
[1, 3] 1 3
the point we are trying to find neighbors for  [1, 3]
neighboring cells are:  [[1, 4], [1, 2], [0, 3], [2, 3]]
dealing with [1, 4] at loop 0
[1, 4] is NOT a wall
dealing with [1, 2] at loop 1
[1, 2] is NOT a wall
dealing with [0, 3] at loop 2
dealing with [2, 3] at loop 3
neighbors of b [[1, 4], [1, 2]]
cost from [1, 2] to [1, 3] is 1
<class 'int'>
9 9 18
9 9 18
18 <class 'int'>
9 9 18
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
1[1, 2][1, 1]
the points are:  [1, 2] [1, 1]
type for point in is_valid_node  <class 'list'>
[1, 2] 1 2
type for point in is_valid_node  <class 'list'>
[1, 1] 1 1
the point we are trying to find neighbors for  [1, 1]
neighboring cells are:  [[1, 2], [1, 0], [0, 1], [2, 1]]
dealing with [1, 2] at loop 0
[1, 2] is NOT a wall
dealing with [1, 0] at loop 1
dealing with [0, 1] at loop 2
dealing with [2, 1] at loop 3
[2, 1] is NOT a wall
neighbors of b [[1, 2], [2, 1]]
cost from [1, 2] to [1, 1] is 1
[1, 3] (1, 3)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 3] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 3] 1 3
the point we are trying to find neighbors for  [1, 3]
neighboring cells are:  [[1, 4], [1, 2], [0, 3], [2, 3]]
dealing with [1, 4] at loop 0
[1, 4] is NOT a wall
dealing with [1, 2] at loop 1
[1, 2] is NOT a wall
dealing with [0, 3] at loop 2
dealing with [2, 3] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
2[1, 3][1, 4]
the points are:  [1, 3] [1, 4]
type for point in is_valid_node  <class 'list'>
[1, 3] 1 3
type for point in is_valid_node  <class 'list'>
[1, 4] 1 4
the point we are trying to find neighbors for  [1, 4]
neighboring cells are:  [[1, 5], [1, 3], [0, 4], [2, 4]]
dealing with [1, 5] at loop 0
[1, 5] is NOT a wall
dealing with [1, 3] at loop 1
[1, 3] is NOT a wall
dealing with [0, 4] at loop 2
dealing with [2, 4] at loop 3
neighbors of b [[1, 5], [1, 3]]
cost from [1, 3] to [1, 4] is 1
<class 'int'>
9 8 17
9 8 17
17 <class 'int'>
9 8 17
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
2[1, 3][1, 2]
the points are:  [1, 3] [1, 2]
type for point in is_valid_node  <class 'list'>
[1, 3] 1 3
type for point in is_valid_node  <class 'list'>
[1, 2] 1 2
the point we are trying to find neighbors for  [1, 2]
neighboring cells are:  [[1, 3], [1, 1], [0, 2], [2, 2]]
dealing with [1, 3] at loop 0
[1, 3] is NOT a wall
dealing with [1, 1] at loop 1
[1, 1] is NOT a wall
dealing with [0, 2] at loop 2
dealing with [2, 2] at loop 3
neighbors of b [[1, 3], [1, 1]]
cost from [1, 3] to [1, 2] is 1
[1, 4] (1, 4)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 4] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 4] 1 4
the point we are trying to find neighbors for  [1, 4]
neighboring cells are:  [[1, 5], [1, 3], [0, 4], [2, 4]]
dealing with [1, 5] at loop 0
[1, 5] is NOT a wall
dealing with [1, 3] at loop 1
[1, 3] is NOT a wall
dealing with [0, 4] at loop 2
dealing with [2, 4] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
3[1, 4][1, 5]
the points are:  [1, 4] [1, 5]
type for point in is_valid_node  <class 'list'>
[1, 4] 1 4
type for point in is_valid_node  <class 'list'>
[1, 5] 1 5
the point we are trying to find neighbors for  [1, 5]
neighboring cells are:  [[1, 6], [1, 4], [0, 5], [2, 5]]
dealing with [1, 6] at loop 0
[1, 6] is NOT a wall
dealing with [1, 4] at loop 1
[1, 4] is NOT a wall
dealing with [0, 5] at loop 2
dealing with [2, 5] at loop 3
neighbors of b [[1, 6], [1, 4]]
cost from [1, 4] to [1, 5] is 1
<class 'int'>
9 7 16
9 7 16
16 <class 'int'>
9 7 16
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
3[1, 4][1, 3]
the points are:  [1, 4] [1, 3]
type for point in is_valid_node  <class 'list'>
[1, 4] 1 4
type for point in is_valid_node  <class 'list'>
[1, 3] 1 3
the point we are trying to find neighbors for  [1, 3]
neighboring cells are:  [[1, 4], [1, 2], [0, 3], [2, 3]]
dealing with [1, 4] at loop 0
[1, 4] is NOT a wall
dealing with [1, 2] at loop 1
[1, 2] is NOT a wall
dealing with [0, 3] at loop 2
dealing with [2, 3] at loop 3
neighbors of b [[1, 4], [1, 2]]
cost from [1, 4] to [1, 3] is 1
[1, 5] (1, 5)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 5] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 5] 1 5
the point we are trying to find neighbors for  [1, 5]
neighboring cells are:  [[1, 6], [1, 4], [0, 5], [2, 5]]
dealing with [1, 6] at loop 0
[1, 6] is NOT a wall
dealing with [1, 4] at loop 1
[1, 4] is NOT a wall
dealing with [0, 5] at loop 2
dealing with [2, 5] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
4[1, 5][1, 6]
the points are:  [1, 5] [1, 6]
type for point in is_valid_node  <class 'list'>
[1, 5] 1 5
type for point in is_valid_node  <class 'list'>
[1, 6] 1 6
the point we are trying to find neighbors for  [1, 6]
neighboring cells are:  [[1, 7], [1, 5], [0, 6], [2, 6]]
dealing with [1, 7] at loop 0
[1, 7] is NOT a wall
dealing with [1, 5] at loop 1
[1, 5] is NOT a wall
dealing with [0, 6] at loop 2
dealing with [2, 6] at loop 3
[2, 6] is NOT a wall
neighbors of b [[1, 7], [1, 5], [2, 6]]
cost from [1, 5] to [1, 6] is 1
<class 'int'>
9 6 15
9 6 15
15 <class 'int'>
9 6 15
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
4[1, 5][1, 4]
the points are:  [1, 5] [1, 4]
type for point in is_valid_node  <class 'list'>
[1, 5] 1 5
type for point in is_valid_node  <class 'list'>
[1, 4] 1 4
the point we are trying to find neighbors for  [1, 4]
neighboring cells are:  [[1, 5], [1, 3], [0, 4], [2, 4]]
dealing with [1, 5] at loop 0
[1, 5] is NOT a wall
dealing with [1, 3] at loop 1
[1, 3] is NOT a wall
dealing with [0, 4] at loop 2
dealing with [2, 4] at loop 3
neighbors of b [[1, 5], [1, 3]]
cost from [1, 5] to [1, 4] is 1
[1, 6] (1, 6)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 6] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 6] 1 6
the point we are trying to find neighbors for  [1, 6]
neighboring cells are:  [[1, 7], [1, 5], [0, 6], [2, 6]]
dealing with [1, 7] at loop 0
[1, 7] is NOT a wall
dealing with [1, 5] at loop 1
[1, 5] is NOT a wall
dealing with [0, 6] at loop 2
dealing with [2, 6] at loop 3
[2, 6] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
5[1, 6][1, 7]
the points are:  [1, 6] [1, 7]
type for point in is_valid_node  <class 'list'>
[1, 6] 1 6
type for point in is_valid_node  <class 'list'>
[1, 7] 1 7
the point we are trying to find neighbors for  [1, 7]
neighboring cells are:  [[1, 8], [1, 6], [0, 7], [2, 7]]
dealing with [1, 8] at loop 0
[1, 8] is NOT a wall
dealing with [1, 6] at loop 1
[1, 6] is NOT a wall
dealing with [0, 7] at loop 2
dealing with [2, 7] at loop 3
neighbors of b [[1, 8], [1, 6]]
cost from [1, 6] to [1, 7] is 1
<class 'int'>
9 5 14
9 5 14
14 <class 'int'>
9 5 14
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
5[1, 6][1, 5]
the points are:  [1, 6] [1, 5]
type for point in is_valid_node  <class 'list'>
[1, 6] 1 6
type for point in is_valid_node  <class 'list'>
[1, 5] 1 5
the point we are trying to find neighbors for  [1, 5]
neighboring cells are:  [[1, 6], [1, 4], [0, 5], [2, 5]]
dealing with [1, 6] at loop 0
[1, 6] is NOT a wall
dealing with [1, 4] at loop 1
[1, 4] is NOT a wall
dealing with [0, 5] at loop 2
dealing with [2, 5] at loop 3
neighbors of b [[1, 6], [1, 4]]
cost from [1, 6] to [1, 5] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
5[1, 6][2, 6]
the points are:  [1, 6] [2, 6]
type for point in is_valid_node  <class 'list'>
[1, 6] 1 6
type for point in is_valid_node  <class 'list'>
[2, 6] 2 6
the point we are trying to find neighbors for  [2, 6]
neighboring cells are:  [[2, 7], [2, 5], [1, 6], [3, 6]]
dealing with [2, 7] at loop 0
dealing with [2, 5] at loop 1
dealing with [1, 6] at loop 2
[1, 6] is NOT a wall
dealing with [3, 6] at loop 3
[3, 6] is NOT a wall
neighbors of b [[1, 6], [3, 6]]
cost from [1, 6] to [2, 6] is 1
<class 'int'>
8 6 14
8 6 14
14 <class 'int'>
8 6 14
[1, 7] (1, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 7] 1 7
the point we are trying to find neighbors for  [1, 7]
neighboring cells are:  [[1, 8], [1, 6], [0, 7], [2, 7]]
dealing with [1, 8] at loop 0
[1, 8] is NOT a wall
dealing with [1, 6] at loop 1
[1, 6] is NOT a wall
dealing with [0, 7] at loop 2
dealing with [2, 7] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
6[1, 7][1, 8]
the points are:  [1, 7] [1, 8]
type for point in is_valid_node  <class 'list'>
[1, 7] 1 7
type for point in is_valid_node  <class 'list'>
[1, 8] 1 8
the point we are trying to find neighbors for  [1, 8]
neighboring cells are:  [[1, 9], [1, 7], [0, 8], [2, 8]]
dealing with [1, 9] at loop 0
[1, 9] is NOT a wall
dealing with [1, 7] at loop 1
[1, 7] is NOT a wall
dealing with [0, 8] at loop 2
dealing with [2, 8] at loop 3
neighbors of b [[1, 9], [1, 7]]
cost from [1, 7] to [1, 8] is 1
<class 'int'>
9 4 13
9 4 13
13 <class 'int'>
9 4 13
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
6[1, 7][1, 6]
the points are:  [1, 7] [1, 6]
type for point in is_valid_node  <class 'list'>
[1, 7] 1 7
type for point in is_valid_node  <class 'list'>
[1, 6] 1 6
the point we are trying to find neighbors for  [1, 6]
neighboring cells are:  [[1, 7], [1, 5], [0, 6], [2, 6]]
dealing with [1, 7] at loop 0
[1, 7] is NOT a wall
dealing with [1, 5] at loop 1
[1, 5] is NOT a wall
dealing with [0, 6] at loop 2
dealing with [2, 6] at loop 3
[2, 6] is NOT a wall
neighbors of b [[1, 7], [1, 5], [2, 6]]
cost from [1, 7] to [1, 6] is 1
[1, 8] (1, 8)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 8] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 8] 1 8
the point we are trying to find neighbors for  [1, 8]
neighboring cells are:  [[1, 9], [1, 7], [0, 8], [2, 8]]
dealing with [1, 9] at loop 0
[1, 9] is NOT a wall
dealing with [1, 7] at loop 1
[1, 7] is NOT a wall
dealing with [0, 8] at loop 2
dealing with [2, 8] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
7[1, 8][1, 9]
the points are:  [1, 8] [1, 9]
type for point in is_valid_node  <class 'list'>
[1, 8] 1 8
type for point in is_valid_node  <class 'list'>
[1, 9] 1 9
the point we are trying to find neighbors for  [1, 9]
neighboring cells are:  [[1, 10], [1, 8], [0, 9], [2, 9]]
dealing with [1, 10] at loop 0
dealing with [1, 8] at loop 1
[1, 8] is NOT a wall
dealing with [0, 9] at loop 2
dealing with [2, 9] at loop 3
[2, 9] is NOT a wall
neighbors of b [[1, 8], [2, 9]]
cost from [1, 8] to [1, 9] is 1
<class 'int'>
9 3 12
9 3 12
12 <class 'int'>
9 3 12
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
7[1, 8][1, 7]
the points are:  [1, 8] [1, 7]
type for point in is_valid_node  <class 'list'>
[1, 8] 1 8
type for point in is_valid_node  <class 'list'>
[1, 7] 1 7
the point we are trying to find neighbors for  [1, 7]
neighboring cells are:  [[1, 8], [1, 6], [0, 7], [2, 7]]
dealing with [1, 8] at loop 0
[1, 8] is NOT a wall
dealing with [1, 6] at loop 1
[1, 6] is NOT a wall
dealing with [0, 7] at loop 2
dealing with [2, 7] at loop 3
neighbors of b [[1, 8], [1, 6]]
cost from [1, 8] to [1, 7] is 1
[1, 9] (1, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 9] 1 9
the point we are trying to find neighbors for  [1, 9]
neighboring cells are:  [[1, 10], [1, 8], [0, 9], [2, 9]]
dealing with [1, 10] at loop 0
dealing with [1, 8] at loop 1
[1, 8] is NOT a wall
dealing with [0, 9] at loop 2
dealing with [2, 9] at loop 3
[2, 9] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
8[1, 9][1, 8]
the points are:  [1, 9] [1, 8]
type for point in is_valid_node  <class 'list'>
[1, 9] 1 9
type for point in is_valid_node  <class 'list'>
[1, 8] 1 8
the point we are trying to find neighbors for  [1, 8]
neighboring cells are:  [[1, 9], [1, 7], [0, 8], [2, 8]]
dealing with [1, 9] at loop 0
[1, 9] is NOT a wall
dealing with [1, 7] at loop 1
[1, 7] is NOT a wall
dealing with [0, 8] at loop 2
dealing with [2, 8] at loop 3
neighbors of b [[1, 9], [1, 7]]
cost from [1, 9] to [1, 8] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
8[1, 9][2, 9]
the points are:  [1, 9] [2, 9]
type for point in is_valid_node  <class 'list'>
[1, 9] 1 9
type for point in is_valid_node  <class 'list'>
[2, 9] 2 9
the point we are trying to find neighbors for  [2, 9]
neighboring cells are:  [[2, 10], [2, 8], [1, 9], [3, 9]]
dealing with [2, 10] at loop 0
dealing with [2, 8] at loop 1
dealing with [1, 9] at loop 2
[1, 9] is NOT a wall
dealing with [3, 9] at loop 3
[3, 9] is NOT a wall
neighbors of b [[1, 9], [3, 9]]
cost from [1, 9] to [2, 9] is 1
<class 'int'>
8 3 11
8 3 11
11 <class 'int'>
8 3 11
[2, 1] (2, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 1] 2 1
the point we are trying to find neighbors for  [2, 1]
neighboring cells are:  [[2, 2], [2, 0], [1, 1], [3, 1]]
dealing with [2, 2] at loop 0
dealing with [2, 0] at loop 1
dealing with [1, 1] at loop 2
[1, 1] is NOT a wall
dealing with [3, 1] at loop 3
[3, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
1[2, 1][1, 1]
the points are:  [2, 1] [1, 1]
type for point in is_valid_node  <class 'list'>
[2, 1] 2 1
type for point in is_valid_node  <class 'list'>
[1, 1] 1 1
the point we are trying to find neighbors for  [1, 1]
neighboring cells are:  [[1, 2], [1, 0], [0, 1], [2, 1]]
dealing with [1, 2] at loop 0
[1, 2] is NOT a wall
dealing with [1, 0] at loop 1
dealing with [0, 1] at loop 2
dealing with [2, 1] at loop 3
[2, 1] is NOT a wall
neighbors of b [[1, 2], [2, 1]]
cost from [2, 1] to [1, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
1[2, 1][3, 1]
the points are:  [2, 1] [3, 1]
type for point in is_valid_node  <class 'list'>
[2, 1] 2 1
type for point in is_valid_node  <class 'list'>
[3, 1] 3 1
the point we are trying to find neighbors for  [3, 1]
neighboring cells are:  [[3, 2], [3, 0], [2, 1], [4, 1]]
dealing with [3, 2] at loop 0
dealing with [3, 0] at loop 1
dealing with [2, 1] at loop 2
[2, 1] is NOT a wall
dealing with [4, 1] at loop 3
[4, 1] is NOT a wall
neighbors of b [[2, 1], [4, 1]]
cost from [2, 1] to [3, 1] is 1
<class 'int'>
7 11 18
7 11 18
18 <class 'int'>
7 11 18
[2, 6] (2, 6)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 6] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 6] 2 6
the point we are trying to find neighbors for  [2, 6]
neighboring cells are:  [[2, 7], [2, 5], [1, 6], [3, 6]]
dealing with [2, 7] at loop 0
dealing with [2, 5] at loop 1
dealing with [1, 6] at loop 2
[1, 6] is NOT a wall
dealing with [3, 6] at loop 3
[3, 6] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
6[2, 6][1, 6]
the points are:  [2, 6] [1, 6]
type for point in is_valid_node  <class 'list'>
[2, 6] 2 6
type for point in is_valid_node  <class 'list'>
[1, 6] 1 6
the point we are trying to find neighbors for  [1, 6]
neighboring cells are:  [[1, 7], [1, 5], [0, 6], [2, 6]]
dealing with [1, 7] at loop 0
[1, 7] is NOT a wall
dealing with [1, 5] at loop 1
[1, 5] is NOT a wall
dealing with [0, 6] at loop 2
dealing with [2, 6] at loop 3
[2, 6] is NOT a wall
neighbors of b [[1, 7], [1, 5], [2, 6]]
cost from [2, 6] to [1, 6] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
6[2, 6][3, 6]
the points are:  [2, 6] [3, 6]
type for point in is_valid_node  <class 'list'>
[2, 6] 2 6
type for point in is_valid_node  <class 'list'>
[3, 6] 3 6
the point we are trying to find neighbors for  [3, 6]
neighboring cells are:  [[3, 7], [3, 5], [2, 6], [4, 6]]
dealing with [3, 7] at loop 0
[3, 7] is NOT a wall
dealing with [3, 5] at loop 1
[3, 5] is NOT a wall
dealing with [2, 6] at loop 2
[2, 6] is NOT a wall
dealing with [4, 6] at loop 3
neighbors of b [[3, 7], [3, 5], [2, 6]]
cost from [2, 6] to [3, 6] is 1
<class 'int'>
7 6 13
7 6 13
13 <class 'int'>
7 6 13
[2, 9] (2, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 9] 2 9
the point we are trying to find neighbors for  [2, 9]
neighboring cells are:  [[2, 10], [2, 8], [1, 9], [3, 9]]
dealing with [2, 10] at loop 0
dealing with [2, 8] at loop 1
dealing with [1, 9] at loop 2
[1, 9] is NOT a wall
dealing with [3, 9] at loop 3
[3, 9] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
9[2, 9][1, 9]
the points are:  [2, 9] [1, 9]
type for point in is_valid_node  <class 'list'>
[2, 9] 2 9
type for point in is_valid_node  <class 'list'>
[1, 9] 1 9
the point we are trying to find neighbors for  [1, 9]
neighboring cells are:  [[1, 10], [1, 8], [0, 9], [2, 9]]
dealing with [1, 10] at loop 0
dealing with [1, 8] at loop 1
[1, 8] is NOT a wall
dealing with [0, 9] at loop 2
dealing with [2, 9] at loop 3
[2, 9] is NOT a wall
neighbors of b [[1, 8], [2, 9]]
cost from [2, 9] to [1, 9] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
9[2, 9][3, 9]
the points are:  [2, 9] [3, 9]
type for point in is_valid_node  <class 'list'>
[2, 9] 2 9
type for point in is_valid_node  <class 'list'>
[3, 9] 3 9
the point we are trying to find neighbors for  [3, 9]
neighboring cells are:  [[3, 10], [3, 8], [2, 9], [4, 9]]
dealing with [3, 10] at loop 0
[3, 10] is NOT a wall
dealing with [3, 8] at loop 1
dealing with [2, 9] at loop 2
[2, 9] is NOT a wall
dealing with [4, 9] at loop 3
[4, 9] is NOT a wall
neighbors of b [[3, 10], [2, 9], [4, 9]]
cost from [2, 9] to [3, 9] is 1
<class 'int'>
7 3 10
7 3 10
10 <class 'int'>
7 3 10
[3, 1] (3, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 1] 3 1
the point we are trying to find neighbors for  [3, 1]
neighboring cells are:  [[3, 2], [3, 0], [2, 1], [4, 1]]
dealing with [3, 2] at loop 0
dealing with [3, 0] at loop 1
dealing with [2, 1] at loop 2
[2, 1] is NOT a wall
dealing with [4, 1] at loop 3
[4, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
2[3, 1][2, 1]
the points are:  [3, 1] [2, 1]
type for point in is_valid_node  <class 'list'>
[3, 1] 3 1
type for point in is_valid_node  <class 'list'>
[2, 1] 2 1
the point we are trying to find neighbors for  [2, 1]
neighboring cells are:  [[2, 2], [2, 0], [1, 1], [3, 1]]
dealing with [2, 2] at loop 0
dealing with [2, 0] at loop 1
dealing with [1, 1] at loop 2
[1, 1] is NOT a wall
dealing with [3, 1] at loop 3
[3, 1] is NOT a wall
neighbors of b [[1, 1], [3, 1]]
cost from [3, 1] to [2, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
2[3, 1][4, 1]
the points are:  [3, 1] [4, 1]
type for point in is_valid_node  <class 'list'>
[3, 1] 3 1
type for point in is_valid_node  <class 'list'>
[4, 1] 4 1
the point we are trying to find neighbors for  [4, 1]
neighboring cells are:  [[4, 2], [4, 0], [3, 1], [5, 1]]
dealing with [4, 2] at loop 0
dealing with [4, 0] at loop 1
dealing with [3, 1] at loop 2
[3, 1] is NOT a wall
dealing with [5, 1] at loop 3
[5, 1] is NOT a wall
neighbors of b [[3, 1], [5, 1]]
cost from [3, 1] to [4, 1] is 1
<class 'int'>
6 11 17
6 11 17
17 <class 'int'>
6 11 17
[3, 6] (3, 6)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 6] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 6] 3 6
the point we are trying to find neighbors for  [3, 6]
neighboring cells are:  [[3, 7], [3, 5], [2, 6], [4, 6]]
dealing with [3, 7] at loop 0
[3, 7] is NOT a wall
dealing with [3, 5] at loop 1
[3, 5] is NOT a wall
dealing with [2, 6] at loop 2
[2, 6] is NOT a wall
dealing with [4, 6] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
7[3, 6][3, 7]
the points are:  [3, 6] [3, 7]
type for point in is_valid_node  <class 'list'>
[3, 6] 3 6
type for point in is_valid_node  <class 'list'>
[3, 7] 3 7
the point we are trying to find neighbors for  [3, 7]
neighboring cells are:  [[3, 8], [3, 6], [2, 7], [4, 7]]
dealing with [3, 8] at loop 0
dealing with [3, 6] at loop 1
[3, 6] is NOT a wall
dealing with [2, 7] at loop 2
dealing with [4, 7] at loop 3
[4, 7] is NOT a wall
neighbors of b [[3, 6], [4, 7]]
cost from [3, 6] to [3, 7] is 1
<class 'int'>
7 5 12
7 5 12
12 <class 'int'>
7 5 12
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
7[3, 6][3, 5]
the points are:  [3, 6] [3, 5]
type for point in is_valid_node  <class 'list'>
[3, 6] 3 6
type for point in is_valid_node  <class 'list'>
[3, 5] 3 5
the point we are trying to find neighbors for  [3, 5]
neighboring cells are:  [[3, 6], [3, 4], [2, 5], [4, 5]]
dealing with [3, 6] at loop 0
[3, 6] is NOT a wall
dealing with [3, 4] at loop 1
[3, 4] is NOT a wall
dealing with [2, 5] at loop 2
dealing with [4, 5] at loop 3
neighbors of b [[3, 6], [3, 4]]
cost from [3, 6] to [3, 5] is 1
<class 'int'>
7 7 14
7 7 14
14 <class 'int'>
7 7 14
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
7[3, 6][2, 6]
the points are:  [3, 6] [2, 6]
type for point in is_valid_node  <class 'list'>
[3, 6] 3 6
type for point in is_valid_node  <class 'list'>
[2, 6] 2 6
the point we are trying to find neighbors for  [2, 6]
neighboring cells are:  [[2, 7], [2, 5], [1, 6], [3, 6]]
dealing with [2, 7] at loop 0
dealing with [2, 5] at loop 1
dealing with [1, 6] at loop 2
[1, 6] is NOT a wall
dealing with [3, 6] at loop 3
[3, 6] is NOT a wall
neighbors of b [[1, 6], [3, 6]]
cost from [3, 6] to [2, 6] is 1
[3, 7] (3, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 7] 3 7
the point we are trying to find neighbors for  [3, 7]
neighboring cells are:  [[3, 8], [3, 6], [2, 7], [4, 7]]
dealing with [3, 8] at loop 0
dealing with [3, 6] at loop 1
[3, 6] is NOT a wall
dealing with [2, 7] at loop 2
dealing with [4, 7] at loop 3
[4, 7] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
8[3, 7][3, 6]
the points are:  [3, 7] [3, 6]
type for point in is_valid_node  <class 'list'>
[3, 7] 3 7
type for point in is_valid_node  <class 'list'>
[3, 6] 3 6
the point we are trying to find neighbors for  [3, 6]
neighboring cells are:  [[3, 7], [3, 5], [2, 6], [4, 6]]
dealing with [3, 7] at loop 0
[3, 7] is NOT a wall
dealing with [3, 5] at loop 1
[3, 5] is NOT a wall
dealing with [2, 6] at loop 2
[2, 6] is NOT a wall
dealing with [4, 6] at loop 3
neighbors of b [[3, 7], [3, 5], [2, 6]]
cost from [3, 7] to [3, 6] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
8[3, 7][4, 7]
the points are:  [3, 7] [4, 7]
type for point in is_valid_node  <class 'list'>
[3, 7] 3 7
type for point in is_valid_node  <class 'list'>
[4, 7] 4 7
the point we are trying to find neighbors for  [4, 7]
neighboring cells are:  [[4, 8], [4, 6], [3, 7], [5, 7]]
dealing with [4, 8] at loop 0
dealing with [4, 6] at loop 1
dealing with [3, 7] at loop 2
[3, 7] is NOT a wall
dealing with [5, 7] at loop 3
[5, 7] is NOT a wall
neighbors of b [[3, 7], [5, 7]]
cost from [3, 7] to [4, 7] is 1
<class 'int'>
6 5 11
6 5 11
11 <class 'int'>
6 5 11
[3, 9] (3, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 9] 3 9
the point we are trying to find neighbors for  [3, 9]
neighboring cells are:  [[3, 10], [3, 8], [2, 9], [4, 9]]
dealing with [3, 10] at loop 0
[3, 10] is NOT a wall
dealing with [3, 8] at loop 1
dealing with [2, 9] at loop 2
[2, 9] is NOT a wall
dealing with [4, 9] at loop 3
[4, 9] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
10[3, 9][3, 10]
the points are:  [3, 9] [3, 10]
type for point in is_valid_node  <class 'list'>
[3, 9] 3 9
type for point in is_valid_node  <class 'list'>
[3, 10] 3 10
the point we are trying to find neighbors for  [3, 10]
neighboring cells are:  [[3, 11], [3, 9], [2, 10], [4, 10]]
dealing with [3, 11] at loop 0
[3, 11] is NOT a wall
dealing with [3, 9] at loop 1
[3, 9] is NOT a wall
dealing with [2, 10] at loop 2
dealing with [4, 10] at loop 3
neighbors of b [[3, 11], [3, 9]]
cost from [3, 9] to [3, 10] is 1
<class 'int'>
7 2 9
7 2 9
9 <class 'int'>
7 2 9
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
10[3, 9][2, 9]
the points are:  [3, 9] [2, 9]
type for point in is_valid_node  <class 'list'>
[3, 9] 3 9
type for point in is_valid_node  <class 'list'>
[2, 9] 2 9
the point we are trying to find neighbors for  [2, 9]
neighboring cells are:  [[2, 10], [2, 8], [1, 9], [3, 9]]
dealing with [2, 10] at loop 0
dealing with [2, 8] at loop 1
dealing with [1, 9] at loop 2
[1, 9] is NOT a wall
dealing with [3, 9] at loop 3
[3, 9] is NOT a wall
neighbors of b [[1, 9], [3, 9]]
cost from [3, 9] to [2, 9] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
10[3, 9][4, 9]
the points are:  [3, 9] [4, 9]
type for point in is_valid_node  <class 'list'>
[3, 9] 3 9
type for point in is_valid_node  <class 'list'>
[4, 9] 4 9
the point we are trying to find neighbors for  [4, 9]
neighboring cells are:  [[4, 10], [4, 8], [3, 9], [5, 9]]
dealing with [4, 10] at loop 0
dealing with [4, 8] at loop 1
dealing with [3, 9] at loop 2
[3, 9] is NOT a wall
dealing with [5, 9] at loop 3
[5, 9] is NOT a wall
neighbors of b [[3, 9], [5, 9]]
cost from [3, 9] to [4, 9] is 1
<class 'int'>
6 3 9
6 3 9
9 <class 'int'>
6 3 9
[3, 10] (3, 10)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 10] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 10] 3 10
the point we are trying to find neighbors for  [3, 10]
neighboring cells are:  [[3, 11], [3, 9], [2, 10], [4, 10]]
dealing with [3, 11] at loop 0
[3, 11] is NOT a wall
dealing with [3, 9] at loop 1
[3, 9] is NOT a wall
dealing with [2, 10] at loop 2
dealing with [4, 10] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
11[3, 10][3, 11]
the points are:  [3, 10] [3, 11]
type for point in is_valid_node  <class 'list'>
[3, 10] 3 10
type for point in is_valid_node  <class 'list'>
[3, 11] 3 11
the point we are trying to find neighbors for  [3, 11]
neighboring cells are:  [[3, 12], [3, 10], [2, 11], [4, 11]]
dealing with [3, 12] at loop 0
dealing with [3, 10] at loop 1
[3, 10] is NOT a wall
dealing with [2, 11] at loop 2
[2, 11] is NOT a wall
dealing with [4, 11] at loop 3
neighbors of b [[3, 10], [2, 11]]
cost from [3, 10] to [3, 11] is 1
<class 'int'>
7 1 8
7 1 8
8 <class 'int'>
7 1 8
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
11[3, 10][3, 9]
the points are:  [3, 10] [3, 9]
type for point in is_valid_node  <class 'list'>
[3, 10] 3 10
type for point in is_valid_node  <class 'list'>
[3, 9] 3 9
the point we are trying to find neighbors for  [3, 9]
neighboring cells are:  [[3, 10], [3, 8], [2, 9], [4, 9]]
dealing with [3, 10] at loop 0
[3, 10] is NOT a wall
dealing with [3, 8] at loop 1
dealing with [2, 9] at loop 2
[2, 9] is NOT a wall
dealing with [4, 9] at loop 3
[4, 9] is NOT a wall
neighbors of b [[3, 10], [2, 9], [4, 9]]
cost from [3, 10] to [3, 9] is 1
[3, 11] (3, 11)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 11] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 11] 3 11
the point we are trying to find neighbors for  [3, 11]
neighboring cells are:  [[3, 12], [3, 10], [2, 11], [4, 11]]
dealing with [3, 12] at loop 0
dealing with [3, 10] at loop 1
[3, 10] is NOT a wall
dealing with [2, 11] at loop 2
[2, 11] is NOT a wall
dealing with [4, 11] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
12[3, 11][3, 10]
the points are:  [3, 11] [3, 10]
type for point in is_valid_node  <class 'list'>
[3, 11] 3 11
type for point in is_valid_node  <class 'list'>
[3, 10] 3 10
the point we are trying to find neighbors for  [3, 10]
neighboring cells are:  [[3, 11], [3, 9], [2, 10], [4, 10]]
dealing with [3, 11] at loop 0
[3, 11] is NOT a wall
dealing with [3, 9] at loop 1
[3, 9] is NOT a wall
dealing with [2, 10] at loop 2
dealing with [4, 10] at loop 3
neighbors of b [[3, 11], [3, 9]]
cost from [3, 11] to [3, 10] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
12[3, 11][2, 11]
the points are:  [3, 11] [2, 11]
type for point in is_valid_node  <class 'list'>
[3, 11] 3 11
type for point in is_valid_node  <class 'list'>
[2, 11] 2 11
the point we are trying to find neighbors for  [2, 11]
neighboring cells are:  [[2, 12], [2, 10], [1, 11], [3, 11]]
dealing with [2, 12] at loop 0
dealing with [2, 10] at loop 1
dealing with [1, 11] at loop 2
[1, 11] is NOT a wall
dealing with [3, 11] at loop 3
[3, 11] is NOT a wall
neighbors of b [[1, 11], [3, 11]]
cost from [3, 11] to [2, 11] is 1
<class 'int'>
8 1 9
8 1 9
9 <class 'int'>
8 1 9
[4, 1] (4, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 1] 4 1
the point we are trying to find neighbors for  [4, 1]
neighboring cells are:  [[4, 2], [4, 0], [3, 1], [5, 1]]
dealing with [4, 2] at loop 0
dealing with [4, 0] at loop 1
dealing with [3, 1] at loop 2
[3, 1] is NOT a wall
dealing with [5, 1] at loop 3
[5, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
3[4, 1][3, 1]
the points are:  [4, 1] [3, 1]
type for point in is_valid_node  <class 'list'>
[4, 1] 4 1
type for point in is_valid_node  <class 'list'>
[3, 1] 3 1
the point we are trying to find neighbors for  [3, 1]
neighboring cells are:  [[3, 2], [3, 0], [2, 1], [4, 1]]
dealing with [3, 2] at loop 0
dealing with [3, 0] at loop 1
dealing with [2, 1] at loop 2
[2, 1] is NOT a wall
dealing with [4, 1] at loop 3
[4, 1] is NOT a wall
neighbors of b [[2, 1], [4, 1]]
cost from [4, 1] to [3, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
3[4, 1][5, 1]
the points are:  [4, 1] [5, 1]
type for point in is_valid_node  <class 'list'>
[4, 1] 4 1
type for point in is_valid_node  <class 'list'>
[5, 1] 5 1
the point we are trying to find neighbors for  [5, 1]
neighboring cells are:  [[5, 2], [5, 0], [4, 1], [6, 1]]
dealing with [5, 2] at loop 0
dealing with [5, 0] at loop 1
dealing with [4, 1] at loop 2
[4, 1] is NOT a wall
dealing with [6, 1] at loop 3
[6, 1] is NOT a wall
neighbors of b [[4, 1], [6, 1]]
cost from [4, 1] to [5, 1] is 1
<class 'int'>
5 11 16
5 11 16
16 <class 'int'>
5 11 16
[4, 7] (4, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 7] 4 7
the point we are trying to find neighbors for  [4, 7]
neighboring cells are:  [[4, 8], [4, 6], [3, 7], [5, 7]]
dealing with [4, 8] at loop 0
dealing with [4, 6] at loop 1
dealing with [3, 7] at loop 2
[3, 7] is NOT a wall
dealing with [5, 7] at loop 3
[5, 7] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
9[4, 7][3, 7]
the points are:  [4, 7] [3, 7]
type for point in is_valid_node  <class 'list'>
[4, 7] 4 7
type for point in is_valid_node  <class 'list'>
[3, 7] 3 7
the point we are trying to find neighbors for  [3, 7]
neighboring cells are:  [[3, 8], [3, 6], [2, 7], [4, 7]]
dealing with [3, 8] at loop 0
dealing with [3, 6] at loop 1
[3, 6] is NOT a wall
dealing with [2, 7] at loop 2
dealing with [4, 7] at loop 3
[4, 7] is NOT a wall
neighbors of b [[3, 6], [4, 7]]
cost from [4, 7] to [3, 7] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
9[4, 7][5, 7]
the points are:  [4, 7] [5, 7]
type for point in is_valid_node  <class 'list'>
[4, 7] 4 7
type for point in is_valid_node  <class 'list'>
[5, 7] 5 7
the point we are trying to find neighbors for  [5, 7]
neighboring cells are:  [[5, 8], [5, 6], [4, 7], [6, 7]]
dealing with [5, 8] at loop 0
[5, 8] is NOT a wall
dealing with [5, 6] at loop 1
dealing with [4, 7] at loop 2
[4, 7] is NOT a wall
dealing with [6, 7] at loop 3
[6, 7] is NOT a wall
neighbors of b [[5, 8], [4, 7], [6, 7]]
cost from [4, 7] to [5, 7] is 1
<class 'int'>
5 5 10
5 5 10
10 <class 'int'>
5 5 10
[4, 9] (4, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 9] 4 9
the point we are trying to find neighbors for  [4, 9]
neighboring cells are:  [[4, 10], [4, 8], [3, 9], [5, 9]]
dealing with [4, 10] at loop 0
dealing with [4, 8] at loop 1
dealing with [3, 9] at loop 2
[3, 9] is NOT a wall
dealing with [5, 9] at loop 3
[5, 9] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
11[4, 9][3, 9]
the points are:  [4, 9] [3, 9]
type for point in is_valid_node  <class 'list'>
[4, 9] 4 9
type for point in is_valid_node  <class 'list'>
[3, 9] 3 9
the point we are trying to find neighbors for  [3, 9]
neighboring cells are:  [[3, 10], [3, 8], [2, 9], [4, 9]]
dealing with [3, 10] at loop 0
[3, 10] is NOT a wall
dealing with [3, 8] at loop 1
dealing with [2, 9] at loop 2
[2, 9] is NOT a wall
dealing with [4, 9] at loop 3
[4, 9] is NOT a wall
neighbors of b [[3, 10], [2, 9], [4, 9]]
cost from [4, 9] to [3, 9] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
11[4, 9][5, 9]
the points are:  [4, 9] [5, 9]
type for point in is_valid_node  <class 'list'>
[4, 9] 4 9
type for point in is_valid_node  <class 'list'>
[5, 9] 5 9
the point we are trying to find neighbors for  [5, 9]
neighboring cells are:  [[5, 10], [5, 8], [4, 9], [6, 9]]
dealing with [5, 10] at loop 0
dealing with [5, 8] at loop 1
[5, 8] is NOT a wall
dealing with [4, 9] at loop 2
[4, 9] is NOT a wall
dealing with [6, 9] at loop 3
neighbors of b [[5, 8], [4, 9]]
cost from [4, 9] to [5, 9] is 1
<class 'int'>
5 3 8
5 3 8
8 <class 'int'>
5 3 8
[5, 1] (5, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 1] 5 1
the point we are trying to find neighbors for  [5, 1]
neighboring cells are:  [[5, 2], [5, 0], [4, 1], [6, 1]]
dealing with [5, 2] at loop 0
dealing with [5, 0] at loop 1
dealing with [4, 1] at loop 2
[4, 1] is NOT a wall
dealing with [6, 1] at loop 3
[6, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
4[5, 1][4, 1]
the points are:  [5, 1] [4, 1]
type for point in is_valid_node  <class 'list'>
[5, 1] 5 1
type for point in is_valid_node  <class 'list'>
[4, 1] 4 1
the point we are trying to find neighbors for  [4, 1]
neighboring cells are:  [[4, 2], [4, 0], [3, 1], [5, 1]]
dealing with [4, 2] at loop 0
dealing with [4, 0] at loop 1
dealing with [3, 1] at loop 2
[3, 1] is NOT a wall
dealing with [5, 1] at loop 3
[5, 1] is NOT a wall
neighbors of b [[3, 1], [5, 1]]
cost from [5, 1] to [4, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
4[5, 1][6, 1]
the points are:  [5, 1] [6, 1]
type for point in is_valid_node  <class 'list'>
[5, 1] 5 1
type for point in is_valid_node  <class 'list'>
[6, 1] 6 1
the point we are trying to find neighbors for  [6, 1]
neighboring cells are:  [[6, 2], [6, 0], [5, 1], [7, 1]]
dealing with [6, 2] at loop 0
dealing with [6, 0] at loop 1
dealing with [5, 1] at loop 2
[5, 1] is NOT a wall
dealing with [7, 1] at loop 3
[7, 1] is NOT a wall
neighbors of b [[5, 1], [7, 1]]
cost from [5, 1] to [6, 1] is 1
<class 'int'>
4 11 15
4 11 15
15 <class 'int'>
4 11 15
[5, 7] (5, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 7] 5 7
the point we are trying to find neighbors for  [5, 7]
neighboring cells are:  [[5, 8], [5, 6], [4, 7], [6, 7]]
dealing with [5, 8] at loop 0
[5, 8] is NOT a wall
dealing with [5, 6] at loop 1
dealing with [4, 7] at loop 2
[4, 7] is NOT a wall
dealing with [6, 7] at loop 3
[6, 7] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
10[5, 7][5, 8]
the points are:  [5, 7] [5, 8]
type for point in is_valid_node  <class 'list'>
[5, 7] 5 7
type for point in is_valid_node  <class 'list'>
[5, 8] 5 8
the point we are trying to find neighbors for  [5, 8]
neighboring cells are:  [[5, 9], [5, 7], [4, 8], [6, 8]]
dealing with [5, 9] at loop 0
[5, 9] is NOT a wall
dealing with [5, 7] at loop 1
[5, 7] is NOT a wall
dealing with [4, 8] at loop 2
dealing with [6, 8] at loop 3
neighbors of b [[5, 9], [5, 7]]
cost from [5, 7] to [5, 8] is 1
<class 'int'>
5 4 9
5 4 9
9 <class 'int'>
5 4 9
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
10[5, 7][4, 7]
the points are:  [5, 7] [4, 7]
type for point in is_valid_node  <class 'list'>
[5, 7] 5 7
type for point in is_valid_node  <class 'list'>
[4, 7] 4 7
the point we are trying to find neighbors for  [4, 7]
neighboring cells are:  [[4, 8], [4, 6], [3, 7], [5, 7]]
dealing with [4, 8] at loop 0
dealing with [4, 6] at loop 1
dealing with [3, 7] at loop 2
[3, 7] is NOT a wall
dealing with [5, 7] at loop 3
[5, 7] is NOT a wall
neighbors of b [[3, 7], [5, 7]]
cost from [5, 7] to [4, 7] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
10[5, 7][6, 7]
the points are:  [5, 7] [6, 7]
type for point in is_valid_node  <class 'list'>
[5, 7] 5 7
type for point in is_valid_node  <class 'list'>
[6, 7] 6 7
the point we are trying to find neighbors for  [6, 7]
neighboring cells are:  [[6, 8], [6, 6], [5, 7], [7, 7]]
dealing with [6, 8] at loop 0
dealing with [6, 6] at loop 1
dealing with [5, 7] at loop 2
[5, 7] is NOT a wall
dealing with [7, 7] at loop 3
[7, 7] is NOT a wall
neighbors of b [[5, 7], [7, 7]]
cost from [5, 7] to [6, 7] is 1
<class 'int'>
4 5 9
4 5 9
9 <class 'int'>
4 5 9
[5, 8] (5, 8)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 8] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 8] 5 8
the point we are trying to find neighbors for  [5, 8]
neighboring cells are:  [[5, 9], [5, 7], [4, 8], [6, 8]]
dealing with [5, 9] at loop 0
[5, 9] is NOT a wall
dealing with [5, 7] at loop 1
[5, 7] is NOT a wall
dealing with [4, 8] at loop 2
dealing with [6, 8] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
11[5, 8][5, 9]
the points are:  [5, 8] [5, 9]
type for point in is_valid_node  <class 'list'>
[5, 8] 5 8
type for point in is_valid_node  <class 'list'>
[5, 9] 5 9
the point we are trying to find neighbors for  [5, 9]
neighboring cells are:  [[5, 10], [5, 8], [4, 9], [6, 9]]
dealing with [5, 10] at loop 0
dealing with [5, 8] at loop 1
[5, 8] is NOT a wall
dealing with [4, 9] at loop 2
[4, 9] is NOT a wall
dealing with [6, 9] at loop 3
neighbors of b [[5, 8], [4, 9]]
cost from [5, 8] to [5, 9] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
11[5, 8][5, 7]
the points are:  [5, 8] [5, 7]
type for point in is_valid_node  <class 'list'>
[5, 8] 5 8
type for point in is_valid_node  <class 'list'>
[5, 7] 5 7
the point we are trying to find neighbors for  [5, 7]
neighboring cells are:  [[5, 8], [5, 6], [4, 7], [6, 7]]
dealing with [5, 8] at loop 0
[5, 8] is NOT a wall
dealing with [5, 6] at loop 1
dealing with [4, 7] at loop 2
[4, 7] is NOT a wall
dealing with [6, 7] at loop 3
[6, 7] is NOT a wall
neighbors of b [[5, 8], [4, 7], [6, 7]]
cost from [5, 8] to [5, 7] is 1
[5, 9] (5, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 9] 5 9
the point we are trying to find neighbors for  [5, 9]
neighboring cells are:  [[5, 10], [5, 8], [4, 9], [6, 9]]
dealing with [5, 10] at loop 0
dealing with [5, 8] at loop 1
[5, 8] is NOT a wall
dealing with [4, 9] at loop 2
[4, 9] is NOT a wall
dealing with [6, 9] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
12[5, 9][5, 8]
the points are:  [5, 9] [5, 8]
type for point in is_valid_node  <class 'list'>
[5, 9] 5 9
type for point in is_valid_node  <class 'list'>
[5, 8] 5 8
the point we are trying to find neighbors for  [5, 8]
neighboring cells are:  [[5, 9], [5, 7], [4, 8], [6, 8]]
dealing with [5, 9] at loop 0
[5, 9] is NOT a wall
dealing with [5, 7] at loop 1
[5, 7] is NOT a wall
dealing with [4, 8] at loop 2
dealing with [6, 8] at loop 3
neighbors of b [[5, 9], [5, 7]]
cost from [5, 9] to [5, 8] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
12[5, 9][4, 9]
the points are:  [5, 9] [4, 9]
type for point in is_valid_node  <class 'list'>
[5, 9] 5 9
type for point in is_valid_node  <class 'list'>
[4, 9] 4 9
the point we are trying to find neighbors for  [4, 9]
neighboring cells are:  [[4, 10], [4, 8], [3, 9], [5, 9]]
dealing with [4, 10] at loop 0
dealing with [4, 8] at loop 1
dealing with [3, 9] at loop 2
[3, 9] is NOT a wall
dealing with [5, 9] at loop 3
[5, 9] is NOT a wall
neighbors of b [[3, 9], [5, 9]]
cost from [5, 9] to [4, 9] is 1
[6, 1] (6, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 1] 6 1
the point we are trying to find neighbors for  [6, 1]
neighboring cells are:  [[6, 2], [6, 0], [5, 1], [7, 1]]
dealing with [6, 2] at loop 0
dealing with [6, 0] at loop 1
dealing with [5, 1] at loop 2
[5, 1] is NOT a wall
dealing with [7, 1] at loop 3
[7, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
5[6, 1][5, 1]
the points are:  [6, 1] [5, 1]
type for point in is_valid_node  <class 'list'>
[6, 1] 6 1
type for point in is_valid_node  <class 'list'>
[5, 1] 5 1
the point we are trying to find neighbors for  [5, 1]
neighboring cells are:  [[5, 2], [5, 0], [4, 1], [6, 1]]
dealing with [5, 2] at loop 0
dealing with [5, 0] at loop 1
dealing with [4, 1] at loop 2
[4, 1] is NOT a wall
dealing with [6, 1] at loop 3
[6, 1] is NOT a wall
neighbors of b [[4, 1], [6, 1]]
cost from [6, 1] to [5, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
5[6, 1][7, 1]
the points are:  [6, 1] [7, 1]
type for point in is_valid_node  <class 'list'>
[6, 1] 6 1
type for point in is_valid_node  <class 'list'>
[7, 1] 7 1
the point we are trying to find neighbors for  [7, 1]
neighboring cells are:  [[7, 2], [7, 0], [6, 1], [8, 1]]
dealing with [7, 2] at loop 0
[7, 2] is NOT a wall
dealing with [7, 0] at loop 1
dealing with [6, 1] at loop 2
[6, 1] is NOT a wall
dealing with [8, 1] at loop 3
[8, 1] is NOT a wall
neighbors of b [[7, 2], [6, 1], [8, 1]]
cost from [6, 1] to [7, 1] is 1
<class 'int'>
3 11 14
3 11 14
14 <class 'int'>
3 11 14
[6, 7] (6, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 7] 6 7
the point we are trying to find neighbors for  [6, 7]
neighboring cells are:  [[6, 8], [6, 6], [5, 7], [7, 7]]
dealing with [6, 8] at loop 0
dealing with [6, 6] at loop 1
dealing with [5, 7] at loop 2
[5, 7] is NOT a wall
dealing with [7, 7] at loop 3
[7, 7] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
11[6, 7][5, 7]
the points are:  [6, 7] [5, 7]
type for point in is_valid_node  <class 'list'>
[6, 7] 6 7
type for point in is_valid_node  <class 'list'>
[5, 7] 5 7
the point we are trying to find neighbors for  [5, 7]
neighboring cells are:  [[5, 8], [5, 6], [4, 7], [6, 7]]
dealing with [5, 8] at loop 0
[5, 8] is NOT a wall
dealing with [5, 6] at loop 1
dealing with [4, 7] at loop 2
[4, 7] is NOT a wall
dealing with [6, 7] at loop 3
[6, 7] is NOT a wall
neighbors of b [[5, 8], [4, 7], [6, 7]]
cost from [6, 7] to [5, 7] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
11[6, 7][7, 7]
the points are:  [6, 7] [7, 7]
type for point in is_valid_node  <class 'list'>
[6, 7] 6 7
type for point in is_valid_node  <class 'list'>
[7, 7] 7 7
the point we are trying to find neighbors for  [7, 7]
neighboring cells are:  [[7, 8], [7, 6], [6, 7], [8, 7]]
dealing with [7, 8] at loop 0
[7, 8] is NOT a wall
dealing with [7, 6] at loop 1
[7, 6] is NOT a wall
dealing with [6, 7] at loop 2
[6, 7] is NOT a wall
dealing with [8, 7] at loop 3
neighbors of b [[7, 8], [7, 6], [6, 7]]
cost from [6, 7] to [7, 7] is 1
<class 'int'>
3 5 8
3 5 8
8 <class 'int'>
3 5 8
[7, 1] (7, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 1] 7 1
the point we are trying to find neighbors for  [7, 1]
neighboring cells are:  [[7, 2], [7, 0], [6, 1], [8, 1]]
dealing with [7, 2] at loop 0
[7, 2] is NOT a wall
dealing with [7, 0] at loop 1
dealing with [6, 1] at loop 2
[6, 1] is NOT a wall
dealing with [8, 1] at loop 3
[8, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
6[7, 1][7, 2]
the points are:  [7, 1] [7, 2]
type for point in is_valid_node  <class 'list'>
[7, 1] 7 1
type for point in is_valid_node  <class 'list'>
[7, 2] 7 2
the point we are trying to find neighbors for  [7, 2]
neighboring cells are:  [[7, 3], [7, 1], [6, 2], [8, 2]]
dealing with [7, 3] at loop 0
[7, 3] is NOT a wall
dealing with [7, 1] at loop 1
[7, 1] is NOT a wall
dealing with [6, 2] at loop 2
dealing with [8, 2] at loop 3
neighbors of b [[7, 3], [7, 1]]
cost from [7, 1] to [7, 2] is 1
<class 'int'>
3 10 13
3 10 13
13 <class 'int'>
3 10 13
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
6[7, 1][6, 1]
the points are:  [7, 1] [6, 1]
type for point in is_valid_node  <class 'list'>
[7, 1] 7 1
type for point in is_valid_node  <class 'list'>
[6, 1] 6 1
the point we are trying to find neighbors for  [6, 1]
neighboring cells are:  [[6, 2], [6, 0], [5, 1], [7, 1]]
dealing with [6, 2] at loop 0
dealing with [6, 0] at loop 1
dealing with [5, 1] at loop 2
[5, 1] is NOT a wall
dealing with [7, 1] at loop 3
[7, 1] is NOT a wall
neighbors of b [[5, 1], [7, 1]]
cost from [7, 1] to [6, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
6[7, 1][8, 1]
the points are:  [7, 1] [8, 1]
type for point in is_valid_node  <class 'list'>
[7, 1] 7 1
type for point in is_valid_node  <class 'list'>
[8, 1] 8 1
the point we are trying to find neighbors for  [8, 1]
neighboring cells are:  [[8, 2], [8, 0], [7, 1], [9, 1]]
dealing with [8, 2] at loop 0
dealing with [8, 0] at loop 1
dealing with [7, 1] at loop 2
[7, 1] is NOT a wall
dealing with [9, 1] at loop 3
[9, 1] is NOT a wall
neighbors of b [[7, 1], [9, 1]]
cost from [7, 1] to [8, 1] is 1
<class 'int'>
2 11 13
2 11 13
13 <class 'int'>
2 11 13
[7, 2] (7, 2)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 2] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 2] 7 2
the point we are trying to find neighbors for  [7, 2]
neighboring cells are:  [[7, 3], [7, 1], [6, 2], [8, 2]]
dealing with [7, 3] at loop 0
[7, 3] is NOT a wall
dealing with [7, 1] at loop 1
[7, 1] is NOT a wall
dealing with [6, 2] at loop 2
dealing with [8, 2] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
7[7, 2][7, 3]
the points are:  [7, 2] [7, 3]
type for point in is_valid_node  <class 'list'>
[7, 2] 7 2
type for point in is_valid_node  <class 'list'>
[7, 3] 7 3
the point we are trying to find neighbors for  [7, 3]
neighboring cells are:  [[7, 4], [7, 2], [6, 3], [8, 3]]
dealing with [7, 4] at loop 0
dealing with [7, 2] at loop 1
[7, 2] is NOT a wall
dealing with [6, 3] at loop 2
[6, 3] is NOT a wall
dealing with [8, 3] at loop 3
neighbors of b [[7, 2], [6, 3]]
cost from [7, 2] to [7, 3] is 1
<class 'int'>
3 9 12
3 9 12
12 <class 'int'>
3 9 12
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
7[7, 2][7, 1]
the points are:  [7, 2] [7, 1]
type for point in is_valid_node  <class 'list'>
[7, 2] 7 2
type for point in is_valid_node  <class 'list'>
[7, 1] 7 1
the point we are trying to find neighbors for  [7, 1]
neighboring cells are:  [[7, 2], [7, 0], [6, 1], [8, 1]]
dealing with [7, 2] at loop 0
[7, 2] is NOT a wall
dealing with [7, 0] at loop 1
dealing with [6, 1] at loop 2
[6, 1] is NOT a wall
dealing with [8, 1] at loop 3
[8, 1] is NOT a wall
neighbors of b [[7, 2], [6, 1], [8, 1]]
cost from [7, 2] to [7, 1] is 1
[7, 3] (7, 3)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 3] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 3] 7 3
the point we are trying to find neighbors for  [7, 3]
neighboring cells are:  [[7, 4], [7, 2], [6, 3], [8, 3]]
dealing with [7, 4] at loop 0
dealing with [7, 2] at loop 1
[7, 2] is NOT a wall
dealing with [6, 3] at loop 2
[6, 3] is NOT a wall
dealing with [8, 3] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
8[7, 3][7, 2]
the points are:  [7, 3] [7, 2]
type for point in is_valid_node  <class 'list'>
[7, 3] 7 3
type for point in is_valid_node  <class 'list'>
[7, 2] 7 2
the point we are trying to find neighbors for  [7, 2]
neighboring cells are:  [[7, 3], [7, 1], [6, 2], [8, 2]]
dealing with [7, 3] at loop 0
[7, 3] is NOT a wall
dealing with [7, 1] at loop 1
[7, 1] is NOT a wall
dealing with [6, 2] at loop 2
dealing with [8, 2] at loop 3
neighbors of b [[7, 3], [7, 1]]
cost from [7, 3] to [7, 2] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
8[7, 3][6, 3]
the points are:  [7, 3] [6, 3]
type for point in is_valid_node  <class 'list'>
[7, 3] 7 3
type for point in is_valid_node  <class 'list'>
[6, 3] 6 3
the point we are trying to find neighbors for  [6, 3]
neighboring cells are:  [[6, 4], [6, 2], [5, 3], [7, 3]]
dealing with [6, 4] at loop 0
dealing with [6, 2] at loop 1
dealing with [5, 3] at loop 2
[5, 3] is NOT a wall
dealing with [7, 3] at loop 3
[7, 3] is NOT a wall
neighbors of b [[5, 3], [7, 3]]
cost from [7, 3] to [6, 3] is 1
<class 'int'>
4 9 13
4 9 13
13 <class 'int'>
4 9 13
[7, 7] (7, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 7] 7 7
the point we are trying to find neighbors for  [7, 7]
neighboring cells are:  [[7, 8], [7, 6], [6, 7], [8, 7]]
dealing with [7, 8] at loop 0
[7, 8] is NOT a wall
dealing with [7, 6] at loop 1
[7, 6] is NOT a wall
dealing with [6, 7] at loop 2
[6, 7] is NOT a wall
dealing with [8, 7] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
12[7, 7][7, 8]
the points are:  [7, 7] [7, 8]
type for point in is_valid_node  <class 'list'>
[7, 7] 7 7
type for point in is_valid_node  <class 'list'>
[7, 8] 7 8
the point we are trying to find neighbors for  [7, 8]
neighboring cells are:  [[7, 9], [7, 7], [6, 8], [8, 8]]
dealing with [7, 9] at loop 0
[7, 9] is NOT a wall
dealing with [7, 7] at loop 1
[7, 7] is NOT a wall
dealing with [6, 8] at loop 2
dealing with [8, 8] at loop 3
neighbors of b [[7, 9], [7, 7]]
cost from [7, 7] to [7, 8] is 1
<class 'int'>
3 4 7
3 4 7
7 <class 'int'>
3 4 7
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
12[7, 7][7, 6]
the points are:  [7, 7] [7, 6]
type for point in is_valid_node  <class 'list'>
[7, 7] 7 7
type for point in is_valid_node  <class 'list'>
[7, 6] 7 6
the point we are trying to find neighbors for  [7, 6]
neighboring cells are:  [[7, 7], [7, 5], [6, 6], [8, 6]]
dealing with [7, 7] at loop 0
[7, 7] is NOT a wall
dealing with [7, 5] at loop 1
[7, 5] is NOT a wall
dealing with [6, 6] at loop 2
dealing with [8, 6] at loop 3
neighbors of b [[7, 7], [7, 5]]
cost from [7, 7] to [7, 6] is 1
<class 'int'>
3 6 9
3 6 9
9 <class 'int'>
3 6 9
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
12[7, 7][6, 7]
the points are:  [7, 7] [6, 7]
type for point in is_valid_node  <class 'list'>
[7, 7] 7 7
type for point in is_valid_node  <class 'list'>
[6, 7] 6 7
the point we are trying to find neighbors for  [6, 7]
neighboring cells are:  [[6, 8], [6, 6], [5, 7], [7, 7]]
dealing with [6, 8] at loop 0
dealing with [6, 6] at loop 1
dealing with [5, 7] at loop 2
[5, 7] is NOT a wall
dealing with [7, 7] at loop 3
[7, 7] is NOT a wall
neighbors of b [[5, 7], [7, 7]]
cost from [7, 7] to [6, 7] is 1
[7, 8] (7, 8)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 8] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 8] 7 8
the point we are trying to find neighbors for  [7, 8]
neighboring cells are:  [[7, 9], [7, 7], [6, 8], [8, 8]]
dealing with [7, 9] at loop 0
[7, 9] is NOT a wall
dealing with [7, 7] at loop 1
[7, 7] is NOT a wall
dealing with [6, 8] at loop 2
dealing with [8, 8] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
13[7, 8][7, 9]
the points are:  [7, 8] [7, 9]
type for point in is_valid_node  <class 'list'>
[7, 8] 7 8
type for point in is_valid_node  <class 'list'>
[7, 9] 7 9
the point we are trying to find neighbors for  [7, 9]
neighboring cells are:  [[7, 10], [7, 8], [6, 9], [8, 9]]
dealing with [7, 10] at loop 0
dealing with [7, 8] at loop 1
[7, 8] is NOT a wall
dealing with [6, 9] at loop 2
dealing with [8, 9] at loop 3
[8, 9] is NOT a wall
neighbors of b [[7, 8], [8, 9]]
cost from [7, 8] to [7, 9] is 1
<class 'int'>
3 3 6
3 3 6
6 <class 'int'>
3 3 6
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
13[7, 8][7, 7]
the points are:  [7, 8] [7, 7]
type for point in is_valid_node  <class 'list'>
[7, 8] 7 8
type for point in is_valid_node  <class 'list'>
[7, 7] 7 7
the point we are trying to find neighbors for  [7, 7]
neighboring cells are:  [[7, 8], [7, 6], [6, 7], [8, 7]]
dealing with [7, 8] at loop 0
[7, 8] is NOT a wall
dealing with [7, 6] at loop 1
[7, 6] is NOT a wall
dealing with [6, 7] at loop 2
[6, 7] is NOT a wall
dealing with [8, 7] at loop 3
neighbors of b [[7, 8], [7, 6], [6, 7]]
cost from [7, 8] to [7, 7] is 1
[7, 9] (7, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 9] 7 9
the point we are trying to find neighbors for  [7, 9]
neighboring cells are:  [[7, 10], [7, 8], [6, 9], [8, 9]]
dealing with [7, 10] at loop 0
dealing with [7, 8] at loop 1
[7, 8] is NOT a wall
dealing with [6, 9] at loop 2
dealing with [8, 9] at loop 3
[8, 9] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
14[7, 9][7, 8]
the points are:  [7, 9] [7, 8]
type for point in is_valid_node  <class 'list'>
[7, 9] 7 9
type for point in is_valid_node  <class 'list'>
[7, 8] 7 8
the point we are trying to find neighbors for  [7, 8]
neighboring cells are:  [[7, 9], [7, 7], [6, 8], [8, 8]]
dealing with [7, 9] at loop 0
[7, 9] is NOT a wall
dealing with [7, 7] at loop 1
[7, 7] is NOT a wall
dealing with [6, 8] at loop 2
dealing with [8, 8] at loop 3
neighbors of b [[7, 9], [7, 7]]
cost from [7, 9] to [7, 8] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
14[7, 9][8, 9]
the points are:  [7, 9] [8, 9]
type for point in is_valid_node  <class 'list'>
[7, 9] 7 9
type for point in is_valid_node  <class 'list'>
[8, 9] 8 9
the point we are trying to find neighbors for  [8, 9]
neighboring cells are:  [[8, 10], [8, 8], [7, 9], [9, 9]]
dealing with [8, 10] at loop 0
dealing with [8, 8] at loop 1
dealing with [7, 9] at loop 2
[7, 9] is NOT a wall
dealing with [9, 9] at loop 3
[9, 9] is NOT a wall
neighbors of b [[7, 9], [9, 9]]
cost from [7, 9] to [8, 9] is 1
<class 'int'>
2 3 5
2 3 5
5 <class 'int'>
2 3 5
[8, 1] (8, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[8, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[8, 1] 8 1
the point we are trying to find neighbors for  [8, 1]
neighboring cells are:  [[8, 2], [8, 0], [7, 1], [9, 1]]
dealing with [8, 2] at loop 0
dealing with [8, 0] at loop 1
dealing with [7, 1] at loop 2
[7, 1] is NOT a wall
dealing with [9, 1] at loop 3
[9, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
7[8, 1][7, 1]
the points are:  [8, 1] [7, 1]
type for point in is_valid_node  <class 'list'>
[8, 1] 8 1
type for point in is_valid_node  <class 'list'>
[7, 1] 7 1
the point we are trying to find neighbors for  [7, 1]
neighboring cells are:  [[7, 2], [7, 0], [6, 1], [8, 1]]
dealing with [7, 2] at loop 0
[7, 2] is NOT a wall
dealing with [7, 0] at loop 1
dealing with [6, 1] at loop 2
[6, 1] is NOT a wall
dealing with [8, 1] at loop 3
[8, 1] is NOT a wall
neighbors of b [[7, 2], [6, 1], [8, 1]]
cost from [8, 1] to [7, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
7[8, 1][9, 1]
the points are:  [8, 1] [9, 1]
type for point in is_valid_node  <class 'list'>
[8, 1] 8 1
type for point in is_valid_node  <class 'list'>
[9, 1] 9 1
the point we are trying to find neighbors for  [9, 1]
neighboring cells are:  [[9, 2], [9, 0], [8, 1], [10, 1]]
dealing with [9, 2] at loop 0
[9, 2] is NOT a wall
dealing with [9, 0] at loop 1
dealing with [8, 1] at loop 2
[8, 1] is NOT a wall
dealing with [10, 1] at loop 3
[10, 1] is NOT a wall
neighbors of b [[9, 2], [8, 1], [10, 1]]
cost from [8, 1] to [9, 1] is 1
<class 'int'>
1 11 12
1 11 12
12 <class 'int'>
1 11 12
[8, 9] (8, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[8, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[8, 9] 8 9
the point we are trying to find neighbors for  [8, 9]
neighboring cells are:  [[8, 10], [8, 8], [7, 9], [9, 9]]
dealing with [8, 10] at loop 0
dealing with [8, 8] at loop 1
dealing with [7, 9] at loop 2
[7, 9] is NOT a wall
dealing with [9, 9] at loop 3
[9, 9] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
15[8, 9][7, 9]
the points are:  [8, 9] [7, 9]
type for point in is_valid_node  <class 'list'>
[8, 9] 8 9
type for point in is_valid_node  <class 'list'>
[7, 9] 7 9
the point we are trying to find neighbors for  [7, 9]
neighboring cells are:  [[7, 10], [7, 8], [6, 9], [8, 9]]
dealing with [7, 10] at loop 0
dealing with [7, 8] at loop 1
[7, 8] is NOT a wall
dealing with [6, 9] at loop 2
dealing with [8, 9] at loop 3
[8, 9] is NOT a wall
neighbors of b [[7, 8], [8, 9]]
cost from [8, 9] to [7, 9] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
15[8, 9][9, 9]
the points are:  [8, 9] [9, 9]
type for point in is_valid_node  <class 'list'>
[8, 9] 8 9
type for point in is_valid_node  <class 'list'>
[9, 9] 9 9
the point we are trying to find neighbors for  [9, 9]
neighboring cells are:  [[9, 10], [9, 8], [8, 9], [10, 9]]
dealing with [9, 10] at loop 0
[9, 10] is NOT a wall
dealing with [9, 8] at loop 1
[9, 8] is NOT a wall
dealing with [8, 9] at loop 2
[8, 9] is NOT a wall
dealing with [10, 9] at loop 3
neighbors of b [[9, 10], [9, 8], [8, 9]]
cost from [8, 9] to [9, 9] is 1
<class 'int'>
1 3 4
1 3 4
4 <class 'int'>
1 3 4
[9, 1] (9, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 1] 9 1
the point we are trying to find neighbors for  [9, 1]
neighboring cells are:  [[9, 2], [9, 0], [8, 1], [10, 1]]
dealing with [9, 2] at loop 0
[9, 2] is NOT a wall
dealing with [9, 0] at loop 1
dealing with [8, 1] at loop 2
[8, 1] is NOT a wall
dealing with [10, 1] at loop 3
[10, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
8[9, 1][9, 2]
the points are:  [9, 1] [9, 2]
type for point in is_valid_node  <class 'list'>
[9, 1] 9 1
type for point in is_valid_node  <class 'list'>
[9, 2] 9 2
the point we are trying to find neighbors for  [9, 2]
neighboring cells are:  [[9, 3], [9, 1], [8, 2], [10, 2]]
dealing with [9, 3] at loop 0
[9, 3] is NOT a wall
dealing with [9, 1] at loop 1
[9, 1] is NOT a wall
dealing with [8, 2] at loop 2
dealing with [10, 2] at loop 3
neighbors of b [[9, 3], [9, 1]]
cost from [9, 1] to [9, 2] is 1
<class 'int'>
1 10 11
1 10 11
11 <class 'int'>
1 10 11
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
8[9, 1][8, 1]
the points are:  [9, 1] [8, 1]
type for point in is_valid_node  <class 'list'>
[9, 1] 9 1
type for point in is_valid_node  <class 'list'>
[8, 1] 8 1
the point we are trying to find neighbors for  [8, 1]
neighboring cells are:  [[8, 2], [8, 0], [7, 1], [9, 1]]
dealing with [8, 2] at loop 0
dealing with [8, 0] at loop 1
dealing with [7, 1] at loop 2
[7, 1] is NOT a wall
dealing with [9, 1] at loop 3
[9, 1] is NOT a wall
neighbors of b [[7, 1], [9, 1]]
cost from [9, 1] to [8, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
8[9, 1][10, 1]
the points are:  [9, 1] [10, 1]
type for point in is_valid_node  <class 'list'>
[9, 1] 9 1
type for point in is_valid_node  <class 'list'>
[10, 1] 10 1
the point we are trying to find neighbors for  [10, 1]
neighboring cells are:  [[10, 2], [10, 0], [9, 1], [11, 1]]
dealing with [10, 2] at loop 0
dealing with [10, 0] at loop 1
dealing with [9, 1] at loop 2
[9, 1] is NOT a wall
dealing with [11, 1] at loop 3
[11, 1] is NOT a wall
neighbors of b [[9, 1], [11, 1]]
cost from [9, 1] to [10, 1] is 1
<class 'int'>
0 11 11
0 11 11
11 <class 'int'>
0 11 11
[9, 2] (9, 2)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 2] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 2] 9 2
the point we are trying to find neighbors for  [9, 2]
neighboring cells are:  [[9, 3], [9, 1], [8, 2], [10, 2]]
dealing with [9, 3] at loop 0
[9, 3] is NOT a wall
dealing with [9, 1] at loop 1
[9, 1] is NOT a wall
dealing with [8, 2] at loop 2
dealing with [10, 2] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
9[9, 2][9, 3]
the points are:  [9, 2] [9, 3]
type for point in is_valid_node  <class 'list'>
[9, 2] 9 2
type for point in is_valid_node  <class 'list'>
[9, 3] 9 3
the point we are trying to find neighbors for  [9, 3]
neighboring cells are:  [[9, 4], [9, 2], [8, 3], [10, 3]]
dealing with [9, 4] at loop 0
[9, 4] is NOT a wall
dealing with [9, 2] at loop 1
[9, 2] is NOT a wall
dealing with [8, 3] at loop 2
dealing with [10, 3] at loop 3
neighbors of b [[9, 4], [9, 2]]
cost from [9, 2] to [9, 3] is 1
<class 'int'>
1 9 10
1 9 10
10 <class 'int'>
1 9 10
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
9[9, 2][9, 1]
the points are:  [9, 2] [9, 1]
type for point in is_valid_node  <class 'list'>
[9, 2] 9 2
type for point in is_valid_node  <class 'list'>
[9, 1] 9 1
the point we are trying to find neighbors for  [9, 1]
neighboring cells are:  [[9, 2], [9, 0], [8, 1], [10, 1]]
dealing with [9, 2] at loop 0
[9, 2] is NOT a wall
dealing with [9, 0] at loop 1
dealing with [8, 1] at loop 2
[8, 1] is NOT a wall
dealing with [10, 1] at loop 3
[10, 1] is NOT a wall
neighbors of b [[9, 2], [8, 1], [10, 1]]
cost from [9, 2] to [9, 1] is 1
[9, 3] (9, 3)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 3] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 3] 9 3
the point we are trying to find neighbors for  [9, 3]
neighboring cells are:  [[9, 4], [9, 2], [8, 3], [10, 3]]
dealing with [9, 4] at loop 0
[9, 4] is NOT a wall
dealing with [9, 2] at loop 1
[9, 2] is NOT a wall
dealing with [8, 3] at loop 2
dealing with [10, 3] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
10[9, 3][9, 4]
the points are:  [9, 3] [9, 4]
type for point in is_valid_node  <class 'list'>
[9, 3] 9 3
type for point in is_valid_node  <class 'list'>
[9, 4] 9 4
the point we are trying to find neighbors for  [9, 4]
neighboring cells are:  [[9, 5], [9, 3], [8, 4], [10, 4]]
dealing with [9, 5] at loop 0
[9, 5] is NOT a wall
dealing with [9, 3] at loop 1
[9, 3] is NOT a wall
dealing with [8, 4] at loop 2
dealing with [10, 4] at loop 3
neighbors of b [[9, 5], [9, 3]]
cost from [9, 3] to [9, 4] is 1
<class 'int'>
1 8 9
1 8 9
9 <class 'int'>
1 8 9
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
10[9, 3][9, 2]
the points are:  [9, 3] [9, 2]
type for point in is_valid_node  <class 'list'>
[9, 3] 9 3
type for point in is_valid_node  <class 'list'>
[9, 2] 9 2
the point we are trying to find neighbors for  [9, 2]
neighboring cells are:  [[9, 3], [9, 1], [8, 2], [10, 2]]
dealing with [9, 3] at loop 0
[9, 3] is NOT a wall
dealing with [9, 1] at loop 1
[9, 1] is NOT a wall
dealing with [8, 2] at loop 2
dealing with [10, 2] at loop 3
neighbors of b [[9, 3], [9, 1]]
cost from [9, 3] to [9, 2] is 1
[9, 4] (9, 4)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 4] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 4] 9 4
the point we are trying to find neighbors for  [9, 4]
neighboring cells are:  [[9, 5], [9, 3], [8, 4], [10, 4]]
dealing with [9, 5] at loop 0
[9, 5] is NOT a wall
dealing with [9, 3] at loop 1
[9, 3] is NOT a wall
dealing with [8, 4] at loop 2
dealing with [10, 4] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
11[9, 4][9, 5]
the points are:  [9, 4] [9, 5]
type for point in is_valid_node  <class 'list'>
[9, 4] 9 4
type for point in is_valid_node  <class 'list'>
[9, 5] 9 5
the point we are trying to find neighbors for  [9, 5]
neighboring cells are:  [[9, 6], [9, 4], [8, 5], [10, 5]]
dealing with [9, 6] at loop 0
dealing with [9, 4] at loop 1
[9, 4] is NOT a wall
dealing with [8, 5] at loop 2
[8, 5] is NOT a wall
dealing with [10, 5] at loop 3
neighbors of b [[9, 4], [8, 5]]
cost from [9, 4] to [9, 5] is 1
<class 'int'>
1 7 8
1 7 8
8 <class 'int'>
1 7 8
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
11[9, 4][9, 3]
the points are:  [9, 4] [9, 3]
type for point in is_valid_node  <class 'list'>
[9, 4] 9 4
type for point in is_valid_node  <class 'list'>
[9, 3] 9 3
the point we are trying to find neighbors for  [9, 3]
neighboring cells are:  [[9, 4], [9, 2], [8, 3], [10, 3]]
dealing with [9, 4] at loop 0
[9, 4] is NOT a wall
dealing with [9, 2] at loop 1
[9, 2] is NOT a wall
dealing with [8, 3] at loop 2
dealing with [10, 3] at loop 3
neighbors of b [[9, 4], [9, 2]]
cost from [9, 4] to [9, 3] is 1
[9, 5] (9, 5)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 5] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 5] 9 5
the point we are trying to find neighbors for  [9, 5]
neighboring cells are:  [[9, 6], [9, 4], [8, 5], [10, 5]]
dealing with [9, 6] at loop 0
dealing with [9, 4] at loop 1
[9, 4] is NOT a wall
dealing with [8, 5] at loop 2
[8, 5] is NOT a wall
dealing with [10, 5] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
12[9, 5][9, 4]
the points are:  [9, 5] [9, 4]
type for point in is_valid_node  <class 'list'>
[9, 5] 9 5
type for point in is_valid_node  <class 'list'>
[9, 4] 9 4
the point we are trying to find neighbors for  [9, 4]
neighboring cells are:  [[9, 5], [9, 3], [8, 4], [10, 4]]
dealing with [9, 5] at loop 0
[9, 5] is NOT a wall
dealing with [9, 3] at loop 1
[9, 3] is NOT a wall
dealing with [8, 4] at loop 2
dealing with [10, 4] at loop 3
neighbors of b [[9, 5], [9, 3]]
cost from [9, 5] to [9, 4] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
12[9, 5][8, 5]
the points are:  [9, 5] [8, 5]
type for point in is_valid_node  <class 'list'>
[9, 5] 9 5
type for point in is_valid_node  <class 'list'>
[8, 5] 8 5
the point we are trying to find neighbors for  [8, 5]
neighboring cells are:  [[8, 6], [8, 4], [7, 5], [9, 5]]
dealing with [8, 6] at loop 0
dealing with [8, 4] at loop 1
dealing with [7, 5] at loop 2
[7, 5] is NOT a wall
dealing with [9, 5] at loop 3
[9, 5] is NOT a wall
neighbors of b [[7, 5], [9, 5]]
cost from [9, 5] to [8, 5] is 1
<class 'int'>
2 7 9
2 7 9
9 <class 'int'>
2 7 9
[9, 9] (9, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 9] 9 9
the point we are trying to find neighbors for  [9, 9]
neighboring cells are:  [[9, 10], [9, 8], [8, 9], [10, 9]]
dealing with [9, 10] at loop 0
[9, 10] is NOT a wall
dealing with [9, 8] at loop 1
[9, 8] is NOT a wall
dealing with [8, 9] at loop 2
[8, 9] is NOT a wall
dealing with [10, 9] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
16[9, 9][9, 10]
the points are:  [9, 9] [9, 10]
type for point in is_valid_node  <class 'list'>
[9, 9] 9 9
type for point in is_valid_node  <class 'list'>
[9, 10] 9 10
the point we are trying to find neighbors for  [9, 10]
neighboring cells are:  [[9, 11], [9, 9], [8, 10], [10, 10]]
dealing with [9, 11] at loop 0
[9, 11] is NOT a wall
dealing with [9, 9] at loop 1
[9, 9] is NOT a wall
dealing with [8, 10] at loop 2
dealing with [10, 10] at loop 3
neighbors of b [[9, 11], [9, 9]]
cost from [9, 9] to [9, 10] is 1
<class 'int'>
1 2 3
1 2 3
3 <class 'int'>
1 2 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
16[9, 9][9, 8]
the points are:  [9, 9] [9, 8]
type for point in is_valid_node  <class 'list'>
[9, 9] 9 9
type for point in is_valid_node  <class 'list'>
[9, 8] 9 8
the point we are trying to find neighbors for  [9, 8]
neighboring cells are:  [[9, 9], [9, 7], [8, 8], [10, 8]]
dealing with [9, 9] at loop 0
[9, 9] is NOT a wall
dealing with [9, 7] at loop 1
[9, 7] is NOT a wall
dealing with [8, 8] at loop 2
dealing with [10, 8] at loop 3
neighbors of b [[9, 9], [9, 7]]
cost from [9, 9] to [9, 8] is 1
<class 'int'>
1 4 5
1 4 5
5 <class 'int'>
1 4 5
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
16[9, 9][8, 9]
the points are:  [9, 9] [8, 9]
type for point in is_valid_node  <class 'list'>
[9, 9] 9 9
type for point in is_valid_node  <class 'list'>
[8, 9] 8 9
the point we are trying to find neighbors for  [8, 9]
neighboring cells are:  [[8, 10], [8, 8], [7, 9], [9, 9]]
dealing with [8, 10] at loop 0
dealing with [8, 8] at loop 1
dealing with [7, 9] at loop 2
[7, 9] is NOT a wall
dealing with [9, 9] at loop 3
[9, 9] is NOT a wall
neighbors of b [[7, 9], [9, 9]]
cost from [9, 9] to [8, 9] is 1
[9, 10] (9, 10)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 10] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 10] 9 10
the point we are trying to find neighbors for  [9, 10]
neighboring cells are:  [[9, 11], [9, 9], [8, 10], [10, 10]]
dealing with [9, 11] at loop 0
[9, 11] is NOT a wall
dealing with [9, 9] at loop 1
[9, 9] is NOT a wall
dealing with [8, 10] at loop 2
dealing with [10, 10] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
17[9, 10][9, 11]
the points are:  [9, 10] [9, 11]
type for point in is_valid_node  <class 'list'>
[9, 10] 9 10
type for point in is_valid_node  <class 'list'>
[9, 11] 9 11
the point we are trying to find neighbors for  [9, 11]
neighboring cells are:  [[9, 12], [9, 10], [8, 11], [10, 11]]
dealing with [9, 12] at loop 0
[9, 12] is NOT a wall
dealing with [9, 10] at loop 1
[9, 10] is NOT a wall
dealing with [8, 11] at loop 2
dealing with [10, 11] at loop 3
neighbors of b [[9, 12], [9, 10]]
cost from [9, 10] to [9, 11] is 1
<class 'int'>
1 1 2
1 1 2
2 <class 'int'>
1 1 2
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
17[9, 10][9, 9]
the points are:  [9, 10] [9, 9]
type for point in is_valid_node  <class 'list'>
[9, 10] 9 10
type for point in is_valid_node  <class 'list'>
[9, 9] 9 9
the point we are trying to find neighbors for  [9, 9]
neighboring cells are:  [[9, 10], [9, 8], [8, 9], [10, 9]]
dealing with [9, 10] at loop 0
[9, 10] is NOT a wall
dealing with [9, 8] at loop 1
[9, 8] is NOT a wall
dealing with [8, 9] at loop 2
[8, 9] is NOT a wall
dealing with [10, 9] at loop 3
neighbors of b [[9, 10], [9, 8], [8, 9]]
cost from [9, 10] to [9, 9] is 1
[9, 11] (9, 11)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 11] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 11] 9 11
the point we are trying to find neighbors for  [9, 11]
neighboring cells are:  [[9, 12], [9, 10], [8, 11], [10, 11]]
dealing with [9, 12] at loop 0
[9, 12] is NOT a wall
dealing with [9, 10] at loop 1
[9, 10] is NOT a wall
dealing with [8, 11] at loop 2
dealing with [10, 11] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
18[9, 11][9, 12]
the points are:  [9, 11] [9, 12]
type for point in is_valid_node  <class 'list'>
[9, 11] 9 11
type for point in is_valid_node  <class 'list'>
[9, 12] 9 12
the point we are trying to find neighbors for  [9, 12]
neighboring cells are:  [[9, 13], [9, 11], [8, 12], [10, 12]]
dealing with [9, 13] at loop 0
[9, 13] is NOT a wall
dealing with [9, 11] at loop 1
[9, 11] is NOT a wall
dealing with [8, 12] at loop 2
dealing with [10, 12] at loop 3
neighbors of b [[9, 13], [9, 11]]
cost from [9, 11] to [9, 12] is 1
<class 'int'>
1 0 1
1 0 1
1 <class 'int'>
1 0 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
18[9, 11][9, 10]
the points are:  [9, 11] [9, 10]
type for point in is_valid_node  <class 'list'>
[9, 11] 9 11
type for point in is_valid_node  <class 'list'>
[9, 10] 9 10
the point we are trying to find neighbors for  [9, 10]
neighboring cells are:  [[9, 11], [9, 9], [8, 10], [10, 10]]
dealing with [9, 11] at loop 0
[9, 11] is NOT a wall
dealing with [9, 9] at loop 1
[9, 9] is NOT a wall
dealing with [8, 10] at loop 2
dealing with [10, 10] at loop 3
neighbors of b [[9, 11], [9, 9]]
cost from [9, 11] to [9, 10] is 1
[9, 12] (9, 12)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 12] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 12] 9 12
the point we are trying to find neighbors for  [9, 12]
neighboring cells are:  [[9, 13], [9, 11], [8, 12], [10, 12]]
dealing with [9, 13] at loop 0
[9, 13] is NOT a wall
dealing with [9, 11] at loop 1
[9, 11] is NOT a wall
dealing with [8, 12] at loop 2
dealing with [10, 12] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
19[9, 12][9, 13]
the points are:  [9, 12] [9, 13]
type for point in is_valid_node  <class 'list'>
[9, 12] 9 12
type for point in is_valid_node  <class 'list'>
[9, 13] 9 13
the point we are trying to find neighbors for  [9, 13]
neighboring cells are:  [[9, 14], [9, 12], [8, 13], [10, 13]]
dealing with [9, 14] at loop 0
dealing with [9, 12] at loop 1
[9, 12] is NOT a wall
dealing with [8, 13] at loop 2
dealing with [10, 13] at loop 3
[10, 13] is NOT a wall
neighbors of b [[9, 12], [10, 13]]
cost from [9, 12] to [9, 13] is 1
<class 'int'>
1 1 2
1 1 2
2 <class 'int'>
1 1 2
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
19[9, 12][9, 11]
the points are:  [9, 12] [9, 11]
type for point in is_valid_node  <class 'list'>
[9, 12] 9 12
type for point in is_valid_node  <class 'list'>
[9, 11] 9 11
the point we are trying to find neighbors for  [9, 11]
neighboring cells are:  [[9, 12], [9, 10], [8, 11], [10, 11]]
dealing with [9, 12] at loop 0
[9, 12] is NOT a wall
dealing with [9, 10] at loop 1
[9, 10] is NOT a wall
dealing with [8, 11] at loop 2
dealing with [10, 11] at loop 3
neighbors of b [[9, 12], [9, 10]]
cost from [9, 12] to [9, 11] is 1
[10, 1] (10, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[10, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[10, 1] 10 1
the point we are trying to find neighbors for  [10, 1]
neighboring cells are:  [[10, 2], [10, 0], [9, 1], [11, 1]]
dealing with [10, 2] at loop 0
dealing with [10, 0] at loop 1
dealing with [9, 1] at loop 2
[9, 1] is NOT a wall
dealing with [11, 1] at loop 3
[11, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
9[10, 1][9, 1]
the points are:  [10, 1] [9, 1]
type for point in is_valid_node  <class 'list'>
[10, 1] 10 1
type for point in is_valid_node  <class 'list'>
[9, 1] 9 1
the point we are trying to find neighbors for  [9, 1]
neighboring cells are:  [[9, 2], [9, 0], [8, 1], [10, 1]]
dealing with [9, 2] at loop 0
[9, 2] is NOT a wall
dealing with [9, 0] at loop 1
dealing with [8, 1] at loop 2
[8, 1] is NOT a wall
dealing with [10, 1] at loop 3
[10, 1] is NOT a wall
neighbors of b [[9, 2], [8, 1], [10, 1]]
cost from [10, 1] to [9, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
9[10, 1][11, 1]
the points are:  [10, 1] [11, 1]
type for point in is_valid_node  <class 'list'>
[10, 1] 10 1
type for point in is_valid_node  <class 'list'>
[11, 1] 11 1
the point we are trying to find neighbors for  [11, 1]
neighboring cells are:  [[11, 2], [11, 0], [10, 1], [12, 1]]
dealing with [11, 2] at loop 0
dealing with [11, 0] at loop 1
dealing with [10, 1] at loop 2
[10, 1] is NOT a wall
dealing with [12, 1] at loop 3
[12, 1] is NOT a wall
neighbors of b [[10, 1], [12, 1]]
cost from [10, 1] to [11, 1] is 1
<class 'int'>
1 11 12
1 11 12
12 <class 'int'>
1 11 12
[2, 11] (2, 11)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 11] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 11] 2 11
the point we are trying to find neighbors for  [2, 11]
neighboring cells are:  [[2, 12], [2, 10], [1, 11], [3, 11]]
dealing with [2, 12] at loop 0
dealing with [2, 10] at loop 1
dealing with [1, 11] at loop 2
[1, 11] is NOT a wall
dealing with [3, 11] at loop 3
[3, 11] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
13[2, 11][1, 11]
the points are:  [2, 11] [1, 11]
type for point in is_valid_node  <class 'list'>
[2, 11] 2 11
type for point in is_valid_node  <class 'list'>
[1, 11] 1 11
the point we are trying to find neighbors for  [1, 11]
neighboring cells are:  [[1, 12], [1, 10], [0, 11], [2, 11]]
dealing with [1, 12] at loop 0
dealing with [1, 10] at loop 1
dealing with [0, 11] at loop 2
dealing with [2, 11] at loop 3
[2, 11] is NOT a wall
neighbors of b [[2, 11]]
cost from [2, 11] to [1, 11] is 1
<class 'int'>
9 1 10
9 1 10
10 <class 'int'>
9 1 10
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
13[2, 11][3, 11]
the points are:  [2, 11] [3, 11]
type for point in is_valid_node  <class 'list'>
[2, 11] 2 11
type for point in is_valid_node  <class 'list'>
[3, 11] 3 11
the point we are trying to find neighbors for  [3, 11]
neighboring cells are:  [[3, 12], [3, 10], [2, 11], [4, 11]]
dealing with [3, 12] at loop 0
dealing with [3, 10] at loop 1
[3, 10] is NOT a wall
dealing with [2, 11] at loop 2
[2, 11] is NOT a wall
dealing with [4, 11] at loop 3
neighbors of b [[3, 10], [2, 11]]
cost from [2, 11] to [3, 11] is 1
[3, 5] (3, 5)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 5] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 5] 3 5
the point we are trying to find neighbors for  [3, 5]
neighboring cells are:  [[3, 6], [3, 4], [2, 5], [4, 5]]
dealing with [3, 6] at loop 0
[3, 6] is NOT a wall
dealing with [3, 4] at loop 1
[3, 4] is NOT a wall
dealing with [2, 5] at loop 2
dealing with [4, 5] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
8[3, 5][3, 6]
the points are:  [3, 5] [3, 6]
type for point in is_valid_node  <class 'list'>
[3, 5] 3 5
type for point in is_valid_node  <class 'list'>
[3, 6] 3 6
the point we are trying to find neighbors for  [3, 6]
neighboring cells are:  [[3, 7], [3, 5], [2, 6], [4, 6]]
dealing with [3, 7] at loop 0
[3, 7] is NOT a wall
dealing with [3, 5] at loop 1
[3, 5] is NOT a wall
dealing with [2, 6] at loop 2
[2, 6] is NOT a wall
dealing with [4, 6] at loop 3
neighbors of b [[3, 7], [3, 5], [2, 6]]
cost from [3, 5] to [3, 6] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
8[3, 5][3, 4]
the points are:  [3, 5] [3, 4]
type for point in is_valid_node  <class 'list'>
[3, 5] 3 5
type for point in is_valid_node  <class 'list'>
[3, 4] 3 4
the point we are trying to find neighbors for  [3, 4]
neighboring cells are:  [[3, 5], [3, 3], [2, 4], [4, 4]]
dealing with [3, 5] at loop 0
[3, 5] is NOT a wall
dealing with [3, 3] at loop 1
[3, 3] is NOT a wall
dealing with [2, 4] at loop 2
dealing with [4, 4] at loop 3
neighbors of b [[3, 5], [3, 3]]
cost from [3, 5] to [3, 4] is 1
<class 'int'>
7 8 15
7 8 15
15 <class 'int'>
7 8 15
[6, 3] (6, 3)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 3] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 3] 6 3
the point we are trying to find neighbors for  [6, 3]
neighboring cells are:  [[6, 4], [6, 2], [5, 3], [7, 3]]
dealing with [6, 4] at loop 0
dealing with [6, 2] at loop 1
dealing with [5, 3] at loop 2
[5, 3] is NOT a wall
dealing with [7, 3] at loop 3
[7, 3] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
9[6, 3][5, 3]
the points are:  [6, 3] [5, 3]
type for point in is_valid_node  <class 'list'>
[6, 3] 6 3
type for point in is_valid_node  <class 'list'>
[5, 3] 5 3
the point we are trying to find neighbors for  [5, 3]
neighboring cells are:  [[5, 4], [5, 2], [4, 3], [6, 3]]
dealing with [5, 4] at loop 0
[5, 4] is NOT a wall
dealing with [5, 2] at loop 1
dealing with [4, 3] at loop 2
[4, 3] is NOT a wall
dealing with [6, 3] at loop 3
[6, 3] is NOT a wall
neighbors of b [[5, 4], [4, 3], [6, 3]]
cost from [6, 3] to [5, 3] is 1
<class 'int'>
5 9 14
5 9 14
14 <class 'int'>
5 9 14
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
9[6, 3][7, 3]
the points are:  [6, 3] [7, 3]
type for point in is_valid_node  <class 'list'>
[6, 3] 6 3
type for point in is_valid_node  <class 'list'>
[7, 3] 7 3
the point we are trying to find neighbors for  [7, 3]
neighboring cells are:  [[7, 4], [7, 2], [6, 3], [8, 3]]
dealing with [7, 4] at loop 0
dealing with [7, 2] at loop 1
[7, 2] is NOT a wall
dealing with [6, 3] at loop 2
[6, 3] is NOT a wall
dealing with [8, 3] at loop 3
neighbors of b [[7, 2], [6, 3]]
cost from [6, 3] to [7, 3] is 1
[7, 6] (7, 6)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 6] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 6] 7 6
the point we are trying to find neighbors for  [7, 6]
neighboring cells are:  [[7, 7], [7, 5], [6, 6], [8, 6]]
dealing with [7, 7] at loop 0
[7, 7] is NOT a wall
dealing with [7, 5] at loop 1
[7, 5] is NOT a wall
dealing with [6, 6] at loop 2
dealing with [8, 6] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
13[7, 6][7, 7]
the points are:  [7, 6] [7, 7]
type for point in is_valid_node  <class 'list'>
[7, 6] 7 6
type for point in is_valid_node  <class 'list'>
[7, 7] 7 7
the point we are trying to find neighbors for  [7, 7]
neighboring cells are:  [[7, 8], [7, 6], [6, 7], [8, 7]]
dealing with [7, 8] at loop 0
[7, 8] is NOT a wall
dealing with [7, 6] at loop 1
[7, 6] is NOT a wall
dealing with [6, 7] at loop 2
[6, 7] is NOT a wall
dealing with [8, 7] at loop 3
neighbors of b [[7, 8], [7, 6], [6, 7]]
cost from [7, 6] to [7, 7] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
13[7, 6][7, 5]
the points are:  [7, 6] [7, 5]
type for point in is_valid_node  <class 'list'>
[7, 6] 7 6
type for point in is_valid_node  <class 'list'>
[7, 5] 7 5
the point we are trying to find neighbors for  [7, 5]
neighboring cells are:  [[7, 6], [7, 4], [6, 5], [8, 5]]
dealing with [7, 6] at loop 0
[7, 6] is NOT a wall
dealing with [7, 4] at loop 1
dealing with [6, 5] at loop 2
dealing with [8, 5] at loop 3
[8, 5] is NOT a wall
neighbors of b [[7, 6], [8, 5]]
cost from [7, 6] to [7, 5] is 1
<class 'int'>
3 7 10
3 7 10
10 <class 'int'>
3 7 10
[8, 5] (8, 5)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[8, 5] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[8, 5] 8 5
the point we are trying to find neighbors for  [8, 5]
neighboring cells are:  [[8, 6], [8, 4], [7, 5], [9, 5]]
dealing with [8, 6] at loop 0
dealing with [8, 4] at loop 1
dealing with [7, 5] at loop 2
[7, 5] is NOT a wall
dealing with [9, 5] at loop 3
[9, 5] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
13[8, 5][7, 5]
the points are:  [8, 5] [7, 5]
type for point in is_valid_node  <class 'list'>
[8, 5] 8 5
type for point in is_valid_node  <class 'list'>
[7, 5] 7 5
the point we are trying to find neighbors for  [7, 5]
neighboring cells are:  [[7, 6], [7, 4], [6, 5], [8, 5]]
dealing with [7, 6] at loop 0
[7, 6] is NOT a wall
dealing with [7, 4] at loop 1
dealing with [6, 5] at loop 2
dealing with [8, 5] at loop 3
[8, 5] is NOT a wall
neighbors of b [[7, 6], [8, 5]]
cost from [8, 5] to [7, 5] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
13[8, 5][9, 5]
the points are:  [8, 5] [9, 5]
type for point in is_valid_node  <class 'list'>
[8, 5] 8 5
type for point in is_valid_node  <class 'list'>
[9, 5] 9 5
the point we are trying to find neighbors for  [9, 5]
neighboring cells are:  [[9, 6], [9, 4], [8, 5], [10, 5]]
dealing with [9, 6] at loop 0
dealing with [9, 4] at loop 1
[9, 4] is NOT a wall
dealing with [8, 5] at loop 2
[8, 5] is NOT a wall
dealing with [10, 5] at loop 3
neighbors of b [[9, 4], [8, 5]]
cost from [8, 5] to [9, 5] is 1
[9, 8] (9, 8)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 8] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 8] 9 8
the point we are trying to find neighbors for  [9, 8]
neighboring cells are:  [[9, 9], [9, 7], [8, 8], [10, 8]]
dealing with [9, 9] at loop 0
[9, 9] is NOT a wall
dealing with [9, 7] at loop 1
[9, 7] is NOT a wall
dealing with [8, 8] at loop 2
dealing with [10, 8] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
17[9, 8][9, 9]
the points are:  [9, 8] [9, 9]
type for point in is_valid_node  <class 'list'>
[9, 8] 9 8
type for point in is_valid_node  <class 'list'>
[9, 9] 9 9
the point we are trying to find neighbors for  [9, 9]
neighboring cells are:  [[9, 10], [9, 8], [8, 9], [10, 9]]
dealing with [9, 10] at loop 0
[9, 10] is NOT a wall
dealing with [9, 8] at loop 1
[9, 8] is NOT a wall
dealing with [8, 9] at loop 2
[8, 9] is NOT a wall
dealing with [10, 9] at loop 3
neighbors of b [[9, 10], [9, 8], [8, 9]]
cost from [9, 8] to [9, 9] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
17[9, 8][9, 7]
the points are:  [9, 8] [9, 7]
type for point in is_valid_node  <class 'list'>
[9, 8] 9 8
type for point in is_valid_node  <class 'list'>
[9, 7] 9 7
the point we are trying to find neighbors for  [9, 7]
neighboring cells are:  [[9, 8], [9, 6], [8, 7], [10, 7]]
dealing with [9, 8] at loop 0
[9, 8] is NOT a wall
dealing with [9, 6] at loop 1
dealing with [8, 7] at loop 2
dealing with [10, 7] at loop 3
[10, 7] is NOT a wall
neighbors of b [[9, 8], [10, 7]]
cost from [9, 8] to [9, 7] is 1
<class 'int'>
1 5 6
1 5 6
6 <class 'int'>
1 5 6
[9, 13] (9, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 13] 9 13
the point we are trying to find neighbors for  [9, 13]
neighboring cells are:  [[9, 14], [9, 12], [8, 13], [10, 13]]
dealing with [9, 14] at loop 0
dealing with [9, 12] at loop 1
[9, 12] is NOT a wall
dealing with [8, 13] at loop 2
dealing with [10, 13] at loop 3
[10, 13] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
20[9, 13][9, 12]
the points are:  [9, 13] [9, 12]
type for point in is_valid_node  <class 'list'>
[9, 13] 9 13
type for point in is_valid_node  <class 'list'>
[9, 12] 9 12
the point we are trying to find neighbors for  [9, 12]
neighboring cells are:  [[9, 13], [9, 11], [8, 12], [10, 12]]
dealing with [9, 13] at loop 0
[9, 13] is NOT a wall
dealing with [9, 11] at loop 1
[9, 11] is NOT a wall
dealing with [8, 12] at loop 2
dealing with [10, 12] at loop 3
neighbors of b [[9, 13], [9, 11]]
cost from [9, 13] to [9, 12] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
20[9, 13][10, 13]
the points are:  [9, 13] [10, 13]
type for point in is_valid_node  <class 'list'>
[9, 13] 9 13
type for point in is_valid_node  <class 'list'>
[10, 13] 10 13
the point we are trying to find neighbors for  [10, 13]
neighboring cells are:  [[10, 14], [10, 12], [9, 13], [11, 13]]
dealing with [10, 14] at loop 0
dealing with [10, 12] at loop 1
dealing with [9, 13] at loop 2
[9, 13] is NOT a wall
dealing with [11, 13] at loop 3
[11, 13] is NOT a wall
neighbors of b [[9, 13], [11, 13]]
cost from [9, 13] to [10, 13] is 1
<class 'int'>
0 1 1
0 1 1
1 <class 'int'>
0 1 1
[10, 13] (10, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[10, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[10, 13] 10 13
the point we are trying to find neighbors for  [10, 13]
neighboring cells are:  [[10, 14], [10, 12], [9, 13], [11, 13]]
dealing with [10, 14] at loop 0
dealing with [10, 12] at loop 1
dealing with [9, 13] at loop 2
[9, 13] is NOT a wall
dealing with [11, 13] at loop 3
[11, 13] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
21[10, 13][9, 13]
the points are:  [10, 13] [9, 13]
type for point in is_valid_node  <class 'list'>
[10, 13] 10 13
type for point in is_valid_node  <class 'list'>
[9, 13] 9 13
the point we are trying to find neighbors for  [9, 13]
neighboring cells are:  [[9, 14], [9, 12], [8, 13], [10, 13]]
dealing with [9, 14] at loop 0
dealing with [9, 12] at loop 1
[9, 12] is NOT a wall
dealing with [8, 13] at loop 2
dealing with [10, 13] at loop 3
[10, 13] is NOT a wall
neighbors of b [[9, 12], [10, 13]]
cost from [10, 13] to [9, 13] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
21[10, 13][11, 13]
the points are:  [10, 13] [11, 13]
type for point in is_valid_node  <class 'list'>
[10, 13] 10 13
type for point in is_valid_node  <class 'list'>
[11, 13] 11 13
the point we are trying to find neighbors for  [11, 13]
neighboring cells are:  [[11, 14], [11, 12], [10, 13], [12, 13]]
dealing with [11, 14] at loop 0
[11, 14] is NOT a wall
dealing with [11, 12] at loop 1
dealing with [10, 13] at loop 2
[10, 13] is NOT a wall
dealing with [12, 13] at loop 3
[12, 13] is NOT a wall
neighbors of b [[11, 14], [10, 13], [12, 13]]
cost from [10, 13] to [11, 13] is 1
<class 'int'>
1 1 2
1 1 2
2 <class 'int'>
1 1 2
[11, 1] (11, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 1] 11 1
the point we are trying to find neighbors for  [11, 1]
neighboring cells are:  [[11, 2], [11, 0], [10, 1], [12, 1]]
dealing with [11, 2] at loop 0
dealing with [11, 0] at loop 1
dealing with [10, 1] at loop 2
[10, 1] is NOT a wall
dealing with [12, 1] at loop 3
[12, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
10[11, 1][10, 1]
the points are:  [11, 1] [10, 1]
type for point in is_valid_node  <class 'list'>
[11, 1] 11 1
type for point in is_valid_node  <class 'list'>
[10, 1] 10 1
the point we are trying to find neighbors for  [10, 1]
neighboring cells are:  [[10, 2], [10, 0], [9, 1], [11, 1]]
dealing with [10, 2] at loop 0
dealing with [10, 0] at loop 1
dealing with [9, 1] at loop 2
[9, 1] is NOT a wall
dealing with [11, 1] at loop 3
[11, 1] is NOT a wall
neighbors of b [[9, 1], [11, 1]]
cost from [11, 1] to [10, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
10[11, 1][12, 1]
the points are:  [11, 1] [12, 1]
type for point in is_valid_node  <class 'list'>
[11, 1] 11 1
type for point in is_valid_node  <class 'list'>
[12, 1] 12 1
the point we are trying to find neighbors for  [12, 1]
neighboring cells are:  [[12, 2], [12, 0], [11, 1], [13, 1]]
dealing with [12, 2] at loop 0
dealing with [12, 0] at loop 1
dealing with [11, 1] at loop 2
[11, 1] is NOT a wall
dealing with [13, 1] at loop 3
[13, 1] is NOT a wall
neighbors of b [[11, 1], [13, 1]]
cost from [11, 1] to [12, 1] is 1
<class 'int'>
2 11 13
2 11 13
13 <class 'int'>
2 11 13
[1, 11] (1, 11)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 11] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 11] 1 11
the point we are trying to find neighbors for  [1, 11]
neighboring cells are:  [[1, 12], [1, 10], [0, 11], [2, 11]]
dealing with [1, 12] at loop 0
dealing with [1, 10] at loop 1
dealing with [0, 11] at loop 2
dealing with [2, 11] at loop 3
[2, 11] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
14[1, 11][2, 11]
the points are:  [1, 11] [2, 11]
type for point in is_valid_node  <class 'list'>
[1, 11] 1 11
type for point in is_valid_node  <class 'list'>
[2, 11] 2 11
the point we are trying to find neighbors for  [2, 11]
neighboring cells are:  [[2, 12], [2, 10], [1, 11], [3, 11]]
dealing with [2, 12] at loop 0
dealing with [2, 10] at loop 1
dealing with [1, 11] at loop 2
[1, 11] is NOT a wall
dealing with [3, 11] at loop 3
[3, 11] is NOT a wall
neighbors of b [[1, 11], [3, 11]]
cost from [1, 11] to [2, 11] is 1
[3, 4] (3, 4)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 4] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 4] 3 4
the point we are trying to find neighbors for  [3, 4]
neighboring cells are:  [[3, 5], [3, 3], [2, 4], [4, 4]]
dealing with [3, 5] at loop 0
[3, 5] is NOT a wall
dealing with [3, 3] at loop 1
[3, 3] is NOT a wall
dealing with [2, 4] at loop 2
dealing with [4, 4] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
9[3, 4][3, 5]
the points are:  [3, 4] [3, 5]
type for point in is_valid_node  <class 'list'>
[3, 4] 3 4
type for point in is_valid_node  <class 'list'>
[3, 5] 3 5
the point we are trying to find neighbors for  [3, 5]
neighboring cells are:  [[3, 6], [3, 4], [2, 5], [4, 5]]
dealing with [3, 6] at loop 0
[3, 6] is NOT a wall
dealing with [3, 4] at loop 1
[3, 4] is NOT a wall
dealing with [2, 5] at loop 2
dealing with [4, 5] at loop 3
neighbors of b [[3, 6], [3, 4]]
cost from [3, 4] to [3, 5] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
9[3, 4][3, 3]
the points are:  [3, 4] [3, 3]
type for point in is_valid_node  <class 'list'>
[3, 4] 3 4
type for point in is_valid_node  <class 'list'>
[3, 3] 3 3
the point we are trying to find neighbors for  [3, 3]
neighboring cells are:  [[3, 4], [3, 2], [2, 3], [4, 3]]
dealing with [3, 4] at loop 0
[3, 4] is NOT a wall
dealing with [3, 2] at loop 1
dealing with [2, 3] at loop 2
dealing with [4, 3] at loop 3
[4, 3] is NOT a wall
neighbors of b [[3, 4], [4, 3]]
cost from [3, 4] to [3, 3] is 1
<class 'int'>
7 9 16
7 9 16
16 <class 'int'>
7 9 16
[5, 3] (5, 3)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 3] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 3] 5 3
the point we are trying to find neighbors for  [5, 3]
neighboring cells are:  [[5, 4], [5, 2], [4, 3], [6, 3]]
dealing with [5, 4] at loop 0
[5, 4] is NOT a wall
dealing with [5, 2] at loop 1
dealing with [4, 3] at loop 2
[4, 3] is NOT a wall
dealing with [6, 3] at loop 3
[6, 3] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
10[5, 3][5, 4]
the points are:  [5, 3] [5, 4]
type for point in is_valid_node  <class 'list'>
[5, 3] 5 3
type for point in is_valid_node  <class 'list'>
[5, 4] 5 4
the point we are trying to find neighbors for  [5, 4]
neighboring cells are:  [[5, 5], [5, 3], [4, 4], [6, 4]]
dealing with [5, 5] at loop 0
[5, 5] is NOT a wall
dealing with [5, 3] at loop 1
[5, 3] is NOT a wall
dealing with [4, 4] at loop 2
dealing with [6, 4] at loop 3
neighbors of b [[5, 5], [5, 3]]
cost from [5, 3] to [5, 4] is 1
<class 'int'>
5 8 13
5 8 13
13 <class 'int'>
5 8 13
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
10[5, 3][4, 3]
the points are:  [5, 3] [4, 3]
type for point in is_valid_node  <class 'list'>
[5, 3] 5 3
type for point in is_valid_node  <class 'list'>
[4, 3] 4 3
the point we are trying to find neighbors for  [4, 3]
neighboring cells are:  [[4, 4], [4, 2], [3, 3], [5, 3]]
dealing with [4, 4] at loop 0
dealing with [4, 2] at loop 1
dealing with [3, 3] at loop 2
[3, 3] is NOT a wall
dealing with [5, 3] at loop 3
[5, 3] is NOT a wall
neighbors of b [[3, 3], [5, 3]]
cost from [5, 3] to [4, 3] is 1
<class 'int'>
6 9 15
6 9 15
15 <class 'int'>
6 9 15
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
10[5, 3][6, 3]
the points are:  [5, 3] [6, 3]
type for point in is_valid_node  <class 'list'>
[5, 3] 5 3
type for point in is_valid_node  <class 'list'>
[6, 3] 6 3
the point we are trying to find neighbors for  [6, 3]
neighboring cells are:  [[6, 4], [6, 2], [5, 3], [7, 3]]
dealing with [6, 4] at loop 0
dealing with [6, 2] at loop 1
dealing with [5, 3] at loop 2
[5, 3] is NOT a wall
dealing with [7, 3] at loop 3
[7, 3] is NOT a wall
neighbors of b [[5, 3], [7, 3]]
cost from [5, 3] to [6, 3] is 1
[5, 4] (5, 4)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 4] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 4] 5 4
the point we are trying to find neighbors for  [5, 4]
neighboring cells are:  [[5, 5], [5, 3], [4, 4], [6, 4]]
dealing with [5, 5] at loop 0
[5, 5] is NOT a wall
dealing with [5, 3] at loop 1
[5, 3] is NOT a wall
dealing with [4, 4] at loop 2
dealing with [6, 4] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
11[5, 4][5, 5]
the points are:  [5, 4] [5, 5]
type for point in is_valid_node  <class 'list'>
[5, 4] 5 4
type for point in is_valid_node  <class 'list'>
[5, 5] 5 5
the point we are trying to find neighbors for  [5, 5]
neighboring cells are:  [[5, 6], [5, 4], [4, 5], [6, 5]]
dealing with [5, 6] at loop 0
dealing with [5, 4] at loop 1
[5, 4] is NOT a wall
dealing with [4, 5] at loop 2
dealing with [6, 5] at loop 3
neighbors of b [[5, 4]]
cost from [5, 4] to [5, 5] is 1
<class 'int'>
5 7 12
5 7 12
12 <class 'int'>
5 7 12
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
11[5, 4][5, 3]
the points are:  [5, 4] [5, 3]
type for point in is_valid_node  <class 'list'>
[5, 4] 5 4
type for point in is_valid_node  <class 'list'>
[5, 3] 5 3
the point we are trying to find neighbors for  [5, 3]
neighboring cells are:  [[5, 4], [5, 2], [4, 3], [6, 3]]
dealing with [5, 4] at loop 0
[5, 4] is NOT a wall
dealing with [5, 2] at loop 1
dealing with [4, 3] at loop 2
[4, 3] is NOT a wall
dealing with [6, 3] at loop 3
[6, 3] is NOT a wall
neighbors of b [[5, 4], [4, 3], [6, 3]]
cost from [5, 4] to [5, 3] is 1
[5, 5] (5, 5)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 5] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 5] 5 5
the point we are trying to find neighbors for  [5, 5]
neighboring cells are:  [[5, 6], [5, 4], [4, 5], [6, 5]]
dealing with [5, 6] at loop 0
dealing with [5, 4] at loop 1
[5, 4] is NOT a wall
dealing with [4, 5] at loop 2
dealing with [6, 5] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
12[5, 5][5, 4]
the points are:  [5, 5] [5, 4]
type for point in is_valid_node  <class 'list'>
[5, 5] 5 5
type for point in is_valid_node  <class 'list'>
[5, 4] 5 4
the point we are trying to find neighbors for  [5, 4]
neighboring cells are:  [[5, 5], [5, 3], [4, 4], [6, 4]]
dealing with [5, 5] at loop 0
[5, 5] is NOT a wall
dealing with [5, 3] at loop 1
[5, 3] is NOT a wall
dealing with [4, 4] at loop 2
dealing with [6, 4] at loop 3
neighbors of b [[5, 5], [5, 3]]
cost from [5, 5] to [5, 4] is 1
[7, 5] (7, 5)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 5] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 5] 7 5
the point we are trying to find neighbors for  [7, 5]
neighboring cells are:  [[7, 6], [7, 4], [6, 5], [8, 5]]
dealing with [7, 6] at loop 0
[7, 6] is NOT a wall
dealing with [7, 4] at loop 1
dealing with [6, 5] at loop 2
dealing with [8, 5] at loop 3
[8, 5] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
14[7, 5][7, 6]
the points are:  [7, 5] [7, 6]
type for point in is_valid_node  <class 'list'>
[7, 5] 7 5
type for point in is_valid_node  <class 'list'>
[7, 6] 7 6
the point we are trying to find neighbors for  [7, 6]
neighboring cells are:  [[7, 7], [7, 5], [6, 6], [8, 6]]
dealing with [7, 7] at loop 0
[7, 7] is NOT a wall
dealing with [7, 5] at loop 1
[7, 5] is NOT a wall
dealing with [6, 6] at loop 2
dealing with [8, 6] at loop 3
neighbors of b [[7, 7], [7, 5]]
cost from [7, 5] to [7, 6] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
14[7, 5][8, 5]
the points are:  [7, 5] [8, 5]
type for point in is_valid_node  <class 'list'>
[7, 5] 7 5
type for point in is_valid_node  <class 'list'>
[8, 5] 8 5
the point we are trying to find neighbors for  [8, 5]
neighboring cells are:  [[8, 6], [8, 4], [7, 5], [9, 5]]
dealing with [8, 6] at loop 0
dealing with [8, 4] at loop 1
dealing with [7, 5] at loop 2
[7, 5] is NOT a wall
dealing with [9, 5] at loop 3
[9, 5] is NOT a wall
neighbors of b [[7, 5], [9, 5]]
cost from [7, 5] to [8, 5] is 1
[9, 7] (9, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 7] 9 7
the point we are trying to find neighbors for  [9, 7]
neighboring cells are:  [[9, 8], [9, 6], [8, 7], [10, 7]]
dealing with [9, 8] at loop 0
[9, 8] is NOT a wall
dealing with [9, 6] at loop 1
dealing with [8, 7] at loop 2
dealing with [10, 7] at loop 3
[10, 7] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
18[9, 7][9, 8]
the points are:  [9, 7] [9, 8]
type for point in is_valid_node  <class 'list'>
[9, 7] 9 7
type for point in is_valid_node  <class 'list'>
[9, 8] 9 8
the point we are trying to find neighbors for  [9, 8]
neighboring cells are:  [[9, 9], [9, 7], [8, 8], [10, 8]]
dealing with [9, 9] at loop 0
[9, 9] is NOT a wall
dealing with [9, 7] at loop 1
[9, 7] is NOT a wall
dealing with [8, 8] at loop 2
dealing with [10, 8] at loop 3
neighbors of b [[9, 9], [9, 7]]
cost from [9, 7] to [9, 8] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
18[9, 7][10, 7]
the points are:  [9, 7] [10, 7]
type for point in is_valid_node  <class 'list'>
[9, 7] 9 7
type for point in is_valid_node  <class 'list'>
[10, 7] 10 7
the point we are trying to find neighbors for  [10, 7]
neighboring cells are:  [[10, 8], [10, 6], [9, 7], [11, 7]]
dealing with [10, 8] at loop 0
dealing with [10, 6] at loop 1
dealing with [9, 7] at loop 2
[9, 7] is NOT a wall
dealing with [11, 7] at loop 3
[11, 7] is NOT a wall
neighbors of b [[9, 7], [11, 7]]
cost from [9, 7] to [10, 7] is 1
<class 'int'>
0 5 5
0 5 5
5 <class 'int'>
0 5 5
[10, 7] (10, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[10, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[10, 7] 10 7
the point we are trying to find neighbors for  [10, 7]
neighboring cells are:  [[10, 8], [10, 6], [9, 7], [11, 7]]
dealing with [10, 8] at loop 0
dealing with [10, 6] at loop 1
dealing with [9, 7] at loop 2
[9, 7] is NOT a wall
dealing with [11, 7] at loop 3
[11, 7] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
19[10, 7][9, 7]
the points are:  [10, 7] [9, 7]
type for point in is_valid_node  <class 'list'>
[10, 7] 10 7
type for point in is_valid_node  <class 'list'>
[9, 7] 9 7
the point we are trying to find neighbors for  [9, 7]
neighboring cells are:  [[9, 8], [9, 6], [8, 7], [10, 7]]
dealing with [9, 8] at loop 0
[9, 8] is NOT a wall
dealing with [9, 6] at loop 1
dealing with [8, 7] at loop 2
dealing with [10, 7] at loop 3
[10, 7] is NOT a wall
neighbors of b [[9, 8], [10, 7]]
cost from [10, 7] to [9, 7] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
19[10, 7][11, 7]
the points are:  [10, 7] [11, 7]
type for point in is_valid_node  <class 'list'>
[10, 7] 10 7
type for point in is_valid_node  <class 'list'>
[11, 7] 11 7
the point we are trying to find neighbors for  [11, 7]
neighboring cells are:  [[11, 8], [11, 6], [10, 7], [12, 7]]
dealing with [11, 8] at loop 0
dealing with [11, 6] at loop 1
dealing with [10, 7] at loop 2
[10, 7] is NOT a wall
dealing with [12, 7] at loop 3
[12, 7] is NOT a wall
neighbors of b [[10, 7], [12, 7]]
cost from [10, 7] to [11, 7] is 1
<class 'int'>
1 5 6
1 5 6
6 <class 'int'>
1 5 6
[11, 13] (11, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 13] 11 13
the point we are trying to find neighbors for  [11, 13]
neighboring cells are:  [[11, 14], [11, 12], [10, 13], [12, 13]]
dealing with [11, 14] at loop 0
[11, 14] is NOT a wall
dealing with [11, 12] at loop 1
dealing with [10, 13] at loop 2
[10, 13] is NOT a wall
dealing with [12, 13] at loop 3
[12, 13] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
22[11, 13][11, 14]
the points are:  [11, 13] [11, 14]
type for point in is_valid_node  <class 'list'>
[11, 13] 11 13
type for point in is_valid_node  <class 'list'>
[11, 14] 11 14
the point we are trying to find neighbors for  [11, 14]
neighboring cells are:  [[11, 15], [11, 13], [10, 14], [12, 14]]
dealing with [11, 15] at loop 0
[11, 15] is NOT a wall
dealing with [11, 13] at loop 1
[11, 13] is NOT a wall
dealing with [10, 14] at loop 2
dealing with [12, 14] at loop 3
neighbors of b [[11, 15], [11, 13]]
cost from [11, 13] to [11, 14] is 1
<class 'int'>
1 2 3
1 2 3
3 <class 'int'>
1 2 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
22[11, 13][10, 13]
the points are:  [11, 13] [10, 13]
type for point in is_valid_node  <class 'list'>
[11, 13] 11 13
type for point in is_valid_node  <class 'list'>
[10, 13] 10 13
the point we are trying to find neighbors for  [10, 13]
neighboring cells are:  [[10, 14], [10, 12], [9, 13], [11, 13]]
dealing with [10, 14] at loop 0
dealing with [10, 12] at loop 1
dealing with [9, 13] at loop 2
[9, 13] is NOT a wall
dealing with [11, 13] at loop 3
[11, 13] is NOT a wall
neighbors of b [[9, 13], [11, 13]]
cost from [11, 13] to [10, 13] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
22[11, 13][12, 13]
the points are:  [11, 13] [12, 13]
type for point in is_valid_node  <class 'list'>
[11, 13] 11 13
type for point in is_valid_node  <class 'list'>
[12, 13] 12 13
the point we are trying to find neighbors for  [12, 13]
neighboring cells are:  [[12, 14], [12, 12], [11, 13], [13, 13]]
dealing with [12, 14] at loop 0
dealing with [12, 12] at loop 1
dealing with [11, 13] at loop 2
[11, 13] is NOT a wall
dealing with [13, 13] at loop 3
[13, 13] is NOT a wall
neighbors of b [[11, 13], [13, 13]]
cost from [11, 13] to [12, 13] is 1
<class 'int'>
2 1 3
2 1 3
3 <class 'int'>
2 1 3
[12, 1] (12, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 1] 12 1
the point we are trying to find neighbors for  [12, 1]
neighboring cells are:  [[12, 2], [12, 0], [11, 1], [13, 1]]
dealing with [12, 2] at loop 0
dealing with [12, 0] at loop 1
dealing with [11, 1] at loop 2
[11, 1] is NOT a wall
dealing with [13, 1] at loop 3
[13, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
11[12, 1][11, 1]
the points are:  [12, 1] [11, 1]
type for point in is_valid_node  <class 'list'>
[12, 1] 12 1
type for point in is_valid_node  <class 'list'>
[11, 1] 11 1
the point we are trying to find neighbors for  [11, 1]
neighboring cells are:  [[11, 2], [11, 0], [10, 1], [12, 1]]
dealing with [11, 2] at loop 0
dealing with [11, 0] at loop 1
dealing with [10, 1] at loop 2
[10, 1] is NOT a wall
dealing with [12, 1] at loop 3
[12, 1] is NOT a wall
neighbors of b [[10, 1], [12, 1]]
cost from [12, 1] to [11, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
11[12, 1][13, 1]
the points are:  [12, 1] [13, 1]
type for point in is_valid_node  <class 'list'>
[12, 1] 12 1
type for point in is_valid_node  <class 'list'>
[13, 1] 13 1
the point we are trying to find neighbors for  [13, 1]
neighboring cells are:  [[13, 2], [13, 0], [12, 1], [14, 1]]
dealing with [13, 2] at loop 0
[13, 2] is NOT a wall
dealing with [13, 0] at loop 1
dealing with [12, 1] at loop 2
[12, 1] is NOT a wall
dealing with [14, 1] at loop 3
[14, 1] is NOT a wall
neighbors of b [[13, 2], [12, 1], [14, 1]]
cost from [12, 1] to [13, 1] is 1
<class 'int'>
3 11 14
3 11 14
14 <class 'int'>
3 11 14
[3, 3] (3, 3)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 3] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 3] 3 3
the point we are trying to find neighbors for  [3, 3]
neighboring cells are:  [[3, 4], [3, 2], [2, 3], [4, 3]]
dealing with [3, 4] at loop 0
[3, 4] is NOT a wall
dealing with [3, 2] at loop 1
dealing with [2, 3] at loop 2
dealing with [4, 3] at loop 3
[4, 3] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
10[3, 3][3, 4]
the points are:  [3, 3] [3, 4]
type for point in is_valid_node  <class 'list'>
[3, 3] 3 3
type for point in is_valid_node  <class 'list'>
[3, 4] 3 4
the point we are trying to find neighbors for  [3, 4]
neighboring cells are:  [[3, 5], [3, 3], [2, 4], [4, 4]]
dealing with [3, 5] at loop 0
[3, 5] is NOT a wall
dealing with [3, 3] at loop 1
[3, 3] is NOT a wall
dealing with [2, 4] at loop 2
dealing with [4, 4] at loop 3
neighbors of b [[3, 5], [3, 3]]
cost from [3, 3] to [3, 4] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
10[3, 3][4, 3]
the points are:  [3, 3] [4, 3]
type for point in is_valid_node  <class 'list'>
[3, 3] 3 3
type for point in is_valid_node  <class 'list'>
[4, 3] 4 3
the point we are trying to find neighbors for  [4, 3]
neighboring cells are:  [[4, 4], [4, 2], [3, 3], [5, 3]]
dealing with [4, 4] at loop 0
dealing with [4, 2] at loop 1
dealing with [3, 3] at loop 2
[3, 3] is NOT a wall
dealing with [5, 3] at loop 3
[5, 3] is NOT a wall
neighbors of b [[3, 3], [5, 3]]
cost from [3, 3] to [4, 3] is 1
[4, 3] (4, 3)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 3] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 3] 4 3
the point we are trying to find neighbors for  [4, 3]
neighboring cells are:  [[4, 4], [4, 2], [3, 3], [5, 3]]
dealing with [4, 4] at loop 0
dealing with [4, 2] at loop 1
dealing with [3, 3] at loop 2
[3, 3] is NOT a wall
dealing with [5, 3] at loop 3
[5, 3] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
11[4, 3][3, 3]
the points are:  [4, 3] [3, 3]
type for point in is_valid_node  <class 'list'>
[4, 3] 4 3
type for point in is_valid_node  <class 'list'>
[3, 3] 3 3
the point we are trying to find neighbors for  [3, 3]
neighboring cells are:  [[3, 4], [3, 2], [2, 3], [4, 3]]
dealing with [3, 4] at loop 0
[3, 4] is NOT a wall
dealing with [3, 2] at loop 1
dealing with [2, 3] at loop 2
dealing with [4, 3] at loop 3
[4, 3] is NOT a wall
neighbors of b [[3, 4], [4, 3]]
cost from [4, 3] to [3, 3] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
11[4, 3][5, 3]
the points are:  [4, 3] [5, 3]
type for point in is_valid_node  <class 'list'>
[4, 3] 4 3
type for point in is_valid_node  <class 'list'>
[5, 3] 5 3
the point we are trying to find neighbors for  [5, 3]
neighboring cells are:  [[5, 4], [5, 2], [4, 3], [6, 3]]
dealing with [5, 4] at loop 0
[5, 4] is NOT a wall
dealing with [5, 2] at loop 1
dealing with [4, 3] at loop 2
[4, 3] is NOT a wall
dealing with [6, 3] at loop 3
[6, 3] is NOT a wall
neighbors of b [[5, 4], [4, 3], [6, 3]]
cost from [4, 3] to [5, 3] is 1
[11, 7] (11, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 7] 11 7
the point we are trying to find neighbors for  [11, 7]
neighboring cells are:  [[11, 8], [11, 6], [10, 7], [12, 7]]
dealing with [11, 8] at loop 0
dealing with [11, 6] at loop 1
dealing with [10, 7] at loop 2
[10, 7] is NOT a wall
dealing with [12, 7] at loop 3
[12, 7] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
20[11, 7][10, 7]
the points are:  [11, 7] [10, 7]
type for point in is_valid_node  <class 'list'>
[11, 7] 11 7
type for point in is_valid_node  <class 'list'>
[10, 7] 10 7
the point we are trying to find neighbors for  [10, 7]
neighboring cells are:  [[10, 8], [10, 6], [9, 7], [11, 7]]
dealing with [10, 8] at loop 0
dealing with [10, 6] at loop 1
dealing with [9, 7] at loop 2
[9, 7] is NOT a wall
dealing with [11, 7] at loop 3
[11, 7] is NOT a wall
neighbors of b [[9, 7], [11, 7]]
cost from [11, 7] to [10, 7] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
20[11, 7][12, 7]
the points are:  [11, 7] [12, 7]
type for point in is_valid_node  <class 'list'>
[11, 7] 11 7
type for point in is_valid_node  <class 'list'>
[12, 7] 12 7
the point we are trying to find neighbors for  [12, 7]
neighboring cells are:  [[12, 8], [12, 6], [11, 7], [13, 7]]
dealing with [12, 8] at loop 0
dealing with [12, 6] at loop 1
dealing with [11, 7] at loop 2
[11, 7] is NOT a wall
dealing with [13, 7] at loop 3
[13, 7] is NOT a wall
neighbors of b [[11, 7], [13, 7]]
cost from [11, 7] to [12, 7] is 1
<class 'int'>
2 5 7
2 5 7
7 <class 'int'>
2 5 7
[11, 14] (11, 14)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 14] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 14] 11 14
the point we are trying to find neighbors for  [11, 14]
neighboring cells are:  [[11, 15], [11, 13], [10, 14], [12, 14]]
dealing with [11, 15] at loop 0
[11, 15] is NOT a wall
dealing with [11, 13] at loop 1
[11, 13] is NOT a wall
dealing with [10, 14] at loop 2
dealing with [12, 14] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
23[11, 14][11, 15]
the points are:  [11, 14] [11, 15]
type for point in is_valid_node  <class 'list'>
[11, 14] 11 14
type for point in is_valid_node  <class 'list'>
[11, 15] 11 15
the point we are trying to find neighbors for  [11, 15]
neighboring cells are:  [[11, 16], [11, 14], [10, 15], [12, 15]]
dealing with [11, 16] at loop 0
[11, 16] is NOT a wall
dealing with [11, 14] at loop 1
[11, 14] is NOT a wall
dealing with [10, 15] at loop 2
dealing with [12, 15] at loop 3
neighbors of b [[11, 16], [11, 14]]
cost from [11, 14] to [11, 15] is 1
<class 'int'>
1 3 4
1 3 4
4 <class 'int'>
1 3 4
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
23[11, 14][11, 13]
the points are:  [11, 14] [11, 13]
type for point in is_valid_node  <class 'list'>
[11, 14] 11 14
type for point in is_valid_node  <class 'list'>
[11, 13] 11 13
the point we are trying to find neighbors for  [11, 13]
neighboring cells are:  [[11, 14], [11, 12], [10, 13], [12, 13]]
dealing with [11, 14] at loop 0
[11, 14] is NOT a wall
dealing with [11, 12] at loop 1
dealing with [10, 13] at loop 2
[10, 13] is NOT a wall
dealing with [12, 13] at loop 3
[12, 13] is NOT a wall
neighbors of b [[11, 14], [10, 13], [12, 13]]
cost from [11, 14] to [11, 13] is 1
[12, 13] (12, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 13] 12 13
the point we are trying to find neighbors for  [12, 13]
neighboring cells are:  [[12, 14], [12, 12], [11, 13], [13, 13]]
dealing with [12, 14] at loop 0
dealing with [12, 12] at loop 1
dealing with [11, 13] at loop 2
[11, 13] is NOT a wall
dealing with [13, 13] at loop 3
[13, 13] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
23[12, 13][11, 13]
the points are:  [12, 13] [11, 13]
type for point in is_valid_node  <class 'list'>
[12, 13] 12 13
type for point in is_valid_node  <class 'list'>
[11, 13] 11 13
the point we are trying to find neighbors for  [11, 13]
neighboring cells are:  [[11, 14], [11, 12], [10, 13], [12, 13]]
dealing with [11, 14] at loop 0
[11, 14] is NOT a wall
dealing with [11, 12] at loop 1
dealing with [10, 13] at loop 2
[10, 13] is NOT a wall
dealing with [12, 13] at loop 3
[12, 13] is NOT a wall
neighbors of b [[11, 14], [10, 13], [12, 13]]
cost from [12, 13] to [11, 13] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
23[12, 13][13, 13]
the points are:  [12, 13] [13, 13]
type for point in is_valid_node  <class 'list'>
[12, 13] 12 13
type for point in is_valid_node  <class 'list'>
[13, 13] 13 13
the point we are trying to find neighbors for  [13, 13]
neighboring cells are:  [[13, 14], [13, 12], [12, 13], [14, 13]]
dealing with [13, 14] at loop 0
[13, 14] is NOT a wall
dealing with [13, 12] at loop 1
[13, 12] is NOT a wall
dealing with [12, 13] at loop 2
[12, 13] is NOT a wall
dealing with [14, 13] at loop 3
[14, 13] is NOT a wall
neighbors of b [[13, 14], [13, 12], [12, 13], [14, 13]]
cost from [12, 13] to [13, 13] is 1
<class 'int'>
3 1 4
3 1 4
4 <class 'int'>
3 1 4
[13, 1] (13, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 1] 13 1
the point we are trying to find neighbors for  [13, 1]
neighboring cells are:  [[13, 2], [13, 0], [12, 1], [14, 1]]
dealing with [13, 2] at loop 0
[13, 2] is NOT a wall
dealing with [13, 0] at loop 1
dealing with [12, 1] at loop 2
[12, 1] is NOT a wall
dealing with [14, 1] at loop 3
[14, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
12[13, 1][13, 2]
the points are:  [13, 1] [13, 2]
type for point in is_valid_node  <class 'list'>
[13, 1] 13 1
type for point in is_valid_node  <class 'list'>
[13, 2] 13 2
the point we are trying to find neighbors for  [13, 2]
neighboring cells are:  [[13, 3], [13, 1], [12, 2], [14, 2]]
dealing with [13, 3] at loop 0
[13, 3] is NOT a wall
dealing with [13, 1] at loop 1
[13, 1] is NOT a wall
dealing with [12, 2] at loop 2
dealing with [14, 2] at loop 3
neighbors of b [[13, 3], [13, 1]]
cost from [13, 1] to [13, 2] is 1
<class 'int'>
3 10 13
3 10 13
13 <class 'int'>
3 10 13
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
12[13, 1][12, 1]
the points are:  [13, 1] [12, 1]
type for point in is_valid_node  <class 'list'>
[13, 1] 13 1
type for point in is_valid_node  <class 'list'>
[12, 1] 12 1
the point we are trying to find neighbors for  [12, 1]
neighboring cells are:  [[12, 2], [12, 0], [11, 1], [13, 1]]
dealing with [12, 2] at loop 0
dealing with [12, 0] at loop 1
dealing with [11, 1] at loop 2
[11, 1] is NOT a wall
dealing with [13, 1] at loop 3
[13, 1] is NOT a wall
neighbors of b [[11, 1], [13, 1]]
cost from [13, 1] to [12, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
12[13, 1][14, 1]
the points are:  [13, 1] [14, 1]
type for point in is_valid_node  <class 'list'>
[13, 1] 13 1
type for point in is_valid_node  <class 'list'>
[14, 1] 14 1
the point we are trying to find neighbors for  [14, 1]
neighboring cells are:  [[14, 2], [14, 0], [13, 1], [15, 1]]
dealing with [14, 2] at loop 0
dealing with [14, 0] at loop 1
dealing with [13, 1] at loop 2
[13, 1] is NOT a wall
dealing with [15, 1] at loop 3
[15, 1] is NOT a wall
neighbors of b [[13, 1], [15, 1]]
cost from [13, 1] to [14, 1] is 1
<class 'int'>
4 11 15
4 11 15
15 <class 'int'>
4 11 15
[13, 2] (13, 2)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 2] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 2] 13 2
the point we are trying to find neighbors for  [13, 2]
neighboring cells are:  [[13, 3], [13, 1], [12, 2], [14, 2]]
dealing with [13, 3] at loop 0
[13, 3] is NOT a wall
dealing with [13, 1] at loop 1
[13, 1] is NOT a wall
dealing with [12, 2] at loop 2
dealing with [14, 2] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
13[13, 2][13, 3]
the points are:  [13, 2] [13, 3]
type for point in is_valid_node  <class 'list'>
[13, 2] 13 2
type for point in is_valid_node  <class 'list'>
[13, 3] 13 3
the point we are trying to find neighbors for  [13, 3]
neighboring cells are:  [[13, 4], [13, 2], [12, 3], [14, 3]]
dealing with [13, 4] at loop 0
dealing with [13, 2] at loop 1
[13, 2] is NOT a wall
dealing with [12, 3] at loop 2
[12, 3] is NOT a wall
dealing with [14, 3] at loop 3
neighbors of b [[13, 2], [12, 3]]
cost from [13, 2] to [13, 3] is 1
<class 'int'>
3 9 12
3 9 12
12 <class 'int'>
3 9 12
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
13[13, 2][13, 1]
the points are:  [13, 2] [13, 1]
type for point in is_valid_node  <class 'list'>
[13, 2] 13 2
type for point in is_valid_node  <class 'list'>
[13, 1] 13 1
the point we are trying to find neighbors for  [13, 1]
neighboring cells are:  [[13, 2], [13, 0], [12, 1], [14, 1]]
dealing with [13, 2] at loop 0
[13, 2] is NOT a wall
dealing with [13, 0] at loop 1
dealing with [12, 1] at loop 2
[12, 1] is NOT a wall
dealing with [14, 1] at loop 3
[14, 1] is NOT a wall
neighbors of b [[13, 2], [12, 1], [14, 1]]
cost from [13, 2] to [13, 1] is 1
[13, 3] (13, 3)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 3] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 3] 13 3
the point we are trying to find neighbors for  [13, 3]
neighboring cells are:  [[13, 4], [13, 2], [12, 3], [14, 3]]
dealing with [13, 4] at loop 0
dealing with [13, 2] at loop 1
[13, 2] is NOT a wall
dealing with [12, 3] at loop 2
[12, 3] is NOT a wall
dealing with [14, 3] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
14[13, 3][13, 2]
the points are:  [13, 3] [13, 2]
type for point in is_valid_node  <class 'list'>
[13, 3] 13 3
type for point in is_valid_node  <class 'list'>
[13, 2] 13 2
the point we are trying to find neighbors for  [13, 2]
neighboring cells are:  [[13, 3], [13, 1], [12, 2], [14, 2]]
dealing with [13, 3] at loop 0
[13, 3] is NOT a wall
dealing with [13, 1] at loop 1
[13, 1] is NOT a wall
dealing with [12, 2] at loop 2
dealing with [14, 2] at loop 3
neighbors of b [[13, 3], [13, 1]]
cost from [13, 3] to [13, 2] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
14[13, 3][12, 3]
the points are:  [13, 3] [12, 3]
type for point in is_valid_node  <class 'list'>
[13, 3] 13 3
type for point in is_valid_node  <class 'list'>
[12, 3] 12 3
the point we are trying to find neighbors for  [12, 3]
neighboring cells are:  [[12, 4], [12, 2], [11, 3], [13, 3]]
dealing with [12, 4] at loop 0
dealing with [12, 2] at loop 1
dealing with [11, 3] at loop 2
[11, 3] is NOT a wall
dealing with [13, 3] at loop 3
[13, 3] is NOT a wall
neighbors of b [[11, 3], [13, 3]]
cost from [13, 3] to [12, 3] is 1
<class 'int'>
2 9 11
2 9 11
11 <class 'int'>
2 9 11
[12, 3] (12, 3)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 3] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 3] 12 3
the point we are trying to find neighbors for  [12, 3]
neighboring cells are:  [[12, 4], [12, 2], [11, 3], [13, 3]]
dealing with [12, 4] at loop 0
dealing with [12, 2] at loop 1
dealing with [11, 3] at loop 2
[11, 3] is NOT a wall
dealing with [13, 3] at loop 3
[13, 3] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
15[12, 3][11, 3]
the points are:  [12, 3] [11, 3]
type for point in is_valid_node  <class 'list'>
[12, 3] 12 3
type for point in is_valid_node  <class 'list'>
[11, 3] 11 3
the point we are trying to find neighbors for  [11, 3]
neighboring cells are:  [[11, 4], [11, 2], [10, 3], [12, 3]]
dealing with [11, 4] at loop 0
[11, 4] is NOT a wall
dealing with [11, 2] at loop 1
dealing with [10, 3] at loop 2
dealing with [12, 3] at loop 3
[12, 3] is NOT a wall
neighbors of b [[11, 4], [12, 3]]
cost from [12, 3] to [11, 3] is 1
<class 'int'>
1 9 10
1 9 10
10 <class 'int'>
1 9 10
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
15[12, 3][13, 3]
the points are:  [12, 3] [13, 3]
type for point in is_valid_node  <class 'list'>
[12, 3] 12 3
type for point in is_valid_node  <class 'list'>
[13, 3] 13 3
the point we are trying to find neighbors for  [13, 3]
neighboring cells are:  [[13, 4], [13, 2], [12, 3], [14, 3]]
dealing with [13, 4] at loop 0
dealing with [13, 2] at loop 1
[13, 2] is NOT a wall
dealing with [12, 3] at loop 2
[12, 3] is NOT a wall
dealing with [14, 3] at loop 3
neighbors of b [[13, 2], [12, 3]]
cost from [12, 3] to [13, 3] is 1
[11, 3] (11, 3)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 3] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 3] 11 3
the point we are trying to find neighbors for  [11, 3]
neighboring cells are:  [[11, 4], [11, 2], [10, 3], [12, 3]]
dealing with [11, 4] at loop 0
[11, 4] is NOT a wall
dealing with [11, 2] at loop 1
dealing with [10, 3] at loop 2
dealing with [12, 3] at loop 3
[12, 3] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
16[11, 3][11, 4]
the points are:  [11, 3] [11, 4]
type for point in is_valid_node  <class 'list'>
[11, 3] 11 3
type for point in is_valid_node  <class 'list'>
[11, 4] 11 4
the point we are trying to find neighbors for  [11, 4]
neighboring cells are:  [[11, 5], [11, 3], [10, 4], [12, 4]]
dealing with [11, 5] at loop 0
[11, 5] is NOT a wall
dealing with [11, 3] at loop 1
[11, 3] is NOT a wall
dealing with [10, 4] at loop 2
dealing with [12, 4] at loop 3
neighbors of b [[11, 5], [11, 3]]
cost from [11, 3] to [11, 4] is 1
<class 'int'>
1 8 9
1 8 9
9 <class 'int'>
1 8 9
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
16[11, 3][12, 3]
the points are:  [11, 3] [12, 3]
type for point in is_valid_node  <class 'list'>
[11, 3] 11 3
type for point in is_valid_node  <class 'list'>
[12, 3] 12 3
the point we are trying to find neighbors for  [12, 3]
neighboring cells are:  [[12, 4], [12, 2], [11, 3], [13, 3]]
dealing with [12, 4] at loop 0
dealing with [12, 2] at loop 1
dealing with [11, 3] at loop 2
[11, 3] is NOT a wall
dealing with [13, 3] at loop 3
[13, 3] is NOT a wall
neighbors of b [[11, 3], [13, 3]]
cost from [11, 3] to [12, 3] is 1
[11, 4] (11, 4)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 4] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 4] 11 4
the point we are trying to find neighbors for  [11, 4]
neighboring cells are:  [[11, 5], [11, 3], [10, 4], [12, 4]]
dealing with [11, 5] at loop 0
[11, 5] is NOT a wall
dealing with [11, 3] at loop 1
[11, 3] is NOT a wall
dealing with [10, 4] at loop 2
dealing with [12, 4] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
17[11, 4][11, 5]
the points are:  [11, 4] [11, 5]
type for point in is_valid_node  <class 'list'>
[11, 4] 11 4
type for point in is_valid_node  <class 'list'>
[11, 5] 11 5
the point we are trying to find neighbors for  [11, 5]
neighboring cells are:  [[11, 6], [11, 4], [10, 5], [12, 5]]
dealing with [11, 6] at loop 0
dealing with [11, 4] at loop 1
[11, 4] is NOT a wall
dealing with [10, 5] at loop 2
dealing with [12, 5] at loop 3
neighbors of b [[11, 4]]
cost from [11, 4] to [11, 5] is 1
<class 'int'>
1 7 8
1 7 8
8 <class 'int'>
1 7 8
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
17[11, 4][11, 3]
the points are:  [11, 4] [11, 3]
type for point in is_valid_node  <class 'list'>
[11, 4] 11 4
type for point in is_valid_node  <class 'list'>
[11, 3] 11 3
the point we are trying to find neighbors for  [11, 3]
neighboring cells are:  [[11, 4], [11, 2], [10, 3], [12, 3]]
dealing with [11, 4] at loop 0
[11, 4] is NOT a wall
dealing with [11, 2] at loop 1
dealing with [10, 3] at loop 2
dealing with [12, 3] at loop 3
[12, 3] is NOT a wall
neighbors of b [[11, 4], [12, 3]]
cost from [11, 4] to [11, 3] is 1
[11, 5] (11, 5)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 5] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 5] 11 5
the point we are trying to find neighbors for  [11, 5]
neighboring cells are:  [[11, 6], [11, 4], [10, 5], [12, 5]]
dealing with [11, 6] at loop 0
dealing with [11, 4] at loop 1
[11, 4] is NOT a wall
dealing with [10, 5] at loop 2
dealing with [12, 5] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
18[11, 5][11, 4]
the points are:  [11, 5] [11, 4]
type for point in is_valid_node  <class 'list'>
[11, 5] 11 5
type for point in is_valid_node  <class 'list'>
[11, 4] 11 4
the point we are trying to find neighbors for  [11, 4]
neighboring cells are:  [[11, 5], [11, 3], [10, 4], [12, 4]]
dealing with [11, 5] at loop 0
[11, 5] is NOT a wall
dealing with [11, 3] at loop 1
[11, 3] is NOT a wall
dealing with [10, 4] at loop 2
dealing with [12, 4] at loop 3
neighbors of b [[11, 5], [11, 3]]
cost from [11, 5] to [11, 4] is 1
[11, 15] (11, 15)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 15] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 15] 11 15
the point we are trying to find neighbors for  [11, 15]
neighboring cells are:  [[11, 16], [11, 14], [10, 15], [12, 15]]
dealing with [11, 16] at loop 0
[11, 16] is NOT a wall
dealing with [11, 14] at loop 1
[11, 14] is NOT a wall
dealing with [10, 15] at loop 2
dealing with [12, 15] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
24[11, 15][11, 16]
the points are:  [11, 15] [11, 16]
type for point in is_valid_node  <class 'list'>
[11, 15] 11 15
type for point in is_valid_node  <class 'list'>
[11, 16] 11 16
the point we are trying to find neighbors for  [11, 16]
neighboring cells are:  [[11, 17], [11, 15], [10, 16], [12, 16]]
dealing with [11, 17] at loop 0
[11, 17] is NOT a wall
dealing with [11, 15] at loop 1
[11, 15] is NOT a wall
dealing with [10, 16] at loop 2
dealing with [12, 16] at loop 3
neighbors of b [[11, 17], [11, 15]]
cost from [11, 15] to [11, 16] is 1
<class 'int'>
1 4 5
1 4 5
5 <class 'int'>
1 4 5
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
24[11, 15][11, 14]
the points are:  [11, 15] [11, 14]
type for point in is_valid_node  <class 'list'>
[11, 15] 11 15
type for point in is_valid_node  <class 'list'>
[11, 14] 11 14
the point we are trying to find neighbors for  [11, 14]
neighboring cells are:  [[11, 15], [11, 13], [10, 14], [12, 14]]
dealing with [11, 15] at loop 0
[11, 15] is NOT a wall
dealing with [11, 13] at loop 1
[11, 13] is NOT a wall
dealing with [10, 14] at loop 2
dealing with [12, 14] at loop 3
neighbors of b [[11, 15], [11, 13]]
cost from [11, 15] to [11, 14] is 1
[12, 7] (12, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 7] 12 7
the point we are trying to find neighbors for  [12, 7]
neighboring cells are:  [[12, 8], [12, 6], [11, 7], [13, 7]]
dealing with [12, 8] at loop 0
dealing with [12, 6] at loop 1
dealing with [11, 7] at loop 2
[11, 7] is NOT a wall
dealing with [13, 7] at loop 3
[13, 7] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
21[12, 7][11, 7]
the points are:  [12, 7] [11, 7]
type for point in is_valid_node  <class 'list'>
[12, 7] 12 7
type for point in is_valid_node  <class 'list'>
[11, 7] 11 7
the point we are trying to find neighbors for  [11, 7]
neighboring cells are:  [[11, 8], [11, 6], [10, 7], [12, 7]]
dealing with [11, 8] at loop 0
dealing with [11, 6] at loop 1
dealing with [10, 7] at loop 2
[10, 7] is NOT a wall
dealing with [12, 7] at loop 3
[12, 7] is NOT a wall
neighbors of b [[10, 7], [12, 7]]
cost from [12, 7] to [11, 7] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
21[12, 7][13, 7]
the points are:  [12, 7] [13, 7]
type for point in is_valid_node  <class 'list'>
[12, 7] 12 7
type for point in is_valid_node  <class 'list'>
[13, 7] 13 7
the point we are trying to find neighbors for  [13, 7]
neighboring cells are:  [[13, 8], [13, 6], [12, 7], [14, 7]]
dealing with [13, 8] at loop 0
dealing with [13, 6] at loop 1
[13, 6] is NOT a wall
dealing with [12, 7] at loop 2
[12, 7] is NOT a wall
dealing with [14, 7] at loop 3
neighbors of b [[13, 6], [12, 7]]
cost from [12, 7] to [13, 7] is 1
<class 'int'>
3 5 8
3 5 8
8 <class 'int'>
3 5 8
[13, 13] (13, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 13] 13 13
the point we are trying to find neighbors for  [13, 13]
neighboring cells are:  [[13, 14], [13, 12], [12, 13], [14, 13]]
dealing with [13, 14] at loop 0
[13, 14] is NOT a wall
dealing with [13, 12] at loop 1
[13, 12] is NOT a wall
dealing with [12, 13] at loop 2
[12, 13] is NOT a wall
dealing with [14, 13] at loop 3
[14, 13] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
24[13, 13][13, 14]
the points are:  [13, 13] [13, 14]
type for point in is_valid_node  <class 'list'>
[13, 13] 13 13
type for point in is_valid_node  <class 'list'>
[13, 14] 13 14
the point we are trying to find neighbors for  [13, 14]
neighboring cells are:  [[13, 15], [13, 13], [12, 14], [14, 14]]
dealing with [13, 15] at loop 0
[13, 15] is NOT a wall
dealing with [13, 13] at loop 1
[13, 13] is NOT a wall
dealing with [12, 14] at loop 2
dealing with [14, 14] at loop 3
neighbors of b [[13, 15], [13, 13]]
cost from [13, 13] to [13, 14] is 1
<class 'int'>
3 2 5
3 2 5
5 <class 'int'>
3 2 5
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
24[13, 13][13, 12]
the points are:  [13, 13] [13, 12]
type for point in is_valid_node  <class 'list'>
[13, 13] 13 13
type for point in is_valid_node  <class 'list'>
[13, 12] 13 12
the point we are trying to find neighbors for  [13, 12]
neighboring cells are:  [[13, 13], [13, 11], [12, 12], [14, 12]]
dealing with [13, 13] at loop 0
[13, 13] is NOT a wall
dealing with [13, 11] at loop 1
[13, 11] is NOT a wall
dealing with [12, 12] at loop 2
dealing with [14, 12] at loop 3
neighbors of b [[13, 13], [13, 11]]
cost from [13, 13] to [13, 12] is 1
<class 'int'>
3 0 3
3 0 3
3 <class 'int'>
3 0 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
24[13, 13][12, 13]
the points are:  [13, 13] [12, 13]
type for point in is_valid_node  <class 'list'>
[13, 13] 13 13
type for point in is_valid_node  <class 'list'>
[12, 13] 12 13
the point we are trying to find neighbors for  [12, 13]
neighboring cells are:  [[12, 14], [12, 12], [11, 13], [13, 13]]
dealing with [12, 14] at loop 0
dealing with [12, 12] at loop 1
dealing with [11, 13] at loop 2
[11, 13] is NOT a wall
dealing with [13, 13] at loop 3
[13, 13] is NOT a wall
neighbors of b [[11, 13], [13, 13]]
cost from [13, 13] to [12, 13] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
24[13, 13][14, 13]
the points are:  [13, 13] [14, 13]
type for point in is_valid_node  <class 'list'>
[13, 13] 13 13
type for point in is_valid_node  <class 'list'>
[14, 13] 14 13
the point we are trying to find neighbors for  [14, 13]
neighboring cells are:  [[14, 14], [14, 12], [13, 13], [15, 13]]
dealing with [14, 14] at loop 0
dealing with [14, 12] at loop 1
dealing with [13, 13] at loop 2
[13, 13] is NOT a wall
dealing with [15, 13] at loop 3
[15, 13] is NOT a wall
neighbors of b [[13, 13], [15, 13]]
cost from [13, 13] to [14, 13] is 1
<class 'int'>
4 1 5
4 1 5
5 <class 'int'>
4 1 5
[13, 12] (13, 12)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 12] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 12] 13 12
the point we are trying to find neighbors for  [13, 12]
neighboring cells are:  [[13, 13], [13, 11], [12, 12], [14, 12]]
dealing with [13, 13] at loop 0
[13, 13] is NOT a wall
dealing with [13, 11] at loop 1
[13, 11] is NOT a wall
dealing with [12, 12] at loop 2
dealing with [14, 12] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
25[13, 12][13, 13]
the points are:  [13, 12] [13, 13]
type for point in is_valid_node  <class 'list'>
[13, 12] 13 12
type for point in is_valid_node  <class 'list'>
[13, 13] 13 13
the point we are trying to find neighbors for  [13, 13]
neighboring cells are:  [[13, 14], [13, 12], [12, 13], [14, 13]]
dealing with [13, 14] at loop 0
[13, 14] is NOT a wall
dealing with [13, 12] at loop 1
[13, 12] is NOT a wall
dealing with [12, 13] at loop 2
[12, 13] is NOT a wall
dealing with [14, 13] at loop 3
[14, 13] is NOT a wall
neighbors of b [[13, 14], [13, 12], [12, 13], [14, 13]]
cost from [13, 12] to [13, 13] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
25[13, 12][13, 11]
the points are:  [13, 12] [13, 11]
type for point in is_valid_node  <class 'list'>
[13, 12] 13 12
type for point in is_valid_node  <class 'list'>
[13, 11] 13 11
the point we are trying to find neighbors for  [13, 11]
neighboring cells are:  [[13, 12], [13, 10], [12, 11], [14, 11]]
dealing with [13, 12] at loop 0
[13, 12] is NOT a wall
dealing with [13, 10] at loop 1
dealing with [12, 11] at loop 2
dealing with [14, 11] at loop 3
[14, 11] is NOT a wall
neighbors of b [[13, 12], [14, 11]]
cost from [13, 12] to [13, 11] is 1
<class 'int'>
3 1 4
3 1 4
4 <class 'int'>
3 1 4
[14, 1] (14, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 1] 14 1
the point we are trying to find neighbors for  [14, 1]
neighboring cells are:  [[14, 2], [14, 0], [13, 1], [15, 1]]
dealing with [14, 2] at loop 0
dealing with [14, 0] at loop 1
dealing with [13, 1] at loop 2
[13, 1] is NOT a wall
dealing with [15, 1] at loop 3
[15, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
13[14, 1][13, 1]
the points are:  [14, 1] [13, 1]
type for point in is_valid_node  <class 'list'>
[14, 1] 14 1
type for point in is_valid_node  <class 'list'>
[13, 1] 13 1
the point we are trying to find neighbors for  [13, 1]
neighboring cells are:  [[13, 2], [13, 0], [12, 1], [14, 1]]
dealing with [13, 2] at loop 0
[13, 2] is NOT a wall
dealing with [13, 0] at loop 1
dealing with [12, 1] at loop 2
[12, 1] is NOT a wall
dealing with [14, 1] at loop 3
[14, 1] is NOT a wall
neighbors of b [[13, 2], [12, 1], [14, 1]]
cost from [14, 1] to [13, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
13[14, 1][15, 1]
the points are:  [14, 1] [15, 1]
type for point in is_valid_node  <class 'list'>
[14, 1] 14 1
type for point in is_valid_node  <class 'list'>
[15, 1] 15 1
the point we are trying to find neighbors for  [15, 1]
neighboring cells are:  [[15, 2], [15, 0], [14, 1], [16, 1]]
dealing with [15, 2] at loop 0
dealing with [15, 0] at loop 1
dealing with [14, 1] at loop 2
[14, 1] is NOT a wall
dealing with [16, 1] at loop 3
[16, 1] is NOT a wall
neighbors of b [[14, 1], [16, 1]]
cost from [14, 1] to [15, 1] is 1
<class 'int'>
5 11 16
5 11 16
16 <class 'int'>
5 11 16
[11, 16] (11, 16)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 16] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 16] 11 16
the point we are trying to find neighbors for  [11, 16]
neighboring cells are:  [[11, 17], [11, 15], [10, 16], [12, 16]]
dealing with [11, 17] at loop 0
[11, 17] is NOT a wall
dealing with [11, 15] at loop 1
[11, 15] is NOT a wall
dealing with [10, 16] at loop 2
dealing with [12, 16] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
25[11, 16][11, 17]
the points are:  [11, 16] [11, 17]
type for point in is_valid_node  <class 'list'>
[11, 16] 11 16
type for point in is_valid_node  <class 'list'>
[11, 17] 11 17
the point we are trying to find neighbors for  [11, 17]
neighboring cells are:  [[11, 18], [11, 16], [10, 17], [12, 17]]
dealing with [11, 18] at loop 0
[11, 18] is NOT a wall
dealing with [11, 16] at loop 1
[11, 16] is NOT a wall
dealing with [10, 17] at loop 2
dealing with [12, 17] at loop 3
neighbors of b [[11, 18], [11, 16]]
cost from [11, 16] to [11, 17] is 1
<class 'int'>
1 5 6
1 5 6
6 <class 'int'>
1 5 6
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
25[11, 16][11, 15]
the points are:  [11, 16] [11, 15]
type for point in is_valid_node  <class 'list'>
[11, 16] 11 16
type for point in is_valid_node  <class 'list'>
[11, 15] 11 15
the point we are trying to find neighbors for  [11, 15]
neighboring cells are:  [[11, 16], [11, 14], [10, 15], [12, 15]]
dealing with [11, 16] at loop 0
[11, 16] is NOT a wall
dealing with [11, 14] at loop 1
[11, 14] is NOT a wall
dealing with [10, 15] at loop 2
dealing with [12, 15] at loop 3
neighbors of b [[11, 16], [11, 14]]
cost from [11, 16] to [11, 15] is 1
[13, 7] (13, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 7] 13 7
the point we are trying to find neighbors for  [13, 7]
neighboring cells are:  [[13, 8], [13, 6], [12, 7], [14, 7]]
dealing with [13, 8] at loop 0
dealing with [13, 6] at loop 1
[13, 6] is NOT a wall
dealing with [12, 7] at loop 2
[12, 7] is NOT a wall
dealing with [14, 7] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
22[13, 7][13, 6]
the points are:  [13, 7] [13, 6]
type for point in is_valid_node  <class 'list'>
[13, 7] 13 7
type for point in is_valid_node  <class 'list'>
[13, 6] 13 6
the point we are trying to find neighbors for  [13, 6]
neighboring cells are:  [[13, 7], [13, 5], [12, 6], [14, 6]]
dealing with [13, 7] at loop 0
[13, 7] is NOT a wall
dealing with [13, 5] at loop 1
[13, 5] is NOT a wall
dealing with [12, 6] at loop 2
dealing with [14, 6] at loop 3
neighbors of b [[13, 7], [13, 5]]
cost from [13, 7] to [13, 6] is 1
<class 'int'>
3 6 9
3 6 9
9 <class 'int'>
3 6 9
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
22[13, 7][12, 7]
the points are:  [13, 7] [12, 7]
type for point in is_valid_node  <class 'list'>
[13, 7] 13 7
type for point in is_valid_node  <class 'list'>
[12, 7] 12 7
the point we are trying to find neighbors for  [12, 7]
neighboring cells are:  [[12, 8], [12, 6], [11, 7], [13, 7]]
dealing with [12, 8] at loop 0
dealing with [12, 6] at loop 1
dealing with [11, 7] at loop 2
[11, 7] is NOT a wall
dealing with [13, 7] at loop 3
[13, 7] is NOT a wall
neighbors of b [[11, 7], [13, 7]]
cost from [13, 7] to [12, 7] is 1
[13, 11] (13, 11)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 11] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 11] 13 11
the point we are trying to find neighbors for  [13, 11]
neighboring cells are:  [[13, 12], [13, 10], [12, 11], [14, 11]]
dealing with [13, 12] at loop 0
[13, 12] is NOT a wall
dealing with [13, 10] at loop 1
dealing with [12, 11] at loop 2
dealing with [14, 11] at loop 3
[14, 11] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
26[13, 11][13, 12]
the points are:  [13, 11] [13, 12]
type for point in is_valid_node  <class 'list'>
[13, 11] 13 11
type for point in is_valid_node  <class 'list'>
[13, 12] 13 12
the point we are trying to find neighbors for  [13, 12]
neighboring cells are:  [[13, 13], [13, 11], [12, 12], [14, 12]]
dealing with [13, 13] at loop 0
[13, 13] is NOT a wall
dealing with [13, 11] at loop 1
[13, 11] is NOT a wall
dealing with [12, 12] at loop 2
dealing with [14, 12] at loop 3
neighbors of b [[13, 13], [13, 11]]
cost from [13, 11] to [13, 12] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
26[13, 11][14, 11]
the points are:  [13, 11] [14, 11]
type for point in is_valid_node  <class 'list'>
[13, 11] 13 11
type for point in is_valid_node  <class 'list'>
[14, 11] 14 11
the point we are trying to find neighbors for  [14, 11]
neighboring cells are:  [[14, 12], [14, 10], [13, 11], [15, 11]]
dealing with [14, 12] at loop 0
dealing with [14, 10] at loop 1
dealing with [13, 11] at loop 2
[13, 11] is NOT a wall
dealing with [15, 11] at loop 3
[15, 11] is NOT a wall
neighbors of b [[13, 11], [15, 11]]
cost from [13, 11] to [14, 11] is 1
<class 'int'>
4 1 5
4 1 5
5 <class 'int'>
4 1 5
[13, 14] (13, 14)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 14] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 14] 13 14
the point we are trying to find neighbors for  [13, 14]
neighboring cells are:  [[13, 15], [13, 13], [12, 14], [14, 14]]
dealing with [13, 15] at loop 0
[13, 15] is NOT a wall
dealing with [13, 13] at loop 1
[13, 13] is NOT a wall
dealing with [12, 14] at loop 2
dealing with [14, 14] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
25[13, 14][13, 15]
the points are:  [13, 14] [13, 15]
type for point in is_valid_node  <class 'list'>
[13, 14] 13 14
type for point in is_valid_node  <class 'list'>
[13, 15] 13 15
the point we are trying to find neighbors for  [13, 15]
neighboring cells are:  [[13, 16], [13, 14], [12, 15], [14, 15]]
dealing with [13, 16] at loop 0
[13, 16] is NOT a wall
dealing with [13, 14] at loop 1
[13, 14] is NOT a wall
dealing with [12, 15] at loop 2
dealing with [14, 15] at loop 3
neighbors of b [[13, 16], [13, 14]]
cost from [13, 14] to [13, 15] is 1
<class 'int'>
3 3 6
3 3 6
6 <class 'int'>
3 3 6
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
25[13, 14][13, 13]
the points are:  [13, 14] [13, 13]
type for point in is_valid_node  <class 'list'>
[13, 14] 13 14
type for point in is_valid_node  <class 'list'>
[13, 13] 13 13
the point we are trying to find neighbors for  [13, 13]
neighboring cells are:  [[13, 14], [13, 12], [12, 13], [14, 13]]
dealing with [13, 14] at loop 0
[13, 14] is NOT a wall
dealing with [13, 12] at loop 1
[13, 12] is NOT a wall
dealing with [12, 13] at loop 2
[12, 13] is NOT a wall
dealing with [14, 13] at loop 3
[14, 13] is NOT a wall
neighbors of b [[13, 14], [13, 12], [12, 13], [14, 13]]
cost from [13, 14] to [13, 13] is 1
[14, 13] (14, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 13] 14 13
the point we are trying to find neighbors for  [14, 13]
neighboring cells are:  [[14, 14], [14, 12], [13, 13], [15, 13]]
dealing with [14, 14] at loop 0
dealing with [14, 12] at loop 1
dealing with [13, 13] at loop 2
[13, 13] is NOT a wall
dealing with [15, 13] at loop 3
[15, 13] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
25[14, 13][13, 13]
the points are:  [14, 13] [13, 13]
type for point in is_valid_node  <class 'list'>
[14, 13] 14 13
type for point in is_valid_node  <class 'list'>
[13, 13] 13 13
the point we are trying to find neighbors for  [13, 13]
neighboring cells are:  [[13, 14], [13, 12], [12, 13], [14, 13]]
dealing with [13, 14] at loop 0
[13, 14] is NOT a wall
dealing with [13, 12] at loop 1
[13, 12] is NOT a wall
dealing with [12, 13] at loop 2
[12, 13] is NOT a wall
dealing with [14, 13] at loop 3
[14, 13] is NOT a wall
neighbors of b [[13, 14], [13, 12], [12, 13], [14, 13]]
cost from [14, 13] to [13, 13] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
25[14, 13][15, 13]
the points are:  [14, 13] [15, 13]
type for point in is_valid_node  <class 'list'>
[14, 13] 14 13
type for point in is_valid_node  <class 'list'>
[15, 13] 15 13
the point we are trying to find neighbors for  [15, 13]
neighboring cells are:  [[15, 14], [15, 12], [14, 13], [16, 13]]
dealing with [15, 14] at loop 0
[15, 14] is NOT a wall
dealing with [15, 12] at loop 1
dealing with [14, 13] at loop 2
[14, 13] is NOT a wall
dealing with [16, 13] at loop 3
[16, 13] is NOT a wall
neighbors of b [[15, 14], [14, 13], [16, 13]]
cost from [14, 13] to [15, 13] is 1
<class 'int'>
5 1 6
5 1 6
6 <class 'int'>
5 1 6
[15, 1] (15, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 1] 15 1
the point we are trying to find neighbors for  [15, 1]
neighboring cells are:  [[15, 2], [15, 0], [14, 1], [16, 1]]
dealing with [15, 2] at loop 0
dealing with [15, 0] at loop 1
dealing with [14, 1] at loop 2
[14, 1] is NOT a wall
dealing with [16, 1] at loop 3
[16, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
14[15, 1][14, 1]
the points are:  [15, 1] [14, 1]
type for point in is_valid_node  <class 'list'>
[15, 1] 15 1
type for point in is_valid_node  <class 'list'>
[14, 1] 14 1
the point we are trying to find neighbors for  [14, 1]
neighboring cells are:  [[14, 2], [14, 0], [13, 1], [15, 1]]
dealing with [14, 2] at loop 0
dealing with [14, 0] at loop 1
dealing with [13, 1] at loop 2
[13, 1] is NOT a wall
dealing with [15, 1] at loop 3
[15, 1] is NOT a wall
neighbors of b [[13, 1], [15, 1]]
cost from [15, 1] to [14, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
14[15, 1][16, 1]
the points are:  [15, 1] [16, 1]
type for point in is_valid_node  <class 'list'>
[15, 1] 15 1
type for point in is_valid_node  <class 'list'>
[16, 1] 16 1
the point we are trying to find neighbors for  [16, 1]
neighboring cells are:  [[16, 2], [16, 0], [15, 1], [17, 1]]
dealing with [16, 2] at loop 0
[16, 2] is NOT a wall
dealing with [16, 0] at loop 1
dealing with [15, 1] at loop 2
[15, 1] is NOT a wall
dealing with [17, 1] at loop 3
[17, 1] is NOT a wall
neighbors of b [[16, 2], [15, 1], [17, 1]]
cost from [15, 1] to [16, 1] is 1
<class 'int'>
6 11 17
6 11 17
17 <class 'int'>
6 11 17
[11, 17] (11, 17)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 17] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 17] 11 17
the point we are trying to find neighbors for  [11, 17]
neighboring cells are:  [[11, 18], [11, 16], [10, 17], [12, 17]]
dealing with [11, 18] at loop 0
[11, 18] is NOT a wall
dealing with [11, 16] at loop 1
[11, 16] is NOT a wall
dealing with [10, 17] at loop 2
dealing with [12, 17] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
26[11, 17][11, 18]
the points are:  [11, 17] [11, 18]
type for point in is_valid_node  <class 'list'>
[11, 17] 11 17
type for point in is_valid_node  <class 'list'>
[11, 18] 11 18
the point we are trying to find neighbors for  [11, 18]
neighboring cells are:  [[11, 19], [11, 17], [10, 18], [12, 18]]
dealing with [11, 19] at loop 0
[11, 19] is NOT a wall
dealing with [11, 17] at loop 1
[11, 17] is NOT a wall
dealing with [10, 18] at loop 2
dealing with [12, 18] at loop 3
neighbors of b [[11, 19], [11, 17]]
cost from [11, 17] to [11, 18] is 1
<class 'int'>
1 6 7
1 6 7
7 <class 'int'>
1 6 7
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
26[11, 17][11, 16]
the points are:  [11, 17] [11, 16]
type for point in is_valid_node  <class 'list'>
[11, 17] 11 17
type for point in is_valid_node  <class 'list'>
[11, 16] 11 16
the point we are trying to find neighbors for  [11, 16]
neighboring cells are:  [[11, 17], [11, 15], [10, 16], [12, 16]]
dealing with [11, 17] at loop 0
[11, 17] is NOT a wall
dealing with [11, 15] at loop 1
[11, 15] is NOT a wall
dealing with [10, 16] at loop 2
dealing with [12, 16] at loop 3
neighbors of b [[11, 17], [11, 15]]
cost from [11, 17] to [11, 16] is 1
[13, 6] (13, 6)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 6] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 6] 13 6
the point we are trying to find neighbors for  [13, 6]
neighboring cells are:  [[13, 7], [13, 5], [12, 6], [14, 6]]
dealing with [13, 7] at loop 0
[13, 7] is NOT a wall
dealing with [13, 5] at loop 1
[13, 5] is NOT a wall
dealing with [12, 6] at loop 2
dealing with [14, 6] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
23[13, 6][13, 7]
the points are:  [13, 6] [13, 7]
type for point in is_valid_node  <class 'list'>
[13, 6] 13 6
type for point in is_valid_node  <class 'list'>
[13, 7] 13 7
the point we are trying to find neighbors for  [13, 7]
neighboring cells are:  [[13, 8], [13, 6], [12, 7], [14, 7]]
dealing with [13, 8] at loop 0
dealing with [13, 6] at loop 1
[13, 6] is NOT a wall
dealing with [12, 7] at loop 2
[12, 7] is NOT a wall
dealing with [14, 7] at loop 3
neighbors of b [[13, 6], [12, 7]]
cost from [13, 6] to [13, 7] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
23[13, 6][13, 5]
the points are:  [13, 6] [13, 5]
type for point in is_valid_node  <class 'list'>
[13, 6] 13 6
type for point in is_valid_node  <class 'list'>
[13, 5] 13 5
the point we are trying to find neighbors for  [13, 5]
neighboring cells are:  [[13, 6], [13, 4], [12, 5], [14, 5]]
dealing with [13, 6] at loop 0
[13, 6] is NOT a wall
dealing with [13, 4] at loop 1
dealing with [12, 5] at loop 2
dealing with [14, 5] at loop 3
[14, 5] is NOT a wall
neighbors of b [[13, 6], [14, 5]]
cost from [13, 6] to [13, 5] is 1
<class 'int'>
3 7 10
3 7 10
10 <class 'int'>
3 7 10
[13, 15] (13, 15)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 15] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 15] 13 15
the point we are trying to find neighbors for  [13, 15]
neighboring cells are:  [[13, 16], [13, 14], [12, 15], [14, 15]]
dealing with [13, 16] at loop 0
[13, 16] is NOT a wall
dealing with [13, 14] at loop 1
[13, 14] is NOT a wall
dealing with [12, 15] at loop 2
dealing with [14, 15] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
26[13, 15][13, 16]
the points are:  [13, 15] [13, 16]
type for point in is_valid_node  <class 'list'>
[13, 15] 13 15
type for point in is_valid_node  <class 'list'>
[13, 16] 13 16
the point we are trying to find neighbors for  [13, 16]
neighboring cells are:  [[13, 17], [13, 15], [12, 16], [14, 16]]
dealing with [13, 17] at loop 0
[13, 17] is NOT a wall
dealing with [13, 15] at loop 1
[13, 15] is NOT a wall
dealing with [12, 16] at loop 2
dealing with [14, 16] at loop 3
neighbors of b [[13, 17], [13, 15]]
cost from [13, 15] to [13, 16] is 1
<class 'int'>
3 4 7
3 4 7
7 <class 'int'>
3 4 7
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
26[13, 15][13, 14]
the points are:  [13, 15] [13, 14]
type for point in is_valid_node  <class 'list'>
[13, 15] 13 15
type for point in is_valid_node  <class 'list'>
[13, 14] 13 14
the point we are trying to find neighbors for  [13, 14]
neighboring cells are:  [[13, 15], [13, 13], [12, 14], [14, 14]]
dealing with [13, 15] at loop 0
[13, 15] is NOT a wall
dealing with [13, 13] at loop 1
[13, 13] is NOT a wall
dealing with [12, 14] at loop 2
dealing with [14, 14] at loop 3
neighbors of b [[13, 15], [13, 13]]
cost from [13, 15] to [13, 14] is 1
[14, 11] (14, 11)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 11] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 11] 14 11
the point we are trying to find neighbors for  [14, 11]
neighboring cells are:  [[14, 12], [14, 10], [13, 11], [15, 11]]
dealing with [14, 12] at loop 0
dealing with [14, 10] at loop 1
dealing with [13, 11] at loop 2
[13, 11] is NOT a wall
dealing with [15, 11] at loop 3
[15, 11] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[14, 11][13, 11]
the points are:  [14, 11] [13, 11]
type for point in is_valid_node  <class 'list'>
[14, 11] 14 11
type for point in is_valid_node  <class 'list'>
[13, 11] 13 11
the point we are trying to find neighbors for  [13, 11]
neighboring cells are:  [[13, 12], [13, 10], [12, 11], [14, 11]]
dealing with [13, 12] at loop 0
[13, 12] is NOT a wall
dealing with [13, 10] at loop 1
dealing with [12, 11] at loop 2
dealing with [14, 11] at loop 3
[14, 11] is NOT a wall
neighbors of b [[13, 12], [14, 11]]
cost from [14, 11] to [13, 11] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[14, 11][15, 11]
the points are:  [14, 11] [15, 11]
type for point in is_valid_node  <class 'list'>
[14, 11] 14 11
type for point in is_valid_node  <class 'list'>
[15, 11] 15 11
the point we are trying to find neighbors for  [15, 11]
neighboring cells are:  [[15, 12], [15, 10], [14, 11], [16, 11]]
dealing with [15, 12] at loop 0
dealing with [15, 10] at loop 1
dealing with [14, 11] at loop 2
[14, 11] is NOT a wall
dealing with [16, 11] at loop 3
[16, 11] is NOT a wall
neighbors of b [[14, 11], [16, 11]]
cost from [14, 11] to [15, 11] is 1
<class 'int'>
5 1 6
5 1 6
6 <class 'int'>
5 1 6
[15, 13] (15, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 13] 15 13
the point we are trying to find neighbors for  [15, 13]
neighboring cells are:  [[15, 14], [15, 12], [14, 13], [16, 13]]
dealing with [15, 14] at loop 0
[15, 14] is NOT a wall
dealing with [15, 12] at loop 1
dealing with [14, 13] at loop 2
[14, 13] is NOT a wall
dealing with [16, 13] at loop 3
[16, 13] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
26[15, 13][15, 14]
the points are:  [15, 13] [15, 14]
type for point in is_valid_node  <class 'list'>
[15, 13] 15 13
type for point in is_valid_node  <class 'list'>
[15, 14] 15 14
the point we are trying to find neighbors for  [15, 14]
neighboring cells are:  [[15, 15], [15, 13], [14, 14], [16, 14]]
dealing with [15, 15] at loop 0
[15, 15] is NOT a wall
dealing with [15, 13] at loop 1
[15, 13] is NOT a wall
dealing with [14, 14] at loop 2
dealing with [16, 14] at loop 3
neighbors of b [[15, 15], [15, 13]]
cost from [15, 13] to [15, 14] is 1
<class 'int'>
5 2 7
5 2 7
7 <class 'int'>
5 2 7
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
26[15, 13][14, 13]
the points are:  [15, 13] [14, 13]
type for point in is_valid_node  <class 'list'>
[15, 13] 15 13
type for point in is_valid_node  <class 'list'>
[14, 13] 14 13
the point we are trying to find neighbors for  [14, 13]
neighboring cells are:  [[14, 14], [14, 12], [13, 13], [15, 13]]
dealing with [14, 14] at loop 0
dealing with [14, 12] at loop 1
dealing with [13, 13] at loop 2
[13, 13] is NOT a wall
dealing with [15, 13] at loop 3
[15, 13] is NOT a wall
neighbors of b [[13, 13], [15, 13]]
cost from [15, 13] to [14, 13] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
26[15, 13][16, 13]
the points are:  [15, 13] [16, 13]
type for point in is_valid_node  <class 'list'>
[15, 13] 15 13
type for point in is_valid_node  <class 'list'>
[16, 13] 16 13
the point we are trying to find neighbors for  [16, 13]
neighboring cells are:  [[16, 14], [16, 12], [15, 13], [17, 13]]
dealing with [16, 14] at loop 0
dealing with [16, 12] at loop 1
dealing with [15, 13] at loop 2
[15, 13] is NOT a wall
dealing with [17, 13] at loop 3
[17, 13] is NOT a wall
neighbors of b [[15, 13], [17, 13]]
cost from [15, 13] to [16, 13] is 1
<class 'int'>
6 1 7
6 1 7
7 <class 'int'>
6 1 7
[16, 1] (16, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 1] 16 1
the point we are trying to find neighbors for  [16, 1]
neighboring cells are:  [[16, 2], [16, 0], [15, 1], [17, 1]]
dealing with [16, 2] at loop 0
[16, 2] is NOT a wall
dealing with [16, 0] at loop 1
dealing with [15, 1] at loop 2
[15, 1] is NOT a wall
dealing with [17, 1] at loop 3
[17, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
15[16, 1][16, 2]
the points are:  [16, 1] [16, 2]
type for point in is_valid_node  <class 'list'>
[16, 1] 16 1
type for point in is_valid_node  <class 'list'>
[16, 2] 16 2
the point we are trying to find neighbors for  [16, 2]
neighboring cells are:  [[16, 3], [16, 1], [15, 2], [17, 2]]
dealing with [16, 3] at loop 0
[16, 3] is NOT a wall
dealing with [16, 1] at loop 1
[16, 1] is NOT a wall
dealing with [15, 2] at loop 2
dealing with [17, 2] at loop 3
neighbors of b [[16, 3], [16, 1]]
cost from [16, 1] to [16, 2] is 1
<class 'int'>
6 10 16
6 10 16
16 <class 'int'>
6 10 16
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
15[16, 1][15, 1]
the points are:  [16, 1] [15, 1]
type for point in is_valid_node  <class 'list'>
[16, 1] 16 1
type for point in is_valid_node  <class 'list'>
[15, 1] 15 1
the point we are trying to find neighbors for  [15, 1]
neighboring cells are:  [[15, 2], [15, 0], [14, 1], [16, 1]]
dealing with [15, 2] at loop 0
dealing with [15, 0] at loop 1
dealing with [14, 1] at loop 2
[14, 1] is NOT a wall
dealing with [16, 1] at loop 3
[16, 1] is NOT a wall
neighbors of b [[14, 1], [16, 1]]
cost from [16, 1] to [15, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
15[16, 1][17, 1]
the points are:  [16, 1] [17, 1]
type for point in is_valid_node  <class 'list'>
[16, 1] 16 1
type for point in is_valid_node  <class 'list'>
[17, 1] 17 1
the point we are trying to find neighbors for  [17, 1]
neighboring cells are:  [[17, 2], [17, 0], [16, 1], [18, 1]]
dealing with [17, 2] at loop 0
dealing with [17, 0] at loop 1
dealing with [16, 1] at loop 2
[16, 1] is NOT a wall
dealing with [18, 1] at loop 3
[18, 1] is NOT a wall
neighbors of b [[16, 1], [18, 1]]
cost from [16, 1] to [17, 1] is 1
<class 'int'>
7 11 18
7 11 18
18 <class 'int'>
7 11 18
[16, 2] (16, 2)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 2] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 2] 16 2
the point we are trying to find neighbors for  [16, 2]
neighboring cells are:  [[16, 3], [16, 1], [15, 2], [17, 2]]
dealing with [16, 3] at loop 0
[16, 3] is NOT a wall
dealing with [16, 1] at loop 1
[16, 1] is NOT a wall
dealing with [15, 2] at loop 2
dealing with [17, 2] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
16[16, 2][16, 3]
the points are:  [16, 2] [16, 3]
type for point in is_valid_node  <class 'list'>
[16, 2] 16 2
type for point in is_valid_node  <class 'list'>
[16, 3] 16 3
the point we are trying to find neighbors for  [16, 3]
neighboring cells are:  [[16, 4], [16, 2], [15, 3], [17, 3]]
dealing with [16, 4] at loop 0
dealing with [16, 2] at loop 1
[16, 2] is NOT a wall
dealing with [15, 3] at loop 2
[15, 3] is NOT a wall
dealing with [17, 3] at loop 3
[17, 3] is NOT a wall
neighbors of b [[16, 2], [15, 3], [17, 3]]
cost from [16, 2] to [16, 3] is 1
<class 'int'>
6 9 15
6 9 15
15 <class 'int'>
6 9 15
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
16[16, 2][16, 1]
the points are:  [16, 2] [16, 1]
type for point in is_valid_node  <class 'list'>
[16, 2] 16 2
type for point in is_valid_node  <class 'list'>
[16, 1] 16 1
the point we are trying to find neighbors for  [16, 1]
neighboring cells are:  [[16, 2], [16, 0], [15, 1], [17, 1]]
dealing with [16, 2] at loop 0
[16, 2] is NOT a wall
dealing with [16, 0] at loop 1
dealing with [15, 1] at loop 2
[15, 1] is NOT a wall
dealing with [17, 1] at loop 3
[17, 1] is NOT a wall
neighbors of b [[16, 2], [15, 1], [17, 1]]
cost from [16, 2] to [16, 1] is 1
[16, 3] (16, 3)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 3] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 3] 16 3
the point we are trying to find neighbors for  [16, 3]
neighboring cells are:  [[16, 4], [16, 2], [15, 3], [17, 3]]
dealing with [16, 4] at loop 0
dealing with [16, 2] at loop 1
[16, 2] is NOT a wall
dealing with [15, 3] at loop 2
[15, 3] is NOT a wall
dealing with [17, 3] at loop 3
[17, 3] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
17[16, 3][16, 2]
the points are:  [16, 3] [16, 2]
type for point in is_valid_node  <class 'list'>
[16, 3] 16 3
type for point in is_valid_node  <class 'list'>
[16, 2] 16 2
the point we are trying to find neighbors for  [16, 2]
neighboring cells are:  [[16, 3], [16, 1], [15, 2], [17, 2]]
dealing with [16, 3] at loop 0
[16, 3] is NOT a wall
dealing with [16, 1] at loop 1
[16, 1] is NOT a wall
dealing with [15, 2] at loop 2
dealing with [17, 2] at loop 3
neighbors of b [[16, 3], [16, 1]]
cost from [16, 3] to [16, 2] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
17[16, 3][15, 3]
the points are:  [16, 3] [15, 3]
type for point in is_valid_node  <class 'list'>
[16, 3] 16 3
type for point in is_valid_node  <class 'list'>
[15, 3] 15 3
the point we are trying to find neighbors for  [15, 3]
neighboring cells are:  [[15, 4], [15, 2], [14, 3], [16, 3]]
dealing with [15, 4] at loop 0
[15, 4] is NOT a wall
dealing with [15, 2] at loop 1
dealing with [14, 3] at loop 2
dealing with [16, 3] at loop 3
[16, 3] is NOT a wall
neighbors of b [[15, 4], [16, 3]]
cost from [16, 3] to [15, 3] is 1
<class 'int'>
5 9 14
5 9 14
14 <class 'int'>
5 9 14
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
17[16, 3][17, 3]
the points are:  [16, 3] [17, 3]
type for point in is_valid_node  <class 'list'>
[16, 3] 16 3
type for point in is_valid_node  <class 'list'>
[17, 3] 17 3
the point we are trying to find neighbors for  [17, 3]
neighboring cells are:  [[17, 4], [17, 2], [16, 3], [18, 3]]
dealing with [17, 4] at loop 0
[17, 4] is NOT a wall
dealing with [17, 2] at loop 1
dealing with [16, 3] at loop 2
[16, 3] is NOT a wall
dealing with [18, 3] at loop 3
neighbors of b [[17, 4], [16, 3]]
cost from [16, 3] to [17, 3] is 1
<class 'int'>
7 9 16
7 9 16
16 <class 'int'>
7 9 16
[15, 3] (15, 3)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 3] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 3] 15 3
the point we are trying to find neighbors for  [15, 3]
neighboring cells are:  [[15, 4], [15, 2], [14, 3], [16, 3]]
dealing with [15, 4] at loop 0
[15, 4] is NOT a wall
dealing with [15, 2] at loop 1
dealing with [14, 3] at loop 2
dealing with [16, 3] at loop 3
[16, 3] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
18[15, 3][15, 4]
the points are:  [15, 3] [15, 4]
type for point in is_valid_node  <class 'list'>
[15, 3] 15 3
type for point in is_valid_node  <class 'list'>
[15, 4] 15 4
the point we are trying to find neighbors for  [15, 4]
neighboring cells are:  [[15, 5], [15, 3], [14, 4], [16, 4]]
dealing with [15, 5] at loop 0
[15, 5] is NOT a wall
dealing with [15, 3] at loop 1
[15, 3] is NOT a wall
dealing with [14, 4] at loop 2
dealing with [16, 4] at loop 3
neighbors of b [[15, 5], [15, 3]]
cost from [15, 3] to [15, 4] is 1
<class 'int'>
5 8 13
5 8 13
13 <class 'int'>
5 8 13
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
18[15, 3][16, 3]
the points are:  [15, 3] [16, 3]
type for point in is_valid_node  <class 'list'>
[15, 3] 15 3
type for point in is_valid_node  <class 'list'>
[16, 3] 16 3
the point we are trying to find neighbors for  [16, 3]
neighboring cells are:  [[16, 4], [16, 2], [15, 3], [17, 3]]
dealing with [16, 4] at loop 0
dealing with [16, 2] at loop 1
[16, 2] is NOT a wall
dealing with [15, 3] at loop 2
[15, 3] is NOT a wall
dealing with [17, 3] at loop 3
[17, 3] is NOT a wall
neighbors of b [[16, 2], [15, 3], [17, 3]]
cost from [15, 3] to [16, 3] is 1
[15, 4] (15, 4)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 4] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 4] 15 4
the point we are trying to find neighbors for  [15, 4]
neighboring cells are:  [[15, 5], [15, 3], [14, 4], [16, 4]]
dealing with [15, 5] at loop 0
[15, 5] is NOT a wall
dealing with [15, 3] at loop 1
[15, 3] is NOT a wall
dealing with [14, 4] at loop 2
dealing with [16, 4] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
19[15, 4][15, 5]
the points are:  [15, 4] [15, 5]
type for point in is_valid_node  <class 'list'>
[15, 4] 15 4
type for point in is_valid_node  <class 'list'>
[15, 5] 15 5
the point we are trying to find neighbors for  [15, 5]
neighboring cells are:  [[15, 6], [15, 4], [14, 5], [16, 5]]
dealing with [15, 6] at loop 0
dealing with [15, 4] at loop 1
[15, 4] is NOT a wall
dealing with [14, 5] at loop 2
[14, 5] is NOT a wall
dealing with [16, 5] at loop 3
neighbors of b [[15, 4], [14, 5]]
cost from [15, 4] to [15, 5] is 1
<class 'int'>
5 7 12
5 7 12
12 <class 'int'>
5 7 12
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
19[15, 4][15, 3]
the points are:  [15, 4] [15, 3]
type for point in is_valid_node  <class 'list'>
[15, 4] 15 4
type for point in is_valid_node  <class 'list'>
[15, 3] 15 3
the point we are trying to find neighbors for  [15, 3]
neighboring cells are:  [[15, 4], [15, 2], [14, 3], [16, 3]]
dealing with [15, 4] at loop 0
[15, 4] is NOT a wall
dealing with [15, 2] at loop 1
dealing with [14, 3] at loop 2
dealing with [16, 3] at loop 3
[16, 3] is NOT a wall
neighbors of b [[15, 4], [16, 3]]
cost from [15, 4] to [15, 3] is 1
[15, 5] (15, 5)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 5] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 5] 15 5
the point we are trying to find neighbors for  [15, 5]
neighboring cells are:  [[15, 6], [15, 4], [14, 5], [16, 5]]
dealing with [15, 6] at loop 0
dealing with [15, 4] at loop 1
[15, 4] is NOT a wall
dealing with [14, 5] at loop 2
[14, 5] is NOT a wall
dealing with [16, 5] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
20[15, 5][15, 4]
the points are:  [15, 5] [15, 4]
type for point in is_valid_node  <class 'list'>
[15, 5] 15 5
type for point in is_valid_node  <class 'list'>
[15, 4] 15 4
the point we are trying to find neighbors for  [15, 4]
neighboring cells are:  [[15, 5], [15, 3], [14, 4], [16, 4]]
dealing with [15, 5] at loop 0
[15, 5] is NOT a wall
dealing with [15, 3] at loop 1
[15, 3] is NOT a wall
dealing with [14, 4] at loop 2
dealing with [16, 4] at loop 3
neighbors of b [[15, 5], [15, 3]]
cost from [15, 5] to [15, 4] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
20[15, 5][14, 5]
the points are:  [15, 5] [14, 5]
type for point in is_valid_node  <class 'list'>
[15, 5] 15 5
type for point in is_valid_node  <class 'list'>
[14, 5] 14 5
the point we are trying to find neighbors for  [14, 5]
neighboring cells are:  [[14, 6], [14, 4], [13, 5], [15, 5]]
dealing with [14, 6] at loop 0
dealing with [14, 4] at loop 1
dealing with [13, 5] at loop 2
[13, 5] is NOT a wall
dealing with [15, 5] at loop 3
[15, 5] is NOT a wall
neighbors of b [[13, 5], [15, 5]]
cost from [15, 5] to [14, 5] is 1
<class 'int'>
4 7 11
4 7 11
11 <class 'int'>
4 7 11
[14, 5] (14, 5)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 5] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 5] 14 5
the point we are trying to find neighbors for  [14, 5]
neighboring cells are:  [[14, 6], [14, 4], [13, 5], [15, 5]]
dealing with [14, 6] at loop 0
dealing with [14, 4] at loop 1
dealing with [13, 5] at loop 2
[13, 5] is NOT a wall
dealing with [15, 5] at loop 3
[15, 5] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
21[14, 5][13, 5]
the points are:  [14, 5] [13, 5]
type for point in is_valid_node  <class 'list'>
[14, 5] 14 5
type for point in is_valid_node  <class 'list'>
[13, 5] 13 5
the point we are trying to find neighbors for  [13, 5]
neighboring cells are:  [[13, 6], [13, 4], [12, 5], [14, 5]]
dealing with [13, 6] at loop 0
[13, 6] is NOT a wall
dealing with [13, 4] at loop 1
dealing with [12, 5] at loop 2
dealing with [14, 5] at loop 3
[14, 5] is NOT a wall
neighbors of b [[13, 6], [14, 5]]
cost from [14, 5] to [13, 5] is 1
<class 'int'>
3 7 10
3 7 10
10 <class 'int'>
3 7 10
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
21[14, 5][15, 5]
the points are:  [14, 5] [15, 5]
type for point in is_valid_node  <class 'list'>
[14, 5] 14 5
type for point in is_valid_node  <class 'list'>
[15, 5] 15 5
the point we are trying to find neighbors for  [15, 5]
neighboring cells are:  [[15, 6], [15, 4], [14, 5], [16, 5]]
dealing with [15, 6] at loop 0
dealing with [15, 4] at loop 1
[15, 4] is NOT a wall
dealing with [14, 5] at loop 2
[14, 5] is NOT a wall
dealing with [16, 5] at loop 3
neighbors of b [[15, 4], [14, 5]]
cost from [14, 5] to [15, 5] is 1
[13, 5] (13, 5)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 5] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 5] 13 5
the point we are trying to find neighbors for  [13, 5]
neighboring cells are:  [[13, 6], [13, 4], [12, 5], [14, 5]]
dealing with [13, 6] at loop 0
[13, 6] is NOT a wall
dealing with [13, 4] at loop 1
dealing with [12, 5] at loop 2
dealing with [14, 5] at loop 3
[14, 5] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
22[13, 5][13, 6]
the points are:  [13, 5] [13, 6]
type for point in is_valid_node  <class 'list'>
[13, 5] 13 5
type for point in is_valid_node  <class 'list'>
[13, 6] 13 6
the point we are trying to find neighbors for  [13, 6]
neighboring cells are:  [[13, 7], [13, 5], [12, 6], [14, 6]]
dealing with [13, 7] at loop 0
[13, 7] is NOT a wall
dealing with [13, 5] at loop 1
[13, 5] is NOT a wall
dealing with [12, 6] at loop 2
dealing with [14, 6] at loop 3
neighbors of b [[13, 7], [13, 5]]
cost from [13, 5] to [13, 6] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
22[13, 5][14, 5]
the points are:  [13, 5] [14, 5]
type for point in is_valid_node  <class 'list'>
[13, 5] 13 5
type for point in is_valid_node  <class 'list'>
[14, 5] 14 5
the point we are trying to find neighbors for  [14, 5]
neighboring cells are:  [[14, 6], [14, 4], [13, 5], [15, 5]]
dealing with [14, 6] at loop 0
dealing with [14, 4] at loop 1
dealing with [13, 5] at loop 2
[13, 5] is NOT a wall
dealing with [15, 5] at loop 3
[15, 5] is NOT a wall
neighbors of b [[13, 5], [15, 5]]
cost from [13, 5] to [14, 5] is 1
[11, 18] (11, 18)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 18] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 18] 11 18
the point we are trying to find neighbors for  [11, 18]
neighboring cells are:  [[11, 19], [11, 17], [10, 18], [12, 18]]
dealing with [11, 19] at loop 0
[11, 19] is NOT a wall
dealing with [11, 17] at loop 1
[11, 17] is NOT a wall
dealing with [10, 18] at loop 2
dealing with [12, 18] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[11, 18][11, 19]
the points are:  [11, 18] [11, 19]
type for point in is_valid_node  <class 'list'>
[11, 18] 11 18
type for point in is_valid_node  <class 'list'>
[11, 19] 11 19
the point we are trying to find neighbors for  [11, 19]
neighboring cells are:  [[11, 20], [11, 18], [10, 19], [12, 19]]
dealing with [11, 20] at loop 0
[11, 20] is NOT a wall
dealing with [11, 18] at loop 1
[11, 18] is NOT a wall
dealing with [10, 19] at loop 2
[10, 19] is NOT a wall
dealing with [12, 19] at loop 3
[12, 19] is NOT a wall
neighbors of b [[11, 20], [11, 18], [10, 19], [12, 19]]
cost from [11, 18] to [11, 19] is 1
<class 'int'>
1 7 8
1 7 8
8 <class 'int'>
1 7 8
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[11, 18][11, 17]
the points are:  [11, 18] [11, 17]
type for point in is_valid_node  <class 'list'>
[11, 18] 11 18
type for point in is_valid_node  <class 'list'>
[11, 17] 11 17
the point we are trying to find neighbors for  [11, 17]
neighboring cells are:  [[11, 18], [11, 16], [10, 17], [12, 17]]
dealing with [11, 18] at loop 0
[11, 18] is NOT a wall
dealing with [11, 16] at loop 1
[11, 16] is NOT a wall
dealing with [10, 17] at loop 2
dealing with [12, 17] at loop 3
neighbors of b [[11, 18], [11, 16]]
cost from [11, 18] to [11, 17] is 1
[13, 5] (13, 5)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 5] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 5] 13 5
the point we are trying to find neighbors for  [13, 5]
neighboring cells are:  [[13, 6], [13, 4], [12, 5], [14, 5]]
dealing with [13, 6] at loop 0
[13, 6] is NOT a wall
dealing with [13, 4] at loop 1
dealing with [12, 5] at loop 2
dealing with [14, 5] at loop 3
[14, 5] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
22[13, 5][13, 6]
the points are:  [13, 5] [13, 6]
type for point in is_valid_node  <class 'list'>
[13, 5] 13 5
type for point in is_valid_node  <class 'list'>
[13, 6] 13 6
the point we are trying to find neighbors for  [13, 6]
neighboring cells are:  [[13, 7], [13, 5], [12, 6], [14, 6]]
dealing with [13, 7] at loop 0
[13, 7] is NOT a wall
dealing with [13, 5] at loop 1
[13, 5] is NOT a wall
dealing with [12, 6] at loop 2
dealing with [14, 6] at loop 3
neighbors of b [[13, 7], [13, 5]]
cost from [13, 5] to [13, 6] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
22[13, 5][14, 5]
the points are:  [13, 5] [14, 5]
type for point in is_valid_node  <class 'list'>
[13, 5] 13 5
type for point in is_valid_node  <class 'list'>
[14, 5] 14 5
the point we are trying to find neighbors for  [14, 5]
neighboring cells are:  [[14, 6], [14, 4], [13, 5], [15, 5]]
dealing with [14, 6] at loop 0
dealing with [14, 4] at loop 1
dealing with [13, 5] at loop 2
[13, 5] is NOT a wall
dealing with [15, 5] at loop 3
[15, 5] is NOT a wall
neighbors of b [[13, 5], [15, 5]]
cost from [13, 5] to [14, 5] is 1
[13, 16] (13, 16)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 16] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 16] 13 16
the point we are trying to find neighbors for  [13, 16]
neighboring cells are:  [[13, 17], [13, 15], [12, 16], [14, 16]]
dealing with [13, 17] at loop 0
[13, 17] is NOT a wall
dealing with [13, 15] at loop 1
[13, 15] is NOT a wall
dealing with [12, 16] at loop 2
dealing with [14, 16] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[13, 16][13, 17]
the points are:  [13, 16] [13, 17]
type for point in is_valid_node  <class 'list'>
[13, 16] 13 16
type for point in is_valid_node  <class 'list'>
[13, 17] 13 17
the point we are trying to find neighbors for  [13, 17]
neighboring cells are:  [[13, 18], [13, 16], [12, 17], [14, 17]]
dealing with [13, 18] at loop 0
dealing with [13, 16] at loop 1
[13, 16] is NOT a wall
dealing with [12, 17] at loop 2
dealing with [14, 17] at loop 3
[14, 17] is NOT a wall
neighbors of b [[13, 16], [14, 17]]
cost from [13, 16] to [13, 17] is 1
<class 'int'>
3 5 8
3 5 8
8 <class 'int'>
3 5 8
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[13, 16][13, 15]
the points are:  [13, 16] [13, 15]
type for point in is_valid_node  <class 'list'>
[13, 16] 13 16
type for point in is_valid_node  <class 'list'>
[13, 15] 13 15
the point we are trying to find neighbors for  [13, 15]
neighboring cells are:  [[13, 16], [13, 14], [12, 15], [14, 15]]
dealing with [13, 16] at loop 0
[13, 16] is NOT a wall
dealing with [13, 14] at loop 1
[13, 14] is NOT a wall
dealing with [12, 15] at loop 2
dealing with [14, 15] at loop 3
neighbors of b [[13, 16], [13, 14]]
cost from [13, 16] to [13, 15] is 1
[15, 11] (15, 11)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 11] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 11] 15 11
the point we are trying to find neighbors for  [15, 11]
neighboring cells are:  [[15, 12], [15, 10], [14, 11], [16, 11]]
dealing with [15, 12] at loop 0
dealing with [15, 10] at loop 1
dealing with [14, 11] at loop 2
[14, 11] is NOT a wall
dealing with [16, 11] at loop 3
[16, 11] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[15, 11][14, 11]
the points are:  [15, 11] [14, 11]
type for point in is_valid_node  <class 'list'>
[15, 11] 15 11
type for point in is_valid_node  <class 'list'>
[14, 11] 14 11
the point we are trying to find neighbors for  [14, 11]
neighboring cells are:  [[14, 12], [14, 10], [13, 11], [15, 11]]
dealing with [14, 12] at loop 0
dealing with [14, 10] at loop 1
dealing with [13, 11] at loop 2
[13, 11] is NOT a wall
dealing with [15, 11] at loop 3
[15, 11] is NOT a wall
neighbors of b [[13, 11], [15, 11]]
cost from [15, 11] to [14, 11] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[15, 11][16, 11]
the points are:  [15, 11] [16, 11]
type for point in is_valid_node  <class 'list'>
[15, 11] 15 11
type for point in is_valid_node  <class 'list'>
[16, 11] 16 11
the point we are trying to find neighbors for  [16, 11]
neighboring cells are:  [[16, 12], [16, 10], [15, 11], [17, 11]]
dealing with [16, 12] at loop 0
dealing with [16, 10] at loop 1
dealing with [15, 11] at loop 2
[15, 11] is NOT a wall
dealing with [17, 11] at loop 3
[17, 11] is NOT a wall
neighbors of b [[15, 11], [17, 11]]
cost from [15, 11] to [16, 11] is 1
<class 'int'>
6 1 7
6 1 7
7 <class 'int'>
6 1 7
[15, 14] (15, 14)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 14] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 14] 15 14
the point we are trying to find neighbors for  [15, 14]
neighboring cells are:  [[15, 15], [15, 13], [14, 14], [16, 14]]
dealing with [15, 15] at loop 0
[15, 15] is NOT a wall
dealing with [15, 13] at loop 1
[15, 13] is NOT a wall
dealing with [14, 14] at loop 2
dealing with [16, 14] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[15, 14][15, 15]
the points are:  [15, 14] [15, 15]
type for point in is_valid_node  <class 'list'>
[15, 14] 15 14
type for point in is_valid_node  <class 'list'>
[15, 15] 15 15
the point we are trying to find neighbors for  [15, 15]
neighboring cells are:  [[15, 16], [15, 14], [14, 15], [16, 15]]
dealing with [15, 16] at loop 0
dealing with [15, 14] at loop 1
[15, 14] is NOT a wall
dealing with [14, 15] at loop 2
dealing with [16, 15] at loop 3
[16, 15] is NOT a wall
neighbors of b [[15, 14], [16, 15]]
cost from [15, 14] to [15, 15] is 1
<class 'int'>
5 3 8
5 3 8
8 <class 'int'>
5 3 8
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[15, 14][15, 13]
the points are:  [15, 14] [15, 13]
type for point in is_valid_node  <class 'list'>
[15, 14] 15 14
type for point in is_valid_node  <class 'list'>
[15, 13] 15 13
the point we are trying to find neighbors for  [15, 13]
neighboring cells are:  [[15, 14], [15, 12], [14, 13], [16, 13]]
dealing with [15, 14] at loop 0
[15, 14] is NOT a wall
dealing with [15, 12] at loop 1
dealing with [14, 13] at loop 2
[14, 13] is NOT a wall
dealing with [16, 13] at loop 3
[16, 13] is NOT a wall
neighbors of b [[15, 14], [14, 13], [16, 13]]
cost from [15, 14] to [15, 13] is 1
[16, 13] (16, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 13] 16 13
the point we are trying to find neighbors for  [16, 13]
neighboring cells are:  [[16, 14], [16, 12], [15, 13], [17, 13]]
dealing with [16, 14] at loop 0
dealing with [16, 12] at loop 1
dealing with [15, 13] at loop 2
[15, 13] is NOT a wall
dealing with [17, 13] at loop 3
[17, 13] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[16, 13][15, 13]
the points are:  [16, 13] [15, 13]
type for point in is_valid_node  <class 'list'>
[16, 13] 16 13
type for point in is_valid_node  <class 'list'>
[15, 13] 15 13
the point we are trying to find neighbors for  [15, 13]
neighboring cells are:  [[15, 14], [15, 12], [14, 13], [16, 13]]
dealing with [15, 14] at loop 0
[15, 14] is NOT a wall
dealing with [15, 12] at loop 1
dealing with [14, 13] at loop 2
[14, 13] is NOT a wall
dealing with [16, 13] at loop 3
[16, 13] is NOT a wall
neighbors of b [[15, 14], [14, 13], [16, 13]]
cost from [16, 13] to [15, 13] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[16, 13][17, 13]
the points are:  [16, 13] [17, 13]
type for point in is_valid_node  <class 'list'>
[16, 13] 16 13
type for point in is_valid_node  <class 'list'>
[17, 13] 17 13
the point we are trying to find neighbors for  [17, 13]
neighboring cells are:  [[17, 14], [17, 12], [16, 13], [18, 13]]
dealing with [17, 14] at loop 0
dealing with [17, 12] at loop 1
dealing with [16, 13] at loop 2
[16, 13] is NOT a wall
dealing with [18, 13] at loop 3
[18, 13] is NOT a wall
neighbors of b [[16, 13], [18, 13]]
cost from [16, 13] to [17, 13] is 1
<class 'int'>
7 1 8
7 1 8
8 <class 'int'>
7 1 8
[17, 1] (17, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 1] 17 1
the point we are trying to find neighbors for  [17, 1]
neighboring cells are:  [[17, 2], [17, 0], [16, 1], [18, 1]]
dealing with [17, 2] at loop 0
dealing with [17, 0] at loop 1
dealing with [16, 1] at loop 2
[16, 1] is NOT a wall
dealing with [18, 1] at loop 3
[18, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
16[17, 1][16, 1]
the points are:  [17, 1] [16, 1]
type for point in is_valid_node  <class 'list'>
[17, 1] 17 1
type for point in is_valid_node  <class 'list'>
[16, 1] 16 1
the point we are trying to find neighbors for  [16, 1]
neighboring cells are:  [[16, 2], [16, 0], [15, 1], [17, 1]]
dealing with [16, 2] at loop 0
[16, 2] is NOT a wall
dealing with [16, 0] at loop 1
dealing with [15, 1] at loop 2
[15, 1] is NOT a wall
dealing with [17, 1] at loop 3
[17, 1] is NOT a wall
neighbors of b [[16, 2], [15, 1], [17, 1]]
cost from [17, 1] to [16, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
16[17, 1][18, 1]
the points are:  [17, 1] [18, 1]
type for point in is_valid_node  <class 'list'>
[17, 1] 17 1
type for point in is_valid_node  <class 'list'>
[18, 1] 18 1
the point we are trying to find neighbors for  [18, 1]
neighboring cells are:  [[18, 2], [18, 0], [17, 1], [19, 1]]
dealing with [18, 2] at loop 0
dealing with [18, 0] at loop 1
dealing with [17, 1] at loop 2
[17, 1] is NOT a wall
dealing with [19, 1] at loop 3
[19, 1] is NOT a wall
neighbors of b [[17, 1], [19, 1]]
cost from [17, 1] to [18, 1] is 1
<class 'int'>
8 11 19
8 11 19
19 <class 'int'>
8 11 19
[17, 3] (17, 3)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 3] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 3] 17 3
the point we are trying to find neighbors for  [17, 3]
neighboring cells are:  [[17, 4], [17, 2], [16, 3], [18, 3]]
dealing with [17, 4] at loop 0
[17, 4] is NOT a wall
dealing with [17, 2] at loop 1
dealing with [16, 3] at loop 2
[16, 3] is NOT a wall
dealing with [18, 3] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
18[17, 3][17, 4]
the points are:  [17, 3] [17, 4]
type for point in is_valid_node  <class 'list'>
[17, 3] 17 3
type for point in is_valid_node  <class 'list'>
[17, 4] 17 4
the point we are trying to find neighbors for  [17, 4]
neighboring cells are:  [[17, 5], [17, 3], [16, 4], [18, 4]]
dealing with [17, 5] at loop 0
[17, 5] is NOT a wall
dealing with [17, 3] at loop 1
[17, 3] is NOT a wall
dealing with [16, 4] at loop 2
dealing with [18, 4] at loop 3
neighbors of b [[17, 5], [17, 3]]
cost from [17, 3] to [17, 4] is 1
<class 'int'>
7 8 15
7 8 15
15 <class 'int'>
7 8 15
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
18[17, 3][16, 3]
the points are:  [17, 3] [16, 3]
type for point in is_valid_node  <class 'list'>
[17, 3] 17 3
type for point in is_valid_node  <class 'list'>
[16, 3] 16 3
the point we are trying to find neighbors for  [16, 3]
neighboring cells are:  [[16, 4], [16, 2], [15, 3], [17, 3]]
dealing with [16, 4] at loop 0
dealing with [16, 2] at loop 1
[16, 2] is NOT a wall
dealing with [15, 3] at loop 2
[15, 3] is NOT a wall
dealing with [17, 3] at loop 3
[17, 3] is NOT a wall
neighbors of b [[16, 2], [15, 3], [17, 3]]
cost from [17, 3] to [16, 3] is 1
[17, 4] (17, 4)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 4] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 4] 17 4
the point we are trying to find neighbors for  [17, 4]
neighboring cells are:  [[17, 5], [17, 3], [16, 4], [18, 4]]
dealing with [17, 5] at loop 0
[17, 5] is NOT a wall
dealing with [17, 3] at loop 1
[17, 3] is NOT a wall
dealing with [16, 4] at loop 2
dealing with [18, 4] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
19[17, 4][17, 5]
the points are:  [17, 4] [17, 5]
type for point in is_valid_node  <class 'list'>
[17, 4] 17 4
type for point in is_valid_node  <class 'list'>
[17, 5] 17 5
the point we are trying to find neighbors for  [17, 5]
neighboring cells are:  [[17, 6], [17, 4], [16, 5], [18, 5]]
dealing with [17, 6] at loop 0
dealing with [17, 4] at loop 1
[17, 4] is NOT a wall
dealing with [16, 5] at loop 2
dealing with [18, 5] at loop 3
[18, 5] is NOT a wall
neighbors of b [[17, 4], [18, 5]]
cost from [17, 4] to [17, 5] is 1
<class 'int'>
7 7 14
7 7 14
14 <class 'int'>
7 7 14
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
19[17, 4][17, 3]
the points are:  [17, 4] [17, 3]
type for point in is_valid_node  <class 'list'>
[17, 4] 17 4
type for point in is_valid_node  <class 'list'>
[17, 3] 17 3
the point we are trying to find neighbors for  [17, 3]
neighboring cells are:  [[17, 4], [17, 2], [16, 3], [18, 3]]
dealing with [17, 4] at loop 0
[17, 4] is NOT a wall
dealing with [17, 2] at loop 1
dealing with [16, 3] at loop 2
[16, 3] is NOT a wall
dealing with [18, 3] at loop 3
neighbors of b [[17, 4], [16, 3]]
cost from [17, 4] to [17, 3] is 1
[17, 5] (17, 5)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 5] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 5] 17 5
the point we are trying to find neighbors for  [17, 5]
neighboring cells are:  [[17, 6], [17, 4], [16, 5], [18, 5]]
dealing with [17, 6] at loop 0
dealing with [17, 4] at loop 1
[17, 4] is NOT a wall
dealing with [16, 5] at loop 2
dealing with [18, 5] at loop 3
[18, 5] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
20[17, 5][17, 4]
the points are:  [17, 5] [17, 4]
type for point in is_valid_node  <class 'list'>
[17, 5] 17 5
type for point in is_valid_node  <class 'list'>
[17, 4] 17 4
the point we are trying to find neighbors for  [17, 4]
neighboring cells are:  [[17, 5], [17, 3], [16, 4], [18, 4]]
dealing with [17, 5] at loop 0
[17, 5] is NOT a wall
dealing with [17, 3] at loop 1
[17, 3] is NOT a wall
dealing with [16, 4] at loop 2
dealing with [18, 4] at loop 3
neighbors of b [[17, 5], [17, 3]]
cost from [17, 5] to [17, 4] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
20[17, 5][18, 5]
the points are:  [17, 5] [18, 5]
type for point in is_valid_node  <class 'list'>
[17, 5] 17 5
type for point in is_valid_node  <class 'list'>
[18, 5] 18 5
the point we are trying to find neighbors for  [18, 5]
neighboring cells are:  [[18, 6], [18, 4], [17, 5], [19, 5]]
dealing with [18, 6] at loop 0
dealing with [18, 4] at loop 1
dealing with [17, 5] at loop 2
[17, 5] is NOT a wall
dealing with [19, 5] at loop 3
[19, 5] is NOT a wall
neighbors of b [[17, 5], [19, 5]]
cost from [17, 5] to [18, 5] is 1
<class 'int'>
8 7 15
8 7 15
15 <class 'int'>
8 7 15
[11, 19] (11, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 19] 11 19
the point we are trying to find neighbors for  [11, 19]
neighboring cells are:  [[11, 20], [11, 18], [10, 19], [12, 19]]
dealing with [11, 20] at loop 0
[11, 20] is NOT a wall
dealing with [11, 18] at loop 1
[11, 18] is NOT a wall
dealing with [10, 19] at loop 2
[10, 19] is NOT a wall
dealing with [12, 19] at loop 3
[12, 19] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[11, 19][11, 20]
the points are:  [11, 19] [11, 20]
type for point in is_valid_node  <class 'list'>
[11, 19] 11 19
type for point in is_valid_node  <class 'list'>
[11, 20] 11 20
the point we are trying to find neighbors for  [11, 20]
neighboring cells are:  [[11, 21], [11, 19], [10, 20], [12, 20]]
dealing with [11, 21] at loop 0
[11, 21] is NOT a wall
dealing with [11, 19] at loop 1
[11, 19] is NOT a wall
dealing with [10, 20] at loop 2
dealing with [12, 20] at loop 3
neighbors of b [[11, 21], [11, 19]]
cost from [11, 19] to [11, 20] is 1
<class 'int'>
1 8 9
1 8 9
9 <class 'int'>
1 8 9
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[11, 19][11, 18]
the points are:  [11, 19] [11, 18]
type for point in is_valid_node  <class 'list'>
[11, 19] 11 19
type for point in is_valid_node  <class 'list'>
[11, 18] 11 18
the point we are trying to find neighbors for  [11, 18]
neighboring cells are:  [[11, 19], [11, 17], [10, 18], [12, 18]]
dealing with [11, 19] at loop 0
[11, 19] is NOT a wall
dealing with [11, 17] at loop 1
[11, 17] is NOT a wall
dealing with [10, 18] at loop 2
dealing with [12, 18] at loop 3
neighbors of b [[11, 19], [11, 17]]
cost from [11, 19] to [11, 18] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[11, 19][10, 19]
the points are:  [11, 19] [10, 19]
type for point in is_valid_node  <class 'list'>
[11, 19] 11 19
type for point in is_valid_node  <class 'list'>
[10, 19] 10 19
the point we are trying to find neighbors for  [10, 19]
neighboring cells are:  [[10, 20], [10, 18], [9, 19], [11, 19]]
dealing with [10, 20] at loop 0
dealing with [10, 18] at loop 1
dealing with [9, 19] at loop 2
[9, 19] is NOT a wall
dealing with [11, 19] at loop 3
[11, 19] is NOT a wall
neighbors of b [[9, 19], [11, 19]]
cost from [11, 19] to [10, 19] is 1
<class 'int'>
0 7 7
0 7 7
7 <class 'int'>
0 7 7
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[11, 19][12, 19]
the points are:  [11, 19] [12, 19]
type for point in is_valid_node  <class 'list'>
[11, 19] 11 19
type for point in is_valid_node  <class 'list'>
[12, 19] 12 19
the point we are trying to find neighbors for  [12, 19]
neighboring cells are:  [[12, 20], [12, 18], [11, 19], [13, 19]]
dealing with [12, 20] at loop 0
dealing with [12, 18] at loop 1
dealing with [11, 19] at loop 2
[11, 19] is NOT a wall
dealing with [13, 19] at loop 3
[13, 19] is NOT a wall
neighbors of b [[11, 19], [13, 19]]
cost from [11, 19] to [12, 19] is 1
<class 'int'>
2 7 9
2 7 9
9 <class 'int'>
2 7 9
[10, 19] (10, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[10, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[10, 19] 10 19
the point we are trying to find neighbors for  [10, 19]
neighboring cells are:  [[10, 20], [10, 18], [9, 19], [11, 19]]
dealing with [10, 20] at loop 0
dealing with [10, 18] at loop 1
dealing with [9, 19] at loop 2
[9, 19] is NOT a wall
dealing with [11, 19] at loop 3
[11, 19] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[10, 19][9, 19]
the points are:  [10, 19] [9, 19]
type for point in is_valid_node  <class 'list'>
[10, 19] 10 19
type for point in is_valid_node  <class 'list'>
[9, 19] 9 19
the point we are trying to find neighbors for  [9, 19]
neighboring cells are:  [[9, 20], [9, 18], [8, 19], [10, 19]]
dealing with [9, 20] at loop 0
[9, 20] is NOT a wall
dealing with [9, 18] at loop 1
[9, 18] is NOT a wall
dealing with [8, 19] at loop 2
dealing with [10, 19] at loop 3
[10, 19] is NOT a wall
neighbors of b [[9, 20], [9, 18], [10, 19]]
cost from [10, 19] to [9, 19] is 1
<class 'int'>
1 7 8
1 7 8
8 <class 'int'>
1 7 8
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[10, 19][11, 19]
the points are:  [10, 19] [11, 19]
type for point in is_valid_node  <class 'list'>
[10, 19] 10 19
type for point in is_valid_node  <class 'list'>
[11, 19] 11 19
the point we are trying to find neighbors for  [11, 19]
neighboring cells are:  [[11, 20], [11, 18], [10, 19], [12, 19]]
dealing with [11, 20] at loop 0
[11, 20] is NOT a wall
dealing with [11, 18] at loop 1
[11, 18] is NOT a wall
dealing with [10, 19] at loop 2
[10, 19] is NOT a wall
dealing with [12, 19] at loop 3
[12, 19] is NOT a wall
neighbors of b [[11, 20], [11, 18], [10, 19], [12, 19]]
cost from [10, 19] to [11, 19] is 1
[13, 17] (13, 17)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 17] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 17] 13 17
the point we are trying to find neighbors for  [13, 17]
neighboring cells are:  [[13, 18], [13, 16], [12, 17], [14, 17]]
dealing with [13, 18] at loop 0
dealing with [13, 16] at loop 1
[13, 16] is NOT a wall
dealing with [12, 17] at loop 2
dealing with [14, 17] at loop 3
[14, 17] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[13, 17][13, 16]
the points are:  [13, 17] [13, 16]
type for point in is_valid_node  <class 'list'>
[13, 17] 13 17
type for point in is_valid_node  <class 'list'>
[13, 16] 13 16
the point we are trying to find neighbors for  [13, 16]
neighboring cells are:  [[13, 17], [13, 15], [12, 16], [14, 16]]
dealing with [13, 17] at loop 0
[13, 17] is NOT a wall
dealing with [13, 15] at loop 1
[13, 15] is NOT a wall
dealing with [12, 16] at loop 2
dealing with [14, 16] at loop 3
neighbors of b [[13, 17], [13, 15]]
cost from [13, 17] to [13, 16] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[13, 17][14, 17]
the points are:  [13, 17] [14, 17]
type for point in is_valid_node  <class 'list'>
[13, 17] 13 17
type for point in is_valid_node  <class 'list'>
[14, 17] 14 17
the point we are trying to find neighbors for  [14, 17]
neighboring cells are:  [[14, 18], [14, 16], [13, 17], [15, 17]]
dealing with [14, 18] at loop 0
dealing with [14, 16] at loop 1
dealing with [13, 17] at loop 2
[13, 17] is NOT a wall
dealing with [15, 17] at loop 3
[15, 17] is NOT a wall
neighbors of b [[13, 17], [15, 17]]
cost from [13, 17] to [14, 17] is 1
<class 'int'>
4 5 9
4 5 9
9 <class 'int'>
4 5 9
[15, 15] (15, 15)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 15] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 15] 15 15
the point we are trying to find neighbors for  [15, 15]
neighboring cells are:  [[15, 16], [15, 14], [14, 15], [16, 15]]
dealing with [15, 16] at loop 0
dealing with [15, 14] at loop 1
[15, 14] is NOT a wall
dealing with [14, 15] at loop 2
dealing with [16, 15] at loop 3
[16, 15] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[15, 15][15, 14]
the points are:  [15, 15] [15, 14]
type for point in is_valid_node  <class 'list'>
[15, 15] 15 15
type for point in is_valid_node  <class 'list'>
[15, 14] 15 14
the point we are trying to find neighbors for  [15, 14]
neighboring cells are:  [[15, 15], [15, 13], [14, 14], [16, 14]]
dealing with [15, 15] at loop 0
[15, 15] is NOT a wall
dealing with [15, 13] at loop 1
[15, 13] is NOT a wall
dealing with [14, 14] at loop 2
dealing with [16, 14] at loop 3
neighbors of b [[15, 15], [15, 13]]
cost from [15, 15] to [15, 14] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[15, 15][16, 15]
the points are:  [15, 15] [16, 15]
type for point in is_valid_node  <class 'list'>
[15, 15] 15 15
type for point in is_valid_node  <class 'list'>
[16, 15] 16 15
the point we are trying to find neighbors for  [16, 15]
neighboring cells are:  [[16, 16], [16, 14], [15, 15], [17, 15]]
dealing with [16, 16] at loop 0
dealing with [16, 14] at loop 1
dealing with [15, 15] at loop 2
[15, 15] is NOT a wall
dealing with [17, 15] at loop 3
[17, 15] is NOT a wall
neighbors of b [[15, 15], [17, 15]]
cost from [15, 15] to [16, 15] is 1
<class 'int'>
6 3 9
6 3 9
9 <class 'int'>
6 3 9
[16, 11] (16, 11)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 11] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 11] 16 11
the point we are trying to find neighbors for  [16, 11]
neighboring cells are:  [[16, 12], [16, 10], [15, 11], [17, 11]]
dealing with [16, 12] at loop 0
dealing with [16, 10] at loop 1
dealing with [15, 11] at loop 2
[15, 11] is NOT a wall
dealing with [17, 11] at loop 3
[17, 11] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[16, 11][15, 11]
the points are:  [16, 11] [15, 11]
type for point in is_valid_node  <class 'list'>
[16, 11] 16 11
type for point in is_valid_node  <class 'list'>
[15, 11] 15 11
the point we are trying to find neighbors for  [15, 11]
neighboring cells are:  [[15, 12], [15, 10], [14, 11], [16, 11]]
dealing with [15, 12] at loop 0
dealing with [15, 10] at loop 1
dealing with [14, 11] at loop 2
[14, 11] is NOT a wall
dealing with [16, 11] at loop 3
[16, 11] is NOT a wall
neighbors of b [[14, 11], [16, 11]]
cost from [16, 11] to [15, 11] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[16, 11][17, 11]
the points are:  [16, 11] [17, 11]
type for point in is_valid_node  <class 'list'>
[16, 11] 16 11
type for point in is_valid_node  <class 'list'>
[17, 11] 17 11
the point we are trying to find neighbors for  [17, 11]
neighboring cells are:  [[17, 12], [17, 10], [16, 11], [18, 11]]
dealing with [17, 12] at loop 0
dealing with [17, 10] at loop 1
[17, 10] is NOT a wall
dealing with [16, 11] at loop 2
[16, 11] is NOT a wall
dealing with [18, 11] at loop 3
neighbors of b [[17, 10], [16, 11]]
cost from [16, 11] to [17, 11] is 1
<class 'int'>
7 1 8
7 1 8
8 <class 'int'>
7 1 8
[17, 13] (17, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 13] 17 13
the point we are trying to find neighbors for  [17, 13]
neighboring cells are:  [[17, 14], [17, 12], [16, 13], [18, 13]]
dealing with [17, 14] at loop 0
dealing with [17, 12] at loop 1
dealing with [16, 13] at loop 2
[16, 13] is NOT a wall
dealing with [18, 13] at loop 3
[18, 13] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[17, 13][16, 13]
the points are:  [17, 13] [16, 13]
type for point in is_valid_node  <class 'list'>
[17, 13] 17 13
type for point in is_valid_node  <class 'list'>
[16, 13] 16 13
the point we are trying to find neighbors for  [16, 13]
neighboring cells are:  [[16, 14], [16, 12], [15, 13], [17, 13]]
dealing with [16, 14] at loop 0
dealing with [16, 12] at loop 1
dealing with [15, 13] at loop 2
[15, 13] is NOT a wall
dealing with [17, 13] at loop 3
[17, 13] is NOT a wall
neighbors of b [[15, 13], [17, 13]]
cost from [17, 13] to [16, 13] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[17, 13][18, 13]
the points are:  [17, 13] [18, 13]
type for point in is_valid_node  <class 'list'>
[17, 13] 17 13
type for point in is_valid_node  <class 'list'>
[18, 13] 18 13
the point we are trying to find neighbors for  [18, 13]
neighboring cells are:  [[18, 14], [18, 12], [17, 13], [19, 13]]
dealing with [18, 14] at loop 0
dealing with [18, 12] at loop 1
dealing with [17, 13] at loop 2
[17, 13] is NOT a wall
dealing with [19, 13] at loop 3
[19, 13] is NOT a wall
neighbors of b [[17, 13], [19, 13]]
cost from [17, 13] to [18, 13] is 1
<class 'int'>
8 1 9
8 1 9
9 <class 'int'>
8 1 9
[18, 1] (18, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 1] 18 1
the point we are trying to find neighbors for  [18, 1]
neighboring cells are:  [[18, 2], [18, 0], [17, 1], [19, 1]]
dealing with [18, 2] at loop 0
dealing with [18, 0] at loop 1
dealing with [17, 1] at loop 2
[17, 1] is NOT a wall
dealing with [19, 1] at loop 3
[19, 1] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
17[18, 1][17, 1]
the points are:  [18, 1] [17, 1]
type for point in is_valid_node  <class 'list'>
[18, 1] 18 1
type for point in is_valid_node  <class 'list'>
[17, 1] 17 1
the point we are trying to find neighbors for  [17, 1]
neighboring cells are:  [[17, 2], [17, 0], [16, 1], [18, 1]]
dealing with [17, 2] at loop 0
dealing with [17, 0] at loop 1
dealing with [16, 1] at loop 2
[16, 1] is NOT a wall
dealing with [18, 1] at loop 3
[18, 1] is NOT a wall
neighbors of b [[16, 1], [18, 1]]
cost from [18, 1] to [17, 1] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
17[18, 1][19, 1]
the points are:  [18, 1] [19, 1]
type for point in is_valid_node  <class 'list'>
[18, 1] 18 1
type for point in is_valid_node  <class 'list'>
[19, 1] 19 1
the point we are trying to find neighbors for  [19, 1]
neighboring cells are:  [[19, 2], [19, 0], [18, 1], [20, 1]]
dealing with [19, 2] at loop 0
[19, 2] is NOT a wall
dealing with [19, 0] at loop 1
dealing with [18, 1] at loop 2
[18, 1] is NOT a wall
dealing with [20, 1] at loop 3
neighbors of b [[19, 2], [18, 1]]
cost from [18, 1] to [19, 1] is 1
<class 'int'>
9 11 20
9 11 20
20 <class 'int'>
9 11 20
[18, 5] (18, 5)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 5] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 5] 18 5
the point we are trying to find neighbors for  [18, 5]
neighboring cells are:  [[18, 6], [18, 4], [17, 5], [19, 5]]
dealing with [18, 6] at loop 0
dealing with [18, 4] at loop 1
dealing with [17, 5] at loop 2
[17, 5] is NOT a wall
dealing with [19, 5] at loop 3
[19, 5] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
21[18, 5][17, 5]
the points are:  [18, 5] [17, 5]
type for point in is_valid_node  <class 'list'>
[18, 5] 18 5
type for point in is_valid_node  <class 'list'>
[17, 5] 17 5
the point we are trying to find neighbors for  [17, 5]
neighboring cells are:  [[17, 6], [17, 4], [16, 5], [18, 5]]
dealing with [17, 6] at loop 0
dealing with [17, 4] at loop 1
[17, 4] is NOT a wall
dealing with [16, 5] at loop 2
dealing with [18, 5] at loop 3
[18, 5] is NOT a wall
neighbors of b [[17, 4], [18, 5]]
cost from [18, 5] to [17, 5] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
21[18, 5][19, 5]
the points are:  [18, 5] [19, 5]
type for point in is_valid_node  <class 'list'>
[18, 5] 18 5
type for point in is_valid_node  <class 'list'>
[19, 5] 19 5
the point we are trying to find neighbors for  [19, 5]
neighboring cells are:  [[19, 6], [19, 4], [18, 5], [20, 5]]
dealing with [19, 6] at loop 0
[19, 6] is NOT a wall
dealing with [19, 4] at loop 1
dealing with [18, 5] at loop 2
[18, 5] is NOT a wall
dealing with [20, 5] at loop 3
neighbors of b [[19, 6], [18, 5]]
cost from [18, 5] to [19, 5] is 1
<class 'int'>
9 7 16
9 7 16
16 <class 'int'>
9 7 16
[9, 19] (9, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 19] 9 19
the point we are trying to find neighbors for  [9, 19]
neighboring cells are:  [[9, 20], [9, 18], [8, 19], [10, 19]]
dealing with [9, 20] at loop 0
[9, 20] is NOT a wall
dealing with [9, 18] at loop 1
[9, 18] is NOT a wall
dealing with [8, 19] at loop 2
dealing with [10, 19] at loop 3
[10, 19] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[9, 19][9, 20]
the points are:  [9, 19] [9, 20]
type for point in is_valid_node  <class 'list'>
[9, 19] 9 19
type for point in is_valid_node  <class 'list'>
[9, 20] 9 20
the point we are trying to find neighbors for  [9, 20]
neighboring cells are:  [[9, 21], [9, 19], [8, 20], [10, 20]]
dealing with [9, 21] at loop 0
[9, 21] is NOT a wall
dealing with [9, 19] at loop 1
[9, 19] is NOT a wall
dealing with [8, 20] at loop 2
dealing with [10, 20] at loop 3
neighbors of b [[9, 21], [9, 19]]
cost from [9, 19] to [9, 20] is 1
<class 'int'>
1 8 9
1 8 9
9 <class 'int'>
1 8 9
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[9, 19][9, 18]
the points are:  [9, 19] [9, 18]
type for point in is_valid_node  <class 'list'>
[9, 19] 9 19
type for point in is_valid_node  <class 'list'>
[9, 18] 9 18
the point we are trying to find neighbors for  [9, 18]
neighboring cells are:  [[9, 19], [9, 17], [8, 18], [10, 18]]
dealing with [9, 19] at loop 0
[9, 19] is NOT a wall
dealing with [9, 17] at loop 1
[9, 17] is NOT a wall
dealing with [8, 18] at loop 2
dealing with [10, 18] at loop 3
neighbors of b [[9, 19], [9, 17]]
cost from [9, 19] to [9, 18] is 1
<class 'int'>
1 6 7
1 6 7
7 <class 'int'>
1 6 7
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[9, 19][10, 19]
the points are:  [9, 19] [10, 19]
type for point in is_valid_node  <class 'list'>
[9, 19] 9 19
type for point in is_valid_node  <class 'list'>
[10, 19] 10 19
the point we are trying to find neighbors for  [10, 19]
neighboring cells are:  [[10, 20], [10, 18], [9, 19], [11, 19]]
dealing with [10, 20] at loop 0
dealing with [10, 18] at loop 1
dealing with [9, 19] at loop 2
[9, 19] is NOT a wall
dealing with [11, 19] at loop 3
[11, 19] is NOT a wall
neighbors of b [[9, 19], [11, 19]]
cost from [9, 19] to [10, 19] is 1
[9, 18] (9, 18)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 18] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 18] 9 18
the point we are trying to find neighbors for  [9, 18]
neighboring cells are:  [[9, 19], [9, 17], [8, 18], [10, 18]]
dealing with [9, 19] at loop 0
[9, 19] is NOT a wall
dealing with [9, 17] at loop 1
[9, 17] is NOT a wall
dealing with [8, 18] at loop 2
dealing with [10, 18] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[9, 18][9, 19]
the points are:  [9, 18] [9, 19]
type for point in is_valid_node  <class 'list'>
[9, 18] 9 18
type for point in is_valid_node  <class 'list'>
[9, 19] 9 19
the point we are trying to find neighbors for  [9, 19]
neighboring cells are:  [[9, 20], [9, 18], [8, 19], [10, 19]]
dealing with [9, 20] at loop 0
[9, 20] is NOT a wall
dealing with [9, 18] at loop 1
[9, 18] is NOT a wall
dealing with [8, 19] at loop 2
dealing with [10, 19] at loop 3
[10, 19] is NOT a wall
neighbors of b [[9, 20], [9, 18], [10, 19]]
cost from [9, 18] to [9, 19] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[9, 18][9, 17]
the points are:  [9, 18] [9, 17]
type for point in is_valid_node  <class 'list'>
[9, 18] 9 18
type for point in is_valid_node  <class 'list'>
[9, 17] 9 17
the point we are trying to find neighbors for  [9, 17]
neighboring cells are:  [[9, 18], [9, 16], [8, 17], [10, 17]]
dealing with [9, 18] at loop 0
[9, 18] is NOT a wall
dealing with [9, 16] at loop 1
[9, 16] is NOT a wall
dealing with [8, 17] at loop 2
dealing with [10, 17] at loop 3
neighbors of b [[9, 18], [9, 16]]
cost from [9, 18] to [9, 17] is 1
<class 'int'>
1 5 6
1 5 6
6 <class 'int'>
1 5 6
[9, 17] (9, 17)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 17] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 17] 9 17
the point we are trying to find neighbors for  [9, 17]
neighboring cells are:  [[9, 18], [9, 16], [8, 17], [10, 17]]
dealing with [9, 18] at loop 0
[9, 18] is NOT a wall
dealing with [9, 16] at loop 1
[9, 16] is NOT a wall
dealing with [8, 17] at loop 2
dealing with [10, 17] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[9, 17][9, 18]
the points are:  [9, 17] [9, 18]
type for point in is_valid_node  <class 'list'>
[9, 17] 9 17
type for point in is_valid_node  <class 'list'>
[9, 18] 9 18
the point we are trying to find neighbors for  [9, 18]
neighboring cells are:  [[9, 19], [9, 17], [8, 18], [10, 18]]
dealing with [9, 19] at loop 0
[9, 19] is NOT a wall
dealing with [9, 17] at loop 1
[9, 17] is NOT a wall
dealing with [8, 18] at loop 2
dealing with [10, 18] at loop 3
neighbors of b [[9, 19], [9, 17]]
cost from [9, 17] to [9, 18] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[9, 17][9, 16]
the points are:  [9, 17] [9, 16]
type for point in is_valid_node  <class 'list'>
[9, 17] 9 17
type for point in is_valid_node  <class 'list'>
[9, 16] 9 16
the point we are trying to find neighbors for  [9, 16]
neighboring cells are:  [[9, 17], [9, 15], [8, 16], [10, 16]]
dealing with [9, 17] at loop 0
[9, 17] is NOT a wall
dealing with [9, 15] at loop 1
[9, 15] is NOT a wall
dealing with [8, 16] at loop 2
dealing with [10, 16] at loop 3
neighbors of b [[9, 17], [9, 15]]
cost from [9, 17] to [9, 16] is 1
<class 'int'>
1 4 5
1 4 5
5 <class 'int'>
1 4 5
[9, 16] (9, 16)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 16] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 16] 9 16
the point we are trying to find neighbors for  [9, 16]
neighboring cells are:  [[9, 17], [9, 15], [8, 16], [10, 16]]
dealing with [9, 17] at loop 0
[9, 17] is NOT a wall
dealing with [9, 15] at loop 1
[9, 15] is NOT a wall
dealing with [8, 16] at loop 2
dealing with [10, 16] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
33[9, 16][9, 17]
the points are:  [9, 16] [9, 17]
type for point in is_valid_node  <class 'list'>
[9, 16] 9 16
type for point in is_valid_node  <class 'list'>
[9, 17] 9 17
the point we are trying to find neighbors for  [9, 17]
neighboring cells are:  [[9, 18], [9, 16], [8, 17], [10, 17]]
dealing with [9, 18] at loop 0
[9, 18] is NOT a wall
dealing with [9, 16] at loop 1
[9, 16] is NOT a wall
dealing with [8, 17] at loop 2
dealing with [10, 17] at loop 3
neighbors of b [[9, 18], [9, 16]]
cost from [9, 16] to [9, 17] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
33[9, 16][9, 15]
the points are:  [9, 16] [9, 15]
type for point in is_valid_node  <class 'list'>
[9, 16] 9 16
type for point in is_valid_node  <class 'list'>
[9, 15] 9 15
the point we are trying to find neighbors for  [9, 15]
neighboring cells are:  [[9, 16], [9, 14], [8, 15], [10, 15]]
dealing with [9, 16] at loop 0
[9, 16] is NOT a wall
dealing with [9, 14] at loop 1
dealing with [8, 15] at loop 2
[8, 15] is NOT a wall
dealing with [10, 15] at loop 3
neighbors of b [[9, 16], [8, 15]]
cost from [9, 16] to [9, 15] is 1
<class 'int'>
1 3 4
1 3 4
4 <class 'int'>
1 3 4
[9, 15] (9, 15)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 15] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 15] 9 15
the point we are trying to find neighbors for  [9, 15]
neighboring cells are:  [[9, 16], [9, 14], [8, 15], [10, 15]]
dealing with [9, 16] at loop 0
[9, 16] is NOT a wall
dealing with [9, 14] at loop 1
dealing with [8, 15] at loop 2
[8, 15] is NOT a wall
dealing with [10, 15] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[9, 15][9, 16]
the points are:  [9, 15] [9, 16]
type for point in is_valid_node  <class 'list'>
[9, 15] 9 15
type for point in is_valid_node  <class 'list'>
[9, 16] 9 16
the point we are trying to find neighbors for  [9, 16]
neighboring cells are:  [[9, 17], [9, 15], [8, 16], [10, 16]]
dealing with [9, 17] at loop 0
[9, 17] is NOT a wall
dealing with [9, 15] at loop 1
[9, 15] is NOT a wall
dealing with [8, 16] at loop 2
dealing with [10, 16] at loop 3
neighbors of b [[9, 17], [9, 15]]
cost from [9, 15] to [9, 16] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[9, 15][8, 15]
the points are:  [9, 15] [8, 15]
type for point in is_valid_node  <class 'list'>
[9, 15] 9 15
type for point in is_valid_node  <class 'list'>
[8, 15] 8 15
the point we are trying to find neighbors for  [8, 15]
neighboring cells are:  [[8, 16], [8, 14], [7, 15], [9, 15]]
dealing with [8, 16] at loop 0
dealing with [8, 14] at loop 1
dealing with [7, 15] at loop 2
[7, 15] is NOT a wall
dealing with [9, 15] at loop 3
[9, 15] is NOT a wall
neighbors of b [[7, 15], [9, 15]]
cost from [9, 15] to [8, 15] is 1
<class 'int'>
2 3 5
2 3 5
5 <class 'int'>
2 3 5
[11, 20] (11, 20)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 20] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 20] 11 20
the point we are trying to find neighbors for  [11, 20]
neighboring cells are:  [[11, 21], [11, 19], [10, 20], [12, 20]]
dealing with [11, 21] at loop 0
[11, 21] is NOT a wall
dealing with [11, 19] at loop 1
[11, 19] is NOT a wall
dealing with [10, 20] at loop 2
dealing with [12, 20] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[11, 20][11, 21]
the points are:  [11, 20] [11, 21]
type for point in is_valid_node  <class 'list'>
[11, 20] 11 20
type for point in is_valid_node  <class 'list'>
[11, 21] 11 21
the point we are trying to find neighbors for  [11, 21]
neighboring cells are:  [[11, 22], [11, 20], [10, 21], [12, 21]]
dealing with [11, 22] at loop 0
dealing with [11, 20] at loop 1
[11, 20] is NOT a wall
dealing with [10, 21] at loop 2
dealing with [12, 21] at loop 3
[12, 21] is NOT a wall
neighbors of b [[11, 20], [12, 21]]
cost from [11, 20] to [11, 21] is 1
<class 'int'>
1 9 10
1 9 10
10 <class 'int'>
1 9 10
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[11, 20][11, 19]
the points are:  [11, 20] [11, 19]
type for point in is_valid_node  <class 'list'>
[11, 20] 11 20
type for point in is_valid_node  <class 'list'>
[11, 19] 11 19
the point we are trying to find neighbors for  [11, 19]
neighboring cells are:  [[11, 20], [11, 18], [10, 19], [12, 19]]
dealing with [11, 20] at loop 0
[11, 20] is NOT a wall
dealing with [11, 18] at loop 1
[11, 18] is NOT a wall
dealing with [10, 19] at loop 2
[10, 19] is NOT a wall
dealing with [12, 19] at loop 3
[12, 19] is NOT a wall
neighbors of b [[11, 20], [11, 18], [10, 19], [12, 19]]
cost from [11, 20] to [11, 19] is 1
[12, 19] (12, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 19] 12 19
the point we are trying to find neighbors for  [12, 19]
neighboring cells are:  [[12, 20], [12, 18], [11, 19], [13, 19]]
dealing with [12, 20] at loop 0
dealing with [12, 18] at loop 1
dealing with [11, 19] at loop 2
[11, 19] is NOT a wall
dealing with [13, 19] at loop 3
[13, 19] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[12, 19][11, 19]
the points are:  [12, 19] [11, 19]
type for point in is_valid_node  <class 'list'>
[12, 19] 12 19
type for point in is_valid_node  <class 'list'>
[11, 19] 11 19
the point we are trying to find neighbors for  [11, 19]
neighboring cells are:  [[11, 20], [11, 18], [10, 19], [12, 19]]
dealing with [11, 20] at loop 0
[11, 20] is NOT a wall
dealing with [11, 18] at loop 1
[11, 18] is NOT a wall
dealing with [10, 19] at loop 2
[10, 19] is NOT a wall
dealing with [12, 19] at loop 3
[12, 19] is NOT a wall
neighbors of b [[11, 20], [11, 18], [10, 19], [12, 19]]
cost from [12, 19] to [11, 19] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[12, 19][13, 19]
the points are:  [12, 19] [13, 19]
type for point in is_valid_node  <class 'list'>
[12, 19] 12 19
type for point in is_valid_node  <class 'list'>
[13, 19] 13 19
the point we are trying to find neighbors for  [13, 19]
neighboring cells are:  [[13, 20], [13, 18], [12, 19], [14, 19]]
dealing with [13, 20] at loop 0
dealing with [13, 18] at loop 1
dealing with [12, 19] at loop 2
[12, 19] is NOT a wall
dealing with [14, 19] at loop 3
neighbors of b [[12, 19]]
cost from [12, 19] to [13, 19] is 1
<class 'int'>
3 7 10
3 7 10
10 <class 'int'>
3 7 10
[14, 17] (14, 17)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 17] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 17] 14 17
the point we are trying to find neighbors for  [14, 17]
neighboring cells are:  [[14, 18], [14, 16], [13, 17], [15, 17]]
dealing with [14, 18] at loop 0
dealing with [14, 16] at loop 1
dealing with [13, 17] at loop 2
[13, 17] is NOT a wall
dealing with [15, 17] at loop 3
[15, 17] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[14, 17][13, 17]
the points are:  [14, 17] [13, 17]
type for point in is_valid_node  <class 'list'>
[14, 17] 14 17
type for point in is_valid_node  <class 'list'>
[13, 17] 13 17
the point we are trying to find neighbors for  [13, 17]
neighboring cells are:  [[13, 18], [13, 16], [12, 17], [14, 17]]
dealing with [13, 18] at loop 0
dealing with [13, 16] at loop 1
[13, 16] is NOT a wall
dealing with [12, 17] at loop 2
dealing with [14, 17] at loop 3
[14, 17] is NOT a wall
neighbors of b [[13, 16], [14, 17]]
cost from [14, 17] to [13, 17] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[14, 17][15, 17]
the points are:  [14, 17] [15, 17]
type for point in is_valid_node  <class 'list'>
[14, 17] 14 17
type for point in is_valid_node  <class 'list'>
[15, 17] 15 17
the point we are trying to find neighbors for  [15, 17]
neighboring cells are:  [[15, 18], [15, 16], [14, 17], [16, 17]]
dealing with [15, 18] at loop 0
[15, 18] is NOT a wall
dealing with [15, 16] at loop 1
dealing with [14, 17] at loop 2
[14, 17] is NOT a wall
dealing with [16, 17] at loop 3
[16, 17] is NOT a wall
neighbors of b [[15, 18], [14, 17], [16, 17]]
cost from [14, 17] to [15, 17] is 1
<class 'int'>
5 5 10
5 5 10
10 <class 'int'>
5 5 10
[16, 15] (16, 15)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 15] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 15] 16 15
the point we are trying to find neighbors for  [16, 15]
neighboring cells are:  [[16, 16], [16, 14], [15, 15], [17, 15]]
dealing with [16, 16] at loop 0
dealing with [16, 14] at loop 1
dealing with [15, 15] at loop 2
[15, 15] is NOT a wall
dealing with [17, 15] at loop 3
[17, 15] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[16, 15][15, 15]
the points are:  [16, 15] [15, 15]
type for point in is_valid_node  <class 'list'>
[16, 15] 16 15
type for point in is_valid_node  <class 'list'>
[15, 15] 15 15
the point we are trying to find neighbors for  [15, 15]
neighboring cells are:  [[15, 16], [15, 14], [14, 15], [16, 15]]
dealing with [15, 16] at loop 0
dealing with [15, 14] at loop 1
[15, 14] is NOT a wall
dealing with [14, 15] at loop 2
dealing with [16, 15] at loop 3
[16, 15] is NOT a wall
neighbors of b [[15, 14], [16, 15]]
cost from [16, 15] to [15, 15] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[16, 15][17, 15]
the points are:  [16, 15] [17, 15]
type for point in is_valid_node  <class 'list'>
[16, 15] 16 15
type for point in is_valid_node  <class 'list'>
[17, 15] 17 15
the point we are trying to find neighbors for  [17, 15]
neighboring cells are:  [[17, 16], [17, 14], [16, 15], [18, 15]]
dealing with [17, 16] at loop 0
[17, 16] is NOT a wall
dealing with [17, 14] at loop 1
dealing with [16, 15] at loop 2
[16, 15] is NOT a wall
dealing with [18, 15] at loop 3
neighbors of b [[17, 16], [16, 15]]
cost from [16, 15] to [17, 15] is 1
<class 'int'>
7 3 10
7 3 10
10 <class 'int'>
7 3 10
[17, 11] (17, 11)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 11] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 11] 17 11
the point we are trying to find neighbors for  [17, 11]
neighboring cells are:  [[17, 12], [17, 10], [16, 11], [18, 11]]
dealing with [17, 12] at loop 0
dealing with [17, 10] at loop 1
[17, 10] is NOT a wall
dealing with [16, 11] at loop 2
[16, 11] is NOT a wall
dealing with [18, 11] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[17, 11][17, 10]
the points are:  [17, 11] [17, 10]
type for point in is_valid_node  <class 'list'>
[17, 11] 17 11
type for point in is_valid_node  <class 'list'>
[17, 10] 17 10
the point we are trying to find neighbors for  [17, 10]
neighboring cells are:  [[17, 11], [17, 9], [16, 10], [18, 10]]
dealing with [17, 11] at loop 0
[17, 11] is NOT a wall
dealing with [17, 9] at loop 1
[17, 9] is NOT a wall
dealing with [16, 10] at loop 2
dealing with [18, 10] at loop 3
neighbors of b [[17, 11], [17, 9]]
cost from [17, 11] to [17, 10] is 1
<class 'int'>
7 2 9
7 2 9
9 <class 'int'>
7 2 9
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[17, 11][16, 11]
the points are:  [17, 11] [16, 11]
type for point in is_valid_node  <class 'list'>
[17, 11] 17 11
type for point in is_valid_node  <class 'list'>
[16, 11] 16 11
the point we are trying to find neighbors for  [16, 11]
neighboring cells are:  [[16, 12], [16, 10], [15, 11], [17, 11]]
dealing with [16, 12] at loop 0
dealing with [16, 10] at loop 1
dealing with [15, 11] at loop 2
[15, 11] is NOT a wall
dealing with [17, 11] at loop 3
[17, 11] is NOT a wall
neighbors of b [[15, 11], [17, 11]]
cost from [17, 11] to [16, 11] is 1
[18, 13] (18, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 13] 18 13
the point we are trying to find neighbors for  [18, 13]
neighboring cells are:  [[18, 14], [18, 12], [17, 13], [19, 13]]
dealing with [18, 14] at loop 0
dealing with [18, 12] at loop 1
dealing with [17, 13] at loop 2
[17, 13] is NOT a wall
dealing with [19, 13] at loop 3
[19, 13] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[18, 13][17, 13]
the points are:  [18, 13] [17, 13]
type for point in is_valid_node  <class 'list'>
[18, 13] 18 13
type for point in is_valid_node  <class 'list'>
[17, 13] 17 13
the point we are trying to find neighbors for  [17, 13]
neighboring cells are:  [[17, 14], [17, 12], [16, 13], [18, 13]]
dealing with [17, 14] at loop 0
dealing with [17, 12] at loop 1
dealing with [16, 13] at loop 2
[16, 13] is NOT a wall
dealing with [18, 13] at loop 3
[18, 13] is NOT a wall
neighbors of b [[16, 13], [18, 13]]
cost from [18, 13] to [17, 13] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[18, 13][19, 13]
the points are:  [18, 13] [19, 13]
type for point in is_valid_node  <class 'list'>
[18, 13] 18 13
type for point in is_valid_node  <class 'list'>
[19, 13] 19 13
the point we are trying to find neighbors for  [19, 13]
neighboring cells are:  [[19, 14], [19, 12], [18, 13], [20, 13]]
dealing with [19, 14] at loop 0
dealing with [19, 12] at loop 1
[19, 12] is NOT a wall
dealing with [18, 13] at loop 2
[18, 13] is NOT a wall
dealing with [20, 13] at loop 3
neighbors of b [[19, 12], [18, 13]]
cost from [18, 13] to [19, 13] is 1
<class 'int'>
9 1 10
9 1 10
10 <class 'int'>
9 1 10
[19, 1] (19, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 1] 19 1
the point we are trying to find neighbors for  [19, 1]
neighboring cells are:  [[19, 2], [19, 0], [18, 1], [20, 1]]
dealing with [19, 2] at loop 0
[19, 2] is NOT a wall
dealing with [19, 0] at loop 1
dealing with [18, 1] at loop 2
[18, 1] is NOT a wall
dealing with [20, 1] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
18[19, 1][19, 2]
the points are:  [19, 1] [19, 2]
type for point in is_valid_node  <class 'list'>
[19, 1] 19 1
type for point in is_valid_node  <class 'list'>
[19, 2] 19 2
the point we are trying to find neighbors for  [19, 2]
neighboring cells are:  [[19, 3], [19, 1], [18, 2], [20, 2]]
dealing with [19, 3] at loop 0
[19, 3] is NOT a wall
dealing with [19, 1] at loop 1
[19, 1] is NOT a wall
dealing with [18, 2] at loop 2
dealing with [20, 2] at loop 3
neighbors of b [[19, 3], [19, 1]]
cost from [19, 1] to [19, 2] is 1
<class 'int'>
9 10 19
9 10 19
19 <class 'int'>
9 10 19
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
18[19, 1][18, 1]
the points are:  [19, 1] [18, 1]
type for point in is_valid_node  <class 'list'>
[19, 1] 19 1
type for point in is_valid_node  <class 'list'>
[18, 1] 18 1
the point we are trying to find neighbors for  [18, 1]
neighboring cells are:  [[18, 2], [18, 0], [17, 1], [19, 1]]
dealing with [18, 2] at loop 0
dealing with [18, 0] at loop 1
dealing with [17, 1] at loop 2
[17, 1] is NOT a wall
dealing with [19, 1] at loop 3
[19, 1] is NOT a wall
neighbors of b [[17, 1], [19, 1]]
cost from [19, 1] to [18, 1] is 1
[19, 2] (19, 2)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 2] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 2] 19 2
the point we are trying to find neighbors for  [19, 2]
neighboring cells are:  [[19, 3], [19, 1], [18, 2], [20, 2]]
dealing with [19, 3] at loop 0
[19, 3] is NOT a wall
dealing with [19, 1] at loop 1
[19, 1] is NOT a wall
dealing with [18, 2] at loop 2
dealing with [20, 2] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
19[19, 2][19, 3]
the points are:  [19, 2] [19, 3]
type for point in is_valid_node  <class 'list'>
[19, 2] 19 2
type for point in is_valid_node  <class 'list'>
[19, 3] 19 3
the point we are trying to find neighbors for  [19, 3]
neighboring cells are:  [[19, 4], [19, 2], [18, 3], [20, 3]]
dealing with [19, 4] at loop 0
dealing with [19, 2] at loop 1
[19, 2] is NOT a wall
dealing with [18, 3] at loop 2
dealing with [20, 3] at loop 3
[20, 3] is NOT a wall
neighbors of b [[19, 2], [20, 3]]
cost from [19, 2] to [19, 3] is 1
<class 'int'>
9 9 18
9 9 18
18 <class 'int'>
9 9 18
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
19[19, 2][19, 1]
the points are:  [19, 2] [19, 1]
type for point in is_valid_node  <class 'list'>
[19, 2] 19 2
type for point in is_valid_node  <class 'list'>
[19, 1] 19 1
the point we are trying to find neighbors for  [19, 1]
neighboring cells are:  [[19, 2], [19, 0], [18, 1], [20, 1]]
dealing with [19, 2] at loop 0
[19, 2] is NOT a wall
dealing with [19, 0] at loop 1
dealing with [18, 1] at loop 2
[18, 1] is NOT a wall
dealing with [20, 1] at loop 3
neighbors of b [[19, 2], [18, 1]]
cost from [19, 2] to [19, 1] is 1
[19, 3] (19, 3)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 3] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 3] 19 3
the point we are trying to find neighbors for  [19, 3]
neighboring cells are:  [[19, 4], [19, 2], [18, 3], [20, 3]]
dealing with [19, 4] at loop 0
dealing with [19, 2] at loop 1
[19, 2] is NOT a wall
dealing with [18, 3] at loop 2
dealing with [20, 3] at loop 3
[20, 3] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
20[19, 3][19, 2]
the points are:  [19, 3] [19, 2]
type for point in is_valid_node  <class 'list'>
[19, 3] 19 3
type for point in is_valid_node  <class 'list'>
[19, 2] 19 2
the point we are trying to find neighbors for  [19, 2]
neighboring cells are:  [[19, 3], [19, 1], [18, 2], [20, 2]]
dealing with [19, 3] at loop 0
[19, 3] is NOT a wall
dealing with [19, 1] at loop 1
[19, 1] is NOT a wall
dealing with [18, 2] at loop 2
dealing with [20, 2] at loop 3
neighbors of b [[19, 3], [19, 1]]
cost from [19, 3] to [19, 2] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
20[19, 3][20, 3]
the points are:  [19, 3] [20, 3]
type for point in is_valid_node  <class 'list'>
[19, 3] 19 3
type for point in is_valid_node  <class 'list'>
[20, 3] 20 3
the point we are trying to find neighbors for  [20, 3]
neighboring cells are:  [[20, 4], [20, 2], [19, 3], [21, 3]]
dealing with [20, 4] at loop 0
dealing with [20, 2] at loop 1
dealing with [19, 3] at loop 2
[19, 3] is NOT a wall
dealing with [21, 3] at loop 3
[21, 3] is NOT a wall
neighbors of b [[19, 3], [21, 3]]
cost from [19, 3] to [20, 3] is 1
<class 'int'>
10 9 19
10 9 19
19 <class 'int'>
10 9 19
[19, 5] (19, 5)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 5] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 5] 19 5
the point we are trying to find neighbors for  [19, 5]
neighboring cells are:  [[19, 6], [19, 4], [18, 5], [20, 5]]
dealing with [19, 6] at loop 0
[19, 6] is NOT a wall
dealing with [19, 4] at loop 1
dealing with [18, 5] at loop 2
[18, 5] is NOT a wall
dealing with [20, 5] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
22[19, 5][19, 6]
the points are:  [19, 5] [19, 6]
type for point in is_valid_node  <class 'list'>
[19, 5] 19 5
type for point in is_valid_node  <class 'list'>
[19, 6] 19 6
the point we are trying to find neighbors for  [19, 6]
neighboring cells are:  [[19, 7], [19, 5], [18, 6], [20, 6]]
dealing with [19, 7] at loop 0
[19, 7] is NOT a wall
dealing with [19, 5] at loop 1
[19, 5] is NOT a wall
dealing with [18, 6] at loop 2
dealing with [20, 6] at loop 3
neighbors of b [[19, 7], [19, 5]]
cost from [19, 5] to [19, 6] is 1
<class 'int'>
9 6 15
9 6 15
15 <class 'int'>
9 6 15
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
22[19, 5][18, 5]
the points are:  [19, 5] [18, 5]
type for point in is_valid_node  <class 'list'>
[19, 5] 19 5
type for point in is_valid_node  <class 'list'>
[18, 5] 18 5
the point we are trying to find neighbors for  [18, 5]
neighboring cells are:  [[18, 6], [18, 4], [17, 5], [19, 5]]
dealing with [18, 6] at loop 0
dealing with [18, 4] at loop 1
dealing with [17, 5] at loop 2
[17, 5] is NOT a wall
dealing with [19, 5] at loop 3
[19, 5] is NOT a wall
neighbors of b [[17, 5], [19, 5]]
cost from [19, 5] to [18, 5] is 1
[19, 6] (19, 6)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 6] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 6] 19 6
the point we are trying to find neighbors for  [19, 6]
neighboring cells are:  [[19, 7], [19, 5], [18, 6], [20, 6]]
dealing with [19, 7] at loop 0
[19, 7] is NOT a wall
dealing with [19, 5] at loop 1
[19, 5] is NOT a wall
dealing with [18, 6] at loop 2
dealing with [20, 6] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
23[19, 6][19, 7]
the points are:  [19, 6] [19, 7]
type for point in is_valid_node  <class 'list'>
[19, 6] 19 6
type for point in is_valid_node  <class 'list'>
[19, 7] 19 7
the point we are trying to find neighbors for  [19, 7]
neighboring cells are:  [[19, 8], [19, 6], [18, 7], [20, 7]]
dealing with [19, 8] at loop 0
[19, 8] is NOT a wall
dealing with [19, 6] at loop 1
[19, 6] is NOT a wall
dealing with [18, 7] at loop 2
dealing with [20, 7] at loop 3
[20, 7] is NOT a wall
neighbors of b [[19, 8], [19, 6], [20, 7]]
cost from [19, 6] to [19, 7] is 1
<class 'int'>
9 5 14
9 5 14
14 <class 'int'>
9 5 14
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
23[19, 6][19, 5]
the points are:  [19, 6] [19, 5]
type for point in is_valid_node  <class 'list'>
[19, 6] 19 6
type for point in is_valid_node  <class 'list'>
[19, 5] 19 5
the point we are trying to find neighbors for  [19, 5]
neighboring cells are:  [[19, 6], [19, 4], [18, 5], [20, 5]]
dealing with [19, 6] at loop 0
[19, 6] is NOT a wall
dealing with [19, 4] at loop 1
dealing with [18, 5] at loop 2
[18, 5] is NOT a wall
dealing with [20, 5] at loop 3
neighbors of b [[19, 6], [18, 5]]
cost from [19, 6] to [19, 5] is 1
[19, 7] (19, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 7] 19 7
the point we are trying to find neighbors for  [19, 7]
neighboring cells are:  [[19, 8], [19, 6], [18, 7], [20, 7]]
dealing with [19, 8] at loop 0
[19, 8] is NOT a wall
dealing with [19, 6] at loop 1
[19, 6] is NOT a wall
dealing with [18, 7] at loop 2
dealing with [20, 7] at loop 3
[20, 7] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
24[19, 7][19, 8]
the points are:  [19, 7] [19, 8]
type for point in is_valid_node  <class 'list'>
[19, 7] 19 7
type for point in is_valid_node  <class 'list'>
[19, 8] 19 8
the point we are trying to find neighbors for  [19, 8]
neighboring cells are:  [[19, 9], [19, 7], [18, 8], [20, 8]]
dealing with [19, 9] at loop 0
[19, 9] is NOT a wall
dealing with [19, 7] at loop 1
[19, 7] is NOT a wall
dealing with [18, 8] at loop 2
dealing with [20, 8] at loop 3
neighbors of b [[19, 9], [19, 7]]
cost from [19, 7] to [19, 8] is 1
<class 'int'>
9 4 13
9 4 13
13 <class 'int'>
9 4 13
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
24[19, 7][19, 6]
the points are:  [19, 7] [19, 6]
type for point in is_valid_node  <class 'list'>
[19, 7] 19 7
type for point in is_valid_node  <class 'list'>
[19, 6] 19 6
the point we are trying to find neighbors for  [19, 6]
neighboring cells are:  [[19, 7], [19, 5], [18, 6], [20, 6]]
dealing with [19, 7] at loop 0
[19, 7] is NOT a wall
dealing with [19, 5] at loop 1
[19, 5] is NOT a wall
dealing with [18, 6] at loop 2
dealing with [20, 6] at loop 3
neighbors of b [[19, 7], [19, 5]]
cost from [19, 7] to [19, 6] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
24[19, 7][20, 7]
the points are:  [19, 7] [20, 7]
type for point in is_valid_node  <class 'list'>
[19, 7] 19 7
type for point in is_valid_node  <class 'list'>
[20, 7] 20 7
the point we are trying to find neighbors for  [20, 7]
neighboring cells are:  [[20, 8], [20, 6], [19, 7], [21, 7]]
dealing with [20, 8] at loop 0
dealing with [20, 6] at loop 1
dealing with [19, 7] at loop 2
[19, 7] is NOT a wall
dealing with [21, 7] at loop 3
[21, 7] is NOT a wall
neighbors of b [[19, 7], [21, 7]]
cost from [19, 7] to [20, 7] is 1
<class 'int'>
10 5 15
10 5 15
15 <class 'int'>
10 5 15
[19, 8] (19, 8)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 8] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 8] 19 8
the point we are trying to find neighbors for  [19, 8]
neighboring cells are:  [[19, 9], [19, 7], [18, 8], [20, 8]]
dealing with [19, 9] at loop 0
[19, 9] is NOT a wall
dealing with [19, 7] at loop 1
[19, 7] is NOT a wall
dealing with [18, 8] at loop 2
dealing with [20, 8] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
25[19, 8][19, 9]
the points are:  [19, 8] [19, 9]
type for point in is_valid_node  <class 'list'>
[19, 8] 19 8
type for point in is_valid_node  <class 'list'>
[19, 9] 19 9
the point we are trying to find neighbors for  [19, 9]
neighboring cells are:  [[19, 10], [19, 8], [18, 9], [20, 9]]
dealing with [19, 10] at loop 0
[19, 10] is NOT a wall
dealing with [19, 8] at loop 1
[19, 8] is NOT a wall
dealing with [18, 9] at loop 2
[18, 9] is NOT a wall
dealing with [20, 9] at loop 3
[20, 9] is NOT a wall
neighbors of b [[19, 10], [19, 8], [18, 9], [20, 9]]
cost from [19, 8] to [19, 9] is 1
<class 'int'>
9 3 12
9 3 12
12 <class 'int'>
9 3 12
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
25[19, 8][19, 7]
the points are:  [19, 8] [19, 7]
type for point in is_valid_node  <class 'list'>
[19, 8] 19 8
type for point in is_valid_node  <class 'list'>
[19, 7] 19 7
the point we are trying to find neighbors for  [19, 7]
neighboring cells are:  [[19, 8], [19, 6], [18, 7], [20, 7]]
dealing with [19, 8] at loop 0
[19, 8] is NOT a wall
dealing with [19, 6] at loop 1
[19, 6] is NOT a wall
dealing with [18, 7] at loop 2
dealing with [20, 7] at loop 3
[20, 7] is NOT a wall
neighbors of b [[19, 8], [19, 6], [20, 7]]
cost from [19, 8] to [19, 7] is 1
[19, 9] (19, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 9] 19 9
the point we are trying to find neighbors for  [19, 9]
neighboring cells are:  [[19, 10], [19, 8], [18, 9], [20, 9]]
dealing with [19, 10] at loop 0
[19, 10] is NOT a wall
dealing with [19, 8] at loop 1
[19, 8] is NOT a wall
dealing with [18, 9] at loop 2
[18, 9] is NOT a wall
dealing with [20, 9] at loop 3
[20, 9] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
26[19, 9][19, 10]
the points are:  [19, 9] [19, 10]
type for point in is_valid_node  <class 'list'>
[19, 9] 19 9
type for point in is_valid_node  <class 'list'>
[19, 10] 19 10
the point we are trying to find neighbors for  [19, 10]
neighboring cells are:  [[19, 11], [19, 9], [18, 10], [20, 10]]
dealing with [19, 11] at loop 0
[19, 11] is NOT a wall
dealing with [19, 9] at loop 1
[19, 9] is NOT a wall
dealing with [18, 10] at loop 2
dealing with [20, 10] at loop 3
neighbors of b [[19, 11], [19, 9]]
cost from [19, 9] to [19, 10] is 1
<class 'int'>
9 2 11
9 2 11
11 <class 'int'>
9 2 11
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
26[19, 9][19, 8]
the points are:  [19, 9] [19, 8]
type for point in is_valid_node  <class 'list'>
[19, 9] 19 9
type for point in is_valid_node  <class 'list'>
[19, 8] 19 8
the point we are trying to find neighbors for  [19, 8]
neighboring cells are:  [[19, 9], [19, 7], [18, 8], [20, 8]]
dealing with [19, 9] at loop 0
[19, 9] is NOT a wall
dealing with [19, 7] at loop 1
[19, 7] is NOT a wall
dealing with [18, 8] at loop 2
dealing with [20, 8] at loop 3
neighbors of b [[19, 9], [19, 7]]
cost from [19, 9] to [19, 8] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
26[19, 9][18, 9]
the points are:  [19, 9] [18, 9]
type for point in is_valid_node  <class 'list'>
[19, 9] 19 9
type for point in is_valid_node  <class 'list'>
[18, 9] 18 9
the point we are trying to find neighbors for  [18, 9]
neighboring cells are:  [[18, 10], [18, 8], [17, 9], [19, 9]]
dealing with [18, 10] at loop 0
dealing with [18, 8] at loop 1
dealing with [17, 9] at loop 2
[17, 9] is NOT a wall
dealing with [19, 9] at loop 3
[19, 9] is NOT a wall
neighbors of b [[17, 9], [19, 9]]
cost from [19, 9] to [18, 9] is 1
<class 'int'>
8 3 11
8 3 11
11 <class 'int'>
8 3 11
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
26[19, 9][20, 9]
the points are:  [19, 9] [20, 9]
type for point in is_valid_node  <class 'list'>
[19, 9] 19 9
type for point in is_valid_node  <class 'list'>
[20, 9] 20 9
the point we are trying to find neighbors for  [20, 9]
neighboring cells are:  [[20, 10], [20, 8], [19, 9], [21, 9]]
dealing with [20, 10] at loop 0
dealing with [20, 8] at loop 1
dealing with [19, 9] at loop 2
[19, 9] is NOT a wall
dealing with [21, 9] at loop 3
[21, 9] is NOT a wall
neighbors of b [[19, 9], [21, 9]]
cost from [19, 9] to [20, 9] is 1
<class 'int'>
10 3 13
10 3 13
13 <class 'int'>
10 3 13
[18, 9] (18, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 9] 18 9
the point we are trying to find neighbors for  [18, 9]
neighboring cells are:  [[18, 10], [18, 8], [17, 9], [19, 9]]
dealing with [18, 10] at loop 0
dealing with [18, 8] at loop 1
dealing with [17, 9] at loop 2
[17, 9] is NOT a wall
dealing with [19, 9] at loop 3
[19, 9] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[18, 9][17, 9]
the points are:  [18, 9] [17, 9]
type for point in is_valid_node  <class 'list'>
[18, 9] 18 9
type for point in is_valid_node  <class 'list'>
[17, 9] 17 9
the point we are trying to find neighbors for  [17, 9]
neighboring cells are:  [[17, 10], [17, 8], [16, 9], [18, 9]]
dealing with [17, 10] at loop 0
[17, 10] is NOT a wall
dealing with [17, 8] at loop 1
dealing with [16, 9] at loop 2
[16, 9] is NOT a wall
dealing with [18, 9] at loop 3
[18, 9] is NOT a wall
neighbors of b [[17, 10], [16, 9], [18, 9]]
cost from [18, 9] to [17, 9] is 1
<class 'int'>
7 3 10
7 3 10
10 <class 'int'>
7 3 10
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[18, 9][19, 9]
the points are:  [18, 9] [19, 9]
type for point in is_valid_node  <class 'list'>
[18, 9] 18 9
type for point in is_valid_node  <class 'list'>
[19, 9] 19 9
the point we are trying to find neighbors for  [19, 9]
neighboring cells are:  [[19, 10], [19, 8], [18, 9], [20, 9]]
dealing with [19, 10] at loop 0
[19, 10] is NOT a wall
dealing with [19, 8] at loop 1
[19, 8] is NOT a wall
dealing with [18, 9] at loop 2
[18, 9] is NOT a wall
dealing with [20, 9] at loop 3
[20, 9] is NOT a wall
neighbors of b [[19, 10], [19, 8], [18, 9], [20, 9]]
cost from [18, 9] to [19, 9] is 1
[17, 9] (17, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 9] 17 9
the point we are trying to find neighbors for  [17, 9]
neighboring cells are:  [[17, 10], [17, 8], [16, 9], [18, 9]]
dealing with [17, 10] at loop 0
[17, 10] is NOT a wall
dealing with [17, 8] at loop 1
dealing with [16, 9] at loop 2
[16, 9] is NOT a wall
dealing with [18, 9] at loop 3
[18, 9] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[17, 9][17, 10]
the points are:  [17, 9] [17, 10]
type for point in is_valid_node  <class 'list'>
[17, 9] 17 9
type for point in is_valid_node  <class 'list'>
[17, 10] 17 10
the point we are trying to find neighbors for  [17, 10]
neighboring cells are:  [[17, 11], [17, 9], [16, 10], [18, 10]]
dealing with [17, 11] at loop 0
[17, 11] is NOT a wall
dealing with [17, 9] at loop 1
[17, 9] is NOT a wall
dealing with [16, 10] at loop 2
dealing with [18, 10] at loop 3
neighbors of b [[17, 11], [17, 9]]
cost from [17, 9] to [17, 10] is 1
<class 'int'>
7 2 9
7 2 9
9 <class 'int'>
7 2 9
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[17, 9][16, 9]
the points are:  [17, 9] [16, 9]
type for point in is_valid_node  <class 'list'>
[17, 9] 17 9
type for point in is_valid_node  <class 'list'>
[16, 9] 16 9
the point we are trying to find neighbors for  [16, 9]
neighboring cells are:  [[16, 10], [16, 8], [15, 9], [17, 9]]
dealing with [16, 10] at loop 0
dealing with [16, 8] at loop 1
dealing with [15, 9] at loop 2
[15, 9] is NOT a wall
dealing with [17, 9] at loop 3
[17, 9] is NOT a wall
neighbors of b [[15, 9], [17, 9]]
cost from [17, 9] to [16, 9] is 1
<class 'int'>
6 3 9
6 3 9
9 <class 'int'>
6 3 9
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[17, 9][18, 9]
the points are:  [17, 9] [18, 9]
type for point in is_valid_node  <class 'list'>
[17, 9] 17 9
type for point in is_valid_node  <class 'list'>
[18, 9] 18 9
the point we are trying to find neighbors for  [18, 9]
neighboring cells are:  [[18, 10], [18, 8], [17, 9], [19, 9]]
dealing with [18, 10] at loop 0
dealing with [18, 8] at loop 1
dealing with [17, 9] at loop 2
[17, 9] is NOT a wall
dealing with [19, 9] at loop 3
[19, 9] is NOT a wall
neighbors of b [[17, 9], [19, 9]]
cost from [17, 9] to [18, 9] is 1
[16, 9] (16, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 9] 16 9
the point we are trying to find neighbors for  [16, 9]
neighboring cells are:  [[16, 10], [16, 8], [15, 9], [17, 9]]
dealing with [16, 10] at loop 0
dealing with [16, 8] at loop 1
dealing with [15, 9] at loop 2
[15, 9] is NOT a wall
dealing with [17, 9] at loop 3
[17, 9] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[16, 9][15, 9]
the points are:  [16, 9] [15, 9]
type for point in is_valid_node  <class 'list'>
[16, 9] 16 9
type for point in is_valid_node  <class 'list'>
[15, 9] 15 9
the point we are trying to find neighbors for  [15, 9]
neighboring cells are:  [[15, 10], [15, 8], [14, 9], [16, 9]]
dealing with [15, 10] at loop 0
dealing with [15, 8] at loop 1
[15, 8] is NOT a wall
dealing with [14, 9] at loop 2
[14, 9] is NOT a wall
dealing with [16, 9] at loop 3
[16, 9] is NOT a wall
neighbors of b [[15, 8], [14, 9], [16, 9]]
cost from [16, 9] to [15, 9] is 1
<class 'int'>
5 3 8
5 3 8
8 <class 'int'>
5 3 8
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[16, 9][17, 9]
the points are:  [16, 9] [17, 9]
type for point in is_valid_node  <class 'list'>
[16, 9] 16 9
type for point in is_valid_node  <class 'list'>
[17, 9] 17 9
the point we are trying to find neighbors for  [17, 9]
neighboring cells are:  [[17, 10], [17, 8], [16, 9], [18, 9]]
dealing with [17, 10] at loop 0
[17, 10] is NOT a wall
dealing with [17, 8] at loop 1
dealing with [16, 9] at loop 2
[16, 9] is NOT a wall
dealing with [18, 9] at loop 3
[18, 9] is NOT a wall
neighbors of b [[17, 10], [16, 9], [18, 9]]
cost from [16, 9] to [17, 9] is 1
[15, 9] (15, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 9] 15 9
the point we are trying to find neighbors for  [15, 9]
neighboring cells are:  [[15, 10], [15, 8], [14, 9], [16, 9]]
dealing with [15, 10] at loop 0
dealing with [15, 8] at loop 1
[15, 8] is NOT a wall
dealing with [14, 9] at loop 2
[14, 9] is NOT a wall
dealing with [16, 9] at loop 3
[16, 9] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[15, 9][15, 8]
the points are:  [15, 9] [15, 8]
type for point in is_valid_node  <class 'list'>
[15, 9] 15 9
type for point in is_valid_node  <class 'list'>
[15, 8] 15 8
the point we are trying to find neighbors for  [15, 8]
neighboring cells are:  [[15, 9], [15, 7], [14, 8], [16, 8]]
dealing with [15, 9] at loop 0
[15, 9] is NOT a wall
dealing with [15, 7] at loop 1
[15, 7] is NOT a wall
dealing with [14, 8] at loop 2
dealing with [16, 8] at loop 3
neighbors of b [[15, 9], [15, 7]]
cost from [15, 9] to [15, 8] is 1
<class 'int'>
5 4 9
5 4 9
9 <class 'int'>
5 4 9
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[15, 9][14, 9]
the points are:  [15, 9] [14, 9]
type for point in is_valid_node  <class 'list'>
[15, 9] 15 9
type for point in is_valid_node  <class 'list'>
[14, 9] 14 9
the point we are trying to find neighbors for  [14, 9]
neighboring cells are:  [[14, 10], [14, 8], [13, 9], [15, 9]]
dealing with [14, 10] at loop 0
dealing with [14, 8] at loop 1
dealing with [13, 9] at loop 2
[13, 9] is NOT a wall
dealing with [15, 9] at loop 3
[15, 9] is NOT a wall
neighbors of b [[13, 9], [15, 9]]
cost from [15, 9] to [14, 9] is 1
<class 'int'>
4 3 7
4 3 7
7 <class 'int'>
4 3 7
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[15, 9][16, 9]
the points are:  [15, 9] [16, 9]
type for point in is_valid_node  <class 'list'>
[15, 9] 15 9
type for point in is_valid_node  <class 'list'>
[16, 9] 16 9
the point we are trying to find neighbors for  [16, 9]
neighboring cells are:  [[16, 10], [16, 8], [15, 9], [17, 9]]
dealing with [16, 10] at loop 0
dealing with [16, 8] at loop 1
dealing with [15, 9] at loop 2
[15, 9] is NOT a wall
dealing with [17, 9] at loop 3
[17, 9] is NOT a wall
neighbors of b [[15, 9], [17, 9]]
cost from [15, 9] to [16, 9] is 1
[14, 9] (14, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 9] 14 9
the point we are trying to find neighbors for  [14, 9]
neighboring cells are:  [[14, 10], [14, 8], [13, 9], [15, 9]]
dealing with [14, 10] at loop 0
dealing with [14, 8] at loop 1
dealing with [13, 9] at loop 2
[13, 9] is NOT a wall
dealing with [15, 9] at loop 3
[15, 9] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[14, 9][13, 9]
the points are:  [14, 9] [13, 9]
type for point in is_valid_node  <class 'list'>
[14, 9] 14 9
type for point in is_valid_node  <class 'list'>
[13, 9] 13 9
the point we are trying to find neighbors for  [13, 9]
neighboring cells are:  [[13, 10], [13, 8], [12, 9], [14, 9]]
dealing with [13, 10] at loop 0
dealing with [13, 8] at loop 1
dealing with [12, 9] at loop 2
[12, 9] is NOT a wall
dealing with [14, 9] at loop 3
[14, 9] is NOT a wall
neighbors of b [[12, 9], [14, 9]]
cost from [14, 9] to [13, 9] is 1
<class 'int'>
3 3 6
3 3 6
6 <class 'int'>
3 3 6
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[14, 9][15, 9]
the points are:  [14, 9] [15, 9]
type for point in is_valid_node  <class 'list'>
[14, 9] 14 9
type for point in is_valid_node  <class 'list'>
[15, 9] 15 9
the point we are trying to find neighbors for  [15, 9]
neighboring cells are:  [[15, 10], [15, 8], [14, 9], [16, 9]]
dealing with [15, 10] at loop 0
dealing with [15, 8] at loop 1
[15, 8] is NOT a wall
dealing with [14, 9] at loop 2
[14, 9] is NOT a wall
dealing with [16, 9] at loop 3
[16, 9] is NOT a wall
neighbors of b [[15, 8], [14, 9], [16, 9]]
cost from [14, 9] to [15, 9] is 1
[13, 9] (13, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 9] 13 9
the point we are trying to find neighbors for  [13, 9]
neighboring cells are:  [[13, 10], [13, 8], [12, 9], [14, 9]]
dealing with [13, 10] at loop 0
dealing with [13, 8] at loop 1
dealing with [12, 9] at loop 2
[12, 9] is NOT a wall
dealing with [14, 9] at loop 3
[14, 9] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[13, 9][12, 9]
the points are:  [13, 9] [12, 9]
type for point in is_valid_node  <class 'list'>
[13, 9] 13 9
type for point in is_valid_node  <class 'list'>
[12, 9] 12 9
the point we are trying to find neighbors for  [12, 9]
neighboring cells are:  [[12, 10], [12, 8], [11, 9], [13, 9]]
dealing with [12, 10] at loop 0
dealing with [12, 8] at loop 1
dealing with [11, 9] at loop 2
[11, 9] is NOT a wall
dealing with [13, 9] at loop 3
[13, 9] is NOT a wall
neighbors of b [[11, 9], [13, 9]]
cost from [13, 9] to [12, 9] is 1
<class 'int'>
2 3 5
2 3 5
5 <class 'int'>
2 3 5
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[13, 9][14, 9]
the points are:  [13, 9] [14, 9]
type for point in is_valid_node  <class 'list'>
[13, 9] 13 9
type for point in is_valid_node  <class 'list'>
[14, 9] 14 9
the point we are trying to find neighbors for  [14, 9]
neighboring cells are:  [[14, 10], [14, 8], [13, 9], [15, 9]]
dealing with [14, 10] at loop 0
dealing with [14, 8] at loop 1
dealing with [13, 9] at loop 2
[13, 9] is NOT a wall
dealing with [15, 9] at loop 3
[15, 9] is NOT a wall
neighbors of b [[13, 9], [15, 9]]
cost from [13, 9] to [14, 9] is 1
[12, 9] (12, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 9] 12 9
the point we are trying to find neighbors for  [12, 9]
neighboring cells are:  [[12, 10], [12, 8], [11, 9], [13, 9]]
dealing with [12, 10] at loop 0
dealing with [12, 8] at loop 1
dealing with [11, 9] at loop 2
[11, 9] is NOT a wall
dealing with [13, 9] at loop 3
[13, 9] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
33[12, 9][11, 9]
the points are:  [12, 9] [11, 9]
type for point in is_valid_node  <class 'list'>
[12, 9] 12 9
type for point in is_valid_node  <class 'list'>
[11, 9] 11 9
the point we are trying to find neighbors for  [11, 9]
neighboring cells are:  [[11, 10], [11, 8], [10, 9], [12, 9]]
dealing with [11, 10] at loop 0
[11, 10] is NOT a wall
dealing with [11, 8] at loop 1
dealing with [10, 9] at loop 2
dealing with [12, 9] at loop 3
[12, 9] is NOT a wall
neighbors of b [[11, 10], [12, 9]]
cost from [12, 9] to [11, 9] is 1
<class 'int'>
1 3 4
1 3 4
4 <class 'int'>
1 3 4
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
33[12, 9][13, 9]
the points are:  [12, 9] [13, 9]
type for point in is_valid_node  <class 'list'>
[12, 9] 12 9
type for point in is_valid_node  <class 'list'>
[13, 9] 13 9
the point we are trying to find neighbors for  [13, 9]
neighboring cells are:  [[13, 10], [13, 8], [12, 9], [14, 9]]
dealing with [13, 10] at loop 0
dealing with [13, 8] at loop 1
dealing with [12, 9] at loop 2
[12, 9] is NOT a wall
dealing with [14, 9] at loop 3
[14, 9] is NOT a wall
neighbors of b [[12, 9], [14, 9]]
cost from [12, 9] to [13, 9] is 1
[11, 9] (11, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 9] 11 9
the point we are trying to find neighbors for  [11, 9]
neighboring cells are:  [[11, 10], [11, 8], [10, 9], [12, 9]]
dealing with [11, 10] at loop 0
[11, 10] is NOT a wall
dealing with [11, 8] at loop 1
dealing with [10, 9] at loop 2
dealing with [12, 9] at loop 3
[12, 9] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[11, 9][11, 10]
the points are:  [11, 9] [11, 10]
type for point in is_valid_node  <class 'list'>
[11, 9] 11 9
type for point in is_valid_node  <class 'list'>
[11, 10] 11 10
the point we are trying to find neighbors for  [11, 10]
neighboring cells are:  [[11, 11], [11, 9], [10, 10], [12, 10]]
dealing with [11, 11] at loop 0
[11, 11] is NOT a wall
dealing with [11, 9] at loop 1
[11, 9] is NOT a wall
dealing with [10, 10] at loop 2
dealing with [12, 10] at loop 3
neighbors of b [[11, 11], [11, 9]]
cost from [11, 9] to [11, 10] is 1
<class 'int'>
1 2 3
1 2 3
3 <class 'int'>
1 2 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[11, 9][12, 9]
the points are:  [11, 9] [12, 9]
type for point in is_valid_node  <class 'list'>
[11, 9] 11 9
type for point in is_valid_node  <class 'list'>
[12, 9] 12 9
the point we are trying to find neighbors for  [12, 9]
neighboring cells are:  [[12, 10], [12, 8], [11, 9], [13, 9]]
dealing with [12, 10] at loop 0
dealing with [12, 8] at loop 1
dealing with [11, 9] at loop 2
[11, 9] is NOT a wall
dealing with [13, 9] at loop 3
[13, 9] is NOT a wall
neighbors of b [[11, 9], [13, 9]]
cost from [11, 9] to [12, 9] is 1
[11, 10] (11, 10)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 10] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 10] 11 10
the point we are trying to find neighbors for  [11, 10]
neighboring cells are:  [[11, 11], [11, 9], [10, 10], [12, 10]]
dealing with [11, 11] at loop 0
[11, 11] is NOT a wall
dealing with [11, 9] at loop 1
[11, 9] is NOT a wall
dealing with [10, 10] at loop 2
dealing with [12, 10] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[11, 10][11, 11]
the points are:  [11, 10] [11, 11]
type for point in is_valid_node  <class 'list'>
[11, 10] 11 10
type for point in is_valid_node  <class 'list'>
[11, 11] 11 11
the point we are trying to find neighbors for  [11, 11]
neighboring cells are:  [[11, 12], [11, 10], [10, 11], [12, 11]]
dealing with [11, 12] at loop 0
dealing with [11, 10] at loop 1
[11, 10] is NOT a wall
dealing with [10, 11] at loop 2
dealing with [12, 11] at loop 3
neighbors of b [[11, 10]]
cost from [11, 10] to [11, 11] is 1
<class 'int'>
1 1 2
1 1 2
2 <class 'int'>
1 1 2
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[11, 10][11, 9]
the points are:  [11, 10] [11, 9]
type for point in is_valid_node  <class 'list'>
[11, 10] 11 10
type for point in is_valid_node  <class 'list'>
[11, 9] 11 9
the point we are trying to find neighbors for  [11, 9]
neighboring cells are:  [[11, 10], [11, 8], [10, 9], [12, 9]]
dealing with [11, 10] at loop 0
[11, 10] is NOT a wall
dealing with [11, 8] at loop 1
dealing with [10, 9] at loop 2
dealing with [12, 9] at loop 3
[12, 9] is NOT a wall
neighbors of b [[11, 10], [12, 9]]
cost from [11, 10] to [11, 9] is 1
[11, 11] (11, 11)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 11] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 11] 11 11
the point we are trying to find neighbors for  [11, 11]
neighboring cells are:  [[11, 12], [11, 10], [10, 11], [12, 11]]
dealing with [11, 12] at loop 0
dealing with [11, 10] at loop 1
[11, 10] is NOT a wall
dealing with [10, 11] at loop 2
dealing with [12, 11] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
36[11, 11][11, 10]
the points are:  [11, 11] [11, 10]
type for point in is_valid_node  <class 'list'>
[11, 11] 11 11
type for point in is_valid_node  <class 'list'>
[11, 10] 11 10
the point we are trying to find neighbors for  [11, 10]
neighboring cells are:  [[11, 11], [11, 9], [10, 10], [12, 10]]
dealing with [11, 11] at loop 0
[11, 11] is NOT a wall
dealing with [11, 9] at loop 1
[11, 9] is NOT a wall
dealing with [10, 10] at loop 2
dealing with [12, 10] at loop 3
neighbors of b [[11, 11], [11, 9]]
cost from [11, 11] to [11, 10] is 1
[17, 10] (17, 10)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 10] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 10] 17 10
the point we are trying to find neighbors for  [17, 10]
neighboring cells are:  [[17, 11], [17, 9], [16, 10], [18, 10]]
dealing with [17, 11] at loop 0
[17, 11] is NOT a wall
dealing with [17, 9] at loop 1
[17, 9] is NOT a wall
dealing with [16, 10] at loop 2
dealing with [18, 10] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[17, 10][17, 11]
the points are:  [17, 10] [17, 11]
type for point in is_valid_node  <class 'list'>
[17, 10] 17 10
type for point in is_valid_node  <class 'list'>
[17, 11] 17 11
the point we are trying to find neighbors for  [17, 11]
neighboring cells are:  [[17, 12], [17, 10], [16, 11], [18, 11]]
dealing with [17, 12] at loop 0
dealing with [17, 10] at loop 1
[17, 10] is NOT a wall
dealing with [16, 11] at loop 2
[16, 11] is NOT a wall
dealing with [18, 11] at loop 3
neighbors of b [[17, 10], [16, 11]]
cost from [17, 10] to [17, 11] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[17, 10][17, 9]
the points are:  [17, 10] [17, 9]
type for point in is_valid_node  <class 'list'>
[17, 10] 17 10
type for point in is_valid_node  <class 'list'>
[17, 9] 17 9
the point we are trying to find neighbors for  [17, 9]
neighboring cells are:  [[17, 10], [17, 8], [16, 9], [18, 9]]
dealing with [17, 10] at loop 0
[17, 10] is NOT a wall
dealing with [17, 8] at loop 1
dealing with [16, 9] at loop 2
[16, 9] is NOT a wall
dealing with [18, 9] at loop 3
[18, 9] is NOT a wall
neighbors of b [[17, 10], [16, 9], [18, 9]]
cost from [17, 10] to [17, 9] is 1
[19, 10] (19, 10)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 10] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 10] 19 10
the point we are trying to find neighbors for  [19, 10]
neighboring cells are:  [[19, 11], [19, 9], [18, 10], [20, 10]]
dealing with [19, 11] at loop 0
[19, 11] is NOT a wall
dealing with [19, 9] at loop 1
[19, 9] is NOT a wall
dealing with [18, 10] at loop 2
dealing with [20, 10] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[19, 10][19, 11]
the points are:  [19, 10] [19, 11]
type for point in is_valid_node  <class 'list'>
[19, 10] 19 10
type for point in is_valid_node  <class 'list'>
[19, 11] 19 11
the point we are trying to find neighbors for  [19, 11]
neighboring cells are:  [[19, 12], [19, 10], [18, 11], [20, 11]]
dealing with [19, 12] at loop 0
[19, 12] is NOT a wall
dealing with [19, 10] at loop 1
[19, 10] is NOT a wall
dealing with [18, 11] at loop 2
dealing with [20, 11] at loop 3
neighbors of b [[19, 12], [19, 10]]
cost from [19, 10] to [19, 11] is 1
<class 'int'>
9 1 10
9 1 10
10 <class 'int'>
9 1 10
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[19, 10][19, 9]
the points are:  [19, 10] [19, 9]
type for point in is_valid_node  <class 'list'>
[19, 10] 19 10
type for point in is_valid_node  <class 'list'>
[19, 9] 19 9
the point we are trying to find neighbors for  [19, 9]
neighboring cells are:  [[19, 10], [19, 8], [18, 9], [20, 9]]
dealing with [19, 10] at loop 0
[19, 10] is NOT a wall
dealing with [19, 8] at loop 1
[19, 8] is NOT a wall
dealing with [18, 9] at loop 2
[18, 9] is NOT a wall
dealing with [20, 9] at loop 3
[20, 9] is NOT a wall
neighbors of b [[19, 10], [19, 8], [18, 9], [20, 9]]
cost from [19, 10] to [19, 9] is 1
[19, 11] (19, 11)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 11] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 11] 19 11
the point we are trying to find neighbors for  [19, 11]
neighboring cells are:  [[19, 12], [19, 10], [18, 11], [20, 11]]
dealing with [19, 12] at loop 0
[19, 12] is NOT a wall
dealing with [19, 10] at loop 1
[19, 10] is NOT a wall
dealing with [18, 11] at loop 2
dealing with [20, 11] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[19, 11][19, 12]
the points are:  [19, 11] [19, 12]
type for point in is_valid_node  <class 'list'>
[19, 11] 19 11
type for point in is_valid_node  <class 'list'>
[19, 12] 19 12
the point we are trying to find neighbors for  [19, 12]
neighboring cells are:  [[19, 13], [19, 11], [18, 12], [20, 12]]
dealing with [19, 13] at loop 0
[19, 13] is NOT a wall
dealing with [19, 11] at loop 1
[19, 11] is NOT a wall
dealing with [18, 12] at loop 2
dealing with [20, 12] at loop 3
neighbors of b [[19, 13], [19, 11]]
cost from [19, 11] to [19, 12] is 1
<class 'int'>
9 0 9
9 0 9
9 <class 'int'>
9 0 9
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[19, 11][19, 10]
the points are:  [19, 11] [19, 10]
type for point in is_valid_node  <class 'list'>
[19, 11] 19 11
type for point in is_valid_node  <class 'list'>
[19, 10] 19 10
the point we are trying to find neighbors for  [19, 10]
neighboring cells are:  [[19, 11], [19, 9], [18, 10], [20, 10]]
dealing with [19, 11] at loop 0
[19, 11] is NOT a wall
dealing with [19, 9] at loop 1
[19, 9] is NOT a wall
dealing with [18, 10] at loop 2
dealing with [20, 10] at loop 3
neighbors of b [[19, 11], [19, 9]]
cost from [19, 11] to [19, 10] is 1
[19, 12] (19, 12)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 12] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 12] 19 12
the point we are trying to find neighbors for  [19, 12]
neighboring cells are:  [[19, 13], [19, 11], [18, 12], [20, 12]]
dealing with [19, 13] at loop 0
[19, 13] is NOT a wall
dealing with [19, 11] at loop 1
[19, 11] is NOT a wall
dealing with [18, 12] at loop 2
dealing with [20, 12] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[19, 12][19, 13]
the points are:  [19, 12] [19, 13]
type for point in is_valid_node  <class 'list'>
[19, 12] 19 12
type for point in is_valid_node  <class 'list'>
[19, 13] 19 13
the point we are trying to find neighbors for  [19, 13]
neighboring cells are:  [[19, 14], [19, 12], [18, 13], [20, 13]]
dealing with [19, 14] at loop 0
dealing with [19, 12] at loop 1
[19, 12] is NOT a wall
dealing with [18, 13] at loop 2
[18, 13] is NOT a wall
dealing with [20, 13] at loop 3
neighbors of b [[19, 12], [18, 13]]
cost from [19, 12] to [19, 13] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[19, 12][19, 11]
the points are:  [19, 12] [19, 11]
type for point in is_valid_node  <class 'list'>
[19, 12] 19 12
type for point in is_valid_node  <class 'list'>
[19, 11] 19 11
the point we are trying to find neighbors for  [19, 11]
neighboring cells are:  [[19, 12], [19, 10], [18, 11], [20, 11]]
dealing with [19, 12] at loop 0
[19, 12] is NOT a wall
dealing with [19, 10] at loop 1
[19, 10] is NOT a wall
dealing with [18, 11] at loop 2
dealing with [20, 11] at loop 3
neighbors of b [[19, 12], [19, 10]]
cost from [19, 12] to [19, 11] is 1
[8, 15] (8, 15)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[8, 15] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[8, 15] 8 15
the point we are trying to find neighbors for  [8, 15]
neighboring cells are:  [[8, 16], [8, 14], [7, 15], [9, 15]]
dealing with [8, 16] at loop 0
dealing with [8, 14] at loop 1
dealing with [7, 15] at loop 2
[7, 15] is NOT a wall
dealing with [9, 15] at loop 3
[9, 15] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[8, 15][7, 15]
the points are:  [8, 15] [7, 15]
type for point in is_valid_node  <class 'list'>
[8, 15] 8 15
type for point in is_valid_node  <class 'list'>
[7, 15] 7 15
the point we are trying to find neighbors for  [7, 15]
neighboring cells are:  [[7, 16], [7, 14], [6, 15], [8, 15]]
dealing with [7, 16] at loop 0
dealing with [7, 14] at loop 1
[7, 14] is NOT a wall
dealing with [6, 15] at loop 2
[6, 15] is NOT a wall
dealing with [8, 15] at loop 3
[8, 15] is NOT a wall
neighbors of b [[7, 14], [6, 15], [8, 15]]
cost from [8, 15] to [7, 15] is 1
<class 'int'>
3 3 6
3 3 6
6 <class 'int'>
3 3 6
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[8, 15][9, 15]
the points are:  [8, 15] [9, 15]
type for point in is_valid_node  <class 'list'>
[8, 15] 8 15
type for point in is_valid_node  <class 'list'>
[9, 15] 9 15
the point we are trying to find neighbors for  [9, 15]
neighboring cells are:  [[9, 16], [9, 14], [8, 15], [10, 15]]
dealing with [9, 16] at loop 0
[9, 16] is NOT a wall
dealing with [9, 14] at loop 1
dealing with [8, 15] at loop 2
[8, 15] is NOT a wall
dealing with [10, 15] at loop 3
neighbors of b [[9, 16], [8, 15]]
cost from [8, 15] to [9, 15] is 1
[9, 20] (9, 20)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 20] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 20] 9 20
the point we are trying to find neighbors for  [9, 20]
neighboring cells are:  [[9, 21], [9, 19], [8, 20], [10, 20]]
dealing with [9, 21] at loop 0
[9, 21] is NOT a wall
dealing with [9, 19] at loop 1
[9, 19] is NOT a wall
dealing with [8, 20] at loop 2
dealing with [10, 20] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[9, 20][9, 21]
the points are:  [9, 20] [9, 21]
type for point in is_valid_node  <class 'list'>
[9, 20] 9 20
type for point in is_valid_node  <class 'list'>
[9, 21] 9 21
the point we are trying to find neighbors for  [9, 21]
neighboring cells are:  [[9, 22], [9, 20], [8, 21], [10, 21]]
dealing with [9, 22] at loop 0
[9, 22] is NOT a wall
dealing with [9, 20] at loop 1
[9, 20] is NOT a wall
dealing with [8, 21] at loop 2
[8, 21] is NOT a wall
dealing with [10, 21] at loop 3
neighbors of b [[9, 22], [9, 20], [8, 21]]
cost from [9, 20] to [9, 21] is 1
<class 'int'>
1 9 10
1 9 10
10 <class 'int'>
1 9 10
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[9, 20][9, 19]
the points are:  [9, 20] [9, 19]
type for point in is_valid_node  <class 'list'>
[9, 20] 9 20
type for point in is_valid_node  <class 'list'>
[9, 19] 9 19
the point we are trying to find neighbors for  [9, 19]
neighboring cells are:  [[9, 20], [9, 18], [8, 19], [10, 19]]
dealing with [9, 20] at loop 0
[9, 20] is NOT a wall
dealing with [9, 18] at loop 1
[9, 18] is NOT a wall
dealing with [8, 19] at loop 2
dealing with [10, 19] at loop 3
[10, 19] is NOT a wall
neighbors of b [[9, 20], [9, 18], [10, 19]]
cost from [9, 20] to [9, 19] is 1
[11, 21] (11, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 21] 11 21
the point we are trying to find neighbors for  [11, 21]
neighboring cells are:  [[11, 22], [11, 20], [10, 21], [12, 21]]
dealing with [11, 22] at loop 0
dealing with [11, 20] at loop 1
[11, 20] is NOT a wall
dealing with [10, 21] at loop 2
dealing with [12, 21] at loop 3
[12, 21] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[11, 21][11, 20]
the points are:  [11, 21] [11, 20]
type for point in is_valid_node  <class 'list'>
[11, 21] 11 21
type for point in is_valid_node  <class 'list'>
[11, 20] 11 20
the point we are trying to find neighbors for  [11, 20]
neighboring cells are:  [[11, 21], [11, 19], [10, 20], [12, 20]]
dealing with [11, 21] at loop 0
[11, 21] is NOT a wall
dealing with [11, 19] at loop 1
[11, 19] is NOT a wall
dealing with [10, 20] at loop 2
dealing with [12, 20] at loop 3
neighbors of b [[11, 21], [11, 19]]
cost from [11, 21] to [11, 20] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[11, 21][12, 21]
the points are:  [11, 21] [12, 21]
type for point in is_valid_node  <class 'list'>
[11, 21] 11 21
type for point in is_valid_node  <class 'list'>
[12, 21] 12 21
the point we are trying to find neighbors for  [12, 21]
neighboring cells are:  [[12, 22], [12, 20], [11, 21], [13, 21]]
dealing with [12, 22] at loop 0
dealing with [12, 20] at loop 1
dealing with [11, 21] at loop 2
[11, 21] is NOT a wall
dealing with [13, 21] at loop 3
[13, 21] is NOT a wall
neighbors of b [[11, 21], [13, 21]]
cost from [11, 21] to [12, 21] is 1
<class 'int'>
2 9 11
2 9 11
11 <class 'int'>
2 9 11
[13, 19] (13, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 19] 13 19
the point we are trying to find neighbors for  [13, 19]
neighboring cells are:  [[13, 20], [13, 18], [12, 19], [14, 19]]
dealing with [13, 20] at loop 0
dealing with [13, 18] at loop 1
dealing with [12, 19] at loop 2
[12, 19] is NOT a wall
dealing with [14, 19] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[13, 19][12, 19]
the points are:  [13, 19] [12, 19]
type for point in is_valid_node  <class 'list'>
[13, 19] 13 19
type for point in is_valid_node  <class 'list'>
[12, 19] 12 19
the point we are trying to find neighbors for  [12, 19]
neighboring cells are:  [[12, 20], [12, 18], [11, 19], [13, 19]]
dealing with [12, 20] at loop 0
dealing with [12, 18] at loop 1
dealing with [11, 19] at loop 2
[11, 19] is NOT a wall
dealing with [13, 19] at loop 3
[13, 19] is NOT a wall
neighbors of b [[11, 19], [13, 19]]
cost from [13, 19] to [12, 19] is 1
[15, 8] (15, 8)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 8] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 8] 15 8
the point we are trying to find neighbors for  [15, 8]
neighboring cells are:  [[15, 9], [15, 7], [14, 8], [16, 8]]
dealing with [15, 9] at loop 0
[15, 9] is NOT a wall
dealing with [15, 7] at loop 1
[15, 7] is NOT a wall
dealing with [14, 8] at loop 2
dealing with [16, 8] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[15, 8][15, 9]
the points are:  [15, 8] [15, 9]
type for point in is_valid_node  <class 'list'>
[15, 8] 15 8
type for point in is_valid_node  <class 'list'>
[15, 9] 15 9
the point we are trying to find neighbors for  [15, 9]
neighboring cells are:  [[15, 10], [15, 8], [14, 9], [16, 9]]
dealing with [15, 10] at loop 0
dealing with [15, 8] at loop 1
[15, 8] is NOT a wall
dealing with [14, 9] at loop 2
[14, 9] is NOT a wall
dealing with [16, 9] at loop 3
[16, 9] is NOT a wall
neighbors of b [[15, 8], [14, 9], [16, 9]]
cost from [15, 8] to [15, 9] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[15, 8][15, 7]
the points are:  [15, 8] [15, 7]
type for point in is_valid_node  <class 'list'>
[15, 8] 15 8
type for point in is_valid_node  <class 'list'>
[15, 7] 15 7
the point we are trying to find neighbors for  [15, 7]
neighboring cells are:  [[15, 8], [15, 6], [14, 7], [16, 7]]
dealing with [15, 8] at loop 0
[15, 8] is NOT a wall
dealing with [15, 6] at loop 1
dealing with [14, 7] at loop 2
dealing with [16, 7] at loop 3
[16, 7] is NOT a wall
neighbors of b [[15, 8], [16, 7]]
cost from [15, 8] to [15, 7] is 1
<class 'int'>
5 5 10
5 5 10
10 <class 'int'>
5 5 10
[15, 17] (15, 17)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 17] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 17] 15 17
the point we are trying to find neighbors for  [15, 17]
neighboring cells are:  [[15, 18], [15, 16], [14, 17], [16, 17]]
dealing with [15, 18] at loop 0
[15, 18] is NOT a wall
dealing with [15, 16] at loop 1
dealing with [14, 17] at loop 2
[14, 17] is NOT a wall
dealing with [16, 17] at loop 3
[16, 17] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[15, 17][15, 18]
the points are:  [15, 17] [15, 18]
type for point in is_valid_node  <class 'list'>
[15, 17] 15 17
type for point in is_valid_node  <class 'list'>
[15, 18] 15 18
the point we are trying to find neighbors for  [15, 18]
neighboring cells are:  [[15, 19], [15, 17], [14, 18], [16, 18]]
dealing with [15, 19] at loop 0
[15, 19] is NOT a wall
dealing with [15, 17] at loop 1
[15, 17] is NOT a wall
dealing with [14, 18] at loop 2
dealing with [16, 18] at loop 3
neighbors of b [[15, 19], [15, 17]]
cost from [15, 17] to [15, 18] is 1
<class 'int'>
5 6 11
5 6 11
11 <class 'int'>
5 6 11
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[15, 17][14, 17]
the points are:  [15, 17] [14, 17]
type for point in is_valid_node  <class 'list'>
[15, 17] 15 17
type for point in is_valid_node  <class 'list'>
[14, 17] 14 17
the point we are trying to find neighbors for  [14, 17]
neighboring cells are:  [[14, 18], [14, 16], [13, 17], [15, 17]]
dealing with [14, 18] at loop 0
dealing with [14, 16] at loop 1
dealing with [13, 17] at loop 2
[13, 17] is NOT a wall
dealing with [15, 17] at loop 3
[15, 17] is NOT a wall
neighbors of b [[13, 17], [15, 17]]
cost from [15, 17] to [14, 17] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[15, 17][16, 17]
the points are:  [15, 17] [16, 17]
type for point in is_valid_node  <class 'list'>
[15, 17] 15 17
type for point in is_valid_node  <class 'list'>
[16, 17] 16 17
the point we are trying to find neighbors for  [16, 17]
neighboring cells are:  [[16, 18], [16, 16], [15, 17], [17, 17]]
dealing with [16, 18] at loop 0
dealing with [16, 16] at loop 1
dealing with [15, 17] at loop 2
[15, 17] is NOT a wall
dealing with [17, 17] at loop 3
[17, 17] is NOT a wall
neighbors of b [[15, 17], [17, 17]]
cost from [15, 17] to [16, 17] is 1
<class 'int'>
6 5 11
6 5 11
11 <class 'int'>
6 5 11
[17, 10] (17, 10)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 10] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 10] 17 10
the point we are trying to find neighbors for  [17, 10]
neighboring cells are:  [[17, 11], [17, 9], [16, 10], [18, 10]]
dealing with [17, 11] at loop 0
[17, 11] is NOT a wall
dealing with [17, 9] at loop 1
[17, 9] is NOT a wall
dealing with [16, 10] at loop 2
dealing with [18, 10] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[17, 10][17, 11]
the points are:  [17, 10] [17, 11]
type for point in is_valid_node  <class 'list'>
[17, 10] 17 10
type for point in is_valid_node  <class 'list'>
[17, 11] 17 11
the point we are trying to find neighbors for  [17, 11]
neighboring cells are:  [[17, 12], [17, 10], [16, 11], [18, 11]]
dealing with [17, 12] at loop 0
dealing with [17, 10] at loop 1
[17, 10] is NOT a wall
dealing with [16, 11] at loop 2
[16, 11] is NOT a wall
dealing with [18, 11] at loop 3
neighbors of b [[17, 10], [16, 11]]
cost from [17, 10] to [17, 11] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[17, 10][17, 9]
the points are:  [17, 10] [17, 9]
type for point in is_valid_node  <class 'list'>
[17, 10] 17 10
type for point in is_valid_node  <class 'list'>
[17, 9] 17 9
the point we are trying to find neighbors for  [17, 9]
neighboring cells are:  [[17, 10], [17, 8], [16, 9], [18, 9]]
dealing with [17, 10] at loop 0
[17, 10] is NOT a wall
dealing with [17, 8] at loop 1
dealing with [16, 9] at loop 2
[16, 9] is NOT a wall
dealing with [18, 9] at loop 3
[18, 9] is NOT a wall
neighbors of b [[17, 10], [16, 9], [18, 9]]
cost from [17, 10] to [17, 9] is 1
[17, 15] (17, 15)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 15] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 15] 17 15
the point we are trying to find neighbors for  [17, 15]
neighboring cells are:  [[17, 16], [17, 14], [16, 15], [18, 15]]
dealing with [17, 16] at loop 0
[17, 16] is NOT a wall
dealing with [17, 14] at loop 1
dealing with [16, 15] at loop 2
[16, 15] is NOT a wall
dealing with [18, 15] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[17, 15][17, 16]
the points are:  [17, 15] [17, 16]
type for point in is_valid_node  <class 'list'>
[17, 15] 17 15
type for point in is_valid_node  <class 'list'>
[17, 16] 17 16
the point we are trying to find neighbors for  [17, 16]
neighboring cells are:  [[17, 17], [17, 15], [16, 16], [18, 16]]
dealing with [17, 17] at loop 0
[17, 17] is NOT a wall
dealing with [17, 15] at loop 1
[17, 15] is NOT a wall
dealing with [16, 16] at loop 2
dealing with [18, 16] at loop 3
neighbors of b [[17, 17], [17, 15]]
cost from [17, 15] to [17, 16] is 1
<class 'int'>
7 4 11
7 4 11
11 <class 'int'>
7 4 11
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[17, 15][16, 15]
the points are:  [17, 15] [16, 15]
type for point in is_valid_node  <class 'list'>
[17, 15] 17 15
type for point in is_valid_node  <class 'list'>
[16, 15] 16 15
the point we are trying to find neighbors for  [16, 15]
neighboring cells are:  [[16, 16], [16, 14], [15, 15], [17, 15]]
dealing with [16, 16] at loop 0
dealing with [16, 14] at loop 1
dealing with [15, 15] at loop 2
[15, 15] is NOT a wall
dealing with [17, 15] at loop 3
[17, 15] is NOT a wall
neighbors of b [[15, 15], [17, 15]]
cost from [17, 15] to [16, 15] is 1
[19, 13] (19, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 13] 19 13
the point we are trying to find neighbors for  [19, 13]
neighboring cells are:  [[19, 14], [19, 12], [18, 13], [20, 13]]
dealing with [19, 14] at loop 0
dealing with [19, 12] at loop 1
[19, 12] is NOT a wall
dealing with [18, 13] at loop 2
[18, 13] is NOT a wall
dealing with [20, 13] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[19, 13][19, 12]
the points are:  [19, 13] [19, 12]
type for point in is_valid_node  <class 'list'>
[19, 13] 19 13
type for point in is_valid_node  <class 'list'>
[19, 12] 19 12
the point we are trying to find neighbors for  [19, 12]
neighboring cells are:  [[19, 13], [19, 11], [18, 12], [20, 12]]
dealing with [19, 13] at loop 0
[19, 13] is NOT a wall
dealing with [19, 11] at loop 1
[19, 11] is NOT a wall
dealing with [18, 12] at loop 2
dealing with [20, 12] at loop 3
neighbors of b [[19, 13], [19, 11]]
cost from [19, 13] to [19, 12] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[19, 13][18, 13]
the points are:  [19, 13] [18, 13]
type for point in is_valid_node  <class 'list'>
[19, 13] 19 13
type for point in is_valid_node  <class 'list'>
[18, 13] 18 13
the point we are trying to find neighbors for  [18, 13]
neighboring cells are:  [[18, 14], [18, 12], [17, 13], [19, 13]]
dealing with [18, 14] at loop 0
dealing with [18, 12] at loop 1
dealing with [17, 13] at loop 2
[17, 13] is NOT a wall
dealing with [19, 13] at loop 3
[19, 13] is NOT a wall
neighbors of b [[17, 13], [19, 13]]
cost from [19, 13] to [18, 13] is 1
[20, 3] (20, 3)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[20, 3] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[20, 3] 20 3
the point we are trying to find neighbors for  [20, 3]
neighboring cells are:  [[20, 4], [20, 2], [19, 3], [21, 3]]
dealing with [20, 4] at loop 0
dealing with [20, 2] at loop 1
dealing with [19, 3] at loop 2
[19, 3] is NOT a wall
dealing with [21, 3] at loop 3
[21, 3] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
21[20, 3][19, 3]
the points are:  [20, 3] [19, 3]
type for point in is_valid_node  <class 'list'>
[20, 3] 20 3
type for point in is_valid_node  <class 'list'>
[19, 3] 19 3
the point we are trying to find neighbors for  [19, 3]
neighboring cells are:  [[19, 4], [19, 2], [18, 3], [20, 3]]
dealing with [19, 4] at loop 0
dealing with [19, 2] at loop 1
[19, 2] is NOT a wall
dealing with [18, 3] at loop 2
dealing with [20, 3] at loop 3
[20, 3] is NOT a wall
neighbors of b [[19, 2], [20, 3]]
cost from [20, 3] to [19, 3] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
21[20, 3][21, 3]
the points are:  [20, 3] [21, 3]
type for point in is_valid_node  <class 'list'>
[20, 3] 20 3
type for point in is_valid_node  <class 'list'>
[21, 3] 21 3
the point we are trying to find neighbors for  [21, 3]
neighboring cells are:  [[21, 4], [21, 2], [20, 3], [22, 3]]
dealing with [21, 4] at loop 0
[21, 4] is NOT a wall
dealing with [21, 2] at loop 1
[21, 2] is NOT a wall
dealing with [20, 3] at loop 2
[20, 3] is NOT a wall
dealing with [22, 3] at loop 3
neighbors of b [[21, 4], [21, 2], [20, 3]]
cost from [20, 3] to [21, 3] is 1
<class 'int'>
11 9 20
11 9 20
20 <class 'int'>
11 9 20
[20, 7] (20, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[20, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[20, 7] 20 7
the point we are trying to find neighbors for  [20, 7]
neighboring cells are:  [[20, 8], [20, 6], [19, 7], [21, 7]]
dealing with [20, 8] at loop 0
dealing with [20, 6] at loop 1
dealing with [19, 7] at loop 2
[19, 7] is NOT a wall
dealing with [21, 7] at loop 3
[21, 7] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
25[20, 7][19, 7]
the points are:  [20, 7] [19, 7]
type for point in is_valid_node  <class 'list'>
[20, 7] 20 7
type for point in is_valid_node  <class 'list'>
[19, 7] 19 7
the point we are trying to find neighbors for  [19, 7]
neighboring cells are:  [[19, 8], [19, 6], [18, 7], [20, 7]]
dealing with [19, 8] at loop 0
[19, 8] is NOT a wall
dealing with [19, 6] at loop 1
[19, 6] is NOT a wall
dealing with [18, 7] at loop 2
dealing with [20, 7] at loop 3
[20, 7] is NOT a wall
neighbors of b [[19, 8], [19, 6], [20, 7]]
cost from [20, 7] to [19, 7] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
25[20, 7][21, 7]
the points are:  [20, 7] [21, 7]
type for point in is_valid_node  <class 'list'>
[20, 7] 20 7
type for point in is_valid_node  <class 'list'>
[21, 7] 21 7
the point we are trying to find neighbors for  [21, 7]
neighboring cells are:  [[21, 8], [21, 6], [20, 7], [22, 7]]
dealing with [21, 8] at loop 0
[21, 8] is NOT a wall
dealing with [21, 6] at loop 1
dealing with [20, 7] at loop 2
[20, 7] is NOT a wall
dealing with [22, 7] at loop 3
neighbors of b [[21, 8], [20, 7]]
cost from [20, 7] to [21, 7] is 1
<class 'int'>
11 5 16
11 5 16
16 <class 'int'>
11 5 16
[20, 9] (20, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[20, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[20, 9] 20 9
the point we are trying to find neighbors for  [20, 9]
neighboring cells are:  [[20, 10], [20, 8], [19, 9], [21, 9]]
dealing with [20, 10] at loop 0
dealing with [20, 8] at loop 1
dealing with [19, 9] at loop 2
[19, 9] is NOT a wall
dealing with [21, 9] at loop 3
[21, 9] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[20, 9][19, 9]
the points are:  [20, 9] [19, 9]
type for point in is_valid_node  <class 'list'>
[20, 9] 20 9
type for point in is_valid_node  <class 'list'>
[19, 9] 19 9
the point we are trying to find neighbors for  [19, 9]
neighboring cells are:  [[19, 10], [19, 8], [18, 9], [20, 9]]
dealing with [19, 10] at loop 0
[19, 10] is NOT a wall
dealing with [19, 8] at loop 1
[19, 8] is NOT a wall
dealing with [18, 9] at loop 2
[18, 9] is NOT a wall
dealing with [20, 9] at loop 3
[20, 9] is NOT a wall
neighbors of b [[19, 10], [19, 8], [18, 9], [20, 9]]
cost from [20, 9] to [19, 9] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[20, 9][21, 9]
the points are:  [20, 9] [21, 9]
type for point in is_valid_node  <class 'list'>
[20, 9] 20 9
type for point in is_valid_node  <class 'list'>
[21, 9] 21 9
the point we are trying to find neighbors for  [21, 9]
neighboring cells are:  [[21, 10], [21, 8], [20, 9], [22, 9]]
dealing with [21, 10] at loop 0
[21, 10] is NOT a wall
dealing with [21, 8] at loop 1
[21, 8] is NOT a wall
dealing with [20, 9] at loop 2
[20, 9] is NOT a wall
dealing with [22, 9] at loop 3
neighbors of b [[21, 10], [21, 8], [20, 9]]
cost from [20, 9] to [21, 9] is 1
<class 'int'>
11 3 14
11 3 14
14 <class 'int'>
11 3 14
[7, 15] (7, 15)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 15] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 15] 7 15
the point we are trying to find neighbors for  [7, 15]
neighboring cells are:  [[7, 16], [7, 14], [6, 15], [8, 15]]
dealing with [7, 16] at loop 0
dealing with [7, 14] at loop 1
[7, 14] is NOT a wall
dealing with [6, 15] at loop 2
[6, 15] is NOT a wall
dealing with [8, 15] at loop 3
[8, 15] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
36[7, 15][7, 14]
the points are:  [7, 15] [7, 14]
type for point in is_valid_node  <class 'list'>
[7, 15] 7 15
type for point in is_valid_node  <class 'list'>
[7, 14] 7 14
the point we are trying to find neighbors for  [7, 14]
neighboring cells are:  [[7, 15], [7, 13], [6, 14], [8, 14]]
dealing with [7, 15] at loop 0
[7, 15] is NOT a wall
dealing with [7, 13] at loop 1
[7, 13] is NOT a wall
dealing with [6, 14] at loop 2
dealing with [8, 14] at loop 3
neighbors of b [[7, 15], [7, 13]]
cost from [7, 15] to [7, 14] is 1
<class 'int'>
3 2 5
3 2 5
5 <class 'int'>
3 2 5
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
36[7, 15][6, 15]
the points are:  [7, 15] [6, 15]
type for point in is_valid_node  <class 'list'>
[7, 15] 7 15
type for point in is_valid_node  <class 'list'>
[6, 15] 6 15
the point we are trying to find neighbors for  [6, 15]
neighboring cells are:  [[6, 16], [6, 14], [5, 15], [7, 15]]
dealing with [6, 16] at loop 0
dealing with [6, 14] at loop 1
dealing with [5, 15] at loop 2
[5, 15] is NOT a wall
dealing with [7, 15] at loop 3
[7, 15] is NOT a wall
neighbors of b [[5, 15], [7, 15]]
cost from [7, 15] to [6, 15] is 1
<class 'int'>
4 3 7
4 3 7
7 <class 'int'>
4 3 7
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
36[7, 15][8, 15]
the points are:  [7, 15] [8, 15]
type for point in is_valid_node  <class 'list'>
[7, 15] 7 15
type for point in is_valid_node  <class 'list'>
[8, 15] 8 15
the point we are trying to find neighbors for  [8, 15]
neighboring cells are:  [[8, 16], [8, 14], [7, 15], [9, 15]]
dealing with [8, 16] at loop 0
dealing with [8, 14] at loop 1
dealing with [7, 15] at loop 2
[7, 15] is NOT a wall
dealing with [9, 15] at loop 3
[9, 15] is NOT a wall
neighbors of b [[7, 15], [9, 15]]
cost from [7, 15] to [8, 15] is 1
[7, 14] (7, 14)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 14] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 14] 7 14
the point we are trying to find neighbors for  [7, 14]
neighboring cells are:  [[7, 15], [7, 13], [6, 14], [8, 14]]
dealing with [7, 15] at loop 0
[7, 15] is NOT a wall
dealing with [7, 13] at loop 1
[7, 13] is NOT a wall
dealing with [6, 14] at loop 2
dealing with [8, 14] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
37[7, 14][7, 15]
the points are:  [7, 14] [7, 15]
type for point in is_valid_node  <class 'list'>
[7, 14] 7 14
type for point in is_valid_node  <class 'list'>
[7, 15] 7 15
the point we are trying to find neighbors for  [7, 15]
neighboring cells are:  [[7, 16], [7, 14], [6, 15], [8, 15]]
dealing with [7, 16] at loop 0
dealing with [7, 14] at loop 1
[7, 14] is NOT a wall
dealing with [6, 15] at loop 2
[6, 15] is NOT a wall
dealing with [8, 15] at loop 3
[8, 15] is NOT a wall
neighbors of b [[7, 14], [6, 15], [8, 15]]
cost from [7, 14] to [7, 15] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
37[7, 14][7, 13]
the points are:  [7, 14] [7, 13]
type for point in is_valid_node  <class 'list'>
[7, 14] 7 14
type for point in is_valid_node  <class 'list'>
[7, 13] 7 13
the point we are trying to find neighbors for  [7, 13]
neighboring cells are:  [[7, 14], [7, 12], [6, 13], [8, 13]]
dealing with [7, 14] at loop 0
[7, 14] is NOT a wall
dealing with [7, 12] at loop 1
[7, 12] is NOT a wall
dealing with [6, 13] at loop 2
dealing with [8, 13] at loop 3
neighbors of b [[7, 14], [7, 12]]
cost from [7, 14] to [7, 13] is 1
<class 'int'>
3 1 4
3 1 4
4 <class 'int'>
3 1 4
[7, 13] (7, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 13] 7 13
the point we are trying to find neighbors for  [7, 13]
neighboring cells are:  [[7, 14], [7, 12], [6, 13], [8, 13]]
dealing with [7, 14] at loop 0
[7, 14] is NOT a wall
dealing with [7, 12] at loop 1
[7, 12] is NOT a wall
dealing with [6, 13] at loop 2
dealing with [8, 13] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
38[7, 13][7, 14]
the points are:  [7, 13] [7, 14]
type for point in is_valid_node  <class 'list'>
[7, 13] 7 13
type for point in is_valid_node  <class 'list'>
[7, 14] 7 14
the point we are trying to find neighbors for  [7, 14]
neighboring cells are:  [[7, 15], [7, 13], [6, 14], [8, 14]]
dealing with [7, 15] at loop 0
[7, 15] is NOT a wall
dealing with [7, 13] at loop 1
[7, 13] is NOT a wall
dealing with [6, 14] at loop 2
dealing with [8, 14] at loop 3
neighbors of b [[7, 15], [7, 13]]
cost from [7, 13] to [7, 14] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
38[7, 13][7, 12]
the points are:  [7, 13] [7, 12]
type for point in is_valid_node  <class 'list'>
[7, 13] 7 13
type for point in is_valid_node  <class 'list'>
[7, 12] 7 12
the point we are trying to find neighbors for  [7, 12]
neighboring cells are:  [[7, 13], [7, 11], [6, 12], [8, 12]]
dealing with [7, 13] at loop 0
[7, 13] is NOT a wall
dealing with [7, 11] at loop 1
[7, 11] is NOT a wall
dealing with [6, 12] at loop 2
dealing with [8, 12] at loop 3
neighbors of b [[7, 13], [7, 11]]
cost from [7, 13] to [7, 12] is 1
<class 'int'>
3 0 3
3 0 3
3 <class 'int'>
3 0 3
[7, 12] (7, 12)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 12] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 12] 7 12
the point we are trying to find neighbors for  [7, 12]
neighboring cells are:  [[7, 13], [7, 11], [6, 12], [8, 12]]
dealing with [7, 13] at loop 0
[7, 13] is NOT a wall
dealing with [7, 11] at loop 1
[7, 11] is NOT a wall
dealing with [6, 12] at loop 2
dealing with [8, 12] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[7, 12][7, 13]
the points are:  [7, 12] [7, 13]
type for point in is_valid_node  <class 'list'>
[7, 12] 7 12
type for point in is_valid_node  <class 'list'>
[7, 13] 7 13
the point we are trying to find neighbors for  [7, 13]
neighboring cells are:  [[7, 14], [7, 12], [6, 13], [8, 13]]
dealing with [7, 14] at loop 0
[7, 14] is NOT a wall
dealing with [7, 12] at loop 1
[7, 12] is NOT a wall
dealing with [6, 13] at loop 2
dealing with [8, 13] at loop 3
neighbors of b [[7, 14], [7, 12]]
cost from [7, 12] to [7, 13] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[7, 12][7, 11]
the points are:  [7, 12] [7, 11]
type for point in is_valid_node  <class 'list'>
[7, 12] 7 12
type for point in is_valid_node  <class 'list'>
[7, 11] 7 11
the point we are trying to find neighbors for  [7, 11]
neighboring cells are:  [[7, 12], [7, 10], [6, 11], [8, 11]]
dealing with [7, 12] at loop 0
[7, 12] is NOT a wall
dealing with [7, 10] at loop 1
dealing with [6, 11] at loop 2
[6, 11] is NOT a wall
dealing with [8, 11] at loop 3
neighbors of b [[7, 12], [6, 11]]
cost from [7, 12] to [7, 11] is 1
<class 'int'>
3 1 4
3 1 4
4 <class 'int'>
3 1 4
[9, 21] (9, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 21] 9 21
the point we are trying to find neighbors for  [9, 21]
neighboring cells are:  [[9, 22], [9, 20], [8, 21], [10, 21]]
dealing with [9, 22] at loop 0
[9, 22] is NOT a wall
dealing with [9, 20] at loop 1
[9, 20] is NOT a wall
dealing with [8, 21] at loop 2
[8, 21] is NOT a wall
dealing with [10, 21] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[9, 21][9, 22]
the points are:  [9, 21] [9, 22]
type for point in is_valid_node  <class 'list'>
[9, 21] 9 21
type for point in is_valid_node  <class 'list'>
[9, 22] 9 22
the point we are trying to find neighbors for  [9, 22]
neighboring cells are:  [[9, 23], [9, 21], [8, 22], [10, 22]]
dealing with [9, 23] at loop 0
[9, 23] is NOT a wall
dealing with [9, 21] at loop 1
[9, 21] is NOT a wall
dealing with [8, 22] at loop 2
dealing with [10, 22] at loop 3
neighbors of b [[9, 23], [9, 21]]
cost from [9, 21] to [9, 22] is 1
<class 'int'>
1 10 11
1 10 11
11 <class 'int'>
1 10 11
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[9, 21][9, 20]
the points are:  [9, 21] [9, 20]
type for point in is_valid_node  <class 'list'>
[9, 21] 9 21
type for point in is_valid_node  <class 'list'>
[9, 20] 9 20
the point we are trying to find neighbors for  [9, 20]
neighboring cells are:  [[9, 21], [9, 19], [8, 20], [10, 20]]
dealing with [9, 21] at loop 0
[9, 21] is NOT a wall
dealing with [9, 19] at loop 1
[9, 19] is NOT a wall
dealing with [8, 20] at loop 2
dealing with [10, 20] at loop 3
neighbors of b [[9, 21], [9, 19]]
cost from [9, 21] to [9, 20] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[9, 21][8, 21]
the points are:  [9, 21] [8, 21]
type for point in is_valid_node  <class 'list'>
[9, 21] 9 21
type for point in is_valid_node  <class 'list'>
[8, 21] 8 21
the point we are trying to find neighbors for  [8, 21]
neighboring cells are:  [[8, 22], [8, 20], [7, 21], [9, 21]]
dealing with [8, 22] at loop 0
dealing with [8, 20] at loop 1
dealing with [7, 21] at loop 2
[7, 21] is NOT a wall
dealing with [9, 21] at loop 3
[9, 21] is NOT a wall
neighbors of b [[7, 21], [9, 21]]
cost from [9, 21] to [8, 21] is 1
<class 'int'>
2 9 11
2 9 11
11 <class 'int'>
2 9 11
[12, 21] (12, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 21] 12 21
the point we are trying to find neighbors for  [12, 21]
neighboring cells are:  [[12, 22], [12, 20], [11, 21], [13, 21]]
dealing with [12, 22] at loop 0
dealing with [12, 20] at loop 1
dealing with [11, 21] at loop 2
[11, 21] is NOT a wall
dealing with [13, 21] at loop 3
[13, 21] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[12, 21][11, 21]
the points are:  [12, 21] [11, 21]
type for point in is_valid_node  <class 'list'>
[12, 21] 12 21
type for point in is_valid_node  <class 'list'>
[11, 21] 11 21
the point we are trying to find neighbors for  [11, 21]
neighboring cells are:  [[11, 22], [11, 20], [10, 21], [12, 21]]
dealing with [11, 22] at loop 0
dealing with [11, 20] at loop 1
[11, 20] is NOT a wall
dealing with [10, 21] at loop 2
dealing with [12, 21] at loop 3
[12, 21] is NOT a wall
neighbors of b [[11, 20], [12, 21]]
cost from [12, 21] to [11, 21] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[12, 21][13, 21]
the points are:  [12, 21] [13, 21]
type for point in is_valid_node  <class 'list'>
[12, 21] 12 21
type for point in is_valid_node  <class 'list'>
[13, 21] 13 21
the point we are trying to find neighbors for  [13, 21]
neighboring cells are:  [[13, 22], [13, 20], [12, 21], [14, 21]]
dealing with [13, 22] at loop 0
dealing with [13, 20] at loop 1
dealing with [12, 21] at loop 2
[12, 21] is NOT a wall
dealing with [14, 21] at loop 3
[14, 21] is NOT a wall
neighbors of b [[12, 21], [14, 21]]
cost from [12, 21] to [13, 21] is 1
<class 'int'>
3 9 12
3 9 12
12 <class 'int'>
3 9 12
[15, 7] (15, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 7] 15 7
the point we are trying to find neighbors for  [15, 7]
neighboring cells are:  [[15, 8], [15, 6], [14, 7], [16, 7]]
dealing with [15, 8] at loop 0
[15, 8] is NOT a wall
dealing with [15, 6] at loop 1
dealing with [14, 7] at loop 2
dealing with [16, 7] at loop 3
[16, 7] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[15, 7][15, 8]
the points are:  [15, 7] [15, 8]
type for point in is_valid_node  <class 'list'>
[15, 7] 15 7
type for point in is_valid_node  <class 'list'>
[15, 8] 15 8
the point we are trying to find neighbors for  [15, 8]
neighboring cells are:  [[15, 9], [15, 7], [14, 8], [16, 8]]
dealing with [15, 9] at loop 0
[15, 9] is NOT a wall
dealing with [15, 7] at loop 1
[15, 7] is NOT a wall
dealing with [14, 8] at loop 2
dealing with [16, 8] at loop 3
neighbors of b [[15, 9], [15, 7]]
cost from [15, 7] to [15, 8] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[15, 7][16, 7]
the points are:  [15, 7] [16, 7]
type for point in is_valid_node  <class 'list'>
[15, 7] 15 7
type for point in is_valid_node  <class 'list'>
[16, 7] 16 7
the point we are trying to find neighbors for  [16, 7]
neighboring cells are:  [[16, 8], [16, 6], [15, 7], [17, 7]]
dealing with [16, 8] at loop 0
dealing with [16, 6] at loop 1
dealing with [15, 7] at loop 2
[15, 7] is NOT a wall
dealing with [17, 7] at loop 3
[17, 7] is NOT a wall
neighbors of b [[15, 7], [17, 7]]
cost from [15, 7] to [16, 7] is 1
<class 'int'>
6 5 11
6 5 11
11 <class 'int'>
6 5 11
[15, 18] (15, 18)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 18] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 18] 15 18
the point we are trying to find neighbors for  [15, 18]
neighboring cells are:  [[15, 19], [15, 17], [14, 18], [16, 18]]
dealing with [15, 19] at loop 0
[15, 19] is NOT a wall
dealing with [15, 17] at loop 1
[15, 17] is NOT a wall
dealing with [14, 18] at loop 2
dealing with [16, 18] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[15, 18][15, 19]
the points are:  [15, 18] [15, 19]
type for point in is_valid_node  <class 'list'>
[15, 18] 15 18
type for point in is_valid_node  <class 'list'>
[15, 19] 15 19
the point we are trying to find neighbors for  [15, 19]
neighboring cells are:  [[15, 20], [15, 18], [14, 19], [16, 19]]
dealing with [15, 20] at loop 0
dealing with [15, 18] at loop 1
[15, 18] is NOT a wall
dealing with [14, 19] at loop 2
dealing with [16, 19] at loop 3
[16, 19] is NOT a wall
neighbors of b [[15, 18], [16, 19]]
cost from [15, 18] to [15, 19] is 1
<class 'int'>
5 7 12
5 7 12
12 <class 'int'>
5 7 12
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[15, 18][15, 17]
the points are:  [15, 18] [15, 17]
type for point in is_valid_node  <class 'list'>
[15, 18] 15 18
type for point in is_valid_node  <class 'list'>
[15, 17] 15 17
the point we are trying to find neighbors for  [15, 17]
neighboring cells are:  [[15, 18], [15, 16], [14, 17], [16, 17]]
dealing with [15, 18] at loop 0
[15, 18] is NOT a wall
dealing with [15, 16] at loop 1
dealing with [14, 17] at loop 2
[14, 17] is NOT a wall
dealing with [16, 17] at loop 3
[16, 17] is NOT a wall
neighbors of b [[15, 18], [14, 17], [16, 17]]
cost from [15, 18] to [15, 17] is 1
[16, 17] (16, 17)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 17] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 17] 16 17
the point we are trying to find neighbors for  [16, 17]
neighboring cells are:  [[16, 18], [16, 16], [15, 17], [17, 17]]
dealing with [16, 18] at loop 0
dealing with [16, 16] at loop 1
dealing with [15, 17] at loop 2
[15, 17] is NOT a wall
dealing with [17, 17] at loop 3
[17, 17] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[16, 17][15, 17]
the points are:  [16, 17] [15, 17]
type for point in is_valid_node  <class 'list'>
[16, 17] 16 17
type for point in is_valid_node  <class 'list'>
[15, 17] 15 17
the point we are trying to find neighbors for  [15, 17]
neighboring cells are:  [[15, 18], [15, 16], [14, 17], [16, 17]]
dealing with [15, 18] at loop 0
[15, 18] is NOT a wall
dealing with [15, 16] at loop 1
dealing with [14, 17] at loop 2
[14, 17] is NOT a wall
dealing with [16, 17] at loop 3
[16, 17] is NOT a wall
neighbors of b [[15, 18], [14, 17], [16, 17]]
cost from [16, 17] to [15, 17] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[16, 17][17, 17]
the points are:  [16, 17] [17, 17]
type for point in is_valid_node  <class 'list'>
[16, 17] 16 17
type for point in is_valid_node  <class 'list'>
[17, 17] 17 17
the point we are trying to find neighbors for  [17, 17]
neighboring cells are:  [[17, 18], [17, 16], [16, 17], [18, 17]]
dealing with [17, 18] at loop 0
dealing with [17, 16] at loop 1
[17, 16] is NOT a wall
dealing with [16, 17] at loop 2
[16, 17] is NOT a wall
dealing with [18, 17] at loop 3
[18, 17] is NOT a wall
neighbors of b [[17, 16], [16, 17], [18, 17]]
cost from [16, 17] to [17, 17] is 1
<class 'int'>
7 5 12
7 5 12
12 <class 'int'>
7 5 12
[17, 16] (17, 16)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 16] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 16] 17 16
the point we are trying to find neighbors for  [17, 16]
neighboring cells are:  [[17, 17], [17, 15], [16, 16], [18, 16]]
dealing with [17, 17] at loop 0
[17, 17] is NOT a wall
dealing with [17, 15] at loop 1
[17, 15] is NOT a wall
dealing with [16, 16] at loop 2
dealing with [18, 16] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[17, 16][17, 17]
the points are:  [17, 16] [17, 17]
type for point in is_valid_node  <class 'list'>
[17, 16] 17 16
type for point in is_valid_node  <class 'list'>
[17, 17] 17 17
the point we are trying to find neighbors for  [17, 17]
neighboring cells are:  [[17, 18], [17, 16], [16, 17], [18, 17]]
dealing with [17, 18] at loop 0
dealing with [17, 16] at loop 1
[17, 16] is NOT a wall
dealing with [16, 17] at loop 2
[16, 17] is NOT a wall
dealing with [18, 17] at loop 3
[18, 17] is NOT a wall
neighbors of b [[17, 16], [16, 17], [18, 17]]
cost from [17, 16] to [17, 17] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[17, 16][17, 15]
the points are:  [17, 16] [17, 15]
type for point in is_valid_node  <class 'list'>
[17, 16] 17 16
type for point in is_valid_node  <class 'list'>
[17, 15] 17 15
the point we are trying to find neighbors for  [17, 15]
neighboring cells are:  [[17, 16], [17, 14], [16, 15], [18, 15]]
dealing with [17, 16] at loop 0
[17, 16] is NOT a wall
dealing with [17, 14] at loop 1
dealing with [16, 15] at loop 2
[16, 15] is NOT a wall
dealing with [18, 15] at loop 3
neighbors of b [[17, 16], [16, 15]]
cost from [17, 16] to [17, 15] is 1
[21, 3] (21, 3)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 3] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 3] 21 3
the point we are trying to find neighbors for  [21, 3]
neighboring cells are:  [[21, 4], [21, 2], [20, 3], [22, 3]]
dealing with [21, 4] at loop 0
[21, 4] is NOT a wall
dealing with [21, 2] at loop 1
[21, 2] is NOT a wall
dealing with [20, 3] at loop 2
[20, 3] is NOT a wall
dealing with [22, 3] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
22[21, 3][21, 4]
the points are:  [21, 3] [21, 4]
type for point in is_valid_node  <class 'list'>
[21, 3] 21 3
type for point in is_valid_node  <class 'list'>
[21, 4] 21 4
the point we are trying to find neighbors for  [21, 4]
neighboring cells are:  [[21, 5], [21, 3], [20, 4], [22, 4]]
dealing with [21, 5] at loop 0
[21, 5] is NOT a wall
dealing with [21, 3] at loop 1
[21, 3] is NOT a wall
dealing with [20, 4] at loop 2
dealing with [22, 4] at loop 3
neighbors of b [[21, 5], [21, 3]]
cost from [21, 3] to [21, 4] is 1
<class 'int'>
11 8 19
11 8 19
19 <class 'int'>
11 8 19
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
22[21, 3][21, 2]
the points are:  [21, 3] [21, 2]
type for point in is_valid_node  <class 'list'>
[21, 3] 21 3
type for point in is_valid_node  <class 'list'>
[21, 2] 21 2
the point we are trying to find neighbors for  [21, 2]
neighboring cells are:  [[21, 3], [21, 1], [20, 2], [22, 2]]
dealing with [21, 3] at loop 0
[21, 3] is NOT a wall
dealing with [21, 1] at loop 1
[21, 1] is NOT a wall
dealing with [20, 2] at loop 2
dealing with [22, 2] at loop 3
neighbors of b [[21, 3], [21, 1]]
cost from [21, 3] to [21, 2] is 1
<class 'int'>
11 10 21
11 10 21
21 <class 'int'>
11 10 21
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
22[21, 3][20, 3]
the points are:  [21, 3] [20, 3]
type for point in is_valid_node  <class 'list'>
[21, 3] 21 3
type for point in is_valid_node  <class 'list'>
[20, 3] 20 3
the point we are trying to find neighbors for  [20, 3]
neighboring cells are:  [[20, 4], [20, 2], [19, 3], [21, 3]]
dealing with [20, 4] at loop 0
dealing with [20, 2] at loop 1
dealing with [19, 3] at loop 2
[19, 3] is NOT a wall
dealing with [21, 3] at loop 3
[21, 3] is NOT a wall
neighbors of b [[19, 3], [21, 3]]
cost from [21, 3] to [20, 3] is 1
[21, 4] (21, 4)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 4] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 4] 21 4
the point we are trying to find neighbors for  [21, 4]
neighboring cells are:  [[21, 5], [21, 3], [20, 4], [22, 4]]
dealing with [21, 5] at loop 0
[21, 5] is NOT a wall
dealing with [21, 3] at loop 1
[21, 3] is NOT a wall
dealing with [20, 4] at loop 2
dealing with [22, 4] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
23[21, 4][21, 5]
the points are:  [21, 4] [21, 5]
type for point in is_valid_node  <class 'list'>
[21, 4] 21 4
type for point in is_valid_node  <class 'list'>
[21, 5] 21 5
the point we are trying to find neighbors for  [21, 5]
neighboring cells are:  [[21, 6], [21, 4], [20, 5], [22, 5]]
dealing with [21, 6] at loop 0
dealing with [21, 4] at loop 1
[21, 4] is NOT a wall
dealing with [20, 5] at loop 2
dealing with [22, 5] at loop 3
neighbors of b [[21, 4]]
cost from [21, 4] to [21, 5] is 1
<class 'int'>
11 7 18
11 7 18
18 <class 'int'>
11 7 18
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
23[21, 4][21, 3]
the points are:  [21, 4] [21, 3]
type for point in is_valid_node  <class 'list'>
[21, 4] 21 4
type for point in is_valid_node  <class 'list'>
[21, 3] 21 3
the point we are trying to find neighbors for  [21, 3]
neighboring cells are:  [[21, 4], [21, 2], [20, 3], [22, 3]]
dealing with [21, 4] at loop 0
[21, 4] is NOT a wall
dealing with [21, 2] at loop 1
[21, 2] is NOT a wall
dealing with [20, 3] at loop 2
[20, 3] is NOT a wall
dealing with [22, 3] at loop 3
neighbors of b [[21, 4], [21, 2], [20, 3]]
cost from [21, 4] to [21, 3] is 1
[21, 5] (21, 5)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 5] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 5] 21 5
the point we are trying to find neighbors for  [21, 5]
neighboring cells are:  [[21, 6], [21, 4], [20, 5], [22, 5]]
dealing with [21, 6] at loop 0
dealing with [21, 4] at loop 1
[21, 4] is NOT a wall
dealing with [20, 5] at loop 2
dealing with [22, 5] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
24[21, 5][21, 4]
the points are:  [21, 5] [21, 4]
type for point in is_valid_node  <class 'list'>
[21, 5] 21 5
type for point in is_valid_node  <class 'list'>
[21, 4] 21 4
the point we are trying to find neighbors for  [21, 4]
neighboring cells are:  [[21, 5], [21, 3], [20, 4], [22, 4]]
dealing with [21, 5] at loop 0
[21, 5] is NOT a wall
dealing with [21, 3] at loop 1
[21, 3] is NOT a wall
dealing with [20, 4] at loop 2
dealing with [22, 4] at loop 3
neighbors of b [[21, 5], [21, 3]]
cost from [21, 5] to [21, 4] is 1
[21, 7] (21, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 7] 21 7
the point we are trying to find neighbors for  [21, 7]
neighboring cells are:  [[21, 8], [21, 6], [20, 7], [22, 7]]
dealing with [21, 8] at loop 0
[21, 8] is NOT a wall
dealing with [21, 6] at loop 1
dealing with [20, 7] at loop 2
[20, 7] is NOT a wall
dealing with [22, 7] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
26[21, 7][21, 8]
the points are:  [21, 7] [21, 8]
type for point in is_valid_node  <class 'list'>
[21, 7] 21 7
type for point in is_valid_node  <class 'list'>
[21, 8] 21 8
the point we are trying to find neighbors for  [21, 8]
neighboring cells are:  [[21, 9], [21, 7], [20, 8], [22, 8]]
dealing with [21, 9] at loop 0
[21, 9] is NOT a wall
dealing with [21, 7] at loop 1
[21, 7] is NOT a wall
dealing with [20, 8] at loop 2
dealing with [22, 8] at loop 3
neighbors of b [[21, 9], [21, 7]]
cost from [21, 7] to [21, 8] is 1
<class 'int'>
11 4 15
11 4 15
15 <class 'int'>
11 4 15
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
26[21, 7][20, 7]
the points are:  [21, 7] [20, 7]
type for point in is_valid_node  <class 'list'>
[21, 7] 21 7
type for point in is_valid_node  <class 'list'>
[20, 7] 20 7
the point we are trying to find neighbors for  [20, 7]
neighboring cells are:  [[20, 8], [20, 6], [19, 7], [21, 7]]
dealing with [20, 8] at loop 0
dealing with [20, 6] at loop 1
dealing with [19, 7] at loop 2
[19, 7] is NOT a wall
dealing with [21, 7] at loop 3
[21, 7] is NOT a wall
neighbors of b [[19, 7], [21, 7]]
cost from [21, 7] to [20, 7] is 1
[21, 8] (21, 8)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 8] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 8] 21 8
the point we are trying to find neighbors for  [21, 8]
neighboring cells are:  [[21, 9], [21, 7], [20, 8], [22, 8]]
dealing with [21, 9] at loop 0
[21, 9] is NOT a wall
dealing with [21, 7] at loop 1
[21, 7] is NOT a wall
dealing with [20, 8] at loop 2
dealing with [22, 8] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[21, 8][21, 9]
the points are:  [21, 8] [21, 9]
type for point in is_valid_node  <class 'list'>
[21, 8] 21 8
type for point in is_valid_node  <class 'list'>
[21, 9] 21 9
the point we are trying to find neighbors for  [21, 9]
neighboring cells are:  [[21, 10], [21, 8], [20, 9], [22, 9]]
dealing with [21, 10] at loop 0
[21, 10] is NOT a wall
dealing with [21, 8] at loop 1
[21, 8] is NOT a wall
dealing with [20, 9] at loop 2
[20, 9] is NOT a wall
dealing with [22, 9] at loop 3
neighbors of b [[21, 10], [21, 8], [20, 9]]
cost from [21, 8] to [21, 9] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
27[21, 8][21, 7]
the points are:  [21, 8] [21, 7]
type for point in is_valid_node  <class 'list'>
[21, 8] 21 8
type for point in is_valid_node  <class 'list'>
[21, 7] 21 7
the point we are trying to find neighbors for  [21, 7]
neighboring cells are:  [[21, 8], [21, 6], [20, 7], [22, 7]]
dealing with [21, 8] at loop 0
[21, 8] is NOT a wall
dealing with [21, 6] at loop 1
dealing with [20, 7] at loop 2
[20, 7] is NOT a wall
dealing with [22, 7] at loop 3
neighbors of b [[21, 8], [20, 7]]
cost from [21, 8] to [21, 7] is 1
[21, 9] (21, 9)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 9] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 9] 21 9
the point we are trying to find neighbors for  [21, 9]
neighboring cells are:  [[21, 10], [21, 8], [20, 9], [22, 9]]
dealing with [21, 10] at loop 0
[21, 10] is NOT a wall
dealing with [21, 8] at loop 1
[21, 8] is NOT a wall
dealing with [20, 9] at loop 2
[20, 9] is NOT a wall
dealing with [22, 9] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[21, 9][21, 10]
the points are:  [21, 9] [21, 10]
type for point in is_valid_node  <class 'list'>
[21, 9] 21 9
type for point in is_valid_node  <class 'list'>
[21, 10] 21 10
the point we are trying to find neighbors for  [21, 10]
neighboring cells are:  [[21, 11], [21, 9], [20, 10], [22, 10]]
dealing with [21, 11] at loop 0
[21, 11] is NOT a wall
dealing with [21, 9] at loop 1
[21, 9] is NOT a wall
dealing with [20, 10] at loop 2
dealing with [22, 10] at loop 3
neighbors of b [[21, 11], [21, 9]]
cost from [21, 9] to [21, 10] is 1
<class 'int'>
11 2 13
11 2 13
13 <class 'int'>
11 2 13
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[21, 9][21, 8]
the points are:  [21, 9] [21, 8]
type for point in is_valid_node  <class 'list'>
[21, 9] 21 9
type for point in is_valid_node  <class 'list'>
[21, 8] 21 8
the point we are trying to find neighbors for  [21, 8]
neighboring cells are:  [[21, 9], [21, 7], [20, 8], [22, 8]]
dealing with [21, 9] at loop 0
[21, 9] is NOT a wall
dealing with [21, 7] at loop 1
[21, 7] is NOT a wall
dealing with [20, 8] at loop 2
dealing with [22, 8] at loop 3
neighbors of b [[21, 9], [21, 7]]
cost from [21, 9] to [21, 8] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
28[21, 9][20, 9]
the points are:  [21, 9] [20, 9]
type for point in is_valid_node  <class 'list'>
[21, 9] 21 9
type for point in is_valid_node  <class 'list'>
[20, 9] 20 9
the point we are trying to find neighbors for  [20, 9]
neighboring cells are:  [[20, 10], [20, 8], [19, 9], [21, 9]]
dealing with [20, 10] at loop 0
dealing with [20, 8] at loop 1
dealing with [19, 9] at loop 2
[19, 9] is NOT a wall
dealing with [21, 9] at loop 3
[21, 9] is NOT a wall
neighbors of b [[19, 9], [21, 9]]
cost from [21, 9] to [20, 9] is 1
[21, 10] (21, 10)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 10] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 10] 21 10
the point we are trying to find neighbors for  [21, 10]
neighboring cells are:  [[21, 11], [21, 9], [20, 10], [22, 10]]
dealing with [21, 11] at loop 0
[21, 11] is NOT a wall
dealing with [21, 9] at loop 1
[21, 9] is NOT a wall
dealing with [20, 10] at loop 2
dealing with [22, 10] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[21, 10][21, 11]
the points are:  [21, 10] [21, 11]
type for point in is_valid_node  <class 'list'>
[21, 10] 21 10
type for point in is_valid_node  <class 'list'>
[21, 11] 21 11
the point we are trying to find neighbors for  [21, 11]
neighboring cells are:  [[21, 12], [21, 10], [20, 11], [22, 11]]
dealing with [21, 12] at loop 0
[21, 12] is NOT a wall
dealing with [21, 10] at loop 1
[21, 10] is NOT a wall
dealing with [20, 11] at loop 2
dealing with [22, 11] at loop 3
neighbors of b [[21, 12], [21, 10]]
cost from [21, 10] to [21, 11] is 1
<class 'int'>
11 1 12
11 1 12
12 <class 'int'>
11 1 12
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
29[21, 10][21, 9]
the points are:  [21, 10] [21, 9]
type for point in is_valid_node  <class 'list'>
[21, 10] 21 10
type for point in is_valid_node  <class 'list'>
[21, 9] 21 9
the point we are trying to find neighbors for  [21, 9]
neighboring cells are:  [[21, 10], [21, 8], [20, 9], [22, 9]]
dealing with [21, 10] at loop 0
[21, 10] is NOT a wall
dealing with [21, 8] at loop 1
[21, 8] is NOT a wall
dealing with [20, 9] at loop 2
[20, 9] is NOT a wall
dealing with [22, 9] at loop 3
neighbors of b [[21, 10], [21, 8], [20, 9]]
cost from [21, 10] to [21, 9] is 1
[21, 11] (21, 11)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 11] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 11] 21 11
the point we are trying to find neighbors for  [21, 11]
neighboring cells are:  [[21, 12], [21, 10], [20, 11], [22, 11]]
dealing with [21, 12] at loop 0
[21, 12] is NOT a wall
dealing with [21, 10] at loop 1
[21, 10] is NOT a wall
dealing with [20, 11] at loop 2
dealing with [22, 11] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[21, 11][21, 12]
the points are:  [21, 11] [21, 12]
type for point in is_valid_node  <class 'list'>
[21, 11] 21 11
type for point in is_valid_node  <class 'list'>
[21, 12] 21 12
the point we are trying to find neighbors for  [21, 12]
neighboring cells are:  [[21, 13], [21, 11], [20, 12], [22, 12]]
dealing with [21, 13] at loop 0
[21, 13] is NOT a wall
dealing with [21, 11] at loop 1
[21, 11] is NOT a wall
dealing with [20, 12] at loop 2
dealing with [22, 12] at loop 3
neighbors of b [[21, 13], [21, 11]]
cost from [21, 11] to [21, 12] is 1
<class 'int'>
11 0 11
11 0 11
11 <class 'int'>
11 0 11
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
30[21, 11][21, 10]
the points are:  [21, 11] [21, 10]
type for point in is_valid_node  <class 'list'>
[21, 11] 21 11
type for point in is_valid_node  <class 'list'>
[21, 10] 21 10
the point we are trying to find neighbors for  [21, 10]
neighboring cells are:  [[21, 11], [21, 9], [20, 10], [22, 10]]
dealing with [21, 11] at loop 0
[21, 11] is NOT a wall
dealing with [21, 9] at loop 1
[21, 9] is NOT a wall
dealing with [20, 10] at loop 2
dealing with [22, 10] at loop 3
neighbors of b [[21, 11], [21, 9]]
cost from [21, 11] to [21, 10] is 1
[21, 12] (21, 12)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 12] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 12] 21 12
the point we are trying to find neighbors for  [21, 12]
neighboring cells are:  [[21, 13], [21, 11], [20, 12], [22, 12]]
dealing with [21, 13] at loop 0
[21, 13] is NOT a wall
dealing with [21, 11] at loop 1
[21, 11] is NOT a wall
dealing with [20, 12] at loop 2
dealing with [22, 12] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[21, 12][21, 13]
the points are:  [21, 12] [21, 13]
type for point in is_valid_node  <class 'list'>
[21, 12] 21 12
type for point in is_valid_node  <class 'list'>
[21, 13] 21 13
the point we are trying to find neighbors for  [21, 13]
neighboring cells are:  [[21, 14], [21, 12], [20, 13], [22, 13]]
dealing with [21, 14] at loop 0
dealing with [21, 12] at loop 1
[21, 12] is NOT a wall
dealing with [20, 13] at loop 2
dealing with [22, 13] at loop 3
neighbors of b [[21, 12]]
cost from [21, 12] to [21, 13] is 1
<class 'int'>
11 1 12
11 1 12
12 <class 'int'>
11 1 12
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
31[21, 12][21, 11]
the points are:  [21, 12] [21, 11]
type for point in is_valid_node  <class 'list'>
[21, 12] 21 12
type for point in is_valid_node  <class 'list'>
[21, 11] 21 11
the point we are trying to find neighbors for  [21, 11]
neighboring cells are:  [[21, 12], [21, 10], [20, 11], [22, 11]]
dealing with [21, 12] at loop 0
[21, 12] is NOT a wall
dealing with [21, 10] at loop 1
[21, 10] is NOT a wall
dealing with [20, 11] at loop 2
dealing with [22, 11] at loop 3
neighbors of b [[21, 12], [21, 10]]
cost from [21, 12] to [21, 11] is 1
[6, 15] (6, 15)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 15] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 15] 6 15
the point we are trying to find neighbors for  [6, 15]
neighboring cells are:  [[6, 16], [6, 14], [5, 15], [7, 15]]
dealing with [6, 16] at loop 0
dealing with [6, 14] at loop 1
dealing with [5, 15] at loop 2
[5, 15] is NOT a wall
dealing with [7, 15] at loop 3
[7, 15] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
37[6, 15][5, 15]
the points are:  [6, 15] [5, 15]
type for point in is_valid_node  <class 'list'>
[6, 15] 6 15
type for point in is_valid_node  <class 'list'>
[5, 15] 5 15
the point we are trying to find neighbors for  [5, 15]
neighboring cells are:  [[5, 16], [5, 14], [4, 15], [6, 15]]
dealing with [5, 16] at loop 0
[5, 16] is NOT a wall
dealing with [5, 14] at loop 1
[5, 14] is NOT a wall
dealing with [4, 15] at loop 2
dealing with [6, 15] at loop 3
[6, 15] is NOT a wall
neighbors of b [[5, 16], [5, 14], [6, 15]]
cost from [6, 15] to [5, 15] is 1
<class 'int'>
5 3 8
5 3 8
8 <class 'int'>
5 3 8
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
37[6, 15][7, 15]
the points are:  [6, 15] [7, 15]
type for point in is_valid_node  <class 'list'>
[6, 15] 6 15
type for point in is_valid_node  <class 'list'>
[7, 15] 7 15
the point we are trying to find neighbors for  [7, 15]
neighboring cells are:  [[7, 16], [7, 14], [6, 15], [8, 15]]
dealing with [7, 16] at loop 0
dealing with [7, 14] at loop 1
[7, 14] is NOT a wall
dealing with [6, 15] at loop 2
[6, 15] is NOT a wall
dealing with [8, 15] at loop 3
[8, 15] is NOT a wall
neighbors of b [[7, 14], [6, 15], [8, 15]]
cost from [6, 15] to [7, 15] is 1
[7, 11] (7, 11)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 11] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 11] 7 11
the point we are trying to find neighbors for  [7, 11]
neighboring cells are:  [[7, 12], [7, 10], [6, 11], [8, 11]]
dealing with [7, 12] at loop 0
[7, 12] is NOT a wall
dealing with [7, 10] at loop 1
dealing with [6, 11] at loop 2
[6, 11] is NOT a wall
dealing with [8, 11] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[7, 11][7, 12]
the points are:  [7, 11] [7, 12]
type for point in is_valid_node  <class 'list'>
[7, 11] 7 11
type for point in is_valid_node  <class 'list'>
[7, 12] 7 12
the point we are trying to find neighbors for  [7, 12]
neighboring cells are:  [[7, 13], [7, 11], [6, 12], [8, 12]]
dealing with [7, 13] at loop 0
[7, 13] is NOT a wall
dealing with [7, 11] at loop 1
[7, 11] is NOT a wall
dealing with [6, 12] at loop 2
dealing with [8, 12] at loop 3
neighbors of b [[7, 13], [7, 11]]
cost from [7, 11] to [7, 12] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[7, 11][6, 11]
the points are:  [7, 11] [6, 11]
type for point in is_valid_node  <class 'list'>
[7, 11] 7 11
type for point in is_valid_node  <class 'list'>
[6, 11] 6 11
the point we are trying to find neighbors for  [6, 11]
neighboring cells are:  [[6, 12], [6, 10], [5, 11], [7, 11]]
dealing with [6, 12] at loop 0
dealing with [6, 10] at loop 1
dealing with [5, 11] at loop 2
[5, 11] is NOT a wall
dealing with [7, 11] at loop 3
[7, 11] is NOT a wall
neighbors of b [[5, 11], [7, 11]]
cost from [7, 11] to [6, 11] is 1
<class 'int'>
4 1 5
4 1 5
5 <class 'int'>
4 1 5
[8, 21] (8, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[8, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[8, 21] 8 21
the point we are trying to find neighbors for  [8, 21]
neighboring cells are:  [[8, 22], [8, 20], [7, 21], [9, 21]]
dealing with [8, 22] at loop 0
dealing with [8, 20] at loop 1
dealing with [7, 21] at loop 2
[7, 21] is NOT a wall
dealing with [9, 21] at loop 3
[9, 21] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
33[8, 21][7, 21]
the points are:  [8, 21] [7, 21]
type for point in is_valid_node  <class 'list'>
[8, 21] 8 21
type for point in is_valid_node  <class 'list'>
[7, 21] 7 21
the point we are trying to find neighbors for  [7, 21]
neighboring cells are:  [[7, 22], [7, 20], [6, 21], [8, 21]]
dealing with [7, 22] at loop 0
dealing with [7, 20] at loop 1
dealing with [6, 21] at loop 2
[6, 21] is NOT a wall
dealing with [8, 21] at loop 3
[8, 21] is NOT a wall
neighbors of b [[6, 21], [8, 21]]
cost from [8, 21] to [7, 21] is 1
<class 'int'>
3 9 12
3 9 12
12 <class 'int'>
3 9 12
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
33[8, 21][9, 21]
the points are:  [8, 21] [9, 21]
type for point in is_valid_node  <class 'list'>
[8, 21] 8 21
type for point in is_valid_node  <class 'list'>
[9, 21] 9 21
the point we are trying to find neighbors for  [9, 21]
neighboring cells are:  [[9, 22], [9, 20], [8, 21], [10, 21]]
dealing with [9, 22] at loop 0
[9, 22] is NOT a wall
dealing with [9, 20] at loop 1
[9, 20] is NOT a wall
dealing with [8, 21] at loop 2
[8, 21] is NOT a wall
dealing with [10, 21] at loop 3
neighbors of b [[9, 22], [9, 20], [8, 21]]
cost from [8, 21] to [9, 21] is 1
[9, 22] (9, 22)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 22] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 22] 9 22
the point we are trying to find neighbors for  [9, 22]
neighboring cells are:  [[9, 23], [9, 21], [8, 22], [10, 22]]
dealing with [9, 23] at loop 0
[9, 23] is NOT a wall
dealing with [9, 21] at loop 1
[9, 21] is NOT a wall
dealing with [8, 22] at loop 2
dealing with [10, 22] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
33[9, 22][9, 23]
the points are:  [9, 22] [9, 23]
type for point in is_valid_node  <class 'list'>
[9, 22] 9 22
type for point in is_valid_node  <class 'list'>
[9, 23] 9 23
the point we are trying to find neighbors for  [9, 23]
neighboring cells are:  [[9, 24], [9, 22], [8, 23], [10, 23]]
dealing with [9, 24] at loop 0
dealing with [9, 22] at loop 1
[9, 22] is NOT a wall
dealing with [8, 23] at loop 2
[8, 23] is NOT a wall
dealing with [10, 23] at loop 3
[10, 23] is NOT a wall
neighbors of b [[9, 22], [8, 23], [10, 23]]
cost from [9, 22] to [9, 23] is 1
<class 'int'>
1 11 12
1 11 12
12 <class 'int'>
1 11 12
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
33[9, 22][9, 21]
the points are:  [9, 22] [9, 21]
type for point in is_valid_node  <class 'list'>
[9, 22] 9 22
type for point in is_valid_node  <class 'list'>
[9, 21] 9 21
the point we are trying to find neighbors for  [9, 21]
neighboring cells are:  [[9, 22], [9, 20], [8, 21], [10, 21]]
dealing with [9, 22] at loop 0
[9, 22] is NOT a wall
dealing with [9, 20] at loop 1
[9, 20] is NOT a wall
dealing with [8, 21] at loop 2
[8, 21] is NOT a wall
dealing with [10, 21] at loop 3
neighbors of b [[9, 22], [9, 20], [8, 21]]
cost from [9, 22] to [9, 21] is 1
[13, 21] (13, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 21] 13 21
the point we are trying to find neighbors for  [13, 21]
neighboring cells are:  [[13, 22], [13, 20], [12, 21], [14, 21]]
dealing with [13, 22] at loop 0
dealing with [13, 20] at loop 1
dealing with [12, 21] at loop 2
[12, 21] is NOT a wall
dealing with [14, 21] at loop 3
[14, 21] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[13, 21][12, 21]
the points are:  [13, 21] [12, 21]
type for point in is_valid_node  <class 'list'>
[13, 21] 13 21
type for point in is_valid_node  <class 'list'>
[12, 21] 12 21
the point we are trying to find neighbors for  [12, 21]
neighboring cells are:  [[12, 22], [12, 20], [11, 21], [13, 21]]
dealing with [12, 22] at loop 0
dealing with [12, 20] at loop 1
dealing with [11, 21] at loop 2
[11, 21] is NOT a wall
dealing with [13, 21] at loop 3
[13, 21] is NOT a wall
neighbors of b [[11, 21], [13, 21]]
cost from [13, 21] to [12, 21] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[13, 21][14, 21]
the points are:  [13, 21] [14, 21]
type for point in is_valid_node  <class 'list'>
[13, 21] 13 21
type for point in is_valid_node  <class 'list'>
[14, 21] 14 21
the point we are trying to find neighbors for  [14, 21]
neighboring cells are:  [[14, 22], [14, 20], [13, 21], [15, 21]]
dealing with [14, 22] at loop 0
dealing with [14, 20] at loop 1
dealing with [13, 21] at loop 2
[13, 21] is NOT a wall
dealing with [15, 21] at loop 3
[15, 21] is NOT a wall
neighbors of b [[13, 21], [15, 21]]
cost from [13, 21] to [14, 21] is 1
<class 'int'>
4 9 13
4 9 13
13 <class 'int'>
4 9 13
[15, 19] (15, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 19] 15 19
the point we are trying to find neighbors for  [15, 19]
neighboring cells are:  [[15, 20], [15, 18], [14, 19], [16, 19]]
dealing with [15, 20] at loop 0
dealing with [15, 18] at loop 1
[15, 18] is NOT a wall
dealing with [14, 19] at loop 2
dealing with [16, 19] at loop 3
[16, 19] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[15, 19][15, 18]
the points are:  [15, 19] [15, 18]
type for point in is_valid_node  <class 'list'>
[15, 19] 15 19
type for point in is_valid_node  <class 'list'>
[15, 18] 15 18
the point we are trying to find neighbors for  [15, 18]
neighboring cells are:  [[15, 19], [15, 17], [14, 18], [16, 18]]
dealing with [15, 19] at loop 0
[15, 19] is NOT a wall
dealing with [15, 17] at loop 1
[15, 17] is NOT a wall
dealing with [14, 18] at loop 2
dealing with [16, 18] at loop 3
neighbors of b [[15, 19], [15, 17]]
cost from [15, 19] to [15, 18] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[15, 19][16, 19]
the points are:  [15, 19] [16, 19]
type for point in is_valid_node  <class 'list'>
[15, 19] 15 19
type for point in is_valid_node  <class 'list'>
[16, 19] 16 19
the point we are trying to find neighbors for  [16, 19]
neighboring cells are:  [[16, 20], [16, 18], [15, 19], [17, 19]]
dealing with [16, 20] at loop 0
dealing with [16, 18] at loop 1
dealing with [15, 19] at loop 2
[15, 19] is NOT a wall
dealing with [17, 19] at loop 3
[17, 19] is NOT a wall
neighbors of b [[15, 19], [17, 19]]
cost from [15, 19] to [16, 19] is 1
<class 'int'>
6 7 13
6 7 13
13 <class 'int'>
6 7 13
[16, 7] (16, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 7] 16 7
the point we are trying to find neighbors for  [16, 7]
neighboring cells are:  [[16, 8], [16, 6], [15, 7], [17, 7]]
dealing with [16, 8] at loop 0
dealing with [16, 6] at loop 1
dealing with [15, 7] at loop 2
[15, 7] is NOT a wall
dealing with [17, 7] at loop 3
[17, 7] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
33[16, 7][15, 7]
the points are:  [16, 7] [15, 7]
type for point in is_valid_node  <class 'list'>
[16, 7] 16 7
type for point in is_valid_node  <class 'list'>
[15, 7] 15 7
the point we are trying to find neighbors for  [15, 7]
neighboring cells are:  [[15, 8], [15, 6], [14, 7], [16, 7]]
dealing with [15, 8] at loop 0
[15, 8] is NOT a wall
dealing with [15, 6] at loop 1
dealing with [14, 7] at loop 2
dealing with [16, 7] at loop 3
[16, 7] is NOT a wall
neighbors of b [[15, 8], [16, 7]]
cost from [16, 7] to [15, 7] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
33[16, 7][17, 7]
the points are:  [16, 7] [17, 7]
type for point in is_valid_node  <class 'list'>
[16, 7] 16 7
type for point in is_valid_node  <class 'list'>
[17, 7] 17 7
the point we are trying to find neighbors for  [17, 7]
neighboring cells are:  [[17, 8], [17, 6], [16, 7], [18, 7]]
dealing with [17, 8] at loop 0
dealing with [17, 6] at loop 1
dealing with [16, 7] at loop 2
[16, 7] is NOT a wall
dealing with [18, 7] at loop 3
neighbors of b [[16, 7]]
cost from [16, 7] to [17, 7] is 1
<class 'int'>
7 5 12
7 5 12
12 <class 'int'>
7 5 12
[17, 17] (17, 17)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 17] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 17] 17 17
the point we are trying to find neighbors for  [17, 17]
neighboring cells are:  [[17, 18], [17, 16], [16, 17], [18, 17]]
dealing with [17, 18] at loop 0
dealing with [17, 16] at loop 1
[17, 16] is NOT a wall
dealing with [16, 17] at loop 2
[16, 17] is NOT a wall
dealing with [18, 17] at loop 3
[18, 17] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[17, 17][17, 16]
the points are:  [17, 17] [17, 16]
type for point in is_valid_node  <class 'list'>
[17, 17] 17 17
type for point in is_valid_node  <class 'list'>
[17, 16] 17 16
the point we are trying to find neighbors for  [17, 16]
neighboring cells are:  [[17, 17], [17, 15], [16, 16], [18, 16]]
dealing with [17, 17] at loop 0
[17, 17] is NOT a wall
dealing with [17, 15] at loop 1
[17, 15] is NOT a wall
dealing with [16, 16] at loop 2
dealing with [18, 16] at loop 3
neighbors of b [[17, 17], [17, 15]]
cost from [17, 17] to [17, 16] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[17, 17][16, 17]
the points are:  [17, 17] [16, 17]
type for point in is_valid_node  <class 'list'>
[17, 17] 17 17
type for point in is_valid_node  <class 'list'>
[16, 17] 16 17
the point we are trying to find neighbors for  [16, 17]
neighboring cells are:  [[16, 18], [16, 16], [15, 17], [17, 17]]
dealing with [16, 18] at loop 0
dealing with [16, 16] at loop 1
dealing with [15, 17] at loop 2
[15, 17] is NOT a wall
dealing with [17, 17] at loop 3
[17, 17] is NOT a wall
neighbors of b [[15, 17], [17, 17]]
cost from [17, 17] to [16, 17] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[17, 17][18, 17]
the points are:  [17, 17] [18, 17]
type for point in is_valid_node  <class 'list'>
[17, 17] 17 17
type for point in is_valid_node  <class 'list'>
[18, 17] 18 17
the point we are trying to find neighbors for  [18, 17]
neighboring cells are:  [[18, 18], [18, 16], [17, 17], [19, 17]]
dealing with [18, 18] at loop 0
dealing with [18, 16] at loop 1
dealing with [17, 17] at loop 2
[17, 17] is NOT a wall
dealing with [19, 17] at loop 3
[19, 17] is NOT a wall
neighbors of b [[17, 17], [19, 17]]
cost from [17, 17] to [18, 17] is 1
<class 'int'>
8 5 13
8 5 13
13 <class 'int'>
8 5 13
[21, 2] (21, 2)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 2] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 2] 21 2
the point we are trying to find neighbors for  [21, 2]
neighboring cells are:  [[21, 3], [21, 1], [20, 2], [22, 2]]
dealing with [21, 3] at loop 0
[21, 3] is NOT a wall
dealing with [21, 1] at loop 1
[21, 1] is NOT a wall
dealing with [20, 2] at loop 2
dealing with [22, 2] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
23[21, 2][21, 3]
the points are:  [21, 2] [21, 3]
type for point in is_valid_node  <class 'list'>
[21, 2] 21 2
type for point in is_valid_node  <class 'list'>
[21, 3] 21 3
the point we are trying to find neighbors for  [21, 3]
neighboring cells are:  [[21, 4], [21, 2], [20, 3], [22, 3]]
dealing with [21, 4] at loop 0
[21, 4] is NOT a wall
dealing with [21, 2] at loop 1
[21, 2] is NOT a wall
dealing with [20, 3] at loop 2
[20, 3] is NOT a wall
dealing with [22, 3] at loop 3
neighbors of b [[21, 4], [21, 2], [20, 3]]
cost from [21, 2] to [21, 3] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
23[21, 2][21, 1]
the points are:  [21, 2] [21, 1]
type for point in is_valid_node  <class 'list'>
[21, 2] 21 2
type for point in is_valid_node  <class 'list'>
[21, 1] 21 1
the point we are trying to find neighbors for  [21, 1]
neighboring cells are:  [[21, 2], [21, 0], [20, 1], [22, 1]]
dealing with [21, 2] at loop 0
[21, 2] is NOT a wall
dealing with [21, 0] at loop 1
dealing with [20, 1] at loop 2
dealing with [22, 1] at loop 3
neighbors of b [[21, 2]]
cost from [21, 2] to [21, 1] is 1
<class 'int'>
11 11 22
11 11 22
22 <class 'int'>
11 11 22
[21, 13] (21, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 13] 21 13
the point we are trying to find neighbors for  [21, 13]
neighboring cells are:  [[21, 14], [21, 12], [20, 13], [22, 13]]
dealing with [21, 14] at loop 0
dealing with [21, 12] at loop 1
[21, 12] is NOT a wall
dealing with [20, 13] at loop 2
dealing with [22, 13] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
32[21, 13][21, 12]
the points are:  [21, 13] [21, 12]
type for point in is_valid_node  <class 'list'>
[21, 13] 21 13
type for point in is_valid_node  <class 'list'>
[21, 12] 21 12
the point we are trying to find neighbors for  [21, 12]
neighboring cells are:  [[21, 13], [21, 11], [20, 12], [22, 12]]
dealing with [21, 13] at loop 0
[21, 13] is NOT a wall
dealing with [21, 11] at loop 1
[21, 11] is NOT a wall
dealing with [20, 12] at loop 2
dealing with [22, 12] at loop 3
neighbors of b [[21, 13], [21, 11]]
cost from [21, 13] to [21, 12] is 1
[5, 15] (5, 15)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 15] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 15] 5 15
the point we are trying to find neighbors for  [5, 15]
neighboring cells are:  [[5, 16], [5, 14], [4, 15], [6, 15]]
dealing with [5, 16] at loop 0
[5, 16] is NOT a wall
dealing with [5, 14] at loop 1
[5, 14] is NOT a wall
dealing with [4, 15] at loop 2
dealing with [6, 15] at loop 3
[6, 15] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
38[5, 15][5, 16]
the points are:  [5, 15] [5, 16]
type for point in is_valid_node  <class 'list'>
[5, 15] 5 15
type for point in is_valid_node  <class 'list'>
[5, 16] 5 16
the point we are trying to find neighbors for  [5, 16]
neighboring cells are:  [[5, 17], [5, 15], [4, 16], [6, 16]]
dealing with [5, 17] at loop 0
[5, 17] is NOT a wall
dealing with [5, 15] at loop 1
[5, 15] is NOT a wall
dealing with [4, 16] at loop 2
dealing with [6, 16] at loop 3
neighbors of b [[5, 17], [5, 15]]
cost from [5, 15] to [5, 16] is 1
<class 'int'>
5 4 9
5 4 9
9 <class 'int'>
5 4 9
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
38[5, 15][5, 14]
the points are:  [5, 15] [5, 14]
type for point in is_valid_node  <class 'list'>
[5, 15] 5 15
type for point in is_valid_node  <class 'list'>
[5, 14] 5 14
the point we are trying to find neighbors for  [5, 14]
neighboring cells are:  [[5, 15], [5, 13], [4, 14], [6, 14]]
dealing with [5, 15] at loop 0
[5, 15] is NOT a wall
dealing with [5, 13] at loop 1
[5, 13] is NOT a wall
dealing with [4, 14] at loop 2
[4, 14] is NOT a wall
dealing with [6, 14] at loop 3
neighbors of b [[5, 15], [5, 13], [4, 14]]
cost from [5, 15] to [5, 14] is 1
<class 'int'>
5 2 7
5 2 7
7 <class 'int'>
5 2 7
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
38[5, 15][6, 15]
the points are:  [5, 15] [6, 15]
type for point in is_valid_node  <class 'list'>
[5, 15] 5 15
type for point in is_valid_node  <class 'list'>
[6, 15] 6 15
the point we are trying to find neighbors for  [6, 15]
neighboring cells are:  [[6, 16], [6, 14], [5, 15], [7, 15]]
dealing with [6, 16] at loop 0
dealing with [6, 14] at loop 1
dealing with [5, 15] at loop 2
[5, 15] is NOT a wall
dealing with [7, 15] at loop 3
[7, 15] is NOT a wall
neighbors of b [[5, 15], [7, 15]]
cost from [5, 15] to [6, 15] is 1
[5, 14] (5, 14)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 14] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 14] 5 14
the point we are trying to find neighbors for  [5, 14]
neighboring cells are:  [[5, 15], [5, 13], [4, 14], [6, 14]]
dealing with [5, 15] at loop 0
[5, 15] is NOT a wall
dealing with [5, 13] at loop 1
[5, 13] is NOT a wall
dealing with [4, 14] at loop 2
[4, 14] is NOT a wall
dealing with [6, 14] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[5, 14][5, 15]
the points are:  [5, 14] [5, 15]
type for point in is_valid_node  <class 'list'>
[5, 14] 5 14
type for point in is_valid_node  <class 'list'>
[5, 15] 5 15
the point we are trying to find neighbors for  [5, 15]
neighboring cells are:  [[5, 16], [5, 14], [4, 15], [6, 15]]
dealing with [5, 16] at loop 0
[5, 16] is NOT a wall
dealing with [5, 14] at loop 1
[5, 14] is NOT a wall
dealing with [4, 15] at loop 2
dealing with [6, 15] at loop 3
[6, 15] is NOT a wall
neighbors of b [[5, 16], [5, 14], [6, 15]]
cost from [5, 14] to [5, 15] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[5, 14][5, 13]
the points are:  [5, 14] [5, 13]
type for point in is_valid_node  <class 'list'>
[5, 14] 5 14
type for point in is_valid_node  <class 'list'>
[5, 13] 5 13
the point we are trying to find neighbors for  [5, 13]
neighboring cells are:  [[5, 14], [5, 12], [4, 13], [6, 13]]
dealing with [5, 14] at loop 0
[5, 14] is NOT a wall
dealing with [5, 12] at loop 1
[5, 12] is NOT a wall
dealing with [4, 13] at loop 2
dealing with [6, 13] at loop 3
neighbors of b [[5, 14], [5, 12]]
cost from [5, 14] to [5, 13] is 1
<class 'int'>
5 1 6
5 1 6
6 <class 'int'>
5 1 6
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[5, 14][4, 14]
the points are:  [5, 14] [4, 14]
type for point in is_valid_node  <class 'list'>
[5, 14] 5 14
type for point in is_valid_node  <class 'list'>
[4, 14] 4 14
the point we are trying to find neighbors for  [4, 14]
neighboring cells are:  [[4, 15], [4, 13], [3, 14], [5, 14]]
dealing with [4, 15] at loop 0
dealing with [4, 13] at loop 1
dealing with [3, 14] at loop 2
[3, 14] is NOT a wall
dealing with [5, 14] at loop 3
[5, 14] is NOT a wall
neighbors of b [[3, 14], [5, 14]]
cost from [5, 14] to [4, 14] is 1
<class 'int'>
6 2 8
6 2 8
8 <class 'int'>
6 2 8
[5, 13] (5, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 13] 5 13
the point we are trying to find neighbors for  [5, 13]
neighboring cells are:  [[5, 14], [5, 12], [4, 13], [6, 13]]
dealing with [5, 14] at loop 0
[5, 14] is NOT a wall
dealing with [5, 12] at loop 1
[5, 12] is NOT a wall
dealing with [4, 13] at loop 2
dealing with [6, 13] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[5, 13][5, 14]
the points are:  [5, 13] [5, 14]
type for point in is_valid_node  <class 'list'>
[5, 13] 5 13
type for point in is_valid_node  <class 'list'>
[5, 14] 5 14
the point we are trying to find neighbors for  [5, 14]
neighboring cells are:  [[5, 15], [5, 13], [4, 14], [6, 14]]
dealing with [5, 15] at loop 0
[5, 15] is NOT a wall
dealing with [5, 13] at loop 1
[5, 13] is NOT a wall
dealing with [4, 14] at loop 2
[4, 14] is NOT a wall
dealing with [6, 14] at loop 3
neighbors of b [[5, 15], [5, 13], [4, 14]]
cost from [5, 13] to [5, 14] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[5, 13][5, 12]
the points are:  [5, 13] [5, 12]
type for point in is_valid_node  <class 'list'>
[5, 13] 5 13
type for point in is_valid_node  <class 'list'>
[5, 12] 5 12
the point we are trying to find neighbors for  [5, 12]
neighboring cells are:  [[5, 13], [5, 11], [4, 12], [6, 12]]
dealing with [5, 13] at loop 0
[5, 13] is NOT a wall
dealing with [5, 11] at loop 1
[5, 11] is NOT a wall
dealing with [4, 12] at loop 2
dealing with [6, 12] at loop 3
neighbors of b [[5, 13], [5, 11]]
cost from [5, 13] to [5, 12] is 1
<class 'int'>
5 0 5
5 0 5
5 <class 'int'>
5 0 5
[5, 12] (5, 12)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 12] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 12] 5 12
the point we are trying to find neighbors for  [5, 12]
neighboring cells are:  [[5, 13], [5, 11], [4, 12], [6, 12]]
dealing with [5, 13] at loop 0
[5, 13] is NOT a wall
dealing with [5, 11] at loop 1
[5, 11] is NOT a wall
dealing with [4, 12] at loop 2
dealing with [6, 12] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[5, 12][5, 13]
the points are:  [5, 12] [5, 13]
type for point in is_valid_node  <class 'list'>
[5, 12] 5 12
type for point in is_valid_node  <class 'list'>
[5, 13] 5 13
the point we are trying to find neighbors for  [5, 13]
neighboring cells are:  [[5, 14], [5, 12], [4, 13], [6, 13]]
dealing with [5, 14] at loop 0
[5, 14] is NOT a wall
dealing with [5, 12] at loop 1
[5, 12] is NOT a wall
dealing with [4, 13] at loop 2
dealing with [6, 13] at loop 3
neighbors of b [[5, 14], [5, 12]]
cost from [5, 12] to [5, 13] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[5, 12][5, 11]
the points are:  [5, 12] [5, 11]
type for point in is_valid_node  <class 'list'>
[5, 12] 5 12
type for point in is_valid_node  <class 'list'>
[5, 11] 5 11
the point we are trying to find neighbors for  [5, 11]
neighboring cells are:  [[5, 12], [5, 10], [4, 11], [6, 11]]
dealing with [5, 12] at loop 0
[5, 12] is NOT a wall
dealing with [5, 10] at loop 1
dealing with [4, 11] at loop 2
dealing with [6, 11] at loop 3
[6, 11] is NOT a wall
neighbors of b [[5, 12], [6, 11]]
cost from [5, 12] to [5, 11] is 1
<class 'int'>
5 1 6
5 1 6
6 <class 'int'>
5 1 6
[6, 11] (6, 11)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 11] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 11] 6 11
the point we are trying to find neighbors for  [6, 11]
neighboring cells are:  [[6, 12], [6, 10], [5, 11], [7, 11]]
dealing with [6, 12] at loop 0
dealing with [6, 10] at loop 1
dealing with [5, 11] at loop 2
[5, 11] is NOT a wall
dealing with [7, 11] at loop 3
[7, 11] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[6, 11][5, 11]
the points are:  [6, 11] [5, 11]
type for point in is_valid_node  <class 'list'>
[6, 11] 6 11
type for point in is_valid_node  <class 'list'>
[5, 11] 5 11
the point we are trying to find neighbors for  [5, 11]
neighboring cells are:  [[5, 12], [5, 10], [4, 11], [6, 11]]
dealing with [5, 12] at loop 0
[5, 12] is NOT a wall
dealing with [5, 10] at loop 1
dealing with [4, 11] at loop 2
dealing with [6, 11] at loop 3
[6, 11] is NOT a wall
neighbors of b [[5, 12], [6, 11]]
cost from [6, 11] to [5, 11] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[6, 11][7, 11]
the points are:  [6, 11] [7, 11]
type for point in is_valid_node  <class 'list'>
[6, 11] 6 11
type for point in is_valid_node  <class 'list'>
[7, 11] 7 11
the point we are trying to find neighbors for  [7, 11]
neighboring cells are:  [[7, 12], [7, 10], [6, 11], [8, 11]]
dealing with [7, 12] at loop 0
[7, 12] is NOT a wall
dealing with [7, 10] at loop 1
dealing with [6, 11] at loop 2
[6, 11] is NOT a wall
dealing with [8, 11] at loop 3
neighbors of b [[7, 12], [6, 11]]
cost from [6, 11] to [7, 11] is 1
[7, 21] (7, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 21] 7 21
the point we are trying to find neighbors for  [7, 21]
neighboring cells are:  [[7, 22], [7, 20], [6, 21], [8, 21]]
dealing with [7, 22] at loop 0
dealing with [7, 20] at loop 1
dealing with [6, 21] at loop 2
[6, 21] is NOT a wall
dealing with [8, 21] at loop 3
[8, 21] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[7, 21][6, 21]
the points are:  [7, 21] [6, 21]
type for point in is_valid_node  <class 'list'>
[7, 21] 7 21
type for point in is_valid_node  <class 'list'>
[6, 21] 6 21
the point we are trying to find neighbors for  [6, 21]
neighboring cells are:  [[6, 22], [6, 20], [5, 21], [7, 21]]
dealing with [6, 22] at loop 0
dealing with [6, 20] at loop 1
dealing with [5, 21] at loop 2
[5, 21] is NOT a wall
dealing with [7, 21] at loop 3
[7, 21] is NOT a wall
neighbors of b [[5, 21], [7, 21]]
cost from [7, 21] to [6, 21] is 1
<class 'int'>
4 9 13
4 9 13
13 <class 'int'>
4 9 13
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[7, 21][8, 21]
the points are:  [7, 21] [8, 21]
type for point in is_valid_node  <class 'list'>
[7, 21] 7 21
type for point in is_valid_node  <class 'list'>
[8, 21] 8 21
the point we are trying to find neighbors for  [8, 21]
neighboring cells are:  [[8, 22], [8, 20], [7, 21], [9, 21]]
dealing with [8, 22] at loop 0
dealing with [8, 20] at loop 1
dealing with [7, 21] at loop 2
[7, 21] is NOT a wall
dealing with [9, 21] at loop 3
[9, 21] is NOT a wall
neighbors of b [[7, 21], [9, 21]]
cost from [7, 21] to [8, 21] is 1
[9, 23] (9, 23)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 23] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 23] 9 23
the point we are trying to find neighbors for  [9, 23]
neighboring cells are:  [[9, 24], [9, 22], [8, 23], [10, 23]]
dealing with [9, 24] at loop 0
dealing with [9, 22] at loop 1
[9, 22] is NOT a wall
dealing with [8, 23] at loop 2
[8, 23] is NOT a wall
dealing with [10, 23] at loop 3
[10, 23] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[9, 23][9, 22]
the points are:  [9, 23] [9, 22]
type for point in is_valid_node  <class 'list'>
[9, 23] 9 23
type for point in is_valid_node  <class 'list'>
[9, 22] 9 22
the point we are trying to find neighbors for  [9, 22]
neighboring cells are:  [[9, 23], [9, 21], [8, 22], [10, 22]]
dealing with [9, 23] at loop 0
[9, 23] is NOT a wall
dealing with [9, 21] at loop 1
[9, 21] is NOT a wall
dealing with [8, 22] at loop 2
dealing with [10, 22] at loop 3
neighbors of b [[9, 23], [9, 21]]
cost from [9, 23] to [9, 22] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[9, 23][8, 23]
the points are:  [9, 23] [8, 23]
type for point in is_valid_node  <class 'list'>
[9, 23] 9 23
type for point in is_valid_node  <class 'list'>
[8, 23] 8 23
the point we are trying to find neighbors for  [8, 23]
neighboring cells are:  [[8, 24], [8, 22], [7, 23], [9, 23]]
dealing with [8, 24] at loop 0
dealing with [8, 22] at loop 1
dealing with [7, 23] at loop 2
[7, 23] is NOT a wall
dealing with [9, 23] at loop 3
[9, 23] is NOT a wall
neighbors of b [[7, 23], [9, 23]]
cost from [9, 23] to [8, 23] is 1
<class 'int'>
2 11 13
2 11 13
13 <class 'int'>
2 11 13
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[9, 23][10, 23]
the points are:  [9, 23] [10, 23]
type for point in is_valid_node  <class 'list'>
[9, 23] 9 23
type for point in is_valid_node  <class 'list'>
[10, 23] 10 23
the point we are trying to find neighbors for  [10, 23]
neighboring cells are:  [[10, 24], [10, 22], [9, 23], [11, 23]]
dealing with [10, 24] at loop 0
dealing with [10, 22] at loop 1
dealing with [9, 23] at loop 2
[9, 23] is NOT a wall
dealing with [11, 23] at loop 3
[11, 23] is NOT a wall
neighbors of b [[9, 23], [11, 23]]
cost from [9, 23] to [10, 23] is 1
<class 'int'>
0 11 11
0 11 11
11 <class 'int'>
0 11 11
[10, 23] (10, 23)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[10, 23] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[10, 23] 10 23
the point we are trying to find neighbors for  [10, 23]
neighboring cells are:  [[10, 24], [10, 22], [9, 23], [11, 23]]
dealing with [10, 24] at loop 0
dealing with [10, 22] at loop 1
dealing with [9, 23] at loop 2
[9, 23] is NOT a wall
dealing with [11, 23] at loop 3
[11, 23] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[10, 23][9, 23]
the points are:  [10, 23] [9, 23]
type for point in is_valid_node  <class 'list'>
[10, 23] 10 23
type for point in is_valid_node  <class 'list'>
[9, 23] 9 23
the point we are trying to find neighbors for  [9, 23]
neighboring cells are:  [[9, 24], [9, 22], [8, 23], [10, 23]]
dealing with [9, 24] at loop 0
dealing with [9, 22] at loop 1
[9, 22] is NOT a wall
dealing with [8, 23] at loop 2
[8, 23] is NOT a wall
dealing with [10, 23] at loop 3
[10, 23] is NOT a wall
neighbors of b [[9, 22], [8, 23], [10, 23]]
cost from [10, 23] to [9, 23] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[10, 23][11, 23]
the points are:  [10, 23] [11, 23]
type for point in is_valid_node  <class 'list'>
[10, 23] 10 23
type for point in is_valid_node  <class 'list'>
[11, 23] 11 23
the point we are trying to find neighbors for  [11, 23]
neighboring cells are:  [[11, 24], [11, 22], [10, 23], [12, 23]]
dealing with [11, 24] at loop 0
dealing with [11, 22] at loop 1
dealing with [10, 23] at loop 2
[10, 23] is NOT a wall
dealing with [12, 23] at loop 3
[12, 23] is NOT a wall
neighbors of b [[10, 23], [12, 23]]
cost from [10, 23] to [11, 23] is 1
<class 'int'>
1 11 12
1 11 12
12 <class 'int'>
1 11 12
[14, 21] (14, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 21] 14 21
the point we are trying to find neighbors for  [14, 21]
neighboring cells are:  [[14, 22], [14, 20], [13, 21], [15, 21]]
dealing with [14, 22] at loop 0
dealing with [14, 20] at loop 1
dealing with [13, 21] at loop 2
[13, 21] is NOT a wall
dealing with [15, 21] at loop 3
[15, 21] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
33[14, 21][13, 21]
the points are:  [14, 21] [13, 21]
type for point in is_valid_node  <class 'list'>
[14, 21] 14 21
type for point in is_valid_node  <class 'list'>
[13, 21] 13 21
the point we are trying to find neighbors for  [13, 21]
neighboring cells are:  [[13, 22], [13, 20], [12, 21], [14, 21]]
dealing with [13, 22] at loop 0
dealing with [13, 20] at loop 1
dealing with [12, 21] at loop 2
[12, 21] is NOT a wall
dealing with [14, 21] at loop 3
[14, 21] is NOT a wall
neighbors of b [[12, 21], [14, 21]]
cost from [14, 21] to [13, 21] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
33[14, 21][15, 21]
the points are:  [14, 21] [15, 21]
type for point in is_valid_node  <class 'list'>
[14, 21] 14 21
type for point in is_valid_node  <class 'list'>
[15, 21] 15 21
the point we are trying to find neighbors for  [15, 21]
neighboring cells are:  [[15, 22], [15, 20], [14, 21], [16, 21]]
dealing with [15, 22] at loop 0
dealing with [15, 20] at loop 1
dealing with [14, 21] at loop 2
[14, 21] is NOT a wall
dealing with [16, 21] at loop 3
[16, 21] is NOT a wall
neighbors of b [[14, 21], [16, 21]]
cost from [14, 21] to [15, 21] is 1
<class 'int'>
5 9 14
5 9 14
14 <class 'int'>
5 9 14
[16, 19] (16, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 19] 16 19
the point we are trying to find neighbors for  [16, 19]
neighboring cells are:  [[16, 20], [16, 18], [15, 19], [17, 19]]
dealing with [16, 20] at loop 0
dealing with [16, 18] at loop 1
dealing with [15, 19] at loop 2
[15, 19] is NOT a wall
dealing with [17, 19] at loop 3
[17, 19] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
33[16, 19][15, 19]
the points are:  [16, 19] [15, 19]
type for point in is_valid_node  <class 'list'>
[16, 19] 16 19
type for point in is_valid_node  <class 'list'>
[15, 19] 15 19
the point we are trying to find neighbors for  [15, 19]
neighboring cells are:  [[15, 20], [15, 18], [14, 19], [16, 19]]
dealing with [15, 20] at loop 0
dealing with [15, 18] at loop 1
[15, 18] is NOT a wall
dealing with [14, 19] at loop 2
dealing with [16, 19] at loop 3
[16, 19] is NOT a wall
neighbors of b [[15, 18], [16, 19]]
cost from [16, 19] to [15, 19] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
33[16, 19][17, 19]
the points are:  [16, 19] [17, 19]
type for point in is_valid_node  <class 'list'>
[16, 19] 16 19
type for point in is_valid_node  <class 'list'>
[17, 19] 17 19
the point we are trying to find neighbors for  [17, 19]
neighboring cells are:  [[17, 20], [17, 18], [16, 19], [18, 19]]
dealing with [17, 20] at loop 0
[17, 20] is NOT a wall
dealing with [17, 18] at loop 1
dealing with [16, 19] at loop 2
[16, 19] is NOT a wall
dealing with [18, 19] at loop 3
[18, 19] is NOT a wall
neighbors of b [[17, 20], [16, 19], [18, 19]]
cost from [16, 19] to [17, 19] is 1
<class 'int'>
7 7 14
7 7 14
14 <class 'int'>
7 7 14
[17, 7] (17, 7)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 7] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 7] 17 7
the point we are trying to find neighbors for  [17, 7]
neighboring cells are:  [[17, 8], [17, 6], [16, 7], [18, 7]]
dealing with [17, 8] at loop 0
dealing with [17, 6] at loop 1
dealing with [16, 7] at loop 2
[16, 7] is NOT a wall
dealing with [18, 7] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[17, 7][16, 7]
the points are:  [17, 7] [16, 7]
type for point in is_valid_node  <class 'list'>
[17, 7] 17 7
type for point in is_valid_node  <class 'list'>
[16, 7] 16 7
the point we are trying to find neighbors for  [16, 7]
neighboring cells are:  [[16, 8], [16, 6], [15, 7], [17, 7]]
dealing with [16, 8] at loop 0
dealing with [16, 6] at loop 1
dealing with [15, 7] at loop 2
[15, 7] is NOT a wall
dealing with [17, 7] at loop 3
[17, 7] is NOT a wall
neighbors of b [[15, 7], [17, 7]]
cost from [17, 7] to [16, 7] is 1
[18, 17] (18, 17)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 17] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 17] 18 17
the point we are trying to find neighbors for  [18, 17]
neighboring cells are:  [[18, 18], [18, 16], [17, 17], [19, 17]]
dealing with [18, 18] at loop 0
dealing with [18, 16] at loop 1
dealing with [17, 17] at loop 2
[17, 17] is NOT a wall
dealing with [19, 17] at loop 3
[19, 17] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
33[18, 17][17, 17]
the points are:  [18, 17] [17, 17]
type for point in is_valid_node  <class 'list'>
[18, 17] 18 17
type for point in is_valid_node  <class 'list'>
[17, 17] 17 17
the point we are trying to find neighbors for  [17, 17]
neighboring cells are:  [[17, 18], [17, 16], [16, 17], [18, 17]]
dealing with [17, 18] at loop 0
dealing with [17, 16] at loop 1
[17, 16] is NOT a wall
dealing with [16, 17] at loop 2
[16, 17] is NOT a wall
dealing with [18, 17] at loop 3
[18, 17] is NOT a wall
neighbors of b [[17, 16], [16, 17], [18, 17]]
cost from [18, 17] to [17, 17] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
33[18, 17][19, 17]
the points are:  [18, 17] [19, 17]
type for point in is_valid_node  <class 'list'>
[18, 17] 18 17
type for point in is_valid_node  <class 'list'>
[19, 17] 19 17
the point we are trying to find neighbors for  [19, 17]
neighboring cells are:  [[19, 18], [19, 16], [18, 17], [20, 17]]
dealing with [19, 18] at loop 0
dealing with [19, 16] at loop 1
[19, 16] is NOT a wall
dealing with [18, 17] at loop 2
[18, 17] is NOT a wall
dealing with [20, 17] at loop 3
neighbors of b [[19, 16], [18, 17]]
cost from [18, 17] to [19, 17] is 1
<class 'int'>
9 5 14
9 5 14
14 <class 'int'>
9 5 14
[21, 1] (21, 1)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 1] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 1] 21 1
the point we are trying to find neighbors for  [21, 1]
neighboring cells are:  [[21, 2], [21, 0], [20, 1], [22, 1]]
dealing with [21, 2] at loop 0
[21, 2] is NOT a wall
dealing with [21, 0] at loop 1
dealing with [20, 1] at loop 2
dealing with [22, 1] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
24[21, 1][21, 2]
the points are:  [21, 1] [21, 2]
type for point in is_valid_node  <class 'list'>
[21, 1] 21 1
type for point in is_valid_node  <class 'list'>
[21, 2] 21 2
the point we are trying to find neighbors for  [21, 2]
neighboring cells are:  [[21, 3], [21, 1], [20, 2], [22, 2]]
dealing with [21, 3] at loop 0
[21, 3] is NOT a wall
dealing with [21, 1] at loop 1
[21, 1] is NOT a wall
dealing with [20, 2] at loop 2
dealing with [22, 2] at loop 3
neighbors of b [[21, 3], [21, 1]]
cost from [21, 1] to [21, 2] is 1
[4, 14] (4, 14)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 14] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 14] 4 14
the point we are trying to find neighbors for  [4, 14]
neighboring cells are:  [[4, 15], [4, 13], [3, 14], [5, 14]]
dealing with [4, 15] at loop 0
dealing with [4, 13] at loop 1
dealing with [3, 14] at loop 2
[3, 14] is NOT a wall
dealing with [5, 14] at loop 3
[5, 14] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[4, 14][3, 14]
the points are:  [4, 14] [3, 14]
type for point in is_valid_node  <class 'list'>
[4, 14] 4 14
type for point in is_valid_node  <class 'list'>
[3, 14] 3 14
the point we are trying to find neighbors for  [3, 14]
neighboring cells are:  [[3, 15], [3, 13], [2, 14], [4, 14]]
dealing with [3, 15] at loop 0
[3, 15] is NOT a wall
dealing with [3, 13] at loop 1
[3, 13] is NOT a wall
dealing with [2, 14] at loop 2
dealing with [4, 14] at loop 3
[4, 14] is NOT a wall
neighbors of b [[3, 15], [3, 13], [4, 14]]
cost from [4, 14] to [3, 14] is 1
<class 'int'>
7 2 9
7 2 9
9 <class 'int'>
7 2 9
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[4, 14][5, 14]
the points are:  [4, 14] [5, 14]
type for point in is_valid_node  <class 'list'>
[4, 14] 4 14
type for point in is_valid_node  <class 'list'>
[5, 14] 5 14
the point we are trying to find neighbors for  [5, 14]
neighboring cells are:  [[5, 15], [5, 13], [4, 14], [6, 14]]
dealing with [5, 15] at loop 0
[5, 15] is NOT a wall
dealing with [5, 13] at loop 1
[5, 13] is NOT a wall
dealing with [4, 14] at loop 2
[4, 14] is NOT a wall
dealing with [6, 14] at loop 3
neighbors of b [[5, 15], [5, 13], [4, 14]]
cost from [4, 14] to [5, 14] is 1
[5, 11] (5, 11)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 11] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 11] 5 11
the point we are trying to find neighbors for  [5, 11]
neighboring cells are:  [[5, 12], [5, 10], [4, 11], [6, 11]]
dealing with [5, 12] at loop 0
[5, 12] is NOT a wall
dealing with [5, 10] at loop 1
dealing with [4, 11] at loop 2
dealing with [6, 11] at loop 3
[6, 11] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[5, 11][5, 12]
the points are:  [5, 11] [5, 12]
type for point in is_valid_node  <class 'list'>
[5, 11] 5 11
type for point in is_valid_node  <class 'list'>
[5, 12] 5 12
the point we are trying to find neighbors for  [5, 12]
neighboring cells are:  [[5, 13], [5, 11], [4, 12], [6, 12]]
dealing with [5, 13] at loop 0
[5, 13] is NOT a wall
dealing with [5, 11] at loop 1
[5, 11] is NOT a wall
dealing with [4, 12] at loop 2
dealing with [6, 12] at loop 3
neighbors of b [[5, 13], [5, 11]]
cost from [5, 11] to [5, 12] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[5, 11][6, 11]
the points are:  [5, 11] [6, 11]
type for point in is_valid_node  <class 'list'>
[5, 11] 5 11
type for point in is_valid_node  <class 'list'>
[6, 11] 6 11
the point we are trying to find neighbors for  [6, 11]
neighboring cells are:  [[6, 12], [6, 10], [5, 11], [7, 11]]
dealing with [6, 12] at loop 0
dealing with [6, 10] at loop 1
dealing with [5, 11] at loop 2
[5, 11] is NOT a wall
dealing with [7, 11] at loop 3
[7, 11] is NOT a wall
neighbors of b [[5, 11], [7, 11]]
cost from [5, 11] to [6, 11] is 1
[5, 16] (5, 16)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 16] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 16] 5 16
the point we are trying to find neighbors for  [5, 16]
neighboring cells are:  [[5, 17], [5, 15], [4, 16], [6, 16]]
dealing with [5, 17] at loop 0
[5, 17] is NOT a wall
dealing with [5, 15] at loop 1
[5, 15] is NOT a wall
dealing with [4, 16] at loop 2
dealing with [6, 16] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[5, 16][5, 17]
the points are:  [5, 16] [5, 17]
type for point in is_valid_node  <class 'list'>
[5, 16] 5 16
type for point in is_valid_node  <class 'list'>
[5, 17] 5 17
the point we are trying to find neighbors for  [5, 17]
neighboring cells are:  [[5, 18], [5, 16], [4, 17], [6, 17]]
dealing with [5, 18] at loop 0
dealing with [5, 16] at loop 1
[5, 16] is NOT a wall
dealing with [4, 17] at loop 2
[4, 17] is NOT a wall
dealing with [6, 17] at loop 3
neighbors of b [[5, 16], [4, 17]]
cost from [5, 16] to [5, 17] is 1
<class 'int'>
5 5 10
5 5 10
10 <class 'int'>
5 5 10
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[5, 16][5, 15]
the points are:  [5, 16] [5, 15]
type for point in is_valid_node  <class 'list'>
[5, 16] 5 16
type for point in is_valid_node  <class 'list'>
[5, 15] 5 15
the point we are trying to find neighbors for  [5, 15]
neighboring cells are:  [[5, 16], [5, 14], [4, 15], [6, 15]]
dealing with [5, 16] at loop 0
[5, 16] is NOT a wall
dealing with [5, 14] at loop 1
[5, 14] is NOT a wall
dealing with [4, 15] at loop 2
dealing with [6, 15] at loop 3
[6, 15] is NOT a wall
neighbors of b [[5, 16], [5, 14], [6, 15]]
cost from [5, 16] to [5, 15] is 1
[6, 21] (6, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 21] 6 21
the point we are trying to find neighbors for  [6, 21]
neighboring cells are:  [[6, 22], [6, 20], [5, 21], [7, 21]]
dealing with [6, 22] at loop 0
dealing with [6, 20] at loop 1
dealing with [5, 21] at loop 2
[5, 21] is NOT a wall
dealing with [7, 21] at loop 3
[7, 21] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[6, 21][5, 21]
the points are:  [6, 21] [5, 21]
type for point in is_valid_node  <class 'list'>
[6, 21] 6 21
type for point in is_valid_node  <class 'list'>
[5, 21] 5 21
the point we are trying to find neighbors for  [5, 21]
neighboring cells are:  [[5, 22], [5, 20], [4, 21], [6, 21]]
dealing with [5, 22] at loop 0
[5, 22] is NOT a wall
dealing with [5, 20] at loop 1
[5, 20] is NOT a wall
dealing with [4, 21] at loop 2
dealing with [6, 21] at loop 3
[6, 21] is NOT a wall
neighbors of b [[5, 22], [5, 20], [6, 21]]
cost from [6, 21] to [5, 21] is 1
<class 'int'>
5 9 14
5 9 14
14 <class 'int'>
5 9 14
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[6, 21][7, 21]
the points are:  [6, 21] [7, 21]
type for point in is_valid_node  <class 'list'>
[6, 21] 6 21
type for point in is_valid_node  <class 'list'>
[7, 21] 7 21
the point we are trying to find neighbors for  [7, 21]
neighboring cells are:  [[7, 22], [7, 20], [6, 21], [8, 21]]
dealing with [7, 22] at loop 0
dealing with [7, 20] at loop 1
dealing with [6, 21] at loop 2
[6, 21] is NOT a wall
dealing with [8, 21] at loop 3
[8, 21] is NOT a wall
neighbors of b [[6, 21], [8, 21]]
cost from [6, 21] to [7, 21] is 1
[8, 23] (8, 23)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[8, 23] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[8, 23] 8 23
the point we are trying to find neighbors for  [8, 23]
neighboring cells are:  [[8, 24], [8, 22], [7, 23], [9, 23]]
dealing with [8, 24] at loop 0
dealing with [8, 22] at loop 1
dealing with [7, 23] at loop 2
[7, 23] is NOT a wall
dealing with [9, 23] at loop 3
[9, 23] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[8, 23][7, 23]
the points are:  [8, 23] [7, 23]
type for point in is_valid_node  <class 'list'>
[8, 23] 8 23
type for point in is_valid_node  <class 'list'>
[7, 23] 7 23
the point we are trying to find neighbors for  [7, 23]
neighboring cells are:  [[7, 24], [7, 22], [6, 23], [8, 23]]
dealing with [7, 24] at loop 0
[7, 24] is NOT a wall
dealing with [7, 22] at loop 1
dealing with [6, 23] at loop 2
dealing with [8, 23] at loop 3
[8, 23] is NOT a wall
neighbors of b [[7, 24], [8, 23]]
cost from [8, 23] to [7, 23] is 1
<class 'int'>
3 11 14
3 11 14
14 <class 'int'>
3 11 14
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[8, 23][9, 23]
the points are:  [8, 23] [9, 23]
type for point in is_valid_node  <class 'list'>
[8, 23] 8 23
type for point in is_valid_node  <class 'list'>
[9, 23] 9 23
the point we are trying to find neighbors for  [9, 23]
neighboring cells are:  [[9, 24], [9, 22], [8, 23], [10, 23]]
dealing with [9, 24] at loop 0
dealing with [9, 22] at loop 1
[9, 22] is NOT a wall
dealing with [8, 23] at loop 2
[8, 23] is NOT a wall
dealing with [10, 23] at loop 3
[10, 23] is NOT a wall
neighbors of b [[9, 22], [8, 23], [10, 23]]
cost from [8, 23] to [9, 23] is 1
[11, 23] (11, 23)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 23] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 23] 11 23
the point we are trying to find neighbors for  [11, 23]
neighboring cells are:  [[11, 24], [11, 22], [10, 23], [12, 23]]
dealing with [11, 24] at loop 0
dealing with [11, 22] at loop 1
dealing with [10, 23] at loop 2
[10, 23] is NOT a wall
dealing with [12, 23] at loop 3
[12, 23] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
36[11, 23][10, 23]
the points are:  [11, 23] [10, 23]
type for point in is_valid_node  <class 'list'>
[11, 23] 11 23
type for point in is_valid_node  <class 'list'>
[10, 23] 10 23
the point we are trying to find neighbors for  [10, 23]
neighboring cells are:  [[10, 24], [10, 22], [9, 23], [11, 23]]
dealing with [10, 24] at loop 0
dealing with [10, 22] at loop 1
dealing with [9, 23] at loop 2
[9, 23] is NOT a wall
dealing with [11, 23] at loop 3
[11, 23] is NOT a wall
neighbors of b [[9, 23], [11, 23]]
cost from [11, 23] to [10, 23] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
36[11, 23][12, 23]
the points are:  [11, 23] [12, 23]
type for point in is_valid_node  <class 'list'>
[11, 23] 11 23
type for point in is_valid_node  <class 'list'>
[12, 23] 12 23
the point we are trying to find neighbors for  [12, 23]
neighboring cells are:  [[12, 24], [12, 22], [11, 23], [13, 23]]
dealing with [12, 24] at loop 0
dealing with [12, 22] at loop 1
dealing with [11, 23] at loop 2
[11, 23] is NOT a wall
dealing with [13, 23] at loop 3
[13, 23] is NOT a wall
neighbors of b [[11, 23], [13, 23]]
cost from [11, 23] to [12, 23] is 1
<class 'int'>
2 11 13
2 11 13
13 <class 'int'>
2 11 13
[15, 21] (15, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 21] 15 21
the point we are trying to find neighbors for  [15, 21]
neighboring cells are:  [[15, 22], [15, 20], [14, 21], [16, 21]]
dealing with [15, 22] at loop 0
dealing with [15, 20] at loop 1
dealing with [14, 21] at loop 2
[14, 21] is NOT a wall
dealing with [16, 21] at loop 3
[16, 21] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[15, 21][14, 21]
the points are:  [15, 21] [14, 21]
type for point in is_valid_node  <class 'list'>
[15, 21] 15 21
type for point in is_valid_node  <class 'list'>
[14, 21] 14 21
the point we are trying to find neighbors for  [14, 21]
neighboring cells are:  [[14, 22], [14, 20], [13, 21], [15, 21]]
dealing with [14, 22] at loop 0
dealing with [14, 20] at loop 1
dealing with [13, 21] at loop 2
[13, 21] is NOT a wall
dealing with [15, 21] at loop 3
[15, 21] is NOT a wall
neighbors of b [[13, 21], [15, 21]]
cost from [15, 21] to [14, 21] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[15, 21][16, 21]
the points are:  [15, 21] [16, 21]
type for point in is_valid_node  <class 'list'>
[15, 21] 15 21
type for point in is_valid_node  <class 'list'>
[16, 21] 16 21
the point we are trying to find neighbors for  [16, 21]
neighboring cells are:  [[16, 22], [16, 20], [15, 21], [17, 21]]
dealing with [16, 22] at loop 0
dealing with [16, 20] at loop 1
dealing with [15, 21] at loop 2
[15, 21] is NOT a wall
dealing with [17, 21] at loop 3
[17, 21] is NOT a wall
neighbors of b [[15, 21], [17, 21]]
cost from [15, 21] to [16, 21] is 1
<class 'int'>
6 9 15
6 9 15
15 <class 'int'>
6 9 15
[17, 19] (17, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 19] 17 19
the point we are trying to find neighbors for  [17, 19]
neighboring cells are:  [[17, 20], [17, 18], [16, 19], [18, 19]]
dealing with [17, 20] at loop 0
[17, 20] is NOT a wall
dealing with [17, 18] at loop 1
dealing with [16, 19] at loop 2
[16, 19] is NOT a wall
dealing with [18, 19] at loop 3
[18, 19] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[17, 19][17, 20]
the points are:  [17, 19] [17, 20]
type for point in is_valid_node  <class 'list'>
[17, 19] 17 19
type for point in is_valid_node  <class 'list'>
[17, 20] 17 20
the point we are trying to find neighbors for  [17, 20]
neighboring cells are:  [[17, 21], [17, 19], [16, 20], [18, 20]]
dealing with [17, 21] at loop 0
[17, 21] is NOT a wall
dealing with [17, 19] at loop 1
[17, 19] is NOT a wall
dealing with [16, 20] at loop 2
dealing with [18, 20] at loop 3
neighbors of b [[17, 21], [17, 19]]
cost from [17, 19] to [17, 20] is 1
<class 'int'>
7 8 15
7 8 15
15 <class 'int'>
7 8 15
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[17, 19][16, 19]
the points are:  [17, 19] [16, 19]
type for point in is_valid_node  <class 'list'>
[17, 19] 17 19
type for point in is_valid_node  <class 'list'>
[16, 19] 16 19
the point we are trying to find neighbors for  [16, 19]
neighboring cells are:  [[16, 20], [16, 18], [15, 19], [17, 19]]
dealing with [16, 20] at loop 0
dealing with [16, 18] at loop 1
dealing with [15, 19] at loop 2
[15, 19] is NOT a wall
dealing with [17, 19] at loop 3
[17, 19] is NOT a wall
neighbors of b [[15, 19], [17, 19]]
cost from [17, 19] to [16, 19] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[17, 19][18, 19]
the points are:  [17, 19] [18, 19]
type for point in is_valid_node  <class 'list'>
[17, 19] 17 19
type for point in is_valid_node  <class 'list'>
[18, 19] 18 19
the point we are trying to find neighbors for  [18, 19]
neighboring cells are:  [[18, 20], [18, 18], [17, 19], [19, 19]]
dealing with [18, 20] at loop 0
dealing with [18, 18] at loop 1
dealing with [17, 19] at loop 2
[17, 19] is NOT a wall
dealing with [19, 19] at loop 3
[19, 19] is NOT a wall
neighbors of b [[17, 19], [19, 19]]
cost from [17, 19] to [18, 19] is 1
<class 'int'>
8 7 15
8 7 15
15 <class 'int'>
8 7 15
[19, 17] (19, 17)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 17] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 17] 19 17
the point we are trying to find neighbors for  [19, 17]
neighboring cells are:  [[19, 18], [19, 16], [18, 17], [20, 17]]
dealing with [19, 18] at loop 0
dealing with [19, 16] at loop 1
[19, 16] is NOT a wall
dealing with [18, 17] at loop 2
[18, 17] is NOT a wall
dealing with [20, 17] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[19, 17][19, 16]
the points are:  [19, 17] [19, 16]
type for point in is_valid_node  <class 'list'>
[19, 17] 19 17
type for point in is_valid_node  <class 'list'>
[19, 16] 19 16
the point we are trying to find neighbors for  [19, 16]
neighboring cells are:  [[19, 17], [19, 15], [18, 16], [20, 16]]
dealing with [19, 17] at loop 0
[19, 17] is NOT a wall
dealing with [19, 15] at loop 1
[19, 15] is NOT a wall
dealing with [18, 16] at loop 2
dealing with [20, 16] at loop 3
neighbors of b [[19, 17], [19, 15]]
cost from [19, 17] to [19, 16] is 1
<class 'int'>
9 4 13
9 4 13
13 <class 'int'>
9 4 13
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
34[19, 17][18, 17]
the points are:  [19, 17] [18, 17]
type for point in is_valid_node  <class 'list'>
[19, 17] 19 17
type for point in is_valid_node  <class 'list'>
[18, 17] 18 17
the point we are trying to find neighbors for  [18, 17]
neighboring cells are:  [[18, 18], [18, 16], [17, 17], [19, 17]]
dealing with [18, 18] at loop 0
dealing with [18, 16] at loop 1
dealing with [17, 17] at loop 2
[17, 17] is NOT a wall
dealing with [19, 17] at loop 3
[19, 17] is NOT a wall
neighbors of b [[17, 17], [19, 17]]
cost from [19, 17] to [18, 17] is 1
[19, 16] (19, 16)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 16] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 16] 19 16
the point we are trying to find neighbors for  [19, 16]
neighboring cells are:  [[19, 17], [19, 15], [18, 16], [20, 16]]
dealing with [19, 17] at loop 0
[19, 17] is NOT a wall
dealing with [19, 15] at loop 1
[19, 15] is NOT a wall
dealing with [18, 16] at loop 2
dealing with [20, 16] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[19, 16][19, 17]
the points are:  [19, 16] [19, 17]
type for point in is_valid_node  <class 'list'>
[19, 16] 19 16
type for point in is_valid_node  <class 'list'>
[19, 17] 19 17
the point we are trying to find neighbors for  [19, 17]
neighboring cells are:  [[19, 18], [19, 16], [18, 17], [20, 17]]
dealing with [19, 18] at loop 0
dealing with [19, 16] at loop 1
[19, 16] is NOT a wall
dealing with [18, 17] at loop 2
[18, 17] is NOT a wall
dealing with [20, 17] at loop 3
neighbors of b [[19, 16], [18, 17]]
cost from [19, 16] to [19, 17] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[19, 16][19, 15]
the points are:  [19, 16] [19, 15]
type for point in is_valid_node  <class 'list'>
[19, 16] 19 16
type for point in is_valid_node  <class 'list'>
[19, 15] 19 15
the point we are trying to find neighbors for  [19, 15]
neighboring cells are:  [[19, 16], [19, 14], [18, 15], [20, 15]]
dealing with [19, 16] at loop 0
[19, 16] is NOT a wall
dealing with [19, 14] at loop 1
dealing with [18, 15] at loop 2
dealing with [20, 15] at loop 3
[20, 15] is NOT a wall
neighbors of b [[19, 16], [20, 15]]
cost from [19, 16] to [19, 15] is 1
<class 'int'>
9 3 12
9 3 12
12 <class 'int'>
9 3 12
[19, 15] (19, 15)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 15] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 15] 19 15
the point we are trying to find neighbors for  [19, 15]
neighboring cells are:  [[19, 16], [19, 14], [18, 15], [20, 15]]
dealing with [19, 16] at loop 0
[19, 16] is NOT a wall
dealing with [19, 14] at loop 1
dealing with [18, 15] at loop 2
dealing with [20, 15] at loop 3
[20, 15] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
36[19, 15][19, 16]
the points are:  [19, 15] [19, 16]
type for point in is_valid_node  <class 'list'>
[19, 15] 19 15
type for point in is_valid_node  <class 'list'>
[19, 16] 19 16
the point we are trying to find neighbors for  [19, 16]
neighboring cells are:  [[19, 17], [19, 15], [18, 16], [20, 16]]
dealing with [19, 17] at loop 0
[19, 17] is NOT a wall
dealing with [19, 15] at loop 1
[19, 15] is NOT a wall
dealing with [18, 16] at loop 2
dealing with [20, 16] at loop 3
neighbors of b [[19, 17], [19, 15]]
cost from [19, 15] to [19, 16] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
36[19, 15][20, 15]
the points are:  [19, 15] [20, 15]
type for point in is_valid_node  <class 'list'>
[19, 15] 19 15
type for point in is_valid_node  <class 'list'>
[20, 15] 20 15
the point we are trying to find neighbors for  [20, 15]
neighboring cells are:  [[20, 16], [20, 14], [19, 15], [21, 15]]
dealing with [20, 16] at loop 0
dealing with [20, 14] at loop 1
dealing with [19, 15] at loop 2
[19, 15] is NOT a wall
dealing with [21, 15] at loop 3
[21, 15] is NOT a wall
neighbors of b [[19, 15], [21, 15]]
cost from [19, 15] to [20, 15] is 1
<class 'int'>
10 3 13
10 3 13
13 <class 'int'>
10 3 13
[3, 14] (3, 14)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 14] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 14] 3 14
the point we are trying to find neighbors for  [3, 14]
neighboring cells are:  [[3, 15], [3, 13], [2, 14], [4, 14]]
dealing with [3, 15] at loop 0
[3, 15] is NOT a wall
dealing with [3, 13] at loop 1
[3, 13] is NOT a wall
dealing with [2, 14] at loop 2
dealing with [4, 14] at loop 3
[4, 14] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[3, 14][3, 15]
the points are:  [3, 14] [3, 15]
type for point in is_valid_node  <class 'list'>
[3, 14] 3 14
type for point in is_valid_node  <class 'list'>
[3, 15] 3 15
the point we are trying to find neighbors for  [3, 15]
neighboring cells are:  [[3, 16], [3, 14], [2, 15], [4, 15]]
dealing with [3, 16] at loop 0
[3, 16] is NOT a wall
dealing with [3, 14] at loop 1
[3, 14] is NOT a wall
dealing with [2, 15] at loop 2
dealing with [4, 15] at loop 3
neighbors of b [[3, 16], [3, 14]]
cost from [3, 14] to [3, 15] is 1
<class 'int'>
7 3 10
7 3 10
10 <class 'int'>
7 3 10
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[3, 14][3, 13]
the points are:  [3, 14] [3, 13]
type for point in is_valid_node  <class 'list'>
[3, 14] 3 14
type for point in is_valid_node  <class 'list'>
[3, 13] 3 13
the point we are trying to find neighbors for  [3, 13]
neighboring cells are:  [[3, 14], [3, 12], [2, 13], [4, 13]]
dealing with [3, 14] at loop 0
[3, 14] is NOT a wall
dealing with [3, 12] at loop 1
dealing with [2, 13] at loop 2
[2, 13] is NOT a wall
dealing with [4, 13] at loop 3
neighbors of b [[3, 14], [2, 13]]
cost from [3, 14] to [3, 13] is 1
<class 'int'>
7 1 8
7 1 8
8 <class 'int'>
7 1 8
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[3, 14][4, 14]
the points are:  [3, 14] [4, 14]
type for point in is_valid_node  <class 'list'>
[3, 14] 3 14
type for point in is_valid_node  <class 'list'>
[4, 14] 4 14
the point we are trying to find neighbors for  [4, 14]
neighboring cells are:  [[4, 15], [4, 13], [3, 14], [5, 14]]
dealing with [4, 15] at loop 0
dealing with [4, 13] at loop 1
dealing with [3, 14] at loop 2
[3, 14] is NOT a wall
dealing with [5, 14] at loop 3
[5, 14] is NOT a wall
neighbors of b [[3, 14], [5, 14]]
cost from [3, 14] to [4, 14] is 1
[3, 13] (3, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 13] 3 13
the point we are trying to find neighbors for  [3, 13]
neighboring cells are:  [[3, 14], [3, 12], [2, 13], [4, 13]]
dealing with [3, 14] at loop 0
[3, 14] is NOT a wall
dealing with [3, 12] at loop 1
dealing with [2, 13] at loop 2
[2, 13] is NOT a wall
dealing with [4, 13] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[3, 13][3, 14]
the points are:  [3, 13] [3, 14]
type for point in is_valid_node  <class 'list'>
[3, 13] 3 13
type for point in is_valid_node  <class 'list'>
[3, 14] 3 14
the point we are trying to find neighbors for  [3, 14]
neighboring cells are:  [[3, 15], [3, 13], [2, 14], [4, 14]]
dealing with [3, 15] at loop 0
[3, 15] is NOT a wall
dealing with [3, 13] at loop 1
[3, 13] is NOT a wall
dealing with [2, 14] at loop 2
dealing with [4, 14] at loop 3
[4, 14] is NOT a wall
neighbors of b [[3, 15], [3, 13], [4, 14]]
cost from [3, 13] to [3, 14] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[3, 13][2, 13]
the points are:  [3, 13] [2, 13]
type for point in is_valid_node  <class 'list'>
[3, 13] 3 13
type for point in is_valid_node  <class 'list'>
[2, 13] 2 13
the point we are trying to find neighbors for  [2, 13]
neighboring cells are:  [[2, 14], [2, 12], [1, 13], [3, 13]]
dealing with [2, 14] at loop 0
dealing with [2, 12] at loop 1
dealing with [1, 13] at loop 2
[1, 13] is NOT a wall
dealing with [3, 13] at loop 3
[3, 13] is NOT a wall
neighbors of b [[1, 13], [3, 13]]
cost from [3, 13] to [2, 13] is 1
<class 'int'>
8 1 9
8 1 9
9 <class 'int'>
8 1 9
[5, 17] (5, 17)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 17] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 17] 5 17
the point we are trying to find neighbors for  [5, 17]
neighboring cells are:  [[5, 18], [5, 16], [4, 17], [6, 17]]
dealing with [5, 18] at loop 0
dealing with [5, 16] at loop 1
[5, 16] is NOT a wall
dealing with [4, 17] at loop 2
[4, 17] is NOT a wall
dealing with [6, 17] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[5, 17][5, 16]
the points are:  [5, 17] [5, 16]
type for point in is_valid_node  <class 'list'>
[5, 17] 5 17
type for point in is_valid_node  <class 'list'>
[5, 16] 5 16
the point we are trying to find neighbors for  [5, 16]
neighboring cells are:  [[5, 17], [5, 15], [4, 16], [6, 16]]
dealing with [5, 17] at loop 0
[5, 17] is NOT a wall
dealing with [5, 15] at loop 1
[5, 15] is NOT a wall
dealing with [4, 16] at loop 2
dealing with [6, 16] at loop 3
neighbors of b [[5, 17], [5, 15]]
cost from [5, 17] to [5, 16] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[5, 17][4, 17]
the points are:  [5, 17] [4, 17]
type for point in is_valid_node  <class 'list'>
[5, 17] 5 17
type for point in is_valid_node  <class 'list'>
[4, 17] 4 17
the point we are trying to find neighbors for  [4, 17]
neighboring cells are:  [[4, 18], [4, 16], [3, 17], [5, 17]]
dealing with [4, 18] at loop 0
dealing with [4, 16] at loop 1
dealing with [3, 17] at loop 2
[3, 17] is NOT a wall
dealing with [5, 17] at loop 3
[5, 17] is NOT a wall
neighbors of b [[3, 17], [5, 17]]
cost from [5, 17] to [4, 17] is 1
<class 'int'>
6 5 11
6 5 11
11 <class 'int'>
6 5 11
[5, 21] (5, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 21] 5 21
the point we are trying to find neighbors for  [5, 21]
neighboring cells are:  [[5, 22], [5, 20], [4, 21], [6, 21]]
dealing with [5, 22] at loop 0
[5, 22] is NOT a wall
dealing with [5, 20] at loop 1
[5, 20] is NOT a wall
dealing with [4, 21] at loop 2
dealing with [6, 21] at loop 3
[6, 21] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
36[5, 21][5, 22]
the points are:  [5, 21] [5, 22]
type for point in is_valid_node  <class 'list'>
[5, 21] 5 21
type for point in is_valid_node  <class 'list'>
[5, 22] 5 22
the point we are trying to find neighbors for  [5, 22]
neighboring cells are:  [[5, 23], [5, 21], [4, 22], [6, 22]]
dealing with [5, 23] at loop 0
[5, 23] is NOT a wall
dealing with [5, 21] at loop 1
[5, 21] is NOT a wall
dealing with [4, 22] at loop 2
dealing with [6, 22] at loop 3
neighbors of b [[5, 23], [5, 21]]
cost from [5, 21] to [5, 22] is 1
<class 'int'>
5 10 15
5 10 15
15 <class 'int'>
5 10 15
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
36[5, 21][5, 20]
the points are:  [5, 21] [5, 20]
type for point in is_valid_node  <class 'list'>
[5, 21] 5 21
type for point in is_valid_node  <class 'list'>
[5, 20] 5 20
the point we are trying to find neighbors for  [5, 20]
neighboring cells are:  [[5, 21], [5, 19], [4, 20], [6, 20]]
dealing with [5, 21] at loop 0
[5, 21] is NOT a wall
dealing with [5, 19] at loop 1
[5, 19] is NOT a wall
dealing with [4, 20] at loop 2
dealing with [6, 20] at loop 3
neighbors of b [[5, 21], [5, 19]]
cost from [5, 21] to [5, 20] is 1
<class 'int'>
5 8 13
5 8 13
13 <class 'int'>
5 8 13
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
36[5, 21][6, 21]
the points are:  [5, 21] [6, 21]
type for point in is_valid_node  <class 'list'>
[5, 21] 5 21
type for point in is_valid_node  <class 'list'>
[6, 21] 6 21
the point we are trying to find neighbors for  [6, 21]
neighboring cells are:  [[6, 22], [6, 20], [5, 21], [7, 21]]
dealing with [6, 22] at loop 0
dealing with [6, 20] at loop 1
dealing with [5, 21] at loop 2
[5, 21] is NOT a wall
dealing with [7, 21] at loop 3
[7, 21] is NOT a wall
neighbors of b [[5, 21], [7, 21]]
cost from [5, 21] to [6, 21] is 1
[5, 20] (5, 20)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 20] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 20] 5 20
the point we are trying to find neighbors for  [5, 20]
neighboring cells are:  [[5, 21], [5, 19], [4, 20], [6, 20]]
dealing with [5, 21] at loop 0
[5, 21] is NOT a wall
dealing with [5, 19] at loop 1
[5, 19] is NOT a wall
dealing with [4, 20] at loop 2
dealing with [6, 20] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
37[5, 20][5, 21]
the points are:  [5, 20] [5, 21]
type for point in is_valid_node  <class 'list'>
[5, 20] 5 20
type for point in is_valid_node  <class 'list'>
[5, 21] 5 21
the point we are trying to find neighbors for  [5, 21]
neighboring cells are:  [[5, 22], [5, 20], [4, 21], [6, 21]]
dealing with [5, 22] at loop 0
[5, 22] is NOT a wall
dealing with [5, 20] at loop 1
[5, 20] is NOT a wall
dealing with [4, 21] at loop 2
dealing with [6, 21] at loop 3
[6, 21] is NOT a wall
neighbors of b [[5, 22], [5, 20], [6, 21]]
cost from [5, 20] to [5, 21] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
37[5, 20][5, 19]
the points are:  [5, 20] [5, 19]
type for point in is_valid_node  <class 'list'>
[5, 20] 5 20
type for point in is_valid_node  <class 'list'>
[5, 19] 5 19
the point we are trying to find neighbors for  [5, 19]
neighboring cells are:  [[5, 20], [5, 18], [4, 19], [6, 19]]
dealing with [5, 20] at loop 0
[5, 20] is NOT a wall
dealing with [5, 18] at loop 1
dealing with [4, 19] at loop 2
dealing with [6, 19] at loop 3
[6, 19] is NOT a wall
neighbors of b [[5, 20], [6, 19]]
cost from [5, 20] to [5, 19] is 1
<class 'int'>
5 7 12
5 7 12
12 <class 'int'>
5 7 12
[5, 19] (5, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 19] 5 19
the point we are trying to find neighbors for  [5, 19]
neighboring cells are:  [[5, 20], [5, 18], [4, 19], [6, 19]]
dealing with [5, 20] at loop 0
[5, 20] is NOT a wall
dealing with [5, 18] at loop 1
dealing with [4, 19] at loop 2
dealing with [6, 19] at loop 3
[6, 19] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
38[5, 19][5, 20]
the points are:  [5, 19] [5, 20]
type for point in is_valid_node  <class 'list'>
[5, 19] 5 19
type for point in is_valid_node  <class 'list'>
[5, 20] 5 20
the point we are trying to find neighbors for  [5, 20]
neighboring cells are:  [[5, 21], [5, 19], [4, 20], [6, 20]]
dealing with [5, 21] at loop 0
[5, 21] is NOT a wall
dealing with [5, 19] at loop 1
[5, 19] is NOT a wall
dealing with [4, 20] at loop 2
dealing with [6, 20] at loop 3
neighbors of b [[5, 21], [5, 19]]
cost from [5, 19] to [5, 20] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
38[5, 19][6, 19]
the points are:  [5, 19] [6, 19]
type for point in is_valid_node  <class 'list'>
[5, 19] 5 19
type for point in is_valid_node  <class 'list'>
[6, 19] 6 19
the point we are trying to find neighbors for  [6, 19]
neighboring cells are:  [[6, 20], [6, 18], [5, 19], [7, 19]]
dealing with [6, 20] at loop 0
dealing with [6, 18] at loop 1
dealing with [5, 19] at loop 2
[5, 19] is NOT a wall
dealing with [7, 19] at loop 3
[7, 19] is NOT a wall
neighbors of b [[5, 19], [7, 19]]
cost from [5, 19] to [6, 19] is 1
<class 'int'>
4 7 11
4 7 11
11 <class 'int'>
4 7 11
[6, 19] (6, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 19] 6 19
the point we are trying to find neighbors for  [6, 19]
neighboring cells are:  [[6, 20], [6, 18], [5, 19], [7, 19]]
dealing with [6, 20] at loop 0
dealing with [6, 18] at loop 1
dealing with [5, 19] at loop 2
[5, 19] is NOT a wall
dealing with [7, 19] at loop 3
[7, 19] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[6, 19][5, 19]
the points are:  [6, 19] [5, 19]
type for point in is_valid_node  <class 'list'>
[6, 19] 6 19
type for point in is_valid_node  <class 'list'>
[5, 19] 5 19
the point we are trying to find neighbors for  [5, 19]
neighboring cells are:  [[5, 20], [5, 18], [4, 19], [6, 19]]
dealing with [5, 20] at loop 0
[5, 20] is NOT a wall
dealing with [5, 18] at loop 1
dealing with [4, 19] at loop 2
dealing with [6, 19] at loop 3
[6, 19] is NOT a wall
neighbors of b [[5, 20], [6, 19]]
cost from [6, 19] to [5, 19] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[6, 19][7, 19]
the points are:  [6, 19] [7, 19]
type for point in is_valid_node  <class 'list'>
[6, 19] 6 19
type for point in is_valid_node  <class 'list'>
[7, 19] 7 19
the point we are trying to find neighbors for  [7, 19]
neighboring cells are:  [[7, 20], [7, 18], [6, 19], [8, 19]]
dealing with [7, 20] at loop 0
dealing with [7, 18] at loop 1
[7, 18] is NOT a wall
dealing with [6, 19] at loop 2
[6, 19] is NOT a wall
dealing with [8, 19] at loop 3
neighbors of b [[7, 18], [6, 19]]
cost from [6, 19] to [7, 19] is 1
<class 'int'>
3 7 10
3 7 10
10 <class 'int'>
3 7 10
[7, 19] (7, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 19] 7 19
the point we are trying to find neighbors for  [7, 19]
neighboring cells are:  [[7, 20], [7, 18], [6, 19], [8, 19]]
dealing with [7, 20] at loop 0
dealing with [7, 18] at loop 1
[7, 18] is NOT a wall
dealing with [6, 19] at loop 2
[6, 19] is NOT a wall
dealing with [8, 19] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[7, 19][7, 18]
the points are:  [7, 19] [7, 18]
type for point in is_valid_node  <class 'list'>
[7, 19] 7 19
type for point in is_valid_node  <class 'list'>
[7, 18] 7 18
the point we are trying to find neighbors for  [7, 18]
neighboring cells are:  [[7, 19], [7, 17], [6, 18], [8, 18]]
dealing with [7, 19] at loop 0
[7, 19] is NOT a wall
dealing with [7, 17] at loop 1
[7, 17] is NOT a wall
dealing with [6, 18] at loop 2
dealing with [8, 18] at loop 3
neighbors of b [[7, 19], [7, 17]]
cost from [7, 19] to [7, 18] is 1
<class 'int'>
3 6 9
3 6 9
9 <class 'int'>
3 6 9
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[7, 19][6, 19]
the points are:  [7, 19] [6, 19]
type for point in is_valid_node  <class 'list'>
[7, 19] 7 19
type for point in is_valid_node  <class 'list'>
[6, 19] 6 19
the point we are trying to find neighbors for  [6, 19]
neighboring cells are:  [[6, 20], [6, 18], [5, 19], [7, 19]]
dealing with [6, 20] at loop 0
dealing with [6, 18] at loop 1
dealing with [5, 19] at loop 2
[5, 19] is NOT a wall
dealing with [7, 19] at loop 3
[7, 19] is NOT a wall
neighbors of b [[5, 19], [7, 19]]
cost from [7, 19] to [6, 19] is 1
[7, 18] (7, 18)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 18] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 18] 7 18
the point we are trying to find neighbors for  [7, 18]
neighboring cells are:  [[7, 19], [7, 17], [6, 18], [8, 18]]
dealing with [7, 19] at loop 0
[7, 19] is NOT a wall
dealing with [7, 17] at loop 1
[7, 17] is NOT a wall
dealing with [6, 18] at loop 2
dealing with [8, 18] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[7, 18][7, 19]
the points are:  [7, 18] [7, 19]
type for point in is_valid_node  <class 'list'>
[7, 18] 7 18
type for point in is_valid_node  <class 'list'>
[7, 19] 7 19
the point we are trying to find neighbors for  [7, 19]
neighboring cells are:  [[7, 20], [7, 18], [6, 19], [8, 19]]
dealing with [7, 20] at loop 0
dealing with [7, 18] at loop 1
[7, 18] is NOT a wall
dealing with [6, 19] at loop 2
[6, 19] is NOT a wall
dealing with [8, 19] at loop 3
neighbors of b [[7, 18], [6, 19]]
cost from [7, 18] to [7, 19] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[7, 18][7, 17]
the points are:  [7, 18] [7, 17]
type for point in is_valid_node  <class 'list'>
[7, 18] 7 18
type for point in is_valid_node  <class 'list'>
[7, 17] 7 17
the point we are trying to find neighbors for  [7, 17]
neighboring cells are:  [[7, 18], [7, 16], [6, 17], [8, 17]]
dealing with [7, 18] at loop 0
[7, 18] is NOT a wall
dealing with [7, 16] at loop 1
dealing with [6, 17] at loop 2
dealing with [8, 17] at loop 3
neighbors of b [[7, 18]]
cost from [7, 18] to [7, 17] is 1
<class 'int'>
3 5 8
3 5 8
8 <class 'int'>
3 5 8
[7, 17] (7, 17)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 17] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 17] 7 17
the point we are trying to find neighbors for  [7, 17]
neighboring cells are:  [[7, 18], [7, 16], [6, 17], [8, 17]]
dealing with [7, 18] at loop 0
[7, 18] is NOT a wall
dealing with [7, 16] at loop 1
dealing with [6, 17] at loop 2
dealing with [8, 17] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[7, 17][7, 18]
the points are:  [7, 17] [7, 18]
type for point in is_valid_node  <class 'list'>
[7, 17] 7 17
type for point in is_valid_node  <class 'list'>
[7, 18] 7 18
the point we are trying to find neighbors for  [7, 18]
neighboring cells are:  [[7, 19], [7, 17], [6, 18], [8, 18]]
dealing with [7, 19] at loop 0
[7, 19] is NOT a wall
dealing with [7, 17] at loop 1
[7, 17] is NOT a wall
dealing with [6, 18] at loop 2
dealing with [8, 18] at loop 3
neighbors of b [[7, 19], [7, 17]]
cost from [7, 17] to [7, 18] is 1
[7, 23] (7, 23)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 23] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 23] 7 23
the point we are trying to find neighbors for  [7, 23]
neighboring cells are:  [[7, 24], [7, 22], [6, 23], [8, 23]]
dealing with [7, 24] at loop 0
[7, 24] is NOT a wall
dealing with [7, 22] at loop 1
dealing with [6, 23] at loop 2
dealing with [8, 23] at loop 3
[8, 23] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
36[7, 23][7, 24]
the points are:  [7, 23] [7, 24]
type for point in is_valid_node  <class 'list'>
[7, 23] 7 23
type for point in is_valid_node  <class 'list'>
[7, 24] 7 24
the point we are trying to find neighbors for  [7, 24]
neighboring cells are:  [[7, 25], [7, 23], [6, 24], [8, 24]]
dealing with [7, 25] at loop 0
[7, 25] is NOT a wall
dealing with [7, 23] at loop 1
[7, 23] is NOT a wall
dealing with [6, 24] at loop 2
dealing with [8, 24] at loop 3
neighbors of b [[7, 25], [7, 23]]
cost from [7, 23] to [7, 24] is 1
<class 'int'>
3 12 15
3 12 15
15 <class 'int'>
3 12 15
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
36[7, 23][8, 23]
the points are:  [7, 23] [8, 23]
type for point in is_valid_node  <class 'list'>
[7, 23] 7 23
type for point in is_valid_node  <class 'list'>
[8, 23] 8 23
the point we are trying to find neighbors for  [8, 23]
neighboring cells are:  [[8, 24], [8, 22], [7, 23], [9, 23]]
dealing with [8, 24] at loop 0
dealing with [8, 22] at loop 1
dealing with [7, 23] at loop 2
[7, 23] is NOT a wall
dealing with [9, 23] at loop 3
[9, 23] is NOT a wall
neighbors of b [[7, 23], [9, 23]]
cost from [7, 23] to [8, 23] is 1
[12, 23] (12, 23)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 23] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 23] 12 23
the point we are trying to find neighbors for  [12, 23]
neighboring cells are:  [[12, 24], [12, 22], [11, 23], [13, 23]]
dealing with [12, 24] at loop 0
dealing with [12, 22] at loop 1
dealing with [11, 23] at loop 2
[11, 23] is NOT a wall
dealing with [13, 23] at loop 3
[13, 23] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
37[12, 23][11, 23]
the points are:  [12, 23] [11, 23]
type for point in is_valid_node  <class 'list'>
[12, 23] 12 23
type for point in is_valid_node  <class 'list'>
[11, 23] 11 23
the point we are trying to find neighbors for  [11, 23]
neighboring cells are:  [[11, 24], [11, 22], [10, 23], [12, 23]]
dealing with [11, 24] at loop 0
dealing with [11, 22] at loop 1
dealing with [10, 23] at loop 2
[10, 23] is NOT a wall
dealing with [12, 23] at loop 3
[12, 23] is NOT a wall
neighbors of b [[10, 23], [12, 23]]
cost from [12, 23] to [11, 23] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
37[12, 23][13, 23]
the points are:  [12, 23] [13, 23]
type for point in is_valid_node  <class 'list'>
[12, 23] 12 23
type for point in is_valid_node  <class 'list'>
[13, 23] 13 23
the point we are trying to find neighbors for  [13, 23]
neighboring cells are:  [[13, 24], [13, 22], [12, 23], [14, 23]]
dealing with [13, 24] at loop 0
[13, 24] is NOT a wall
dealing with [13, 22] at loop 1
dealing with [12, 23] at loop 2
[12, 23] is NOT a wall
dealing with [14, 23] at loop 3
neighbors of b [[13, 24], [12, 23]]
cost from [12, 23] to [13, 23] is 1
<class 'int'>
3 11 14
3 11 14
14 <class 'int'>
3 11 14
[16, 21] (16, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 21] 16 21
the point we are trying to find neighbors for  [16, 21]
neighboring cells are:  [[16, 22], [16, 20], [15, 21], [17, 21]]
dealing with [16, 22] at loop 0
dealing with [16, 20] at loop 1
dealing with [15, 21] at loop 2
[15, 21] is NOT a wall
dealing with [17, 21] at loop 3
[17, 21] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[16, 21][15, 21]
the points are:  [16, 21] [15, 21]
type for point in is_valid_node  <class 'list'>
[16, 21] 16 21
type for point in is_valid_node  <class 'list'>
[15, 21] 15 21
the point we are trying to find neighbors for  [15, 21]
neighboring cells are:  [[15, 22], [15, 20], [14, 21], [16, 21]]
dealing with [15, 22] at loop 0
dealing with [15, 20] at loop 1
dealing with [14, 21] at loop 2
[14, 21] is NOT a wall
dealing with [16, 21] at loop 3
[16, 21] is NOT a wall
neighbors of b [[14, 21], [16, 21]]
cost from [16, 21] to [15, 21] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[16, 21][17, 21]
the points are:  [16, 21] [17, 21]
type for point in is_valid_node  <class 'list'>
[16, 21] 16 21
type for point in is_valid_node  <class 'list'>
[17, 21] 17 21
the point we are trying to find neighbors for  [17, 21]
neighboring cells are:  [[17, 22], [17, 20], [16, 21], [18, 21]]
dealing with [17, 22] at loop 0
dealing with [17, 20] at loop 1
[17, 20] is NOT a wall
dealing with [16, 21] at loop 2
[16, 21] is NOT a wall
dealing with [18, 21] at loop 3
neighbors of b [[17, 20], [16, 21]]
cost from [16, 21] to [17, 21] is 1
<class 'int'>
7 9 16
7 9 16
16 <class 'int'>
7 9 16
[17, 20] (17, 20)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 20] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 20] 17 20
the point we are trying to find neighbors for  [17, 20]
neighboring cells are:  [[17, 21], [17, 19], [16, 20], [18, 20]]
dealing with [17, 21] at loop 0
[17, 21] is NOT a wall
dealing with [17, 19] at loop 1
[17, 19] is NOT a wall
dealing with [16, 20] at loop 2
dealing with [18, 20] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[17, 20][17, 21]
the points are:  [17, 20] [17, 21]
type for point in is_valid_node  <class 'list'>
[17, 20] 17 20
type for point in is_valid_node  <class 'list'>
[17, 21] 17 21
the point we are trying to find neighbors for  [17, 21]
neighboring cells are:  [[17, 22], [17, 20], [16, 21], [18, 21]]
dealing with [17, 22] at loop 0
dealing with [17, 20] at loop 1
[17, 20] is NOT a wall
dealing with [16, 21] at loop 2
[16, 21] is NOT a wall
dealing with [18, 21] at loop 3
neighbors of b [[17, 20], [16, 21]]
cost from [17, 20] to [17, 21] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[17, 20][17, 19]
the points are:  [17, 20] [17, 19]
type for point in is_valid_node  <class 'list'>
[17, 20] 17 20
type for point in is_valid_node  <class 'list'>
[17, 19] 17 19
the point we are trying to find neighbors for  [17, 19]
neighboring cells are:  [[17, 20], [17, 18], [16, 19], [18, 19]]
dealing with [17, 20] at loop 0
[17, 20] is NOT a wall
dealing with [17, 18] at loop 1
dealing with [16, 19] at loop 2
[16, 19] is NOT a wall
dealing with [18, 19] at loop 3
[18, 19] is NOT a wall
neighbors of b [[17, 20], [16, 19], [18, 19]]
cost from [17, 20] to [17, 19] is 1
[18, 19] (18, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 19] 18 19
the point we are trying to find neighbors for  [18, 19]
neighboring cells are:  [[18, 20], [18, 18], [17, 19], [19, 19]]
dealing with [18, 20] at loop 0
dealing with [18, 18] at loop 1
dealing with [17, 19] at loop 2
[17, 19] is NOT a wall
dealing with [19, 19] at loop 3
[19, 19] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[18, 19][17, 19]
the points are:  [18, 19] [17, 19]
type for point in is_valid_node  <class 'list'>
[18, 19] 18 19
type for point in is_valid_node  <class 'list'>
[17, 19] 17 19
the point we are trying to find neighbors for  [17, 19]
neighboring cells are:  [[17, 20], [17, 18], [16, 19], [18, 19]]
dealing with [17, 20] at loop 0
[17, 20] is NOT a wall
dealing with [17, 18] at loop 1
dealing with [16, 19] at loop 2
[16, 19] is NOT a wall
dealing with [18, 19] at loop 3
[18, 19] is NOT a wall
neighbors of b [[17, 20], [16, 19], [18, 19]]
cost from [18, 19] to [17, 19] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
35[18, 19][19, 19]
the points are:  [18, 19] [19, 19]
type for point in is_valid_node  <class 'list'>
[18, 19] 18 19
type for point in is_valid_node  <class 'list'>
[19, 19] 19 19
the point we are trying to find neighbors for  [19, 19]
neighboring cells are:  [[19, 20], [19, 18], [18, 19], [20, 19]]
dealing with [19, 20] at loop 0
dealing with [19, 18] at loop 1
dealing with [18, 19] at loop 2
[18, 19] is NOT a wall
dealing with [20, 19] at loop 3
neighbors of b [[18, 19]]
cost from [18, 19] to [19, 19] is 1
<class 'int'>
9 7 16
9 7 16
16 <class 'int'>
9 7 16
[20, 15] (20, 15)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[20, 15] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[20, 15] 20 15
the point we are trying to find neighbors for  [20, 15]
neighboring cells are:  [[20, 16], [20, 14], [19, 15], [21, 15]]
dealing with [20, 16] at loop 0
dealing with [20, 14] at loop 1
dealing with [19, 15] at loop 2
[19, 15] is NOT a wall
dealing with [21, 15] at loop 3
[21, 15] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
37[20, 15][19, 15]
the points are:  [20, 15] [19, 15]
type for point in is_valid_node  <class 'list'>
[20, 15] 20 15
type for point in is_valid_node  <class 'list'>
[19, 15] 19 15
the point we are trying to find neighbors for  [19, 15]
neighboring cells are:  [[19, 16], [19, 14], [18, 15], [20, 15]]
dealing with [19, 16] at loop 0
[19, 16] is NOT a wall
dealing with [19, 14] at loop 1
dealing with [18, 15] at loop 2
dealing with [20, 15] at loop 3
[20, 15] is NOT a wall
neighbors of b [[19, 16], [20, 15]]
cost from [20, 15] to [19, 15] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
37[20, 15][21, 15]
the points are:  [20, 15] [21, 15]
type for point in is_valid_node  <class 'list'>
[20, 15] 20 15
type for point in is_valid_node  <class 'list'>
[21, 15] 21 15
the point we are trying to find neighbors for  [21, 15]
neighboring cells are:  [[21, 16], [21, 14], [20, 15], [22, 15]]
dealing with [21, 16] at loop 0
[21, 16] is NOT a wall
dealing with [21, 14] at loop 1
dealing with [20, 15] at loop 2
[20, 15] is NOT a wall
dealing with [22, 15] at loop 3
neighbors of b [[21, 16], [20, 15]]
cost from [20, 15] to [21, 15] is 1
<class 'int'>
11 3 14
11 3 14
14 <class 'int'>
11 3 14
[2, 13] (2, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 13] 2 13
the point we are trying to find neighbors for  [2, 13]
neighboring cells are:  [[2, 14], [2, 12], [1, 13], [3, 13]]
dealing with [2, 14] at loop 0
dealing with [2, 12] at loop 1
dealing with [1, 13] at loop 2
[1, 13] is NOT a wall
dealing with [3, 13] at loop 3
[3, 13] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
43[2, 13][1, 13]
the points are:  [2, 13] [1, 13]
type for point in is_valid_node  <class 'list'>
[2, 13] 2 13
type for point in is_valid_node  <class 'list'>
[1, 13] 1 13
the point we are trying to find neighbors for  [1, 13]
neighboring cells are:  [[1, 14], [1, 12], [0, 13], [2, 13]]
dealing with [1, 14] at loop 0
[1, 14] is NOT a wall
dealing with [1, 12] at loop 1
dealing with [0, 13] at loop 2
dealing with [2, 13] at loop 3
[2, 13] is NOT a wall
neighbors of b [[1, 14], [2, 13]]
cost from [2, 13] to [1, 13] is 1
<class 'int'>
9 1 10
9 1 10
10 <class 'int'>
9 1 10
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
43[2, 13][3, 13]
the points are:  [2, 13] [3, 13]
type for point in is_valid_node  <class 'list'>
[2, 13] 2 13
type for point in is_valid_node  <class 'list'>
[3, 13] 3 13
the point we are trying to find neighbors for  [3, 13]
neighboring cells are:  [[3, 14], [3, 12], [2, 13], [4, 13]]
dealing with [3, 14] at loop 0
[3, 14] is NOT a wall
dealing with [3, 12] at loop 1
dealing with [2, 13] at loop 2
[2, 13] is NOT a wall
dealing with [4, 13] at loop 3
neighbors of b [[3, 14], [2, 13]]
cost from [2, 13] to [3, 13] is 1
[3, 15] (3, 15)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 15] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 15] 3 15
the point we are trying to find neighbors for  [3, 15]
neighboring cells are:  [[3, 16], [3, 14], [2, 15], [4, 15]]
dealing with [3, 16] at loop 0
[3, 16] is NOT a wall
dealing with [3, 14] at loop 1
[3, 14] is NOT a wall
dealing with [2, 15] at loop 2
dealing with [4, 15] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[3, 15][3, 16]
the points are:  [3, 15] [3, 16]
type for point in is_valid_node  <class 'list'>
[3, 15] 3 15
type for point in is_valid_node  <class 'list'>
[3, 16] 3 16
the point we are trying to find neighbors for  [3, 16]
neighboring cells are:  [[3, 17], [3, 15], [2, 16], [4, 16]]
dealing with [3, 17] at loop 0
[3, 17] is NOT a wall
dealing with [3, 15] at loop 1
[3, 15] is NOT a wall
dealing with [2, 16] at loop 2
dealing with [4, 16] at loop 3
neighbors of b [[3, 17], [3, 15]]
cost from [3, 15] to [3, 16] is 1
<class 'int'>
7 4 11
7 4 11
11 <class 'int'>
7 4 11
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[3, 15][3, 14]
the points are:  [3, 15] [3, 14]
type for point in is_valid_node  <class 'list'>
[3, 15] 3 15
type for point in is_valid_node  <class 'list'>
[3, 14] 3 14
the point we are trying to find neighbors for  [3, 14]
neighboring cells are:  [[3, 15], [3, 13], [2, 14], [4, 14]]
dealing with [3, 15] at loop 0
[3, 15] is NOT a wall
dealing with [3, 13] at loop 1
[3, 13] is NOT a wall
dealing with [2, 14] at loop 2
dealing with [4, 14] at loop 3
[4, 14] is NOT a wall
neighbors of b [[3, 15], [3, 13], [4, 14]]
cost from [3, 15] to [3, 14] is 1
[4, 17] (4, 17)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 17] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 17] 4 17
the point we are trying to find neighbors for  [4, 17]
neighboring cells are:  [[4, 18], [4, 16], [3, 17], [5, 17]]
dealing with [4, 18] at loop 0
dealing with [4, 16] at loop 1
dealing with [3, 17] at loop 2
[3, 17] is NOT a wall
dealing with [5, 17] at loop 3
[5, 17] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[4, 17][3, 17]
the points are:  [4, 17] [3, 17]
type for point in is_valid_node  <class 'list'>
[4, 17] 4 17
type for point in is_valid_node  <class 'list'>
[3, 17] 3 17
the point we are trying to find neighbors for  [3, 17]
neighboring cells are:  [[3, 18], [3, 16], [2, 17], [4, 17]]
dealing with [3, 18] at loop 0
dealing with [3, 16] at loop 1
[3, 16] is NOT a wall
dealing with [2, 17] at loop 2
dealing with [4, 17] at loop 3
[4, 17] is NOT a wall
neighbors of b [[3, 16], [4, 17]]
cost from [4, 17] to [3, 17] is 1
<class 'int'>
7 5 12
7 5 12
12 <class 'int'>
7 5 12
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[4, 17][5, 17]
the points are:  [4, 17] [5, 17]
type for point in is_valid_node  <class 'list'>
[4, 17] 4 17
type for point in is_valid_node  <class 'list'>
[5, 17] 5 17
the point we are trying to find neighbors for  [5, 17]
neighboring cells are:  [[5, 18], [5, 16], [4, 17], [6, 17]]
dealing with [5, 18] at loop 0
dealing with [5, 16] at loop 1
[5, 16] is NOT a wall
dealing with [4, 17] at loop 2
[4, 17] is NOT a wall
dealing with [6, 17] at loop 3
neighbors of b [[5, 16], [4, 17]]
cost from [4, 17] to [5, 17] is 1
[5, 22] (5, 22)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 22] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 22] 5 22
the point we are trying to find neighbors for  [5, 22]
neighboring cells are:  [[5, 23], [5, 21], [4, 22], [6, 22]]
dealing with [5, 23] at loop 0
[5, 23] is NOT a wall
dealing with [5, 21] at loop 1
[5, 21] is NOT a wall
dealing with [4, 22] at loop 2
dealing with [6, 22] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
37[5, 22][5, 23]
the points are:  [5, 22] [5, 23]
type for point in is_valid_node  <class 'list'>
[5, 22] 5 22
type for point in is_valid_node  <class 'list'>
[5, 23] 5 23
the point we are trying to find neighbors for  [5, 23]
neighboring cells are:  [[5, 24], [5, 22], [4, 23], [6, 23]]
dealing with [5, 24] at loop 0
[5, 24] is NOT a wall
dealing with [5, 22] at loop 1
[5, 22] is NOT a wall
dealing with [4, 23] at loop 2
dealing with [6, 23] at loop 3
neighbors of b [[5, 24], [5, 22]]
cost from [5, 22] to [5, 23] is 1
<class 'int'>
5 11 16
5 11 16
16 <class 'int'>
5 11 16
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
37[5, 22][5, 21]
the points are:  [5, 22] [5, 21]
type for point in is_valid_node  <class 'list'>
[5, 22] 5 22
type for point in is_valid_node  <class 'list'>
[5, 21] 5 21
the point we are trying to find neighbors for  [5, 21]
neighboring cells are:  [[5, 22], [5, 20], [4, 21], [6, 21]]
dealing with [5, 22] at loop 0
[5, 22] is NOT a wall
dealing with [5, 20] at loop 1
[5, 20] is NOT a wall
dealing with [4, 21] at loop 2
dealing with [6, 21] at loop 3
[6, 21] is NOT a wall
neighbors of b [[5, 22], [5, 20], [6, 21]]
cost from [5, 22] to [5, 21] is 1
[7, 24] (7, 24)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 24] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 24] 7 24
the point we are trying to find neighbors for  [7, 24]
neighboring cells are:  [[7, 25], [7, 23], [6, 24], [8, 24]]
dealing with [7, 25] at loop 0
[7, 25] is NOT a wall
dealing with [7, 23] at loop 1
[7, 23] is NOT a wall
dealing with [6, 24] at loop 2
dealing with [8, 24] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
37[7, 24][7, 25]
the points are:  [7, 24] [7, 25]
type for point in is_valid_node  <class 'list'>
[7, 24] 7 24
type for point in is_valid_node  <class 'list'>
[7, 25] 7 25
the point we are trying to find neighbors for  [7, 25]
neighboring cells are:  [[7, 26], [7, 24], [6, 25], [8, 25]]
dealing with [7, 26] at loop 0
[7, 26] is NOT a wall
dealing with [7, 24] at loop 1
[7, 24] is NOT a wall
dealing with [6, 25] at loop 2
[6, 25] is NOT a wall
dealing with [8, 25] at loop 3
neighbors of b [[7, 26], [7, 24], [6, 25]]
cost from [7, 24] to [7, 25] is 1
<class 'int'>
3 13 16
3 13 16
16 <class 'int'>
3 13 16
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
37[7, 24][7, 23]
the points are:  [7, 24] [7, 23]
type for point in is_valid_node  <class 'list'>
[7, 24] 7 24
type for point in is_valid_node  <class 'list'>
[7, 23] 7 23
the point we are trying to find neighbors for  [7, 23]
neighboring cells are:  [[7, 24], [7, 22], [6, 23], [8, 23]]
dealing with [7, 24] at loop 0
[7, 24] is NOT a wall
dealing with [7, 22] at loop 1
dealing with [6, 23] at loop 2
dealing with [8, 23] at loop 3
[8, 23] is NOT a wall
neighbors of b [[7, 24], [8, 23]]
cost from [7, 24] to [7, 23] is 1
[13, 23] (13, 23)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 23] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 23] 13 23
the point we are trying to find neighbors for  [13, 23]
neighboring cells are:  [[13, 24], [13, 22], [12, 23], [14, 23]]
dealing with [13, 24] at loop 0
[13, 24] is NOT a wall
dealing with [13, 22] at loop 1
dealing with [12, 23] at loop 2
[12, 23] is NOT a wall
dealing with [14, 23] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
38[13, 23][13, 24]
the points are:  [13, 23] [13, 24]
type for point in is_valid_node  <class 'list'>
[13, 23] 13 23
type for point in is_valid_node  <class 'list'>
[13, 24] 13 24
the point we are trying to find neighbors for  [13, 24]
neighboring cells are:  [[13, 25], [13, 23], [12, 24], [14, 24]]
dealing with [13, 25] at loop 0
[13, 25] is NOT a wall
dealing with [13, 23] at loop 1
[13, 23] is NOT a wall
dealing with [12, 24] at loop 2
dealing with [14, 24] at loop 3
neighbors of b [[13, 25], [13, 23]]
cost from [13, 23] to [13, 24] is 1
<class 'int'>
3 12 15
3 12 15
15 <class 'int'>
3 12 15
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
38[13, 23][12, 23]
the points are:  [13, 23] [12, 23]
type for point in is_valid_node  <class 'list'>
[13, 23] 13 23
type for point in is_valid_node  <class 'list'>
[12, 23] 12 23
the point we are trying to find neighbors for  [12, 23]
neighboring cells are:  [[12, 24], [12, 22], [11, 23], [13, 23]]
dealing with [12, 24] at loop 0
dealing with [12, 22] at loop 1
dealing with [11, 23] at loop 2
[11, 23] is NOT a wall
dealing with [13, 23] at loop 3
[13, 23] is NOT a wall
neighbors of b [[11, 23], [13, 23]]
cost from [13, 23] to [12, 23] is 1
[17, 21] (17, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 21] 17 21
the point we are trying to find neighbors for  [17, 21]
neighboring cells are:  [[17, 22], [17, 20], [16, 21], [18, 21]]
dealing with [17, 22] at loop 0
dealing with [17, 20] at loop 1
[17, 20] is NOT a wall
dealing with [16, 21] at loop 2
[16, 21] is NOT a wall
dealing with [18, 21] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
36[17, 21][17, 20]
the points are:  [17, 21] [17, 20]
type for point in is_valid_node  <class 'list'>
[17, 21] 17 21
type for point in is_valid_node  <class 'list'>
[17, 20] 17 20
the point we are trying to find neighbors for  [17, 20]
neighboring cells are:  [[17, 21], [17, 19], [16, 20], [18, 20]]
dealing with [17, 21] at loop 0
[17, 21] is NOT a wall
dealing with [17, 19] at loop 1
[17, 19] is NOT a wall
dealing with [16, 20] at loop 2
dealing with [18, 20] at loop 3
neighbors of b [[17, 21], [17, 19]]
cost from [17, 21] to [17, 20] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
36[17, 21][16, 21]
the points are:  [17, 21] [16, 21]
type for point in is_valid_node  <class 'list'>
[17, 21] 17 21
type for point in is_valid_node  <class 'list'>
[16, 21] 16 21
the point we are trying to find neighbors for  [16, 21]
neighboring cells are:  [[16, 22], [16, 20], [15, 21], [17, 21]]
dealing with [16, 22] at loop 0
dealing with [16, 20] at loop 1
dealing with [15, 21] at loop 2
[15, 21] is NOT a wall
dealing with [17, 21] at loop 3
[17, 21] is NOT a wall
neighbors of b [[15, 21], [17, 21]]
cost from [17, 21] to [16, 21] is 1
[19, 19] (19, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 19] 19 19
the point we are trying to find neighbors for  [19, 19]
neighboring cells are:  [[19, 20], [19, 18], [18, 19], [20, 19]]
dealing with [19, 20] at loop 0
dealing with [19, 18] at loop 1
dealing with [18, 19] at loop 2
[18, 19] is NOT a wall
dealing with [20, 19] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
36[19, 19][18, 19]
the points are:  [19, 19] [18, 19]
type for point in is_valid_node  <class 'list'>
[19, 19] 19 19
type for point in is_valid_node  <class 'list'>
[18, 19] 18 19
the point we are trying to find neighbors for  [18, 19]
neighboring cells are:  [[18, 20], [18, 18], [17, 19], [19, 19]]
dealing with [18, 20] at loop 0
dealing with [18, 18] at loop 1
dealing with [17, 19] at loop 2
[17, 19] is NOT a wall
dealing with [19, 19] at loop 3
[19, 19] is NOT a wall
neighbors of b [[17, 19], [19, 19]]
cost from [19, 19] to [18, 19] is 1
[21, 15] (21, 15)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 15] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 15] 21 15
the point we are trying to find neighbors for  [21, 15]
neighboring cells are:  [[21, 16], [21, 14], [20, 15], [22, 15]]
dealing with [21, 16] at loop 0
[21, 16] is NOT a wall
dealing with [21, 14] at loop 1
dealing with [20, 15] at loop 2
[20, 15] is NOT a wall
dealing with [22, 15] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
38[21, 15][21, 16]
the points are:  [21, 15] [21, 16]
type for point in is_valid_node  <class 'list'>
[21, 15] 21 15
type for point in is_valid_node  <class 'list'>
[21, 16] 21 16
the point we are trying to find neighbors for  [21, 16]
neighboring cells are:  [[21, 17], [21, 15], [20, 16], [22, 16]]
dealing with [21, 17] at loop 0
[21, 17] is NOT a wall
dealing with [21, 15] at loop 1
[21, 15] is NOT a wall
dealing with [20, 16] at loop 2
dealing with [22, 16] at loop 3
neighbors of b [[21, 17], [21, 15]]
cost from [21, 15] to [21, 16] is 1
<class 'int'>
11 4 15
11 4 15
15 <class 'int'>
11 4 15
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
38[21, 15][20, 15]
the points are:  [21, 15] [20, 15]
type for point in is_valid_node  <class 'list'>
[21, 15] 21 15
type for point in is_valid_node  <class 'list'>
[20, 15] 20 15
the point we are trying to find neighbors for  [20, 15]
neighboring cells are:  [[20, 16], [20, 14], [19, 15], [21, 15]]
dealing with [20, 16] at loop 0
dealing with [20, 14] at loop 1
dealing with [19, 15] at loop 2
[19, 15] is NOT a wall
dealing with [21, 15] at loop 3
[21, 15] is NOT a wall
neighbors of b [[19, 15], [21, 15]]
cost from [21, 15] to [20, 15] is 1
[1, 13] (1, 13)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 13] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 13] 1 13
the point we are trying to find neighbors for  [1, 13]
neighboring cells are:  [[1, 14], [1, 12], [0, 13], [2, 13]]
dealing with [1, 14] at loop 0
[1, 14] is NOT a wall
dealing with [1, 12] at loop 1
dealing with [0, 13] at loop 2
dealing with [2, 13] at loop 3
[2, 13] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
44[1, 13][1, 14]
the points are:  [1, 13] [1, 14]
type for point in is_valid_node  <class 'list'>
[1, 13] 1 13
type for point in is_valid_node  <class 'list'>
[1, 14] 1 14
the point we are trying to find neighbors for  [1, 14]
neighboring cells are:  [[1, 15], [1, 13], [0, 14], [2, 14]]
dealing with [1, 15] at loop 0
[1, 15] is NOT a wall
dealing with [1, 13] at loop 1
[1, 13] is NOT a wall
dealing with [0, 14] at loop 2
dealing with [2, 14] at loop 3
neighbors of b [[1, 15], [1, 13]]
cost from [1, 13] to [1, 14] is 1
<class 'int'>
9 2 11
9 2 11
11 <class 'int'>
9 2 11
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
44[1, 13][2, 13]
the points are:  [1, 13] [2, 13]
type for point in is_valid_node  <class 'list'>
[1, 13] 1 13
type for point in is_valid_node  <class 'list'>
[2, 13] 2 13
the point we are trying to find neighbors for  [2, 13]
neighboring cells are:  [[2, 14], [2, 12], [1, 13], [3, 13]]
dealing with [2, 14] at loop 0
dealing with [2, 12] at loop 1
dealing with [1, 13] at loop 2
[1, 13] is NOT a wall
dealing with [3, 13] at loop 3
[3, 13] is NOT a wall
neighbors of b [[1, 13], [3, 13]]
cost from [1, 13] to [2, 13] is 1
[3, 16] (3, 16)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 16] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 16] 3 16
the point we are trying to find neighbors for  [3, 16]
neighboring cells are:  [[3, 17], [3, 15], [2, 16], [4, 16]]
dealing with [3, 17] at loop 0
[3, 17] is NOT a wall
dealing with [3, 15] at loop 1
[3, 15] is NOT a wall
dealing with [2, 16] at loop 2
dealing with [4, 16] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
43[3, 16][3, 17]
the points are:  [3, 16] [3, 17]
type for point in is_valid_node  <class 'list'>
[3, 16] 3 16
type for point in is_valid_node  <class 'list'>
[3, 17] 3 17
the point we are trying to find neighbors for  [3, 17]
neighboring cells are:  [[3, 18], [3, 16], [2, 17], [4, 17]]
dealing with [3, 18] at loop 0
dealing with [3, 16] at loop 1
[3, 16] is NOT a wall
dealing with [2, 17] at loop 2
dealing with [4, 17] at loop 3
[4, 17] is NOT a wall
neighbors of b [[3, 16], [4, 17]]
cost from [3, 16] to [3, 17] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
43[3, 16][3, 15]
the points are:  [3, 16] [3, 15]
type for point in is_valid_node  <class 'list'>
[3, 16] 3 16
type for point in is_valid_node  <class 'list'>
[3, 15] 3 15
the point we are trying to find neighbors for  [3, 15]
neighboring cells are:  [[3, 16], [3, 14], [2, 15], [4, 15]]
dealing with [3, 16] at loop 0
[3, 16] is NOT a wall
dealing with [3, 14] at loop 1
[3, 14] is NOT a wall
dealing with [2, 15] at loop 2
dealing with [4, 15] at loop 3
neighbors of b [[3, 16], [3, 14]]
cost from [3, 16] to [3, 15] is 1
[3, 17] (3, 17)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 17] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 17] 3 17
the point we are trying to find neighbors for  [3, 17]
neighboring cells are:  [[3, 18], [3, 16], [2, 17], [4, 17]]
dealing with [3, 18] at loop 0
dealing with [3, 16] at loop 1
[3, 16] is NOT a wall
dealing with [2, 17] at loop 2
dealing with [4, 17] at loop 3
[4, 17] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[3, 17][3, 16]
the points are:  [3, 17] [3, 16]
type for point in is_valid_node  <class 'list'>
[3, 17] 3 17
type for point in is_valid_node  <class 'list'>
[3, 16] 3 16
the point we are trying to find neighbors for  [3, 16]
neighboring cells are:  [[3, 17], [3, 15], [2, 16], [4, 16]]
dealing with [3, 17] at loop 0
[3, 17] is NOT a wall
dealing with [3, 15] at loop 1
[3, 15] is NOT a wall
dealing with [2, 16] at loop 2
dealing with [4, 16] at loop 3
neighbors of b [[3, 17], [3, 15]]
cost from [3, 17] to [3, 16] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[3, 17][4, 17]
the points are:  [3, 17] [4, 17]
type for point in is_valid_node  <class 'list'>
[3, 17] 3 17
type for point in is_valid_node  <class 'list'>
[4, 17] 4 17
the point we are trying to find neighbors for  [4, 17]
neighboring cells are:  [[4, 18], [4, 16], [3, 17], [5, 17]]
dealing with [4, 18] at loop 0
dealing with [4, 16] at loop 1
dealing with [3, 17] at loop 2
[3, 17] is NOT a wall
dealing with [5, 17] at loop 3
[5, 17] is NOT a wall
neighbors of b [[3, 17], [5, 17]]
cost from [3, 17] to [4, 17] is 1
[5, 23] (5, 23)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 23] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 23] 5 23
the point we are trying to find neighbors for  [5, 23]
neighboring cells are:  [[5, 24], [5, 22], [4, 23], [6, 23]]
dealing with [5, 24] at loop 0
[5, 24] is NOT a wall
dealing with [5, 22] at loop 1
[5, 22] is NOT a wall
dealing with [4, 23] at loop 2
dealing with [6, 23] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
38[5, 23][5, 24]
the points are:  [5, 23] [5, 24]
type for point in is_valid_node  <class 'list'>
[5, 23] 5 23
type for point in is_valid_node  <class 'list'>
[5, 24] 5 24
the point we are trying to find neighbors for  [5, 24]
neighboring cells are:  [[5, 25], [5, 23], [4, 24], [6, 24]]
dealing with [5, 25] at loop 0
[5, 25] is NOT a wall
dealing with [5, 23] at loop 1
[5, 23] is NOT a wall
dealing with [4, 24] at loop 2
dealing with [6, 24] at loop 3
neighbors of b [[5, 25], [5, 23]]
cost from [5, 23] to [5, 24] is 1
<class 'int'>
5 12 17
5 12 17
17 <class 'int'>
5 12 17
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
38[5, 23][5, 22]
the points are:  [5, 23] [5, 22]
type for point in is_valid_node  <class 'list'>
[5, 23] 5 23
type for point in is_valid_node  <class 'list'>
[5, 22] 5 22
the point we are trying to find neighbors for  [5, 22]
neighboring cells are:  [[5, 23], [5, 21], [4, 22], [6, 22]]
dealing with [5, 23] at loop 0
[5, 23] is NOT a wall
dealing with [5, 21] at loop 1
[5, 21] is NOT a wall
dealing with [4, 22] at loop 2
dealing with [6, 22] at loop 3
neighbors of b [[5, 23], [5, 21]]
cost from [5, 23] to [5, 22] is 1
[7, 25] (7, 25)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 25] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 25] 7 25
the point we are trying to find neighbors for  [7, 25]
neighboring cells are:  [[7, 26], [7, 24], [6, 25], [8, 25]]
dealing with [7, 26] at loop 0
[7, 26] is NOT a wall
dealing with [7, 24] at loop 1
[7, 24] is NOT a wall
dealing with [6, 25] at loop 2
[6, 25] is NOT a wall
dealing with [8, 25] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
38[7, 25][7, 26]
the points are:  [7, 25] [7, 26]
type for point in is_valid_node  <class 'list'>
[7, 25] 7 25
type for point in is_valid_node  <class 'list'>
[7, 26] 7 26
the point we are trying to find neighbors for  [7, 26]
neighboring cells are:  [[7, 27], [7, 25], [6, 26], [8, 26]]
dealing with [7, 27] at loop 0
[7, 27] is NOT a wall
dealing with [7, 25] at loop 1
[7, 25] is NOT a wall
dealing with [6, 26] at loop 2
dealing with [8, 26] at loop 3
neighbors of b [[7, 27], [7, 25]]
cost from [7, 25] to [7, 26] is 1
<class 'int'>
3 14 17
3 14 17
17 <class 'int'>
3 14 17
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
38[7, 25][7, 24]
the points are:  [7, 25] [7, 24]
type for point in is_valid_node  <class 'list'>
[7, 25] 7 25
type for point in is_valid_node  <class 'list'>
[7, 24] 7 24
the point we are trying to find neighbors for  [7, 24]
neighboring cells are:  [[7, 25], [7, 23], [6, 24], [8, 24]]
dealing with [7, 25] at loop 0
[7, 25] is NOT a wall
dealing with [7, 23] at loop 1
[7, 23] is NOT a wall
dealing with [6, 24] at loop 2
dealing with [8, 24] at loop 3
neighbors of b [[7, 25], [7, 23]]
cost from [7, 25] to [7, 24] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
38[7, 25][6, 25]
the points are:  [7, 25] [6, 25]
type for point in is_valid_node  <class 'list'>
[7, 25] 7 25
type for point in is_valid_node  <class 'list'>
[6, 25] 6 25
the point we are trying to find neighbors for  [6, 25]
neighboring cells are:  [[6, 26], [6, 24], [5, 25], [7, 25]]
dealing with [6, 26] at loop 0
dealing with [6, 24] at loop 1
dealing with [5, 25] at loop 2
[5, 25] is NOT a wall
dealing with [7, 25] at loop 3
[7, 25] is NOT a wall
neighbors of b [[5, 25], [7, 25]]
cost from [7, 25] to [6, 25] is 1
<class 'int'>
4 13 17
4 13 17
17 <class 'int'>
4 13 17
[13, 24] (13, 24)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 24] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 24] 13 24
the point we are trying to find neighbors for  [13, 24]
neighboring cells are:  [[13, 25], [13, 23], [12, 24], [14, 24]]
dealing with [13, 25] at loop 0
[13, 25] is NOT a wall
dealing with [13, 23] at loop 1
[13, 23] is NOT a wall
dealing with [12, 24] at loop 2
dealing with [14, 24] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[13, 24][13, 25]
the points are:  [13, 24] [13, 25]
type for point in is_valid_node  <class 'list'>
[13, 24] 13 24
type for point in is_valid_node  <class 'list'>
[13, 25] 13 25
the point we are trying to find neighbors for  [13, 25]
neighboring cells are:  [[13, 26], [13, 24], [12, 25], [14, 25]]
dealing with [13, 26] at loop 0
dealing with [13, 24] at loop 1
[13, 24] is NOT a wall
dealing with [12, 25] at loop 2
dealing with [14, 25] at loop 3
[14, 25] is NOT a wall
neighbors of b [[13, 24], [14, 25]]
cost from [13, 24] to [13, 25] is 1
<class 'int'>
3 13 16
3 13 16
16 <class 'int'>
3 13 16
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[13, 24][13, 23]
the points are:  [13, 24] [13, 23]
type for point in is_valid_node  <class 'list'>
[13, 24] 13 24
type for point in is_valid_node  <class 'list'>
[13, 23] 13 23
the point we are trying to find neighbors for  [13, 23]
neighboring cells are:  [[13, 24], [13, 22], [12, 23], [14, 23]]
dealing with [13, 24] at loop 0
[13, 24] is NOT a wall
dealing with [13, 22] at loop 1
dealing with [12, 23] at loop 2
[12, 23] is NOT a wall
dealing with [14, 23] at loop 3
neighbors of b [[13, 24], [12, 23]]
cost from [13, 24] to [13, 23] is 1
[21, 16] (21, 16)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 16] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 16] 21 16
the point we are trying to find neighbors for  [21, 16]
neighboring cells are:  [[21, 17], [21, 15], [20, 16], [22, 16]]
dealing with [21, 17] at loop 0
[21, 17] is NOT a wall
dealing with [21, 15] at loop 1
[21, 15] is NOT a wall
dealing with [20, 16] at loop 2
dealing with [22, 16] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[21, 16][21, 17]
the points are:  [21, 16] [21, 17]
type for point in is_valid_node  <class 'list'>
[21, 16] 21 16
type for point in is_valid_node  <class 'list'>
[21, 17] 21 17
the point we are trying to find neighbors for  [21, 17]
neighboring cells are:  [[21, 18], [21, 16], [20, 17], [22, 17]]
dealing with [21, 18] at loop 0
[21, 18] is NOT a wall
dealing with [21, 16] at loop 1
[21, 16] is NOT a wall
dealing with [20, 17] at loop 2
dealing with [22, 17] at loop 3
neighbors of b [[21, 18], [21, 16]]
cost from [21, 16] to [21, 17] is 1
<class 'int'>
11 5 16
11 5 16
16 <class 'int'>
11 5 16
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[21, 16][21, 15]
the points are:  [21, 16] [21, 15]
type for point in is_valid_node  <class 'list'>
[21, 16] 21 16
type for point in is_valid_node  <class 'list'>
[21, 15] 21 15
the point we are trying to find neighbors for  [21, 15]
neighboring cells are:  [[21, 16], [21, 14], [20, 15], [22, 15]]
dealing with [21, 16] at loop 0
[21, 16] is NOT a wall
dealing with [21, 14] at loop 1
dealing with [20, 15] at loop 2
[20, 15] is NOT a wall
dealing with [22, 15] at loop 3
neighbors of b [[21, 16], [20, 15]]
cost from [21, 16] to [21, 15] is 1
[1, 14] (1, 14)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 14] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 14] 1 14
the point we are trying to find neighbors for  [1, 14]
neighboring cells are:  [[1, 15], [1, 13], [0, 14], [2, 14]]
dealing with [1, 15] at loop 0
[1, 15] is NOT a wall
dealing with [1, 13] at loop 1
[1, 13] is NOT a wall
dealing with [0, 14] at loop 2
dealing with [2, 14] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
45[1, 14][1, 15]
the points are:  [1, 14] [1, 15]
type for point in is_valid_node  <class 'list'>
[1, 14] 1 14
type for point in is_valid_node  <class 'list'>
[1, 15] 1 15
the point we are trying to find neighbors for  [1, 15]
neighboring cells are:  [[1, 16], [1, 14], [0, 15], [2, 15]]
dealing with [1, 16] at loop 0
[1, 16] is NOT a wall
dealing with [1, 14] at loop 1
[1, 14] is NOT a wall
dealing with [0, 15] at loop 2
dealing with [2, 15] at loop 3
neighbors of b [[1, 16], [1, 14]]
cost from [1, 14] to [1, 15] is 1
<class 'int'>
9 3 12
9 3 12
12 <class 'int'>
9 3 12
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
45[1, 14][1, 13]
the points are:  [1, 14] [1, 13]
type for point in is_valid_node  <class 'list'>
[1, 14] 1 14
type for point in is_valid_node  <class 'list'>
[1, 13] 1 13
the point we are trying to find neighbors for  [1, 13]
neighboring cells are:  [[1, 14], [1, 12], [0, 13], [2, 13]]
dealing with [1, 14] at loop 0
[1, 14] is NOT a wall
dealing with [1, 12] at loop 1
dealing with [0, 13] at loop 2
dealing with [2, 13] at loop 3
[2, 13] is NOT a wall
neighbors of b [[1, 14], [2, 13]]
cost from [1, 14] to [1, 13] is 1
[5, 24] (5, 24)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 24] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 24] 5 24
the point we are trying to find neighbors for  [5, 24]
neighboring cells are:  [[5, 25], [5, 23], [4, 24], [6, 24]]
dealing with [5, 25] at loop 0
[5, 25] is NOT a wall
dealing with [5, 23] at loop 1
[5, 23] is NOT a wall
dealing with [4, 24] at loop 2
dealing with [6, 24] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[5, 24][5, 25]
the points are:  [5, 24] [5, 25]
type for point in is_valid_node  <class 'list'>
[5, 24] 5 24
type for point in is_valid_node  <class 'list'>
[5, 25] 5 25
the point we are trying to find neighbors for  [5, 25]
neighboring cells are:  [[5, 26], [5, 24], [4, 25], [6, 25]]
dealing with [5, 26] at loop 0
dealing with [5, 24] at loop 1
[5, 24] is NOT a wall
dealing with [4, 25] at loop 2
dealing with [6, 25] at loop 3
[6, 25] is NOT a wall
neighbors of b [[5, 24], [6, 25]]
cost from [5, 24] to [5, 25] is 1
<class 'int'>
5 13 18
5 13 18
18 <class 'int'>
5 13 18
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[5, 24][5, 23]
the points are:  [5, 24] [5, 23]
type for point in is_valid_node  <class 'list'>
[5, 24] 5 24
type for point in is_valid_node  <class 'list'>
[5, 23] 5 23
the point we are trying to find neighbors for  [5, 23]
neighboring cells are:  [[5, 24], [5, 22], [4, 23], [6, 23]]
dealing with [5, 24] at loop 0
[5, 24] is NOT a wall
dealing with [5, 22] at loop 1
[5, 22] is NOT a wall
dealing with [4, 23] at loop 2
dealing with [6, 23] at loop 3
neighbors of b [[5, 24], [5, 22]]
cost from [5, 24] to [5, 23] is 1
[6, 25] (6, 25)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 25] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 25] 6 25
the point we are trying to find neighbors for  [6, 25]
neighboring cells are:  [[6, 26], [6, 24], [5, 25], [7, 25]]
dealing with [6, 26] at loop 0
dealing with [6, 24] at loop 1
dealing with [5, 25] at loop 2
[5, 25] is NOT a wall
dealing with [7, 25] at loop 3
[7, 25] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[6, 25][5, 25]
the points are:  [6, 25] [5, 25]
type for point in is_valid_node  <class 'list'>
[6, 25] 6 25
type for point in is_valid_node  <class 'list'>
[5, 25] 5 25
the point we are trying to find neighbors for  [5, 25]
neighboring cells are:  [[5, 26], [5, 24], [4, 25], [6, 25]]
dealing with [5, 26] at loop 0
dealing with [5, 24] at loop 1
[5, 24] is NOT a wall
dealing with [4, 25] at loop 2
dealing with [6, 25] at loop 3
[6, 25] is NOT a wall
neighbors of b [[5, 24], [6, 25]]
cost from [6, 25] to [5, 25] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[6, 25][7, 25]
the points are:  [6, 25] [7, 25]
type for point in is_valid_node  <class 'list'>
[6, 25] 6 25
type for point in is_valid_node  <class 'list'>
[7, 25] 7 25
the point we are trying to find neighbors for  [7, 25]
neighboring cells are:  [[7, 26], [7, 24], [6, 25], [8, 25]]
dealing with [7, 26] at loop 0
[7, 26] is NOT a wall
dealing with [7, 24] at loop 1
[7, 24] is NOT a wall
dealing with [6, 25] at loop 2
[6, 25] is NOT a wall
dealing with [8, 25] at loop 3
neighbors of b [[7, 26], [7, 24], [6, 25]]
cost from [6, 25] to [7, 25] is 1
[7, 26] (7, 26)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 26] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 26] 7 26
the point we are trying to find neighbors for  [7, 26]
neighboring cells are:  [[7, 27], [7, 25], [6, 26], [8, 26]]
dealing with [7, 27] at loop 0
[7, 27] is NOT a wall
dealing with [7, 25] at loop 1
[7, 25] is NOT a wall
dealing with [6, 26] at loop 2
dealing with [8, 26] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[7, 26][7, 27]
the points are:  [7, 26] [7, 27]
type for point in is_valid_node  <class 'list'>
[7, 26] 7 26
type for point in is_valid_node  <class 'list'>
[7, 27] 7 27
the point we are trying to find neighbors for  [7, 27]
neighboring cells are:  [[7, 28], [7, 26], [6, 27], [8, 27]]
dealing with [7, 28] at loop 0
[7, 28] is NOT a wall
dealing with [7, 26] at loop 1
[7, 26] is NOT a wall
dealing with [6, 27] at loop 2
dealing with [8, 27] at loop 3
[8, 27] is NOT a wall
neighbors of b [[7, 28], [7, 26], [8, 27]]
cost from [7, 26] to [7, 27] is 1
<class 'int'>
3 15 18
3 15 18
18 <class 'int'>
3 15 18
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
39[7, 26][7, 25]
the points are:  [7, 26] [7, 25]
type for point in is_valid_node  <class 'list'>
[7, 26] 7 26
type for point in is_valid_node  <class 'list'>
[7, 25] 7 25
the point we are trying to find neighbors for  [7, 25]
neighboring cells are:  [[7, 26], [7, 24], [6, 25], [8, 25]]
dealing with [7, 26] at loop 0
[7, 26] is NOT a wall
dealing with [7, 24] at loop 1
[7, 24] is NOT a wall
dealing with [6, 25] at loop 2
[6, 25] is NOT a wall
dealing with [8, 25] at loop 3
neighbors of b [[7, 26], [7, 24], [6, 25]]
cost from [7, 26] to [7, 25] is 1
[13, 25] (13, 25)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 25] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 25] 13 25
the point we are trying to find neighbors for  [13, 25]
neighboring cells are:  [[13, 26], [13, 24], [12, 25], [14, 25]]
dealing with [13, 26] at loop 0
dealing with [13, 24] at loop 1
[13, 24] is NOT a wall
dealing with [12, 25] at loop 2
dealing with [14, 25] at loop 3
[14, 25] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[13, 25][13, 24]
the points are:  [13, 25] [13, 24]
type for point in is_valid_node  <class 'list'>
[13, 25] 13 25
type for point in is_valid_node  <class 'list'>
[13, 24] 13 24
the point we are trying to find neighbors for  [13, 24]
neighboring cells are:  [[13, 25], [13, 23], [12, 24], [14, 24]]
dealing with [13, 25] at loop 0
[13, 25] is NOT a wall
dealing with [13, 23] at loop 1
[13, 23] is NOT a wall
dealing with [12, 24] at loop 2
dealing with [14, 24] at loop 3
neighbors of b [[13, 25], [13, 23]]
cost from [13, 25] to [13, 24] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[13, 25][14, 25]
the points are:  [13, 25] [14, 25]
type for point in is_valid_node  <class 'list'>
[13, 25] 13 25
type for point in is_valid_node  <class 'list'>
[14, 25] 14 25
the point we are trying to find neighbors for  [14, 25]
neighboring cells are:  [[14, 26], [14, 24], [13, 25], [15, 25]]
dealing with [14, 26] at loop 0
dealing with [14, 24] at loop 1
dealing with [13, 25] at loop 2
[13, 25] is NOT a wall
dealing with [15, 25] at loop 3
[15, 25] is NOT a wall
neighbors of b [[13, 25], [15, 25]]
cost from [13, 25] to [14, 25] is 1
<class 'int'>
4 13 17
4 13 17
17 <class 'int'>
4 13 17
[21, 17] (21, 17)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 17] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 17] 21 17
the point we are trying to find neighbors for  [21, 17]
neighboring cells are:  [[21, 18], [21, 16], [20, 17], [22, 17]]
dealing with [21, 18] at loop 0
[21, 18] is NOT a wall
dealing with [21, 16] at loop 1
[21, 16] is NOT a wall
dealing with [20, 17] at loop 2
dealing with [22, 17] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[21, 17][21, 18]
the points are:  [21, 17] [21, 18]
type for point in is_valid_node  <class 'list'>
[21, 17] 21 17
type for point in is_valid_node  <class 'list'>
[21, 18] 21 18
the point we are trying to find neighbors for  [21, 18]
neighboring cells are:  [[21, 19], [21, 17], [20, 18], [22, 18]]
dealing with [21, 19] at loop 0
[21, 19] is NOT a wall
dealing with [21, 17] at loop 1
[21, 17] is NOT a wall
dealing with [20, 18] at loop 2
dealing with [22, 18] at loop 3
neighbors of b [[21, 19], [21, 17]]
cost from [21, 17] to [21, 18] is 1
<class 'int'>
11 6 17
11 6 17
17 <class 'int'>
11 6 17
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[21, 17][21, 16]
the points are:  [21, 17] [21, 16]
type for point in is_valid_node  <class 'list'>
[21, 17] 21 17
type for point in is_valid_node  <class 'list'>
[21, 16] 21 16
the point we are trying to find neighbors for  [21, 16]
neighboring cells are:  [[21, 17], [21, 15], [20, 16], [22, 16]]
dealing with [21, 17] at loop 0
[21, 17] is NOT a wall
dealing with [21, 15] at loop 1
[21, 15] is NOT a wall
dealing with [20, 16] at loop 2
dealing with [22, 16] at loop 3
neighbors of b [[21, 17], [21, 15]]
cost from [21, 17] to [21, 16] is 1
[1, 15] (1, 15)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 15] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 15] 1 15
the point we are trying to find neighbors for  [1, 15]
neighboring cells are:  [[1, 16], [1, 14], [0, 15], [2, 15]]
dealing with [1, 16] at loop 0
[1, 16] is NOT a wall
dealing with [1, 14] at loop 1
[1, 14] is NOT a wall
dealing with [0, 15] at loop 2
dealing with [2, 15] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[1, 15][1, 16]
the points are:  [1, 15] [1, 16]
type for point in is_valid_node  <class 'list'>
[1, 15] 1 15
type for point in is_valid_node  <class 'list'>
[1, 16] 1 16
the point we are trying to find neighbors for  [1, 16]
neighboring cells are:  [[1, 17], [1, 15], [0, 16], [2, 16]]
dealing with [1, 17] at loop 0
[1, 17] is NOT a wall
dealing with [1, 15] at loop 1
[1, 15] is NOT a wall
dealing with [0, 16] at loop 2
dealing with [2, 16] at loop 3
neighbors of b [[1, 17], [1, 15]]
cost from [1, 15] to [1, 16] is 1
<class 'int'>
9 4 13
9 4 13
13 <class 'int'>
9 4 13
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[1, 15][1, 14]
the points are:  [1, 15] [1, 14]
type for point in is_valid_node  <class 'list'>
[1, 15] 1 15
type for point in is_valid_node  <class 'list'>
[1, 14] 1 14
the point we are trying to find neighbors for  [1, 14]
neighboring cells are:  [[1, 15], [1, 13], [0, 14], [2, 14]]
dealing with [1, 15] at loop 0
[1, 15] is NOT a wall
dealing with [1, 13] at loop 1
[1, 13] is NOT a wall
dealing with [0, 14] at loop 2
dealing with [2, 14] at loop 3
neighbors of b [[1, 15], [1, 13]]
cost from [1, 15] to [1, 14] is 1
[5, 25] (5, 25)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 25] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 25] 5 25
the point we are trying to find neighbors for  [5, 25]
neighboring cells are:  [[5, 26], [5, 24], [4, 25], [6, 25]]
dealing with [5, 26] at loop 0
dealing with [5, 24] at loop 1
[5, 24] is NOT a wall
dealing with [4, 25] at loop 2
dealing with [6, 25] at loop 3
[6, 25] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[5, 25][5, 24]
the points are:  [5, 25] [5, 24]
type for point in is_valid_node  <class 'list'>
[5, 25] 5 25
type for point in is_valid_node  <class 'list'>
[5, 24] 5 24
the point we are trying to find neighbors for  [5, 24]
neighboring cells are:  [[5, 25], [5, 23], [4, 24], [6, 24]]
dealing with [5, 25] at loop 0
[5, 25] is NOT a wall
dealing with [5, 23] at loop 1
[5, 23] is NOT a wall
dealing with [4, 24] at loop 2
dealing with [6, 24] at loop 3
neighbors of b [[5, 25], [5, 23]]
cost from [5, 25] to [5, 24] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[5, 25][6, 25]
the points are:  [5, 25] [6, 25]
type for point in is_valid_node  <class 'list'>
[5, 25] 5 25
type for point in is_valid_node  <class 'list'>
[6, 25] 6 25
the point we are trying to find neighbors for  [6, 25]
neighboring cells are:  [[6, 26], [6, 24], [5, 25], [7, 25]]
dealing with [6, 26] at loop 0
dealing with [6, 24] at loop 1
dealing with [5, 25] at loop 2
[5, 25] is NOT a wall
dealing with [7, 25] at loop 3
[7, 25] is NOT a wall
neighbors of b [[5, 25], [7, 25]]
cost from [5, 25] to [6, 25] is 1
[7, 27] (7, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 27] 7 27
the point we are trying to find neighbors for  [7, 27]
neighboring cells are:  [[7, 28], [7, 26], [6, 27], [8, 27]]
dealing with [7, 28] at loop 0
[7, 28] is NOT a wall
dealing with [7, 26] at loop 1
[7, 26] is NOT a wall
dealing with [6, 27] at loop 2
dealing with [8, 27] at loop 3
[8, 27] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[7, 27][7, 28]
the points are:  [7, 27] [7, 28]
type for point in is_valid_node  <class 'list'>
[7, 27] 7 27
type for point in is_valid_node  <class 'list'>
[7, 28] 7 28
the point we are trying to find neighbors for  [7, 28]
neighboring cells are:  [[7, 29], [7, 27], [6, 28], [8, 28]]
dealing with [7, 29] at loop 0
[7, 29] is NOT a wall
dealing with [7, 27] at loop 1
[7, 27] is NOT a wall
dealing with [6, 28] at loop 2
dealing with [8, 28] at loop 3
neighbors of b [[7, 29], [7, 27]]
cost from [7, 27] to [7, 28] is 1
<class 'int'>
3 16 19
3 16 19
19 <class 'int'>
3 16 19
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[7, 27][7, 26]
the points are:  [7, 27] [7, 26]
type for point in is_valid_node  <class 'list'>
[7, 27] 7 27
type for point in is_valid_node  <class 'list'>
[7, 26] 7 26
the point we are trying to find neighbors for  [7, 26]
neighboring cells are:  [[7, 27], [7, 25], [6, 26], [8, 26]]
dealing with [7, 27] at loop 0
[7, 27] is NOT a wall
dealing with [7, 25] at loop 1
[7, 25] is NOT a wall
dealing with [6, 26] at loop 2
dealing with [8, 26] at loop 3
neighbors of b [[7, 27], [7, 25]]
cost from [7, 27] to [7, 26] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
40[7, 27][8, 27]
the points are:  [7, 27] [8, 27]
type for point in is_valid_node  <class 'list'>
[7, 27] 7 27
type for point in is_valid_node  <class 'list'>
[8, 27] 8 27
the point we are trying to find neighbors for  [8, 27]
neighboring cells are:  [[8, 28], [8, 26], [7, 27], [9, 27]]
dealing with [8, 28] at loop 0
dealing with [8, 26] at loop 1
dealing with [7, 27] at loop 2
[7, 27] is NOT a wall
dealing with [9, 27] at loop 3
[9, 27] is NOT a wall
neighbors of b [[7, 27], [9, 27]]
cost from [7, 27] to [8, 27] is 1
<class 'int'>
2 15 17
2 15 17
17 <class 'int'>
2 15 17
[8, 27] (8, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[8, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[8, 27] 8 27
the point we are trying to find neighbors for  [8, 27]
neighboring cells are:  [[8, 28], [8, 26], [7, 27], [9, 27]]
dealing with [8, 28] at loop 0
dealing with [8, 26] at loop 1
dealing with [7, 27] at loop 2
[7, 27] is NOT a wall
dealing with [9, 27] at loop 3
[9, 27] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[8, 27][7, 27]
the points are:  [8, 27] [7, 27]
type for point in is_valid_node  <class 'list'>
[8, 27] 8 27
type for point in is_valid_node  <class 'list'>
[7, 27] 7 27
the point we are trying to find neighbors for  [7, 27]
neighboring cells are:  [[7, 28], [7, 26], [6, 27], [8, 27]]
dealing with [7, 28] at loop 0
[7, 28] is NOT a wall
dealing with [7, 26] at loop 1
[7, 26] is NOT a wall
dealing with [6, 27] at loop 2
dealing with [8, 27] at loop 3
[8, 27] is NOT a wall
neighbors of b [[7, 28], [7, 26], [8, 27]]
cost from [8, 27] to [7, 27] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[8, 27][9, 27]
the points are:  [8, 27] [9, 27]
type for point in is_valid_node  <class 'list'>
[8, 27] 8 27
type for point in is_valid_node  <class 'list'>
[9, 27] 9 27
the point we are trying to find neighbors for  [9, 27]
neighboring cells are:  [[9, 28], [9, 26], [8, 27], [10, 27]]
dealing with [9, 28] at loop 0
dealing with [9, 26] at loop 1
dealing with [8, 27] at loop 2
[8, 27] is NOT a wall
dealing with [10, 27] at loop 3
[10, 27] is NOT a wall
neighbors of b [[8, 27], [10, 27]]
cost from [8, 27] to [9, 27] is 1
<class 'int'>
1 15 16
1 15 16
16 <class 'int'>
1 15 16
[9, 27] (9, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 27] 9 27
the point we are trying to find neighbors for  [9, 27]
neighboring cells are:  [[9, 28], [9, 26], [8, 27], [10, 27]]
dealing with [9, 28] at loop 0
dealing with [9, 26] at loop 1
dealing with [8, 27] at loop 2
[8, 27] is NOT a wall
dealing with [10, 27] at loop 3
[10, 27] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[9, 27][8, 27]
the points are:  [9, 27] [8, 27]
type for point in is_valid_node  <class 'list'>
[9, 27] 9 27
type for point in is_valid_node  <class 'list'>
[8, 27] 8 27
the point we are trying to find neighbors for  [8, 27]
neighboring cells are:  [[8, 28], [8, 26], [7, 27], [9, 27]]
dealing with [8, 28] at loop 0
dealing with [8, 26] at loop 1
dealing with [7, 27] at loop 2
[7, 27] is NOT a wall
dealing with [9, 27] at loop 3
[9, 27] is NOT a wall
neighbors of b [[7, 27], [9, 27]]
cost from [9, 27] to [8, 27] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[9, 27][10, 27]
the points are:  [9, 27] [10, 27]
type for point in is_valid_node  <class 'list'>
[9, 27] 9 27
type for point in is_valid_node  <class 'list'>
[10, 27] 10 27
the point we are trying to find neighbors for  [10, 27]
neighboring cells are:  [[10, 28], [10, 26], [9, 27], [11, 27]]
dealing with [10, 28] at loop 0
dealing with [10, 26] at loop 1
dealing with [9, 27] at loop 2
[9, 27] is NOT a wall
dealing with [11, 27] at loop 3
[11, 27] is NOT a wall
neighbors of b [[9, 27], [11, 27]]
cost from [9, 27] to [10, 27] is 1
<class 'int'>
0 15 15
0 15 15
15 <class 'int'>
0 15 15
[10, 27] (10, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[10, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[10, 27] 10 27
the point we are trying to find neighbors for  [10, 27]
neighboring cells are:  [[10, 28], [10, 26], [9, 27], [11, 27]]
dealing with [10, 28] at loop 0
dealing with [10, 26] at loop 1
dealing with [9, 27] at loop 2
[9, 27] is NOT a wall
dealing with [11, 27] at loop 3
[11, 27] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
43[10, 27][9, 27]
the points are:  [10, 27] [9, 27]
type for point in is_valid_node  <class 'list'>
[10, 27] 10 27
type for point in is_valid_node  <class 'list'>
[9, 27] 9 27
the point we are trying to find neighbors for  [9, 27]
neighboring cells are:  [[9, 28], [9, 26], [8, 27], [10, 27]]
dealing with [9, 28] at loop 0
dealing with [9, 26] at loop 1
dealing with [8, 27] at loop 2
[8, 27] is NOT a wall
dealing with [10, 27] at loop 3
[10, 27] is NOT a wall
neighbors of b [[8, 27], [10, 27]]
cost from [10, 27] to [9, 27] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
43[10, 27][11, 27]
the points are:  [10, 27] [11, 27]
type for point in is_valid_node  <class 'list'>
[10, 27] 10 27
type for point in is_valid_node  <class 'list'>
[11, 27] 11 27
the point we are trying to find neighbors for  [11, 27]
neighboring cells are:  [[11, 28], [11, 26], [10, 27], [12, 27]]
dealing with [11, 28] at loop 0
dealing with [11, 26] at loop 1
[11, 26] is NOT a wall
dealing with [10, 27] at loop 2
[10, 27] is NOT a wall
dealing with [12, 27] at loop 3
neighbors of b [[11, 26], [10, 27]]
cost from [10, 27] to [11, 27] is 1
<class 'int'>
1 15 16
1 15 16
16 <class 'int'>
1 15 16
[14, 25] (14, 25)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 25] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 25] 14 25
the point we are trying to find neighbors for  [14, 25]
neighboring cells are:  [[14, 26], [14, 24], [13, 25], [15, 25]]
dealing with [14, 26] at loop 0
dealing with [14, 24] at loop 1
dealing with [13, 25] at loop 2
[13, 25] is NOT a wall
dealing with [15, 25] at loop 3
[15, 25] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[14, 25][13, 25]
the points are:  [14, 25] [13, 25]
type for point in is_valid_node  <class 'list'>
[14, 25] 14 25
type for point in is_valid_node  <class 'list'>
[13, 25] 13 25
the point we are trying to find neighbors for  [13, 25]
neighboring cells are:  [[13, 26], [13, 24], [12, 25], [14, 25]]
dealing with [13, 26] at loop 0
dealing with [13, 24] at loop 1
[13, 24] is NOT a wall
dealing with [12, 25] at loop 2
dealing with [14, 25] at loop 3
[14, 25] is NOT a wall
neighbors of b [[13, 24], [14, 25]]
cost from [14, 25] to [13, 25] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[14, 25][15, 25]
the points are:  [14, 25] [15, 25]
type for point in is_valid_node  <class 'list'>
[14, 25] 14 25
type for point in is_valid_node  <class 'list'>
[15, 25] 15 25
the point we are trying to find neighbors for  [15, 25]
neighboring cells are:  [[15, 26], [15, 24], [14, 25], [16, 25]]
dealing with [15, 26] at loop 0
dealing with [15, 24] at loop 1
[15, 24] is NOT a wall
dealing with [14, 25] at loop 2
[14, 25] is NOT a wall
dealing with [16, 25] at loop 3
neighbors of b [[15, 24], [14, 25]]
cost from [14, 25] to [15, 25] is 1
<class 'int'>
5 13 18
5 13 18
18 <class 'int'>
5 13 18
[21, 18] (21, 18)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 18] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 18] 21 18
the point we are trying to find neighbors for  [21, 18]
neighboring cells are:  [[21, 19], [21, 17], [20, 18], [22, 18]]
dealing with [21, 19] at loop 0
[21, 19] is NOT a wall
dealing with [21, 17] at loop 1
[21, 17] is NOT a wall
dealing with [20, 18] at loop 2
dealing with [22, 18] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[21, 18][21, 19]
the points are:  [21, 18] [21, 19]
type for point in is_valid_node  <class 'list'>
[21, 18] 21 18
type for point in is_valid_node  <class 'list'>
[21, 19] 21 19
the point we are trying to find neighbors for  [21, 19]
neighboring cells are:  [[21, 20], [21, 18], [20, 19], [22, 19]]
dealing with [21, 20] at loop 0
[21, 20] is NOT a wall
dealing with [21, 18] at loop 1
[21, 18] is NOT a wall
dealing with [20, 19] at loop 2
dealing with [22, 19] at loop 3
neighbors of b [[21, 20], [21, 18]]
cost from [21, 18] to [21, 19] is 1
<class 'int'>
11 7 18
11 7 18
18 <class 'int'>
11 7 18
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[21, 18][21, 17]
the points are:  [21, 18] [21, 17]
type for point in is_valid_node  <class 'list'>
[21, 18] 21 18
type for point in is_valid_node  <class 'list'>
[21, 17] 21 17
the point we are trying to find neighbors for  [21, 17]
neighboring cells are:  [[21, 18], [21, 16], [20, 17], [22, 17]]
dealing with [21, 18] at loop 0
[21, 18] is NOT a wall
dealing with [21, 16] at loop 1
[21, 16] is NOT a wall
dealing with [20, 17] at loop 2
dealing with [22, 17] at loop 3
neighbors of b [[21, 18], [21, 16]]
cost from [21, 18] to [21, 17] is 1
[1, 16] (1, 16)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 16] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 16] 1 16
the point we are trying to find neighbors for  [1, 16]
neighboring cells are:  [[1, 17], [1, 15], [0, 16], [2, 16]]
dealing with [1, 17] at loop 0
[1, 17] is NOT a wall
dealing with [1, 15] at loop 1
[1, 15] is NOT a wall
dealing with [0, 16] at loop 2
dealing with [2, 16] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[1, 16][1, 17]
the points are:  [1, 16] [1, 17]
type for point in is_valid_node  <class 'list'>
[1, 16] 1 16
type for point in is_valid_node  <class 'list'>
[1, 17] 1 17
the point we are trying to find neighbors for  [1, 17]
neighboring cells are:  [[1, 18], [1, 16], [0, 17], [2, 17]]
dealing with [1, 18] at loop 0
[1, 18] is NOT a wall
dealing with [1, 16] at loop 1
[1, 16] is NOT a wall
dealing with [0, 17] at loop 2
dealing with [2, 17] at loop 3
neighbors of b [[1, 18], [1, 16]]
cost from [1, 16] to [1, 17] is 1
<class 'int'>
9 5 14
9 5 14
14 <class 'int'>
9 5 14
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[1, 16][1, 15]
the points are:  [1, 16] [1, 15]
type for point in is_valid_node  <class 'list'>
[1, 16] 1 16
type for point in is_valid_node  <class 'list'>
[1, 15] 1 15
the point we are trying to find neighbors for  [1, 15]
neighboring cells are:  [[1, 16], [1, 14], [0, 15], [2, 15]]
dealing with [1, 16] at loop 0
[1, 16] is NOT a wall
dealing with [1, 14] at loop 1
[1, 14] is NOT a wall
dealing with [0, 15] at loop 2
dealing with [2, 15] at loop 3
neighbors of b [[1, 16], [1, 14]]
cost from [1, 16] to [1, 15] is 1
[7, 28] (7, 28)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 28] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 28] 7 28
the point we are trying to find neighbors for  [7, 28]
neighboring cells are:  [[7, 29], [7, 27], [6, 28], [8, 28]]
dealing with [7, 29] at loop 0
[7, 29] is NOT a wall
dealing with [7, 27] at loop 1
[7, 27] is NOT a wall
dealing with [6, 28] at loop 2
dealing with [8, 28] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[7, 28][7, 29]
the points are:  [7, 28] [7, 29]
type for point in is_valid_node  <class 'list'>
[7, 28] 7 28
type for point in is_valid_node  <class 'list'>
[7, 29] 7 29
the point we are trying to find neighbors for  [7, 29]
neighboring cells are:  [[7, 30], [7, 28], [6, 29], [8, 29]]
dealing with [7, 30] at loop 0
[7, 30] is NOT a wall
dealing with [7, 28] at loop 1
[7, 28] is NOT a wall
dealing with [6, 29] at loop 2
dealing with [8, 29] at loop 3
neighbors of b [[7, 30], [7, 28]]
cost from [7, 28] to [7, 29] is 1
<class 'int'>
3 17 20
3 17 20
20 <class 'int'>
3 17 20
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
41[7, 28][7, 27]
the points are:  [7, 28] [7, 27]
type for point in is_valid_node  <class 'list'>
[7, 28] 7 28
type for point in is_valid_node  <class 'list'>
[7, 27] 7 27
the point we are trying to find neighbors for  [7, 27]
neighboring cells are:  [[7, 28], [7, 26], [6, 27], [8, 27]]
dealing with [7, 28] at loop 0
[7, 28] is NOT a wall
dealing with [7, 26] at loop 1
[7, 26] is NOT a wall
dealing with [6, 27] at loop 2
dealing with [8, 27] at loop 3
[8, 27] is NOT a wall
neighbors of b [[7, 28], [7, 26], [8, 27]]
cost from [7, 28] to [7, 27] is 1
[11, 27] (11, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 27] 11 27
the point we are trying to find neighbors for  [11, 27]
neighboring cells are:  [[11, 28], [11, 26], [10, 27], [12, 27]]
dealing with [11, 28] at loop 0
dealing with [11, 26] at loop 1
[11, 26] is NOT a wall
dealing with [10, 27] at loop 2
[10, 27] is NOT a wall
dealing with [12, 27] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
44[11, 27][11, 26]
the points are:  [11, 27] [11, 26]
type for point in is_valid_node  <class 'list'>
[11, 27] 11 27
type for point in is_valid_node  <class 'list'>
[11, 26] 11 26
the point we are trying to find neighbors for  [11, 26]
neighboring cells are:  [[11, 27], [11, 25], [10, 26], [12, 26]]
dealing with [11, 27] at loop 0
[11, 27] is NOT a wall
dealing with [11, 25] at loop 1
[11, 25] is NOT a wall
dealing with [10, 26] at loop 2
dealing with [12, 26] at loop 3
neighbors of b [[11, 27], [11, 25]]
cost from [11, 27] to [11, 26] is 1
<class 'int'>
1 14 15
1 14 15
15 <class 'int'>
1 14 15
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
44[11, 27][10, 27]
the points are:  [11, 27] [10, 27]
type for point in is_valid_node  <class 'list'>
[11, 27] 11 27
type for point in is_valid_node  <class 'list'>
[10, 27] 10 27
the point we are trying to find neighbors for  [10, 27]
neighboring cells are:  [[10, 28], [10, 26], [9, 27], [11, 27]]
dealing with [10, 28] at loop 0
dealing with [10, 26] at loop 1
dealing with [9, 27] at loop 2
[9, 27] is NOT a wall
dealing with [11, 27] at loop 3
[11, 27] is NOT a wall
neighbors of b [[9, 27], [11, 27]]
cost from [11, 27] to [10, 27] is 1
[11, 26] (11, 26)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 26] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 26] 11 26
the point we are trying to find neighbors for  [11, 26]
neighboring cells are:  [[11, 27], [11, 25], [10, 26], [12, 26]]
dealing with [11, 27] at loop 0
[11, 27] is NOT a wall
dealing with [11, 25] at loop 1
[11, 25] is NOT a wall
dealing with [10, 26] at loop 2
dealing with [12, 26] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
45[11, 26][11, 27]
the points are:  [11, 26] [11, 27]
type for point in is_valid_node  <class 'list'>
[11, 26] 11 26
type for point in is_valid_node  <class 'list'>
[11, 27] 11 27
the point we are trying to find neighbors for  [11, 27]
neighboring cells are:  [[11, 28], [11, 26], [10, 27], [12, 27]]
dealing with [11, 28] at loop 0
dealing with [11, 26] at loop 1
[11, 26] is NOT a wall
dealing with [10, 27] at loop 2
[10, 27] is NOT a wall
dealing with [12, 27] at loop 3
neighbors of b [[11, 26], [10, 27]]
cost from [11, 26] to [11, 27] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
45[11, 26][11, 25]
the points are:  [11, 26] [11, 25]
type for point in is_valid_node  <class 'list'>
[11, 26] 11 26
type for point in is_valid_node  <class 'list'>
[11, 25] 11 25
the point we are trying to find neighbors for  [11, 25]
neighboring cells are:  [[11, 26], [11, 24], [10, 25], [12, 25]]
dealing with [11, 26] at loop 0
[11, 26] is NOT a wall
dealing with [11, 24] at loop 1
dealing with [10, 25] at loop 2
[10, 25] is NOT a wall
dealing with [12, 25] at loop 3
neighbors of b [[11, 26], [10, 25]]
cost from [11, 26] to [11, 25] is 1
<class 'int'>
1 13 14
1 13 14
14 <class 'int'>
1 13 14
[11, 25] (11, 25)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 25] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 25] 11 25
the point we are trying to find neighbors for  [11, 25]
neighboring cells are:  [[11, 26], [11, 24], [10, 25], [12, 25]]
dealing with [11, 26] at loop 0
[11, 26] is NOT a wall
dealing with [11, 24] at loop 1
dealing with [10, 25] at loop 2
[10, 25] is NOT a wall
dealing with [12, 25] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[11, 25][11, 26]
the points are:  [11, 25] [11, 26]
type for point in is_valid_node  <class 'list'>
[11, 25] 11 25
type for point in is_valid_node  <class 'list'>
[11, 26] 11 26
the point we are trying to find neighbors for  [11, 26]
neighboring cells are:  [[11, 27], [11, 25], [10, 26], [12, 26]]
dealing with [11, 27] at loop 0
[11, 27] is NOT a wall
dealing with [11, 25] at loop 1
[11, 25] is NOT a wall
dealing with [10, 26] at loop 2
dealing with [12, 26] at loop 3
neighbors of b [[11, 27], [11, 25]]
cost from [11, 25] to [11, 26] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[11, 25][10, 25]
the points are:  [11, 25] [10, 25]
type for point in is_valid_node  <class 'list'>
[11, 25] 11 25
type for point in is_valid_node  <class 'list'>
[10, 25] 10 25
the point we are trying to find neighbors for  [10, 25]
neighboring cells are:  [[10, 26], [10, 24], [9, 25], [11, 25]]
dealing with [10, 26] at loop 0
dealing with [10, 24] at loop 1
dealing with [9, 25] at loop 2
[9, 25] is NOT a wall
dealing with [11, 25] at loop 3
[11, 25] is NOT a wall
neighbors of b [[9, 25], [11, 25]]
cost from [11, 25] to [10, 25] is 1
<class 'int'>
0 13 13
0 13 13
13 <class 'int'>
0 13 13
[10, 25] (10, 25)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[10, 25] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[10, 25] 10 25
the point we are trying to find neighbors for  [10, 25]
neighboring cells are:  [[10, 26], [10, 24], [9, 25], [11, 25]]
dealing with [10, 26] at loop 0
dealing with [10, 24] at loop 1
dealing with [9, 25] at loop 2
[9, 25] is NOT a wall
dealing with [11, 25] at loop 3
[11, 25] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[10, 25][9, 25]
the points are:  [10, 25] [9, 25]
type for point in is_valid_node  <class 'list'>
[10, 25] 10 25
type for point in is_valid_node  <class 'list'>
[9, 25] 9 25
the point we are trying to find neighbors for  [9, 25]
neighboring cells are:  [[9, 26], [9, 24], [8, 25], [10, 25]]
dealing with [9, 26] at loop 0
dealing with [9, 24] at loop 1
dealing with [8, 25] at loop 2
dealing with [10, 25] at loop 3
[10, 25] is NOT a wall
neighbors of b [[10, 25]]
cost from [10, 25] to [9, 25] is 1
<class 'int'>
1 13 14
1 13 14
14 <class 'int'>
1 13 14
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[10, 25][11, 25]
the points are:  [10, 25] [11, 25]
type for point in is_valid_node  <class 'list'>
[10, 25] 10 25
type for point in is_valid_node  <class 'list'>
[11, 25] 11 25
the point we are trying to find neighbors for  [11, 25]
neighboring cells are:  [[11, 26], [11, 24], [10, 25], [12, 25]]
dealing with [11, 26] at loop 0
[11, 26] is NOT a wall
dealing with [11, 24] at loop 1
dealing with [10, 25] at loop 2
[10, 25] is NOT a wall
dealing with [12, 25] at loop 3
neighbors of b [[11, 26], [10, 25]]
cost from [10, 25] to [11, 25] is 1
[15, 25] (15, 25)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 25] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 25] 15 25
the point we are trying to find neighbors for  [15, 25]
neighboring cells are:  [[15, 26], [15, 24], [14, 25], [16, 25]]
dealing with [15, 26] at loop 0
dealing with [15, 24] at loop 1
[15, 24] is NOT a wall
dealing with [14, 25] at loop 2
[14, 25] is NOT a wall
dealing with [16, 25] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[15, 25][15, 24]
the points are:  [15, 25] [15, 24]
type for point in is_valid_node  <class 'list'>
[15, 25] 15 25
type for point in is_valid_node  <class 'list'>
[15, 24] 15 24
the point we are trying to find neighbors for  [15, 24]
neighboring cells are:  [[15, 25], [15, 23], [14, 24], [16, 24]]
dealing with [15, 25] at loop 0
[15, 25] is NOT a wall
dealing with [15, 23] at loop 1
[15, 23] is NOT a wall
dealing with [14, 24] at loop 2
dealing with [16, 24] at loop 3
neighbors of b [[15, 25], [15, 23]]
cost from [15, 25] to [15, 24] is 1
<class 'int'>
5 12 17
5 12 17
17 <class 'int'>
5 12 17
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[15, 25][14, 25]
the points are:  [15, 25] [14, 25]
type for point in is_valid_node  <class 'list'>
[15, 25] 15 25
type for point in is_valid_node  <class 'list'>
[14, 25] 14 25
the point we are trying to find neighbors for  [14, 25]
neighboring cells are:  [[14, 26], [14, 24], [13, 25], [15, 25]]
dealing with [14, 26] at loop 0
dealing with [14, 24] at loop 1
dealing with [13, 25] at loop 2
[13, 25] is NOT a wall
dealing with [15, 25] at loop 3
[15, 25] is NOT a wall
neighbors of b [[13, 25], [15, 25]]
cost from [15, 25] to [14, 25] is 1
[15, 24] (15, 24)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 24] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 24] 15 24
the point we are trying to find neighbors for  [15, 24]
neighboring cells are:  [[15, 25], [15, 23], [14, 24], [16, 24]]
dealing with [15, 25] at loop 0
[15, 25] is NOT a wall
dealing with [15, 23] at loop 1
[15, 23] is NOT a wall
dealing with [14, 24] at loop 2
dealing with [16, 24] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
43[15, 24][15, 25]
the points are:  [15, 24] [15, 25]
type for point in is_valid_node  <class 'list'>
[15, 24] 15 24
type for point in is_valid_node  <class 'list'>
[15, 25] 15 25
the point we are trying to find neighbors for  [15, 25]
neighboring cells are:  [[15, 26], [15, 24], [14, 25], [16, 25]]
dealing with [15, 26] at loop 0
dealing with [15, 24] at loop 1
[15, 24] is NOT a wall
dealing with [14, 25] at loop 2
[14, 25] is NOT a wall
dealing with [16, 25] at loop 3
neighbors of b [[15, 24], [14, 25]]
cost from [15, 24] to [15, 25] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
43[15, 24][15, 23]
the points are:  [15, 24] [15, 23]
type for point in is_valid_node  <class 'list'>
[15, 24] 15 24
type for point in is_valid_node  <class 'list'>
[15, 23] 15 23
the point we are trying to find neighbors for  [15, 23]
neighboring cells are:  [[15, 24], [15, 22], [14, 23], [16, 23]]
dealing with [15, 24] at loop 0
[15, 24] is NOT a wall
dealing with [15, 22] at loop 1
dealing with [14, 23] at loop 2
dealing with [16, 23] at loop 3
[16, 23] is NOT a wall
neighbors of b [[15, 24], [16, 23]]
cost from [15, 24] to [15, 23] is 1
<class 'int'>
5 11 16
5 11 16
16 <class 'int'>
5 11 16
[15, 23] (15, 23)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 23] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 23] 15 23
the point we are trying to find neighbors for  [15, 23]
neighboring cells are:  [[15, 24], [15, 22], [14, 23], [16, 23]]
dealing with [15, 24] at loop 0
[15, 24] is NOT a wall
dealing with [15, 22] at loop 1
dealing with [14, 23] at loop 2
dealing with [16, 23] at loop 3
[16, 23] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
44[15, 23][15, 24]
the points are:  [15, 23] [15, 24]
type for point in is_valid_node  <class 'list'>
[15, 23] 15 23
type for point in is_valid_node  <class 'list'>
[15, 24] 15 24
the point we are trying to find neighbors for  [15, 24]
neighboring cells are:  [[15, 25], [15, 23], [14, 24], [16, 24]]
dealing with [15, 25] at loop 0
[15, 25] is NOT a wall
dealing with [15, 23] at loop 1
[15, 23] is NOT a wall
dealing with [14, 24] at loop 2
dealing with [16, 24] at loop 3
neighbors of b [[15, 25], [15, 23]]
cost from [15, 23] to [15, 24] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
44[15, 23][16, 23]
the points are:  [15, 23] [16, 23]
type for point in is_valid_node  <class 'list'>
[15, 23] 15 23
type for point in is_valid_node  <class 'list'>
[16, 23] 16 23
the point we are trying to find neighbors for  [16, 23]
neighboring cells are:  [[16, 24], [16, 22], [15, 23], [17, 23]]
dealing with [16, 24] at loop 0
dealing with [16, 22] at loop 1
dealing with [15, 23] at loop 2
[15, 23] is NOT a wall
dealing with [17, 23] at loop 3
[17, 23] is NOT a wall
neighbors of b [[15, 23], [17, 23]]
cost from [15, 23] to [16, 23] is 1
<class 'int'>
6 11 17
6 11 17
17 <class 'int'>
6 11 17
[21, 19] (21, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 19] 21 19
the point we are trying to find neighbors for  [21, 19]
neighboring cells are:  [[21, 20], [21, 18], [20, 19], [22, 19]]
dealing with [21, 20] at loop 0
[21, 20] is NOT a wall
dealing with [21, 18] at loop 1
[21, 18] is NOT a wall
dealing with [20, 19] at loop 2
dealing with [22, 19] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[21, 19][21, 20]
the points are:  [21, 19] [21, 20]
type for point in is_valid_node  <class 'list'>
[21, 19] 21 19
type for point in is_valid_node  <class 'list'>
[21, 20] 21 20
the point we are trying to find neighbors for  [21, 20]
neighboring cells are:  [[21, 21], [21, 19], [20, 20], [22, 20]]
dealing with [21, 21] at loop 0
[21, 21] is NOT a wall
dealing with [21, 19] at loop 1
[21, 19] is NOT a wall
dealing with [20, 20] at loop 2
dealing with [22, 20] at loop 3
neighbors of b [[21, 21], [21, 19]]
cost from [21, 19] to [21, 20] is 1
<class 'int'>
11 8 19
11 8 19
19 <class 'int'>
11 8 19
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[21, 19][21, 18]
the points are:  [21, 19] [21, 18]
type for point in is_valid_node  <class 'list'>
[21, 19] 21 19
type for point in is_valid_node  <class 'list'>
[21, 18] 21 18
the point we are trying to find neighbors for  [21, 18]
neighboring cells are:  [[21, 19], [21, 17], [20, 18], [22, 18]]
dealing with [21, 19] at loop 0
[21, 19] is NOT a wall
dealing with [21, 17] at loop 1
[21, 17] is NOT a wall
dealing with [20, 18] at loop 2
dealing with [22, 18] at loop 3
neighbors of b [[21, 19], [21, 17]]
cost from [21, 19] to [21, 18] is 1
[1, 17] (1, 17)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 17] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 17] 1 17
the point we are trying to find neighbors for  [1, 17]
neighboring cells are:  [[1, 18], [1, 16], [0, 17], [2, 17]]
dealing with [1, 18] at loop 0
[1, 18] is NOT a wall
dealing with [1, 16] at loop 1
[1, 16] is NOT a wall
dealing with [0, 17] at loop 2
dealing with [2, 17] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
48[1, 17][1, 18]
the points are:  [1, 17] [1, 18]
type for point in is_valid_node  <class 'list'>
[1, 17] 1 17
type for point in is_valid_node  <class 'list'>
[1, 18] 1 18
the point we are trying to find neighbors for  [1, 18]
neighboring cells are:  [[1, 19], [1, 17], [0, 18], [2, 18]]
dealing with [1, 19] at loop 0
[1, 19] is NOT a wall
dealing with [1, 17] at loop 1
[1, 17] is NOT a wall
dealing with [0, 18] at loop 2
dealing with [2, 18] at loop 3
neighbors of b [[1, 19], [1, 17]]
cost from [1, 17] to [1, 18] is 1
<class 'int'>
9 6 15
9 6 15
15 <class 'int'>
9 6 15
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
48[1, 17][1, 16]
the points are:  [1, 17] [1, 16]
type for point in is_valid_node  <class 'list'>
[1, 17] 1 17
type for point in is_valid_node  <class 'list'>
[1, 16] 1 16
the point we are trying to find neighbors for  [1, 16]
neighboring cells are:  [[1, 17], [1, 15], [0, 16], [2, 16]]
dealing with [1, 17] at loop 0
[1, 17] is NOT a wall
dealing with [1, 15] at loop 1
[1, 15] is NOT a wall
dealing with [0, 16] at loop 2
dealing with [2, 16] at loop 3
neighbors of b [[1, 17], [1, 15]]
cost from [1, 17] to [1, 16] is 1
[7, 29] (7, 29)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 29] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 29] 7 29
the point we are trying to find neighbors for  [7, 29]
neighboring cells are:  [[7, 30], [7, 28], [6, 29], [8, 29]]
dealing with [7, 30] at loop 0
[7, 30] is NOT a wall
dealing with [7, 28] at loop 1
[7, 28] is NOT a wall
dealing with [6, 29] at loop 2
dealing with [8, 29] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[7, 29][7, 30]
the points are:  [7, 29] [7, 30]
type for point in is_valid_node  <class 'list'>
[7, 29] 7 29
type for point in is_valid_node  <class 'list'>
[7, 30] 7 30
the point we are trying to find neighbors for  [7, 30]
neighboring cells are:  [[7, 31], [7, 29], [6, 30], [8, 30]]
dealing with [7, 31] at loop 0
[7, 31] is NOT a wall
dealing with [7, 29] at loop 1
[7, 29] is NOT a wall
dealing with [6, 30] at loop 2
[6, 30] is NOT a wall
dealing with [8, 30] at loop 3
neighbors of b [[7, 31], [7, 29], [6, 30]]
cost from [7, 29] to [7, 30] is 1
<class 'int'>
3 18 21
3 18 21
21 <class 'int'>
3 18 21
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
42[7, 29][7, 28]
the points are:  [7, 29] [7, 28]
type for point in is_valid_node  <class 'list'>
[7, 29] 7 29
type for point in is_valid_node  <class 'list'>
[7, 28] 7 28
the point we are trying to find neighbors for  [7, 28]
neighboring cells are:  [[7, 29], [7, 27], [6, 28], [8, 28]]
dealing with [7, 29] at loop 0
[7, 29] is NOT a wall
dealing with [7, 27] at loop 1
[7, 27] is NOT a wall
dealing with [6, 28] at loop 2
dealing with [8, 28] at loop 3
neighbors of b [[7, 29], [7, 27]]
cost from [7, 29] to [7, 28] is 1
[9, 25] (9, 25)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 25] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 25] 9 25
the point we are trying to find neighbors for  [9, 25]
neighboring cells are:  [[9, 26], [9, 24], [8, 25], [10, 25]]
dealing with [9, 26] at loop 0
dealing with [9, 24] at loop 1
dealing with [8, 25] at loop 2
dealing with [10, 25] at loop 3
[10, 25] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
48[9, 25][10, 25]
the points are:  [9, 25] [10, 25]
type for point in is_valid_node  <class 'list'>
[9, 25] 9 25
type for point in is_valid_node  <class 'list'>
[10, 25] 10 25
the point we are trying to find neighbors for  [10, 25]
neighboring cells are:  [[10, 26], [10, 24], [9, 25], [11, 25]]
dealing with [10, 26] at loop 0
dealing with [10, 24] at loop 1
dealing with [9, 25] at loop 2
[9, 25] is NOT a wall
dealing with [11, 25] at loop 3
[11, 25] is NOT a wall
neighbors of b [[9, 25], [11, 25]]
cost from [9, 25] to [10, 25] is 1
[16, 23] (16, 23)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 23] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 23] 16 23
the point we are trying to find neighbors for  [16, 23]
neighboring cells are:  [[16, 24], [16, 22], [15, 23], [17, 23]]
dealing with [16, 24] at loop 0
dealing with [16, 22] at loop 1
dealing with [15, 23] at loop 2
[15, 23] is NOT a wall
dealing with [17, 23] at loop 3
[17, 23] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
45[16, 23][15, 23]
the points are:  [16, 23] [15, 23]
type for point in is_valid_node  <class 'list'>
[16, 23] 16 23
type for point in is_valid_node  <class 'list'>
[15, 23] 15 23
the point we are trying to find neighbors for  [15, 23]
neighboring cells are:  [[15, 24], [15, 22], [14, 23], [16, 23]]
dealing with [15, 24] at loop 0
[15, 24] is NOT a wall
dealing with [15, 22] at loop 1
dealing with [14, 23] at loop 2
dealing with [16, 23] at loop 3
[16, 23] is NOT a wall
neighbors of b [[15, 24], [16, 23]]
cost from [16, 23] to [15, 23] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
45[16, 23][17, 23]
the points are:  [16, 23] [17, 23]
type for point in is_valid_node  <class 'list'>
[16, 23] 16 23
type for point in is_valid_node  <class 'list'>
[17, 23] 17 23
the point we are trying to find neighbors for  [17, 23]
neighboring cells are:  [[17, 24], [17, 22], [16, 23], [18, 23]]
dealing with [17, 24] at loop 0
dealing with [17, 22] at loop 1
dealing with [16, 23] at loop 2
[16, 23] is NOT a wall
dealing with [18, 23] at loop 3
[18, 23] is NOT a wall
neighbors of b [[16, 23], [18, 23]]
cost from [16, 23] to [17, 23] is 1
<class 'int'>
7 11 18
7 11 18
18 <class 'int'>
7 11 18
[21, 20] (21, 20)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 20] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 20] 21 20
the point we are trying to find neighbors for  [21, 20]
neighboring cells are:  [[21, 21], [21, 19], [20, 20], [22, 20]]
dealing with [21, 21] at loop 0
[21, 21] is NOT a wall
dealing with [21, 19] at loop 1
[21, 19] is NOT a wall
dealing with [20, 20] at loop 2
dealing with [22, 20] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
43[21, 20][21, 21]
the points are:  [21, 20] [21, 21]
type for point in is_valid_node  <class 'list'>
[21, 20] 21 20
type for point in is_valid_node  <class 'list'>
[21, 21] 21 21
the point we are trying to find neighbors for  [21, 21]
neighboring cells are:  [[21, 22], [21, 20], [20, 21], [22, 21]]
dealing with [21, 22] at loop 0
[21, 22] is NOT a wall
dealing with [21, 20] at loop 1
[21, 20] is NOT a wall
dealing with [20, 21] at loop 2
[20, 21] is NOT a wall
dealing with [22, 21] at loop 3
neighbors of b [[21, 22], [21, 20], [20, 21]]
cost from [21, 20] to [21, 21] is 1
<class 'int'>
11 9 20
11 9 20
20 <class 'int'>
11 9 20
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
43[21, 20][21, 19]
the points are:  [21, 20] [21, 19]
type for point in is_valid_node  <class 'list'>
[21, 20] 21 20
type for point in is_valid_node  <class 'list'>
[21, 19] 21 19
the point we are trying to find neighbors for  [21, 19]
neighboring cells are:  [[21, 20], [21, 18], [20, 19], [22, 19]]
dealing with [21, 20] at loop 0
[21, 20] is NOT a wall
dealing with [21, 18] at loop 1
[21, 18] is NOT a wall
dealing with [20, 19] at loop 2
dealing with [22, 19] at loop 3
neighbors of b [[21, 20], [21, 18]]
cost from [21, 20] to [21, 19] is 1
[1, 18] (1, 18)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 18] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 18] 1 18
the point we are trying to find neighbors for  [1, 18]
neighboring cells are:  [[1, 19], [1, 17], [0, 18], [2, 18]]
dealing with [1, 19] at loop 0
[1, 19] is NOT a wall
dealing with [1, 17] at loop 1
[1, 17] is NOT a wall
dealing with [0, 18] at loop 2
dealing with [2, 18] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
49[1, 18][1, 19]
the points are:  [1, 18] [1, 19]
type for point in is_valid_node  <class 'list'>
[1, 18] 1 18
type for point in is_valid_node  <class 'list'>
[1, 19] 1 19
the point we are trying to find neighbors for  [1, 19]
neighboring cells are:  [[1, 20], [1, 18], [0, 19], [2, 19]]
dealing with [1, 20] at loop 0
[1, 20] is NOT a wall
dealing with [1, 18] at loop 1
[1, 18] is NOT a wall
dealing with [0, 19] at loop 2
dealing with [2, 19] at loop 3
[2, 19] is NOT a wall
neighbors of b [[1, 20], [1, 18], [2, 19]]
cost from [1, 18] to [1, 19] is 1
<class 'int'>
9 7 16
9 7 16
16 <class 'int'>
9 7 16
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
49[1, 18][1, 17]
the points are:  [1, 18] [1, 17]
type for point in is_valid_node  <class 'list'>
[1, 18] 1 18
type for point in is_valid_node  <class 'list'>
[1, 17] 1 17
the point we are trying to find neighbors for  [1, 17]
neighboring cells are:  [[1, 18], [1, 16], [0, 17], [2, 17]]
dealing with [1, 18] at loop 0
[1, 18] is NOT a wall
dealing with [1, 16] at loop 1
[1, 16] is NOT a wall
dealing with [0, 17] at loop 2
dealing with [2, 17] at loop 3
neighbors of b [[1, 18], [1, 16]]
cost from [1, 18] to [1, 17] is 1
[7, 30] (7, 30)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 30] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 30] 7 30
the point we are trying to find neighbors for  [7, 30]
neighboring cells are:  [[7, 31], [7, 29], [6, 30], [8, 30]]
dealing with [7, 31] at loop 0
[7, 31] is NOT a wall
dealing with [7, 29] at loop 1
[7, 29] is NOT a wall
dealing with [6, 30] at loop 2
[6, 30] is NOT a wall
dealing with [8, 30] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
43[7, 30][7, 31]
the points are:  [7, 30] [7, 31]
type for point in is_valid_node  <class 'list'>
[7, 30] 7 30
type for point in is_valid_node  <class 'list'>
[7, 31] 7 31
the point we are trying to find neighbors for  [7, 31]
neighboring cells are:  [[7, 32], [7, 30], [6, 31], [8, 31]]
dealing with [7, 32] at loop 0
dealing with [7, 30] at loop 1
[7, 30] is NOT a wall
dealing with [6, 31] at loop 2
dealing with [8, 31] at loop 3
[8, 31] is NOT a wall
neighbors of b [[7, 30], [8, 31]]
cost from [7, 30] to [7, 31] is 1
<class 'int'>
3 19 22
3 19 22
22 <class 'int'>
3 19 22
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
43[7, 30][7, 29]
the points are:  [7, 30] [7, 29]
type for point in is_valid_node  <class 'list'>
[7, 30] 7 30
type for point in is_valid_node  <class 'list'>
[7, 29] 7 29
the point we are trying to find neighbors for  [7, 29]
neighboring cells are:  [[7, 30], [7, 28], [6, 29], [8, 29]]
dealing with [7, 30] at loop 0
[7, 30] is NOT a wall
dealing with [7, 28] at loop 1
[7, 28] is NOT a wall
dealing with [6, 29] at loop 2
dealing with [8, 29] at loop 3
neighbors of b [[7, 30], [7, 28]]
cost from [7, 30] to [7, 29] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
43[7, 30][6, 30]
the points are:  [7, 30] [6, 30]
type for point in is_valid_node  <class 'list'>
[7, 30] 7 30
type for point in is_valid_node  <class 'list'>
[6, 30] 6 30
the point we are trying to find neighbors for  [6, 30]
neighboring cells are:  [[6, 31], [6, 29], [5, 30], [7, 30]]
dealing with [6, 31] at loop 0
dealing with [6, 29] at loop 1
dealing with [5, 30] at loop 2
[5, 30] is NOT a wall
dealing with [7, 30] at loop 3
[7, 30] is NOT a wall
neighbors of b [[5, 30], [7, 30]]
cost from [7, 30] to [6, 30] is 1
<class 'int'>
4 18 22
4 18 22
22 <class 'int'>
4 18 22
[17, 23] (17, 23)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 23] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 23] 17 23
the point we are trying to find neighbors for  [17, 23]
neighboring cells are:  [[17, 24], [17, 22], [16, 23], [18, 23]]
dealing with [17, 24] at loop 0
dealing with [17, 22] at loop 1
dealing with [16, 23] at loop 2
[16, 23] is NOT a wall
dealing with [18, 23] at loop 3
[18, 23] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[17, 23][16, 23]
the points are:  [17, 23] [16, 23]
type for point in is_valid_node  <class 'list'>
[17, 23] 17 23
type for point in is_valid_node  <class 'list'>
[16, 23] 16 23
the point we are trying to find neighbors for  [16, 23]
neighboring cells are:  [[16, 24], [16, 22], [15, 23], [17, 23]]
dealing with [16, 24] at loop 0
dealing with [16, 22] at loop 1
dealing with [15, 23] at loop 2
[15, 23] is NOT a wall
dealing with [17, 23] at loop 3
[17, 23] is NOT a wall
neighbors of b [[15, 23], [17, 23]]
cost from [17, 23] to [16, 23] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[17, 23][18, 23]
the points are:  [17, 23] [18, 23]
type for point in is_valid_node  <class 'list'>
[17, 23] 17 23
type for point in is_valid_node  <class 'list'>
[18, 23] 18 23
the point we are trying to find neighbors for  [18, 23]
neighboring cells are:  [[18, 24], [18, 22], [17, 23], [19, 23]]
dealing with [18, 24] at loop 0
dealing with [18, 22] at loop 1
dealing with [17, 23] at loop 2
[17, 23] is NOT a wall
dealing with [19, 23] at loop 3
[19, 23] is NOT a wall
neighbors of b [[17, 23], [19, 23]]
cost from [17, 23] to [18, 23] is 1
<class 'int'>
8 11 19
8 11 19
19 <class 'int'>
8 11 19
[21, 21] (21, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 21] 21 21
the point we are trying to find neighbors for  [21, 21]
neighboring cells are:  [[21, 22], [21, 20], [20, 21], [22, 21]]
dealing with [21, 22] at loop 0
[21, 22] is NOT a wall
dealing with [21, 20] at loop 1
[21, 20] is NOT a wall
dealing with [20, 21] at loop 2
[20, 21] is NOT a wall
dealing with [22, 21] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
44[21, 21][21, 22]
the points are:  [21, 21] [21, 22]
type for point in is_valid_node  <class 'list'>
[21, 21] 21 21
type for point in is_valid_node  <class 'list'>
[21, 22] 21 22
the point we are trying to find neighbors for  [21, 22]
neighboring cells are:  [[21, 23], [21, 21], [20, 22], [22, 22]]
dealing with [21, 23] at loop 0
[21, 23] is NOT a wall
dealing with [21, 21] at loop 1
[21, 21] is NOT a wall
dealing with [20, 22] at loop 2
dealing with [22, 22] at loop 3
neighbors of b [[21, 23], [21, 21]]
cost from [21, 21] to [21, 22] is 1
<class 'int'>
11 10 21
11 10 21
21 <class 'int'>
11 10 21
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
44[21, 21][21, 20]
the points are:  [21, 21] [21, 20]
type for point in is_valid_node  <class 'list'>
[21, 21] 21 21
type for point in is_valid_node  <class 'list'>
[21, 20] 21 20
the point we are trying to find neighbors for  [21, 20]
neighboring cells are:  [[21, 21], [21, 19], [20, 20], [22, 20]]
dealing with [21, 21] at loop 0
[21, 21] is NOT a wall
dealing with [21, 19] at loop 1
[21, 19] is NOT a wall
dealing with [20, 20] at loop 2
dealing with [22, 20] at loop 3
neighbors of b [[21, 21], [21, 19]]
cost from [21, 21] to [21, 20] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
44[21, 21][20, 21]
the points are:  [21, 21] [20, 21]
type for point in is_valid_node  <class 'list'>
[21, 21] 21 21
type for point in is_valid_node  <class 'list'>
[20, 21] 20 21
the point we are trying to find neighbors for  [20, 21]
neighboring cells are:  [[20, 22], [20, 20], [19, 21], [21, 21]]
dealing with [20, 22] at loop 0
dealing with [20, 20] at loop 1
dealing with [19, 21] at loop 2
[19, 21] is NOT a wall
dealing with [21, 21] at loop 3
[21, 21] is NOT a wall
neighbors of b [[19, 21], [21, 21]]
cost from [21, 21] to [20, 21] is 1
<class 'int'>
10 9 19
10 9 19
19 <class 'int'>
10 9 19
[20, 21] (20, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[20, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[20, 21] 20 21
the point we are trying to find neighbors for  [20, 21]
neighboring cells are:  [[20, 22], [20, 20], [19, 21], [21, 21]]
dealing with [20, 22] at loop 0
dealing with [20, 20] at loop 1
dealing with [19, 21] at loop 2
[19, 21] is NOT a wall
dealing with [21, 21] at loop 3
[21, 21] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
45[20, 21][19, 21]
the points are:  [20, 21] [19, 21]
type for point in is_valid_node  <class 'list'>
[20, 21] 20 21
type for point in is_valid_node  <class 'list'>
[19, 21] 19 21
the point we are trying to find neighbors for  [19, 21]
neighboring cells are:  [[19, 22], [19, 20], [18, 21], [20, 21]]
dealing with [19, 22] at loop 0
[19, 22] is NOT a wall
dealing with [19, 20] at loop 1
dealing with [18, 21] at loop 2
dealing with [20, 21] at loop 3
[20, 21] is NOT a wall
neighbors of b [[19, 22], [20, 21]]
cost from [20, 21] to [19, 21] is 1
<class 'int'>
9 9 18
9 9 18
18 <class 'int'>
9 9 18
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
45[20, 21][21, 21]
the points are:  [20, 21] [21, 21]
type for point in is_valid_node  <class 'list'>
[20, 21] 20 21
type for point in is_valid_node  <class 'list'>
[21, 21] 21 21
the point we are trying to find neighbors for  [21, 21]
neighboring cells are:  [[21, 22], [21, 20], [20, 21], [22, 21]]
dealing with [21, 22] at loop 0
[21, 22] is NOT a wall
dealing with [21, 20] at loop 1
[21, 20] is NOT a wall
dealing with [20, 21] at loop 2
[20, 21] is NOT a wall
dealing with [22, 21] at loop 3
neighbors of b [[21, 22], [21, 20], [20, 21]]
cost from [20, 21] to [21, 21] is 1
[19, 21] (19, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 21] 19 21
the point we are trying to find neighbors for  [19, 21]
neighboring cells are:  [[19, 22], [19, 20], [18, 21], [20, 21]]
dealing with [19, 22] at loop 0
[19, 22] is NOT a wall
dealing with [19, 20] at loop 1
dealing with [18, 21] at loop 2
dealing with [20, 21] at loop 3
[20, 21] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[19, 21][19, 22]
the points are:  [19, 21] [19, 22]
type for point in is_valid_node  <class 'list'>
[19, 21] 19 21
type for point in is_valid_node  <class 'list'>
[19, 22] 19 22
the point we are trying to find neighbors for  [19, 22]
neighboring cells are:  [[19, 23], [19, 21], [18, 22], [20, 22]]
dealing with [19, 23] at loop 0
[19, 23] is NOT a wall
dealing with [19, 21] at loop 1
[19, 21] is NOT a wall
dealing with [18, 22] at loop 2
dealing with [20, 22] at loop 3
neighbors of b [[19, 23], [19, 21]]
cost from [19, 21] to [19, 22] is 1
<class 'int'>
9 10 19
9 10 19
19 <class 'int'>
9 10 19
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[19, 21][20, 21]
the points are:  [19, 21] [20, 21]
type for point in is_valid_node  <class 'list'>
[19, 21] 19 21
type for point in is_valid_node  <class 'list'>
[20, 21] 20 21
the point we are trying to find neighbors for  [20, 21]
neighboring cells are:  [[20, 22], [20, 20], [19, 21], [21, 21]]
dealing with [20, 22] at loop 0
dealing with [20, 20] at loop 1
dealing with [19, 21] at loop 2
[19, 21] is NOT a wall
dealing with [21, 21] at loop 3
[21, 21] is NOT a wall
neighbors of b [[19, 21], [21, 21]]
cost from [19, 21] to [20, 21] is 1
[1, 19] (1, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 19] 1 19
the point we are trying to find neighbors for  [1, 19]
neighboring cells are:  [[1, 20], [1, 18], [0, 19], [2, 19]]
dealing with [1, 20] at loop 0
[1, 20] is NOT a wall
dealing with [1, 18] at loop 1
[1, 18] is NOT a wall
dealing with [0, 19] at loop 2
dealing with [2, 19] at loop 3
[2, 19] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
50[1, 19][1, 20]
the points are:  [1, 19] [1, 20]
type for point in is_valid_node  <class 'list'>
[1, 19] 1 19
type for point in is_valid_node  <class 'list'>
[1, 20] 1 20
the point we are trying to find neighbors for  [1, 20]
neighboring cells are:  [[1, 21], [1, 19], [0, 20], [2, 20]]
dealing with [1, 21] at loop 0
[1, 21] is NOT a wall
dealing with [1, 19] at loop 1
[1, 19] is NOT a wall
dealing with [0, 20] at loop 2
dealing with [2, 20] at loop 3
neighbors of b [[1, 21], [1, 19]]
cost from [1, 19] to [1, 20] is 1
<class 'int'>
9 8 17
9 8 17
17 <class 'int'>
9 8 17
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
50[1, 19][1, 18]
the points are:  [1, 19] [1, 18]
type for point in is_valid_node  <class 'list'>
[1, 19] 1 19
type for point in is_valid_node  <class 'list'>
[1, 18] 1 18
the point we are trying to find neighbors for  [1, 18]
neighboring cells are:  [[1, 19], [1, 17], [0, 18], [2, 18]]
dealing with [1, 19] at loop 0
[1, 19] is NOT a wall
dealing with [1, 17] at loop 1
[1, 17] is NOT a wall
dealing with [0, 18] at loop 2
dealing with [2, 18] at loop 3
neighbors of b [[1, 19], [1, 17]]
cost from [1, 19] to [1, 18] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
50[1, 19][2, 19]
the points are:  [1, 19] [2, 19]
type for point in is_valid_node  <class 'list'>
[1, 19] 1 19
type for point in is_valid_node  <class 'list'>
[2, 19] 2 19
the point we are trying to find neighbors for  [2, 19]
neighboring cells are:  [[2, 20], [2, 18], [1, 19], [3, 19]]
dealing with [2, 20] at loop 0
dealing with [2, 18] at loop 1
dealing with [1, 19] at loop 2
[1, 19] is NOT a wall
dealing with [3, 19] at loop 3
[3, 19] is NOT a wall
neighbors of b [[1, 19], [3, 19]]
cost from [1, 19] to [2, 19] is 1
<class 'int'>
8 7 15
8 7 15
15 <class 'int'>
8 7 15
[2, 19] (2, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 19] 2 19
the point we are trying to find neighbors for  [2, 19]
neighboring cells are:  [[2, 20], [2, 18], [1, 19], [3, 19]]
dealing with [2, 20] at loop 0
dealing with [2, 18] at loop 1
dealing with [1, 19] at loop 2
[1, 19] is NOT a wall
dealing with [3, 19] at loop 3
[3, 19] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
51[2, 19][1, 19]
the points are:  [2, 19] [1, 19]
type for point in is_valid_node  <class 'list'>
[2, 19] 2 19
type for point in is_valid_node  <class 'list'>
[1, 19] 1 19
the point we are trying to find neighbors for  [1, 19]
neighboring cells are:  [[1, 20], [1, 18], [0, 19], [2, 19]]
dealing with [1, 20] at loop 0
[1, 20] is NOT a wall
dealing with [1, 18] at loop 1
[1, 18] is NOT a wall
dealing with [0, 19] at loop 2
dealing with [2, 19] at loop 3
[2, 19] is NOT a wall
neighbors of b [[1, 20], [1, 18], [2, 19]]
cost from [2, 19] to [1, 19] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
51[2, 19][3, 19]
the points are:  [2, 19] [3, 19]
type for point in is_valid_node  <class 'list'>
[2, 19] 2 19
type for point in is_valid_node  <class 'list'>
[3, 19] 3 19
the point we are trying to find neighbors for  [3, 19]
neighboring cells are:  [[3, 20], [3, 18], [2, 19], [4, 19]]
dealing with [3, 20] at loop 0
[3, 20] is NOT a wall
dealing with [3, 18] at loop 1
dealing with [2, 19] at loop 2
[2, 19] is NOT a wall
dealing with [4, 19] at loop 3
neighbors of b [[3, 20], [2, 19]]
cost from [2, 19] to [3, 19] is 1
<class 'int'>
7 7 14
7 7 14
14 <class 'int'>
7 7 14
[3, 19] (3, 19)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 19] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 19] 3 19
the point we are trying to find neighbors for  [3, 19]
neighboring cells are:  [[3, 20], [3, 18], [2, 19], [4, 19]]
dealing with [3, 20] at loop 0
[3, 20] is NOT a wall
dealing with [3, 18] at loop 1
dealing with [2, 19] at loop 2
[2, 19] is NOT a wall
dealing with [4, 19] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
52[3, 19][3, 20]
the points are:  [3, 19] [3, 20]
type for point in is_valid_node  <class 'list'>
[3, 19] 3 19
type for point in is_valid_node  <class 'list'>
[3, 20] 3 20
the point we are trying to find neighbors for  [3, 20]
neighboring cells are:  [[3, 21], [3, 19], [2, 20], [4, 20]]
dealing with [3, 21] at loop 0
[3, 21] is NOT a wall
dealing with [3, 19] at loop 1
[3, 19] is NOT a wall
dealing with [2, 20] at loop 2
dealing with [4, 20] at loop 3
neighbors of b [[3, 21], [3, 19]]
cost from [3, 19] to [3, 20] is 1
<class 'int'>
7 8 15
7 8 15
15 <class 'int'>
7 8 15
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
52[3, 19][2, 19]
the points are:  [3, 19] [2, 19]
type for point in is_valid_node  <class 'list'>
[3, 19] 3 19
type for point in is_valid_node  <class 'list'>
[2, 19] 2 19
the point we are trying to find neighbors for  [2, 19]
neighboring cells are:  [[2, 20], [2, 18], [1, 19], [3, 19]]
dealing with [2, 20] at loop 0
dealing with [2, 18] at loop 1
dealing with [1, 19] at loop 2
[1, 19] is NOT a wall
dealing with [3, 19] at loop 3
[3, 19] is NOT a wall
neighbors of b [[1, 19], [3, 19]]
cost from [3, 19] to [2, 19] is 1
[6, 30] (6, 30)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 30] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 30] 6 30
the point we are trying to find neighbors for  [6, 30]
neighboring cells are:  [[6, 31], [6, 29], [5, 30], [7, 30]]
dealing with [6, 31] at loop 0
dealing with [6, 29] at loop 1
dealing with [5, 30] at loop 2
[5, 30] is NOT a wall
dealing with [7, 30] at loop 3
[7, 30] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
44[6, 30][5, 30]
the points are:  [6, 30] [5, 30]
type for point in is_valid_node  <class 'list'>
[6, 30] 6 30
type for point in is_valid_node  <class 'list'>
[5, 30] 5 30
the point we are trying to find neighbors for  [5, 30]
neighboring cells are:  [[5, 31], [5, 29], [4, 30], [6, 30]]
dealing with [5, 31] at loop 0
[5, 31] is NOT a wall
dealing with [5, 29] at loop 1
[5, 29] is NOT a wall
dealing with [4, 30] at loop 2
dealing with [6, 30] at loop 3
[6, 30] is NOT a wall
neighbors of b [[5, 31], [5, 29], [6, 30]]
cost from [6, 30] to [5, 30] is 1
<class 'int'>
5 18 23
5 18 23
23 <class 'int'>
5 18 23
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
44[6, 30][7, 30]
the points are:  [6, 30] [7, 30]
type for point in is_valid_node  <class 'list'>
[6, 30] 6 30
type for point in is_valid_node  <class 'list'>
[7, 30] 7 30
the point we are trying to find neighbors for  [7, 30]
neighboring cells are:  [[7, 31], [7, 29], [6, 30], [8, 30]]
dealing with [7, 31] at loop 0
[7, 31] is NOT a wall
dealing with [7, 29] at loop 1
[7, 29] is NOT a wall
dealing with [6, 30] at loop 2
[6, 30] is NOT a wall
dealing with [8, 30] at loop 3
neighbors of b [[7, 31], [7, 29], [6, 30]]
cost from [6, 30] to [7, 30] is 1
[7, 31] (7, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 31] 7 31
the point we are trying to find neighbors for  [7, 31]
neighboring cells are:  [[7, 32], [7, 30], [6, 31], [8, 31]]
dealing with [7, 32] at loop 0
dealing with [7, 30] at loop 1
[7, 30] is NOT a wall
dealing with [6, 31] at loop 2
dealing with [8, 31] at loop 3
[8, 31] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
44[7, 31][7, 30]
the points are:  [7, 31] [7, 30]
type for point in is_valid_node  <class 'list'>
[7, 31] 7 31
type for point in is_valid_node  <class 'list'>
[7, 30] 7 30
the point we are trying to find neighbors for  [7, 30]
neighboring cells are:  [[7, 31], [7, 29], [6, 30], [8, 30]]
dealing with [7, 31] at loop 0
[7, 31] is NOT a wall
dealing with [7, 29] at loop 1
[7, 29] is NOT a wall
dealing with [6, 30] at loop 2
[6, 30] is NOT a wall
dealing with [8, 30] at loop 3
neighbors of b [[7, 31], [7, 29], [6, 30]]
cost from [7, 31] to [7, 30] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
44[7, 31][8, 31]
the points are:  [7, 31] [8, 31]
type for point in is_valid_node  <class 'list'>
[7, 31] 7 31
type for point in is_valid_node  <class 'list'>
[8, 31] 8 31
the point we are trying to find neighbors for  [8, 31]
neighboring cells are:  [[8, 32], [8, 30], [7, 31], [9, 31]]
dealing with [8, 32] at loop 0
dealing with [8, 30] at loop 1
dealing with [7, 31] at loop 2
[7, 31] is NOT a wall
dealing with [9, 31] at loop 3
[9, 31] is NOT a wall
neighbors of b [[7, 31], [9, 31]]
cost from [7, 31] to [8, 31] is 1
<class 'int'>
2 19 21
2 19 21
21 <class 'int'>
2 19 21
[8, 31] (8, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[8, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[8, 31] 8 31
the point we are trying to find neighbors for  [8, 31]
neighboring cells are:  [[8, 32], [8, 30], [7, 31], [9, 31]]
dealing with [8, 32] at loop 0
dealing with [8, 30] at loop 1
dealing with [7, 31] at loop 2
[7, 31] is NOT a wall
dealing with [9, 31] at loop 3
[9, 31] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
45[8, 31][7, 31]
the points are:  [8, 31] [7, 31]
type for point in is_valid_node  <class 'list'>
[8, 31] 8 31
type for point in is_valid_node  <class 'list'>
[7, 31] 7 31
the point we are trying to find neighbors for  [7, 31]
neighboring cells are:  [[7, 32], [7, 30], [6, 31], [8, 31]]
dealing with [7, 32] at loop 0
dealing with [7, 30] at loop 1
[7, 30] is NOT a wall
dealing with [6, 31] at loop 2
dealing with [8, 31] at loop 3
[8, 31] is NOT a wall
neighbors of b [[7, 30], [8, 31]]
cost from [8, 31] to [7, 31] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
45[8, 31][9, 31]
the points are:  [8, 31] [9, 31]
type for point in is_valid_node  <class 'list'>
[8, 31] 8 31
type for point in is_valid_node  <class 'list'>
[9, 31] 9 31
the point we are trying to find neighbors for  [9, 31]
neighboring cells are:  [[9, 32], [9, 30], [8, 31], [10, 31]]
dealing with [9, 32] at loop 0
[9, 32] is NOT a wall
dealing with [9, 30] at loop 1
[9, 30] is NOT a wall
dealing with [8, 31] at loop 2
[8, 31] is NOT a wall
dealing with [10, 31] at loop 3
neighbors of b [[9, 32], [9, 30], [8, 31]]
cost from [8, 31] to [9, 31] is 1
<class 'int'>
1 19 20
1 19 20
20 <class 'int'>
1 19 20
[9, 31] (9, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 31] 9 31
the point we are trying to find neighbors for  [9, 31]
neighboring cells are:  [[9, 32], [9, 30], [8, 31], [10, 31]]
dealing with [9, 32] at loop 0
[9, 32] is NOT a wall
dealing with [9, 30] at loop 1
[9, 30] is NOT a wall
dealing with [8, 31] at loop 2
[8, 31] is NOT a wall
dealing with [10, 31] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[9, 31][9, 32]
the points are:  [9, 31] [9, 32]
type for point in is_valid_node  <class 'list'>
[9, 31] 9 31
type for point in is_valid_node  <class 'list'>
[9, 32] 9 32
the point we are trying to find neighbors for  [9, 32]
neighboring cells are:  [[9, 33], [9, 31], [8, 32], [10, 32]]
dealing with [9, 33] at loop 0
[9, 33] is NOT a wall
dealing with [9, 31] at loop 1
[9, 31] is NOT a wall
dealing with [8, 32] at loop 2
dealing with [10, 32] at loop 3
neighbors of b [[9, 33], [9, 31]]
cost from [9, 31] to [9, 32] is 1
<class 'int'>
1 20 21
1 20 21
21 <class 'int'>
1 20 21
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[9, 31][9, 30]
the points are:  [9, 31] [9, 30]
type for point in is_valid_node  <class 'list'>
[9, 31] 9 31
type for point in is_valid_node  <class 'list'>
[9, 30] 9 30
the point we are trying to find neighbors for  [9, 30]
neighboring cells are:  [[9, 31], [9, 29], [8, 30], [10, 30]]
dealing with [9, 31] at loop 0
[9, 31] is NOT a wall
dealing with [9, 29] at loop 1
[9, 29] is NOT a wall
dealing with [8, 30] at loop 2
dealing with [10, 30] at loop 3
neighbors of b [[9, 31], [9, 29]]
cost from [9, 31] to [9, 30] is 1
<class 'int'>
1 18 19
1 18 19
19 <class 'int'>
1 18 19
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[9, 31][8, 31]
the points are:  [9, 31] [8, 31]
type for point in is_valid_node  <class 'list'>
[9, 31] 9 31
type for point in is_valid_node  <class 'list'>
[8, 31] 8 31
the point we are trying to find neighbors for  [8, 31]
neighboring cells are:  [[8, 32], [8, 30], [7, 31], [9, 31]]
dealing with [8, 32] at loop 0
dealing with [8, 30] at loop 1
dealing with [7, 31] at loop 2
[7, 31] is NOT a wall
dealing with [9, 31] at loop 3
[9, 31] is NOT a wall
neighbors of b [[7, 31], [9, 31]]
cost from [9, 31] to [8, 31] is 1
[9, 30] (9, 30)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 30] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 30] 9 30
the point we are trying to find neighbors for  [9, 30]
neighboring cells are:  [[9, 31], [9, 29], [8, 30], [10, 30]]
dealing with [9, 31] at loop 0
[9, 31] is NOT a wall
dealing with [9, 29] at loop 1
[9, 29] is NOT a wall
dealing with [8, 30] at loop 2
dealing with [10, 30] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[9, 30][9, 31]
the points are:  [9, 30] [9, 31]
type for point in is_valid_node  <class 'list'>
[9, 30] 9 30
type for point in is_valid_node  <class 'list'>
[9, 31] 9 31
the point we are trying to find neighbors for  [9, 31]
neighboring cells are:  [[9, 32], [9, 30], [8, 31], [10, 31]]
dealing with [9, 32] at loop 0
[9, 32] is NOT a wall
dealing with [9, 30] at loop 1
[9, 30] is NOT a wall
dealing with [8, 31] at loop 2
[8, 31] is NOT a wall
dealing with [10, 31] at loop 3
neighbors of b [[9, 32], [9, 30], [8, 31]]
cost from [9, 30] to [9, 31] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[9, 30][9, 29]
the points are:  [9, 30] [9, 29]
type for point in is_valid_node  <class 'list'>
[9, 30] 9 30
type for point in is_valid_node  <class 'list'>
[9, 29] 9 29
the point we are trying to find neighbors for  [9, 29]
neighboring cells are:  [[9, 30], [9, 28], [8, 29], [10, 29]]
dealing with [9, 30] at loop 0
[9, 30] is NOT a wall
dealing with [9, 28] at loop 1
dealing with [8, 29] at loop 2
dealing with [10, 29] at loop 3
[10, 29] is NOT a wall
neighbors of b [[9, 30], [10, 29]]
cost from [9, 30] to [9, 29] is 1
<class 'int'>
1 17 18
1 17 18
18 <class 'int'>
1 17 18
[9, 29] (9, 29)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 29] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 29] 9 29
the point we are trying to find neighbors for  [9, 29]
neighboring cells are:  [[9, 30], [9, 28], [8, 29], [10, 29]]
dealing with [9, 30] at loop 0
[9, 30] is NOT a wall
dealing with [9, 28] at loop 1
dealing with [8, 29] at loop 2
dealing with [10, 29] at loop 3
[10, 29] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
48[9, 29][9, 30]
the points are:  [9, 29] [9, 30]
type for point in is_valid_node  <class 'list'>
[9, 29] 9 29
type for point in is_valid_node  <class 'list'>
[9, 30] 9 30
the point we are trying to find neighbors for  [9, 30]
neighboring cells are:  [[9, 31], [9, 29], [8, 30], [10, 30]]
dealing with [9, 31] at loop 0
[9, 31] is NOT a wall
dealing with [9, 29] at loop 1
[9, 29] is NOT a wall
dealing with [8, 30] at loop 2
dealing with [10, 30] at loop 3
neighbors of b [[9, 31], [9, 29]]
cost from [9, 29] to [9, 30] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
48[9, 29][10, 29]
the points are:  [9, 29] [10, 29]
type for point in is_valid_node  <class 'list'>
[9, 29] 9 29
type for point in is_valid_node  <class 'list'>
[10, 29] 10 29
the point we are trying to find neighbors for  [10, 29]
neighboring cells are:  [[10, 30], [10, 28], [9, 29], [11, 29]]
dealing with [10, 30] at loop 0
dealing with [10, 28] at loop 1
dealing with [9, 29] at loop 2
[9, 29] is NOT a wall
dealing with [11, 29] at loop 3
[11, 29] is NOT a wall
neighbors of b [[9, 29], [11, 29]]
cost from [9, 29] to [10, 29] is 1
<class 'int'>
0 17 17
0 17 17
17 <class 'int'>
0 17 17
[10, 29] (10, 29)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[10, 29] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[10, 29] 10 29
the point we are trying to find neighbors for  [10, 29]
neighboring cells are:  [[10, 30], [10, 28], [9, 29], [11, 29]]
dealing with [10, 30] at loop 0
dealing with [10, 28] at loop 1
dealing with [9, 29] at loop 2
[9, 29] is NOT a wall
dealing with [11, 29] at loop 3
[11, 29] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
49[10, 29][9, 29]
the points are:  [10, 29] [9, 29]
type for point in is_valid_node  <class 'list'>
[10, 29] 10 29
type for point in is_valid_node  <class 'list'>
[9, 29] 9 29
the point we are trying to find neighbors for  [9, 29]
neighboring cells are:  [[9, 30], [9, 28], [8, 29], [10, 29]]
dealing with [9, 30] at loop 0
[9, 30] is NOT a wall
dealing with [9, 28] at loop 1
dealing with [8, 29] at loop 2
dealing with [10, 29] at loop 3
[10, 29] is NOT a wall
neighbors of b [[9, 30], [10, 29]]
cost from [10, 29] to [9, 29] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
49[10, 29][11, 29]
the points are:  [10, 29] [11, 29]
type for point in is_valid_node  <class 'list'>
[10, 29] 10 29
type for point in is_valid_node  <class 'list'>
[11, 29] 11 29
the point we are trying to find neighbors for  [11, 29]
neighboring cells are:  [[11, 30], [11, 28], [10, 29], [12, 29]]
dealing with [11, 30] at loop 0
dealing with [11, 28] at loop 1
dealing with [10, 29] at loop 2
[10, 29] is NOT a wall
dealing with [12, 29] at loop 3
[12, 29] is NOT a wall
neighbors of b [[10, 29], [12, 29]]
cost from [10, 29] to [11, 29] is 1
<class 'int'>
1 17 18
1 17 18
18 <class 'int'>
1 17 18
[18, 23] (18, 23)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 23] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 23] 18 23
the point we are trying to find neighbors for  [18, 23]
neighboring cells are:  [[18, 24], [18, 22], [17, 23], [19, 23]]
dealing with [18, 24] at loop 0
dealing with [18, 22] at loop 1
dealing with [17, 23] at loop 2
[17, 23] is NOT a wall
dealing with [19, 23] at loop 3
[19, 23] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[18, 23][17, 23]
the points are:  [18, 23] [17, 23]
type for point in is_valid_node  <class 'list'>
[18, 23] 18 23
type for point in is_valid_node  <class 'list'>
[17, 23] 17 23
the point we are trying to find neighbors for  [17, 23]
neighboring cells are:  [[17, 24], [17, 22], [16, 23], [18, 23]]
dealing with [17, 24] at loop 0
dealing with [17, 22] at loop 1
dealing with [16, 23] at loop 2
[16, 23] is NOT a wall
dealing with [18, 23] at loop 3
[18, 23] is NOT a wall
neighbors of b [[16, 23], [18, 23]]
cost from [18, 23] to [17, 23] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[18, 23][19, 23]
the points are:  [18, 23] [19, 23]
type for point in is_valid_node  <class 'list'>
[18, 23] 18 23
type for point in is_valid_node  <class 'list'>
[19, 23] 19 23
the point we are trying to find neighbors for  [19, 23]
neighboring cells are:  [[19, 24], [19, 22], [18, 23], [20, 23]]
dealing with [19, 24] at loop 0
dealing with [19, 22] at loop 1
[19, 22] is NOT a wall
dealing with [18, 23] at loop 2
[18, 23] is NOT a wall
dealing with [20, 23] at loop 3
neighbors of b [[19, 22], [18, 23]]
cost from [18, 23] to [19, 23] is 1
<class 'int'>
9 11 20
9 11 20
20 <class 'int'>
9 11 20
[19, 22] (19, 22)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 22] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 22] 19 22
the point we are trying to find neighbors for  [19, 22]
neighboring cells are:  [[19, 23], [19, 21], [18, 22], [20, 22]]
dealing with [19, 23] at loop 0
[19, 23] is NOT a wall
dealing with [19, 21] at loop 1
[19, 21] is NOT a wall
dealing with [18, 22] at loop 2
dealing with [20, 22] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[19, 22][19, 23]
the points are:  [19, 22] [19, 23]
type for point in is_valid_node  <class 'list'>
[19, 22] 19 22
type for point in is_valid_node  <class 'list'>
[19, 23] 19 23
the point we are trying to find neighbors for  [19, 23]
neighboring cells are:  [[19, 24], [19, 22], [18, 23], [20, 23]]
dealing with [19, 24] at loop 0
dealing with [19, 22] at loop 1
[19, 22] is NOT a wall
dealing with [18, 23] at loop 2
[18, 23] is NOT a wall
dealing with [20, 23] at loop 3
neighbors of b [[19, 22], [18, 23]]
cost from [19, 22] to [19, 23] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[19, 22][19, 21]
the points are:  [19, 22] [19, 21]
type for point in is_valid_node  <class 'list'>
[19, 22] 19 22
type for point in is_valid_node  <class 'list'>
[19, 21] 19 21
the point we are trying to find neighbors for  [19, 21]
neighboring cells are:  [[19, 22], [19, 20], [18, 21], [20, 21]]
dealing with [19, 22] at loop 0
[19, 22] is NOT a wall
dealing with [19, 20] at loop 1
dealing with [18, 21] at loop 2
dealing with [20, 21] at loop 3
[20, 21] is NOT a wall
neighbors of b [[19, 22], [20, 21]]
cost from [19, 22] to [19, 21] is 1
[21, 22] (21, 22)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 22] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 22] 21 22
the point we are trying to find neighbors for  [21, 22]
neighboring cells are:  [[21, 23], [21, 21], [20, 22], [22, 22]]
dealing with [21, 23] at loop 0
[21, 23] is NOT a wall
dealing with [21, 21] at loop 1
[21, 21] is NOT a wall
dealing with [20, 22] at loop 2
dealing with [22, 22] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
45[21, 22][21, 23]
the points are:  [21, 22] [21, 23]
type for point in is_valid_node  <class 'list'>
[21, 22] 21 22
type for point in is_valid_node  <class 'list'>
[21, 23] 21 23
the point we are trying to find neighbors for  [21, 23]
neighboring cells are:  [[21, 24], [21, 22], [20, 23], [22, 23]]
dealing with [21, 24] at loop 0
[21, 24] is NOT a wall
dealing with [21, 22] at loop 1
[21, 22] is NOT a wall
dealing with [20, 23] at loop 2
dealing with [22, 23] at loop 3
neighbors of b [[21, 24], [21, 22]]
cost from [21, 22] to [21, 23] is 1
<class 'int'>
11 11 22
11 11 22
22 <class 'int'>
11 11 22
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
45[21, 22][21, 21]
the points are:  [21, 22] [21, 21]
type for point in is_valid_node  <class 'list'>
[21, 22] 21 22
type for point in is_valid_node  <class 'list'>
[21, 21] 21 21
the point we are trying to find neighbors for  [21, 21]
neighboring cells are:  [[21, 22], [21, 20], [20, 21], [22, 21]]
dealing with [21, 22] at loop 0
[21, 22] is NOT a wall
dealing with [21, 20] at loop 1
[21, 20] is NOT a wall
dealing with [20, 21] at loop 2
[20, 21] is NOT a wall
dealing with [22, 21] at loop 3
neighbors of b [[21, 22], [21, 20], [20, 21]]
cost from [21, 22] to [21, 21] is 1
[1, 20] (1, 20)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 20] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 20] 1 20
the point we are trying to find neighbors for  [1, 20]
neighboring cells are:  [[1, 21], [1, 19], [0, 20], [2, 20]]
dealing with [1, 21] at loop 0
[1, 21] is NOT a wall
dealing with [1, 19] at loop 1
[1, 19] is NOT a wall
dealing with [0, 20] at loop 2
dealing with [2, 20] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
51[1, 20][1, 21]
the points are:  [1, 20] [1, 21]
type for point in is_valid_node  <class 'list'>
[1, 20] 1 20
type for point in is_valid_node  <class 'list'>
[1, 21] 1 21
the point we are trying to find neighbors for  [1, 21]
neighboring cells are:  [[1, 22], [1, 20], [0, 21], [2, 21]]
dealing with [1, 22] at loop 0
[1, 22] is NOT a wall
dealing with [1, 20] at loop 1
[1, 20] is NOT a wall
dealing with [0, 21] at loop 2
dealing with [2, 21] at loop 3
neighbors of b [[1, 22], [1, 20]]
cost from [1, 20] to [1, 21] is 1
<class 'int'>
9 9 18
9 9 18
18 <class 'int'>
9 9 18
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
51[1, 20][1, 19]
the points are:  [1, 20] [1, 19]
type for point in is_valid_node  <class 'list'>
[1, 20] 1 20
type for point in is_valid_node  <class 'list'>
[1, 19] 1 19
the point we are trying to find neighbors for  [1, 19]
neighboring cells are:  [[1, 20], [1, 18], [0, 19], [2, 19]]
dealing with [1, 20] at loop 0
[1, 20] is NOT a wall
dealing with [1, 18] at loop 1
[1, 18] is NOT a wall
dealing with [0, 19] at loop 2
dealing with [2, 19] at loop 3
[2, 19] is NOT a wall
neighbors of b [[1, 20], [1, 18], [2, 19]]
cost from [1, 20] to [1, 19] is 1
[3, 20] (3, 20)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 20] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 20] 3 20
the point we are trying to find neighbors for  [3, 20]
neighboring cells are:  [[3, 21], [3, 19], [2, 20], [4, 20]]
dealing with [3, 21] at loop 0
[3, 21] is NOT a wall
dealing with [3, 19] at loop 1
[3, 19] is NOT a wall
dealing with [2, 20] at loop 2
dealing with [4, 20] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[3, 20][3, 21]
the points are:  [3, 20] [3, 21]
type for point in is_valid_node  <class 'list'>
[3, 20] 3 20
type for point in is_valid_node  <class 'list'>
[3, 21] 3 21
the point we are trying to find neighbors for  [3, 21]
neighboring cells are:  [[3, 22], [3, 20], [2, 21], [4, 21]]
dealing with [3, 22] at loop 0
[3, 22] is NOT a wall
dealing with [3, 20] at loop 1
[3, 20] is NOT a wall
dealing with [2, 21] at loop 2
dealing with [4, 21] at loop 3
neighbors of b [[3, 22], [3, 20]]
cost from [3, 20] to [3, 21] is 1
<class 'int'>
7 9 16
7 9 16
16 <class 'int'>
7 9 16
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[3, 20][3, 19]
the points are:  [3, 20] [3, 19]
type for point in is_valid_node  <class 'list'>
[3, 20] 3 20
type for point in is_valid_node  <class 'list'>
[3, 19] 3 19
the point we are trying to find neighbors for  [3, 19]
neighboring cells are:  [[3, 20], [3, 18], [2, 19], [4, 19]]
dealing with [3, 20] at loop 0
[3, 20] is NOT a wall
dealing with [3, 18] at loop 1
dealing with [2, 19] at loop 2
[2, 19] is NOT a wall
dealing with [4, 19] at loop 3
neighbors of b [[3, 20], [2, 19]]
cost from [3, 20] to [3, 19] is 1
[5, 30] (5, 30)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 30] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 30] 5 30
the point we are trying to find neighbors for  [5, 30]
neighboring cells are:  [[5, 31], [5, 29], [4, 30], [6, 30]]
dealing with [5, 31] at loop 0
[5, 31] is NOT a wall
dealing with [5, 29] at loop 1
[5, 29] is NOT a wall
dealing with [4, 30] at loop 2
dealing with [6, 30] at loop 3
[6, 30] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
45[5, 30][5, 31]
the points are:  [5, 30] [5, 31]
type for point in is_valid_node  <class 'list'>
[5, 30] 5 30
type for point in is_valid_node  <class 'list'>
[5, 31] 5 31
the point we are trying to find neighbors for  [5, 31]
neighboring cells are:  [[5, 32], [5, 30], [4, 31], [6, 31]]
dealing with [5, 32] at loop 0
[5, 32] is NOT a wall
dealing with [5, 30] at loop 1
[5, 30] is NOT a wall
dealing with [4, 31] at loop 2
dealing with [6, 31] at loop 3
neighbors of b [[5, 32], [5, 30]]
cost from [5, 30] to [5, 31] is 1
<class 'int'>
5 19 24
5 19 24
24 <class 'int'>
5 19 24
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
45[5, 30][5, 29]
the points are:  [5, 30] [5, 29]
type for point in is_valid_node  <class 'list'>
[5, 30] 5 30
type for point in is_valid_node  <class 'list'>
[5, 29] 5 29
the point we are trying to find neighbors for  [5, 29]
neighboring cells are:  [[5, 30], [5, 28], [4, 29], [6, 29]]
dealing with [5, 30] at loop 0
[5, 30] is NOT a wall
dealing with [5, 28] at loop 1
[5, 28] is NOT a wall
dealing with [4, 29] at loop 2
dealing with [6, 29] at loop 3
neighbors of b [[5, 30], [5, 28]]
cost from [5, 30] to [5, 29] is 1
<class 'int'>
5 17 22
5 17 22
22 <class 'int'>
5 17 22
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
45[5, 30][6, 30]
the points are:  [5, 30] [6, 30]
type for point in is_valid_node  <class 'list'>
[5, 30] 5 30
type for point in is_valid_node  <class 'list'>
[6, 30] 6 30
the point we are trying to find neighbors for  [6, 30]
neighboring cells are:  [[6, 31], [6, 29], [5, 30], [7, 30]]
dealing with [6, 31] at loop 0
dealing with [6, 29] at loop 1
dealing with [5, 30] at loop 2
[5, 30] is NOT a wall
dealing with [7, 30] at loop 3
[7, 30] is NOT a wall
neighbors of b [[5, 30], [7, 30]]
cost from [5, 30] to [6, 30] is 1
[5, 29] (5, 29)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 29] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 29] 5 29
the point we are trying to find neighbors for  [5, 29]
neighboring cells are:  [[5, 30], [5, 28], [4, 29], [6, 29]]
dealing with [5, 30] at loop 0
[5, 30] is NOT a wall
dealing with [5, 28] at loop 1
[5, 28] is NOT a wall
dealing with [4, 29] at loop 2
dealing with [6, 29] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[5, 29][5, 30]
the points are:  [5, 29] [5, 30]
type for point in is_valid_node  <class 'list'>
[5, 29] 5 29
type for point in is_valid_node  <class 'list'>
[5, 30] 5 30
the point we are trying to find neighbors for  [5, 30]
neighboring cells are:  [[5, 31], [5, 29], [4, 30], [6, 30]]
dealing with [5, 31] at loop 0
[5, 31] is NOT a wall
dealing with [5, 29] at loop 1
[5, 29] is NOT a wall
dealing with [4, 30] at loop 2
dealing with [6, 30] at loop 3
[6, 30] is NOT a wall
neighbors of b [[5, 31], [5, 29], [6, 30]]
cost from [5, 29] to [5, 30] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[5, 29][5, 28]
the points are:  [5, 29] [5, 28]
type for point in is_valid_node  <class 'list'>
[5, 29] 5 29
type for point in is_valid_node  <class 'list'>
[5, 28] 5 28
the point we are trying to find neighbors for  [5, 28]
neighboring cells are:  [[5, 29], [5, 27], [4, 28], [6, 28]]
dealing with [5, 29] at loop 0
[5, 29] is NOT a wall
dealing with [5, 27] at loop 1
[5, 27] is NOT a wall
dealing with [4, 28] at loop 2
dealing with [6, 28] at loop 3
neighbors of b [[5, 29], [5, 27]]
cost from [5, 29] to [5, 28] is 1
<class 'int'>
5 16 21
5 16 21
21 <class 'int'>
5 16 21
[5, 28] (5, 28)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 28] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 28] 5 28
the point we are trying to find neighbors for  [5, 28]
neighboring cells are:  [[5, 29], [5, 27], [4, 28], [6, 28]]
dealing with [5, 29] at loop 0
[5, 29] is NOT a wall
dealing with [5, 27] at loop 1
[5, 27] is NOT a wall
dealing with [4, 28] at loop 2
dealing with [6, 28] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[5, 28][5, 29]
the points are:  [5, 28] [5, 29]
type for point in is_valid_node  <class 'list'>
[5, 28] 5 28
type for point in is_valid_node  <class 'list'>
[5, 29] 5 29
the point we are trying to find neighbors for  [5, 29]
neighboring cells are:  [[5, 30], [5, 28], [4, 29], [6, 29]]
dealing with [5, 30] at loop 0
[5, 30] is NOT a wall
dealing with [5, 28] at loop 1
[5, 28] is NOT a wall
dealing with [4, 29] at loop 2
dealing with [6, 29] at loop 3
neighbors of b [[5, 30], [5, 28]]
cost from [5, 28] to [5, 29] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[5, 28][5, 27]
the points are:  [5, 28] [5, 27]
type for point in is_valid_node  <class 'list'>
[5, 28] 5 28
type for point in is_valid_node  <class 'list'>
[5, 27] 5 27
the point we are trying to find neighbors for  [5, 27]
neighboring cells are:  [[5, 28], [5, 26], [4, 27], [6, 27]]
dealing with [5, 28] at loop 0
[5, 28] is NOT a wall
dealing with [5, 26] at loop 1
dealing with [4, 27] at loop 2
[4, 27] is NOT a wall
dealing with [6, 27] at loop 3
neighbors of b [[5, 28], [4, 27]]
cost from [5, 28] to [5, 27] is 1
<class 'int'>
5 15 20
5 15 20
20 <class 'int'>
5 15 20
[5, 27] (5, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 27] 5 27
the point we are trying to find neighbors for  [5, 27]
neighboring cells are:  [[5, 28], [5, 26], [4, 27], [6, 27]]
dealing with [5, 28] at loop 0
[5, 28] is NOT a wall
dealing with [5, 26] at loop 1
dealing with [4, 27] at loop 2
[4, 27] is NOT a wall
dealing with [6, 27] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
48[5, 27][5, 28]
the points are:  [5, 27] [5, 28]
type for point in is_valid_node  <class 'list'>
[5, 27] 5 27
type for point in is_valid_node  <class 'list'>
[5, 28] 5 28
the point we are trying to find neighbors for  [5, 28]
neighboring cells are:  [[5, 29], [5, 27], [4, 28], [6, 28]]
dealing with [5, 29] at loop 0
[5, 29] is NOT a wall
dealing with [5, 27] at loop 1
[5, 27] is NOT a wall
dealing with [4, 28] at loop 2
dealing with [6, 28] at loop 3
neighbors of b [[5, 29], [5, 27]]
cost from [5, 27] to [5, 28] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
48[5, 27][4, 27]
the points are:  [5, 27] [4, 27]
type for point in is_valid_node  <class 'list'>
[5, 27] 5 27
type for point in is_valid_node  <class 'list'>
[4, 27] 4 27
the point we are trying to find neighbors for  [4, 27]
neighboring cells are:  [[4, 28], [4, 26], [3, 27], [5, 27]]
dealing with [4, 28] at loop 0
dealing with [4, 26] at loop 1
dealing with [3, 27] at loop 2
[3, 27] is NOT a wall
dealing with [5, 27] at loop 3
[5, 27] is NOT a wall
neighbors of b [[3, 27], [5, 27]]
cost from [5, 27] to [4, 27] is 1
<class 'int'>
6 15 21
6 15 21
21 <class 'int'>
6 15 21
[9, 32] (9, 32)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 32] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 32] 9 32
the point we are trying to find neighbors for  [9, 32]
neighboring cells are:  [[9, 33], [9, 31], [8, 32], [10, 32]]
dealing with [9, 33] at loop 0
[9, 33] is NOT a wall
dealing with [9, 31] at loop 1
[9, 31] is NOT a wall
dealing with [8, 32] at loop 2
dealing with [10, 32] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[9, 32][9, 33]
the points are:  [9, 32] [9, 33]
type for point in is_valid_node  <class 'list'>
[9, 32] 9 32
type for point in is_valid_node  <class 'list'>
[9, 33] 9 33
the point we are trying to find neighbors for  [9, 33]
neighboring cells are:  [[9, 34], [9, 32], [8, 33], [10, 33]]
dealing with [9, 34] at loop 0
[9, 34] is NOT a wall
dealing with [9, 32] at loop 1
[9, 32] is NOT a wall
dealing with [8, 33] at loop 2
dealing with [10, 33] at loop 3
neighbors of b [[9, 34], [9, 32]]
cost from [9, 32] to [9, 33] is 1
<class 'int'>
1 21 22
1 21 22
22 <class 'int'>
1 21 22
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[9, 32][9, 31]
the points are:  [9, 32] [9, 31]
type for point in is_valid_node  <class 'list'>
[9, 32] 9 32
type for point in is_valid_node  <class 'list'>
[9, 31] 9 31
the point we are trying to find neighbors for  [9, 31]
neighboring cells are:  [[9, 32], [9, 30], [8, 31], [10, 31]]
dealing with [9, 32] at loop 0
[9, 32] is NOT a wall
dealing with [9, 30] at loop 1
[9, 30] is NOT a wall
dealing with [8, 31] at loop 2
[8, 31] is NOT a wall
dealing with [10, 31] at loop 3
neighbors of b [[9, 32], [9, 30], [8, 31]]
cost from [9, 32] to [9, 31] is 1
[11, 29] (11, 29)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 29] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 29] 11 29
the point we are trying to find neighbors for  [11, 29]
neighboring cells are:  [[11, 30], [11, 28], [10, 29], [12, 29]]
dealing with [11, 30] at loop 0
dealing with [11, 28] at loop 1
dealing with [10, 29] at loop 2
[10, 29] is NOT a wall
dealing with [12, 29] at loop 3
[12, 29] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
50[11, 29][10, 29]
the points are:  [11, 29] [10, 29]
type for point in is_valid_node  <class 'list'>
[11, 29] 11 29
type for point in is_valid_node  <class 'list'>
[10, 29] 10 29
the point we are trying to find neighbors for  [10, 29]
neighboring cells are:  [[10, 30], [10, 28], [9, 29], [11, 29]]
dealing with [10, 30] at loop 0
dealing with [10, 28] at loop 1
dealing with [9, 29] at loop 2
[9, 29] is NOT a wall
dealing with [11, 29] at loop 3
[11, 29] is NOT a wall
neighbors of b [[9, 29], [11, 29]]
cost from [11, 29] to [10, 29] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
50[11, 29][12, 29]
the points are:  [11, 29] [12, 29]
type for point in is_valid_node  <class 'list'>
[11, 29] 11 29
type for point in is_valid_node  <class 'list'>
[12, 29] 12 29
the point we are trying to find neighbors for  [12, 29]
neighboring cells are:  [[12, 30], [12, 28], [11, 29], [13, 29]]
dealing with [12, 30] at loop 0
dealing with [12, 28] at loop 1
dealing with [11, 29] at loop 2
[11, 29] is NOT a wall
dealing with [13, 29] at loop 3
[13, 29] is NOT a wall
neighbors of b [[11, 29], [13, 29]]
cost from [11, 29] to [12, 29] is 1
<class 'int'>
2 17 19
2 17 19
19 <class 'int'>
2 17 19
[19, 23] (19, 23)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 23] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 23] 19 23
the point we are trying to find neighbors for  [19, 23]
neighboring cells are:  [[19, 24], [19, 22], [18, 23], [20, 23]]
dealing with [19, 24] at loop 0
dealing with [19, 22] at loop 1
[19, 22] is NOT a wall
dealing with [18, 23] at loop 2
[18, 23] is NOT a wall
dealing with [20, 23] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
48[19, 23][19, 22]
the points are:  [19, 23] [19, 22]
type for point in is_valid_node  <class 'list'>
[19, 23] 19 23
type for point in is_valid_node  <class 'list'>
[19, 22] 19 22
the point we are trying to find neighbors for  [19, 22]
neighboring cells are:  [[19, 23], [19, 21], [18, 22], [20, 22]]
dealing with [19, 23] at loop 0
[19, 23] is NOT a wall
dealing with [19, 21] at loop 1
[19, 21] is NOT a wall
dealing with [18, 22] at loop 2
dealing with [20, 22] at loop 3
neighbors of b [[19, 23], [19, 21]]
cost from [19, 23] to [19, 22] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
48[19, 23][18, 23]
the points are:  [19, 23] [18, 23]
type for point in is_valid_node  <class 'list'>
[19, 23] 19 23
type for point in is_valid_node  <class 'list'>
[18, 23] 18 23
the point we are trying to find neighbors for  [18, 23]
neighboring cells are:  [[18, 24], [18, 22], [17, 23], [19, 23]]
dealing with [18, 24] at loop 0
dealing with [18, 22] at loop 1
dealing with [17, 23] at loop 2
[17, 23] is NOT a wall
dealing with [19, 23] at loop 3
[19, 23] is NOT a wall
neighbors of b [[17, 23], [19, 23]]
cost from [19, 23] to [18, 23] is 1
[21, 23] (21, 23)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 23] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 23] 21 23
the point we are trying to find neighbors for  [21, 23]
neighboring cells are:  [[21, 24], [21, 22], [20, 23], [22, 23]]
dealing with [21, 24] at loop 0
[21, 24] is NOT a wall
dealing with [21, 22] at loop 1
[21, 22] is NOT a wall
dealing with [20, 23] at loop 2
dealing with [22, 23] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[21, 23][21, 24]
the points are:  [21, 23] [21, 24]
type for point in is_valid_node  <class 'list'>
[21, 23] 21 23
type for point in is_valid_node  <class 'list'>
[21, 24] 21 24
the point we are trying to find neighbors for  [21, 24]
neighboring cells are:  [[21, 25], [21, 23], [20, 24], [22, 24]]
dealing with [21, 25] at loop 0
[21, 25] is NOT a wall
dealing with [21, 23] at loop 1
[21, 23] is NOT a wall
dealing with [20, 24] at loop 2
dealing with [22, 24] at loop 3
neighbors of b [[21, 25], [21, 23]]
cost from [21, 23] to [21, 24] is 1
<class 'int'>
11 12 23
11 12 23
23 <class 'int'>
11 12 23
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[21, 23][21, 22]
the points are:  [21, 23] [21, 22]
type for point in is_valid_node  <class 'list'>
[21, 23] 21 23
type for point in is_valid_node  <class 'list'>
[21, 22] 21 22
the point we are trying to find neighbors for  [21, 22]
neighboring cells are:  [[21, 23], [21, 21], [20, 22], [22, 22]]
dealing with [21, 23] at loop 0
[21, 23] is NOT a wall
dealing with [21, 21] at loop 1
[21, 21] is NOT a wall
dealing with [20, 22] at loop 2
dealing with [22, 22] at loop 3
neighbors of b [[21, 23], [21, 21]]
cost from [21, 23] to [21, 22] is 1
[1, 21] (1, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 21] 1 21
the point we are trying to find neighbors for  [1, 21]
neighboring cells are:  [[1, 22], [1, 20], [0, 21], [2, 21]]
dealing with [1, 22] at loop 0
[1, 22] is NOT a wall
dealing with [1, 20] at loop 1
[1, 20] is NOT a wall
dealing with [0, 21] at loop 2
dealing with [2, 21] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
52[1, 21][1, 22]
the points are:  [1, 21] [1, 22]
type for point in is_valid_node  <class 'list'>
[1, 21] 1 21
type for point in is_valid_node  <class 'list'>
[1, 22] 1 22
the point we are trying to find neighbors for  [1, 22]
neighboring cells are:  [[1, 23], [1, 21], [0, 22], [2, 22]]
dealing with [1, 23] at loop 0
[1, 23] is NOT a wall
dealing with [1, 21] at loop 1
[1, 21] is NOT a wall
dealing with [0, 22] at loop 2
dealing with [2, 22] at loop 3
neighbors of b [[1, 23], [1, 21]]
cost from [1, 21] to [1, 22] is 1
<class 'int'>
9 10 19
9 10 19
19 <class 'int'>
9 10 19
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
52[1, 21][1, 20]
the points are:  [1, 21] [1, 20]
type for point in is_valid_node  <class 'list'>
[1, 21] 1 21
type for point in is_valid_node  <class 'list'>
[1, 20] 1 20
the point we are trying to find neighbors for  [1, 20]
neighboring cells are:  [[1, 21], [1, 19], [0, 20], [2, 20]]
dealing with [1, 21] at loop 0
[1, 21] is NOT a wall
dealing with [1, 19] at loop 1
[1, 19] is NOT a wall
dealing with [0, 20] at loop 2
dealing with [2, 20] at loop 3
neighbors of b [[1, 21], [1, 19]]
cost from [1, 21] to [1, 20] is 1
[3, 21] (3, 21)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 21] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 21] 3 21
the point we are trying to find neighbors for  [3, 21]
neighboring cells are:  [[3, 22], [3, 20], [2, 21], [4, 21]]
dealing with [3, 22] at loop 0
[3, 22] is NOT a wall
dealing with [3, 20] at loop 1
[3, 20] is NOT a wall
dealing with [2, 21] at loop 2
dealing with [4, 21] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[3, 21][3, 22]
the points are:  [3, 21] [3, 22]
type for point in is_valid_node  <class 'list'>
[3, 21] 3 21
type for point in is_valid_node  <class 'list'>
[3, 22] 3 22
the point we are trying to find neighbors for  [3, 22]
neighboring cells are:  [[3, 23], [3, 21], [2, 22], [4, 22]]
dealing with [3, 23] at loop 0
[3, 23] is NOT a wall
dealing with [3, 21] at loop 1
[3, 21] is NOT a wall
dealing with [2, 22] at loop 2
dealing with [4, 22] at loop 3
neighbors of b [[3, 23], [3, 21]]
cost from [3, 21] to [3, 22] is 1
<class 'int'>
7 10 17
7 10 17
17 <class 'int'>
7 10 17
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[3, 21][3, 20]
the points are:  [3, 21] [3, 20]
type for point in is_valid_node  <class 'list'>
[3, 21] 3 21
type for point in is_valid_node  <class 'list'>
[3, 20] 3 20
the point we are trying to find neighbors for  [3, 20]
neighboring cells are:  [[3, 21], [3, 19], [2, 20], [4, 20]]
dealing with [3, 21] at loop 0
[3, 21] is NOT a wall
dealing with [3, 19] at loop 1
[3, 19] is NOT a wall
dealing with [2, 20] at loop 2
dealing with [4, 20] at loop 3
neighbors of b [[3, 21], [3, 19]]
cost from [3, 21] to [3, 20] is 1
[4, 27] (4, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 27] 4 27
the point we are trying to find neighbors for  [4, 27]
neighboring cells are:  [[4, 28], [4, 26], [3, 27], [5, 27]]
dealing with [4, 28] at loop 0
dealing with [4, 26] at loop 1
dealing with [3, 27] at loop 2
[3, 27] is NOT a wall
dealing with [5, 27] at loop 3
[5, 27] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
49[4, 27][3, 27]
the points are:  [4, 27] [3, 27]
type for point in is_valid_node  <class 'list'>
[4, 27] 4 27
type for point in is_valid_node  <class 'list'>
[3, 27] 3 27
the point we are trying to find neighbors for  [3, 27]
neighboring cells are:  [[3, 28], [3, 26], [2, 27], [4, 27]]
dealing with [3, 28] at loop 0
[3, 28] is NOT a wall
dealing with [3, 26] at loop 1
dealing with [2, 27] at loop 2
dealing with [4, 27] at loop 3
[4, 27] is NOT a wall
neighbors of b [[3, 28], [4, 27]]
cost from [4, 27] to [3, 27] is 1
<class 'int'>
7 15 22
7 15 22
22 <class 'int'>
7 15 22
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
49[4, 27][5, 27]
the points are:  [4, 27] [5, 27]
type for point in is_valid_node  <class 'list'>
[4, 27] 4 27
type for point in is_valid_node  <class 'list'>
[5, 27] 5 27
the point we are trying to find neighbors for  [5, 27]
neighboring cells are:  [[5, 28], [5, 26], [4, 27], [6, 27]]
dealing with [5, 28] at loop 0
[5, 28] is NOT a wall
dealing with [5, 26] at loop 1
dealing with [4, 27] at loop 2
[4, 27] is NOT a wall
dealing with [6, 27] at loop 3
neighbors of b [[5, 28], [4, 27]]
cost from [4, 27] to [5, 27] is 1
[5, 31] (5, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 31] 5 31
the point we are trying to find neighbors for  [5, 31]
neighboring cells are:  [[5, 32], [5, 30], [4, 31], [6, 31]]
dealing with [5, 32] at loop 0
[5, 32] is NOT a wall
dealing with [5, 30] at loop 1
[5, 30] is NOT a wall
dealing with [4, 31] at loop 2
dealing with [6, 31] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[5, 31][5, 32]
the points are:  [5, 31] [5, 32]
type for point in is_valid_node  <class 'list'>
[5, 31] 5 31
type for point in is_valid_node  <class 'list'>
[5, 32] 5 32
the point we are trying to find neighbors for  [5, 32]
neighboring cells are:  [[5, 33], [5, 31], [4, 32], [6, 32]]
dealing with [5, 33] at loop 0
[5, 33] is NOT a wall
dealing with [5, 31] at loop 1
[5, 31] is NOT a wall
dealing with [4, 32] at loop 2
dealing with [6, 32] at loop 3
neighbors of b [[5, 33], [5, 31]]
cost from [5, 31] to [5, 32] is 1
<class 'int'>
5 20 25
5 20 25
25 <class 'int'>
5 20 25
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
46[5, 31][5, 30]
the points are:  [5, 31] [5, 30]
type for point in is_valid_node  <class 'list'>
[5, 31] 5 31
type for point in is_valid_node  <class 'list'>
[5, 30] 5 30
the point we are trying to find neighbors for  [5, 30]
neighboring cells are:  [[5, 31], [5, 29], [4, 30], [6, 30]]
dealing with [5, 31] at loop 0
[5, 31] is NOT a wall
dealing with [5, 29] at loop 1
[5, 29] is NOT a wall
dealing with [4, 30] at loop 2
dealing with [6, 30] at loop 3
[6, 30] is NOT a wall
neighbors of b [[5, 31], [5, 29], [6, 30]]
cost from [5, 31] to [5, 30] is 1
[9, 33] (9, 33)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 33] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 33] 9 33
the point we are trying to find neighbors for  [9, 33]
neighboring cells are:  [[9, 34], [9, 32], [8, 33], [10, 33]]
dealing with [9, 34] at loop 0
[9, 34] is NOT a wall
dealing with [9, 32] at loop 1
[9, 32] is NOT a wall
dealing with [8, 33] at loop 2
dealing with [10, 33] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
48[9, 33][9, 34]
the points are:  [9, 33] [9, 34]
type for point in is_valid_node  <class 'list'>
[9, 33] 9 33
type for point in is_valid_node  <class 'list'>
[9, 34] 9 34
the point we are trying to find neighbors for  [9, 34]
neighboring cells are:  [[9, 35], [9, 33], [8, 34], [10, 34]]
dealing with [9, 35] at loop 0
[9, 35] is NOT a wall
dealing with [9, 33] at loop 1
[9, 33] is NOT a wall
dealing with [8, 34] at loop 2
dealing with [10, 34] at loop 3
neighbors of b [[9, 35], [9, 33]]
cost from [9, 33] to [9, 34] is 1
<class 'int'>
1 22 23
1 22 23
23 <class 'int'>
1 22 23
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
48[9, 33][9, 32]
the points are:  [9, 33] [9, 32]
type for point in is_valid_node  <class 'list'>
[9, 33] 9 33
type for point in is_valid_node  <class 'list'>
[9, 32] 9 32
the point we are trying to find neighbors for  [9, 32]
neighboring cells are:  [[9, 33], [9, 31], [8, 32], [10, 32]]
dealing with [9, 33] at loop 0
[9, 33] is NOT a wall
dealing with [9, 31] at loop 1
[9, 31] is NOT a wall
dealing with [8, 32] at loop 2
dealing with [10, 32] at loop 3
neighbors of b [[9, 33], [9, 31]]
cost from [9, 33] to [9, 32] is 1
[12, 29] (12, 29)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 29] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 29] 12 29
the point we are trying to find neighbors for  [12, 29]
neighboring cells are:  [[12, 30], [12, 28], [11, 29], [13, 29]]
dealing with [12, 30] at loop 0
dealing with [12, 28] at loop 1
dealing with [11, 29] at loop 2
[11, 29] is NOT a wall
dealing with [13, 29] at loop 3
[13, 29] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
51[12, 29][11, 29]
the points are:  [12, 29] [11, 29]
type for point in is_valid_node  <class 'list'>
[12, 29] 12 29
type for point in is_valid_node  <class 'list'>
[11, 29] 11 29
the point we are trying to find neighbors for  [11, 29]
neighboring cells are:  [[11, 30], [11, 28], [10, 29], [12, 29]]
dealing with [11, 30] at loop 0
dealing with [11, 28] at loop 1
dealing with [10, 29] at loop 2
[10, 29] is NOT a wall
dealing with [12, 29] at loop 3
[12, 29] is NOT a wall
neighbors of b [[10, 29], [12, 29]]
cost from [12, 29] to [11, 29] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
51[12, 29][13, 29]
the points are:  [12, 29] [13, 29]
type for point in is_valid_node  <class 'list'>
[12, 29] 12 29
type for point in is_valid_node  <class 'list'>
[13, 29] 13 29
the point we are trying to find neighbors for  [13, 29]
neighboring cells are:  [[13, 30], [13, 28], [12, 29], [14, 29]]
dealing with [13, 30] at loop 0
dealing with [13, 28] at loop 1
[13, 28] is NOT a wall
dealing with [12, 29] at loop 2
[12, 29] is NOT a wall
dealing with [14, 29] at loop 3
neighbors of b [[13, 28], [12, 29]]
cost from [12, 29] to [13, 29] is 1
<class 'int'>
3 17 20
3 17 20
20 <class 'int'>
3 17 20
[21, 24] (21, 24)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 24] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 24] 21 24
the point we are trying to find neighbors for  [21, 24]
neighboring cells are:  [[21, 25], [21, 23], [20, 24], [22, 24]]
dealing with [21, 25] at loop 0
[21, 25] is NOT a wall
dealing with [21, 23] at loop 1
[21, 23] is NOT a wall
dealing with [20, 24] at loop 2
dealing with [22, 24] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[21, 24][21, 25]
the points are:  [21, 24] [21, 25]
type for point in is_valid_node  <class 'list'>
[21, 24] 21 24
type for point in is_valid_node  <class 'list'>
[21, 25] 21 25
the point we are trying to find neighbors for  [21, 25]
neighboring cells are:  [[21, 26], [21, 24], [20, 25], [22, 25]]
dealing with [21, 26] at loop 0
[21, 26] is NOT a wall
dealing with [21, 24] at loop 1
[21, 24] is NOT a wall
dealing with [20, 25] at loop 2
dealing with [22, 25] at loop 3
neighbors of b [[21, 26], [21, 24]]
cost from [21, 24] to [21, 25] is 1
<class 'int'>
11 13 24
11 13 24
24 <class 'int'>
11 13 24
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[21, 24][21, 23]
the points are:  [21, 24] [21, 23]
type for point in is_valid_node  <class 'list'>
[21, 24] 21 24
type for point in is_valid_node  <class 'list'>
[21, 23] 21 23
the point we are trying to find neighbors for  [21, 23]
neighboring cells are:  [[21, 24], [21, 22], [20, 23], [22, 23]]
dealing with [21, 24] at loop 0
[21, 24] is NOT a wall
dealing with [21, 22] at loop 1
[21, 22] is NOT a wall
dealing with [20, 23] at loop 2
dealing with [22, 23] at loop 3
neighbors of b [[21, 24], [21, 22]]
cost from [21, 24] to [21, 23] is 1
[1, 22] (1, 22)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 22] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 22] 1 22
the point we are trying to find neighbors for  [1, 22]
neighboring cells are:  [[1, 23], [1, 21], [0, 22], [2, 22]]
dealing with [1, 23] at loop 0
[1, 23] is NOT a wall
dealing with [1, 21] at loop 1
[1, 21] is NOT a wall
dealing with [0, 22] at loop 2
dealing with [2, 22] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[1, 22][1, 23]
the points are:  [1, 22] [1, 23]
type for point in is_valid_node  <class 'list'>
[1, 22] 1 22
type for point in is_valid_node  <class 'list'>
[1, 23] 1 23
the point we are trying to find neighbors for  [1, 23]
neighboring cells are:  [[1, 24], [1, 22], [0, 23], [2, 23]]
dealing with [1, 24] at loop 0
dealing with [1, 22] at loop 1
[1, 22] is NOT a wall
dealing with [0, 23] at loop 2
dealing with [2, 23] at loop 3
neighbors of b [[1, 22]]
cost from [1, 22] to [1, 23] is 1
<class 'int'>
9 11 20
9 11 20
20 <class 'int'>
9 11 20
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[1, 22][1, 21]
the points are:  [1, 22] [1, 21]
type for point in is_valid_node  <class 'list'>
[1, 22] 1 22
type for point in is_valid_node  <class 'list'>
[1, 21] 1 21
the point we are trying to find neighbors for  [1, 21]
neighboring cells are:  [[1, 22], [1, 20], [0, 21], [2, 21]]
dealing with [1, 22] at loop 0
[1, 22] is NOT a wall
dealing with [1, 20] at loop 1
[1, 20] is NOT a wall
dealing with [0, 21] at loop 2
dealing with [2, 21] at loop 3
neighbors of b [[1, 22], [1, 20]]
cost from [1, 22] to [1, 21] is 1
[3, 22] (3, 22)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 22] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 22] 3 22
the point we are trying to find neighbors for  [3, 22]
neighboring cells are:  [[3, 23], [3, 21], [2, 22], [4, 22]]
dealing with [3, 23] at loop 0
[3, 23] is NOT a wall
dealing with [3, 21] at loop 1
[3, 21] is NOT a wall
dealing with [2, 22] at loop 2
dealing with [4, 22] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[3, 22][3, 23]
the points are:  [3, 22] [3, 23]
type for point in is_valid_node  <class 'list'>
[3, 22] 3 22
type for point in is_valid_node  <class 'list'>
[3, 23] 3 23
the point we are trying to find neighbors for  [3, 23]
neighboring cells are:  [[3, 24], [3, 22], [2, 23], [4, 23]]
dealing with [3, 24] at loop 0
[3, 24] is NOT a wall
dealing with [3, 22] at loop 1
[3, 22] is NOT a wall
dealing with [2, 23] at loop 2
dealing with [4, 23] at loop 3
neighbors of b [[3, 24], [3, 22]]
cost from [3, 22] to [3, 23] is 1
<class 'int'>
7 11 18
7 11 18
18 <class 'int'>
7 11 18
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[3, 22][3, 21]
the points are:  [3, 22] [3, 21]
type for point in is_valid_node  <class 'list'>
[3, 22] 3 22
type for point in is_valid_node  <class 'list'>
[3, 21] 3 21
the point we are trying to find neighbors for  [3, 21]
neighboring cells are:  [[3, 22], [3, 20], [2, 21], [4, 21]]
dealing with [3, 22] at loop 0
[3, 22] is NOT a wall
dealing with [3, 20] at loop 1
[3, 20] is NOT a wall
dealing with [2, 21] at loop 2
dealing with [4, 21] at loop 3
neighbors of b [[3, 22], [3, 20]]
cost from [3, 22] to [3, 21] is 1
[3, 27] (3, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 27] 3 27
the point we are trying to find neighbors for  [3, 27]
neighboring cells are:  [[3, 28], [3, 26], [2, 27], [4, 27]]
dealing with [3, 28] at loop 0
[3, 28] is NOT a wall
dealing with [3, 26] at loop 1
dealing with [2, 27] at loop 2
dealing with [4, 27] at loop 3
[4, 27] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
50[3, 27][3, 28]
the points are:  [3, 27] [3, 28]
type for point in is_valid_node  <class 'list'>
[3, 27] 3 27
type for point in is_valid_node  <class 'list'>
[3, 28] 3 28
the point we are trying to find neighbors for  [3, 28]
neighboring cells are:  [[3, 29], [3, 27], [2, 28], [4, 28]]
dealing with [3, 29] at loop 0
[3, 29] is NOT a wall
dealing with [3, 27] at loop 1
[3, 27] is NOT a wall
dealing with [2, 28] at loop 2
dealing with [4, 28] at loop 3
neighbors of b [[3, 29], [3, 27]]
cost from [3, 27] to [3, 28] is 1
<class 'int'>
7 16 23
7 16 23
23 <class 'int'>
7 16 23
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
50[3, 27][4, 27]
the points are:  [3, 27] [4, 27]
type for point in is_valid_node  <class 'list'>
[3, 27] 3 27
type for point in is_valid_node  <class 'list'>
[4, 27] 4 27
the point we are trying to find neighbors for  [4, 27]
neighboring cells are:  [[4, 28], [4, 26], [3, 27], [5, 27]]
dealing with [4, 28] at loop 0
dealing with [4, 26] at loop 1
dealing with [3, 27] at loop 2
[3, 27] is NOT a wall
dealing with [5, 27] at loop 3
[5, 27] is NOT a wall
neighbors of b [[3, 27], [5, 27]]
cost from [3, 27] to [4, 27] is 1
[5, 32] (5, 32)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 32] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 32] 5 32
the point we are trying to find neighbors for  [5, 32]
neighboring cells are:  [[5, 33], [5, 31], [4, 32], [6, 32]]
dealing with [5, 33] at loop 0
[5, 33] is NOT a wall
dealing with [5, 31] at loop 1
[5, 31] is NOT a wall
dealing with [4, 32] at loop 2
dealing with [6, 32] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[5, 32][5, 33]
the points are:  [5, 32] [5, 33]
type for point in is_valid_node  <class 'list'>
[5, 32] 5 32
type for point in is_valid_node  <class 'list'>
[5, 33] 5 33
the point we are trying to find neighbors for  [5, 33]
neighboring cells are:  [[5, 34], [5, 32], [4, 33], [6, 33]]
dealing with [5, 34] at loop 0
dealing with [5, 32] at loop 1
[5, 32] is NOT a wall
dealing with [4, 33] at loop 2
[4, 33] is NOT a wall
dealing with [6, 33] at loop 3
[6, 33] is NOT a wall
neighbors of b [[5, 32], [4, 33], [6, 33]]
cost from [5, 32] to [5, 33] is 1
<class 'int'>
5 21 26
5 21 26
26 <class 'int'>
5 21 26
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
47[5, 32][5, 31]
the points are:  [5, 32] [5, 31]
type for point in is_valid_node  <class 'list'>
[5, 32] 5 32
type for point in is_valid_node  <class 'list'>
[5, 31] 5 31
the point we are trying to find neighbors for  [5, 31]
neighboring cells are:  [[5, 32], [5, 30], [4, 31], [6, 31]]
dealing with [5, 32] at loop 0
[5, 32] is NOT a wall
dealing with [5, 30] at loop 1
[5, 30] is NOT a wall
dealing with [4, 31] at loop 2
dealing with [6, 31] at loop 3
neighbors of b [[5, 32], [5, 30]]
cost from [5, 32] to [5, 31] is 1
[9, 34] (9, 34)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 34] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 34] 9 34
the point we are trying to find neighbors for  [9, 34]
neighboring cells are:  [[9, 35], [9, 33], [8, 34], [10, 34]]
dealing with [9, 35] at loop 0
[9, 35] is NOT a wall
dealing with [9, 33] at loop 1
[9, 33] is NOT a wall
dealing with [8, 34] at loop 2
dealing with [10, 34] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
49[9, 34][9, 35]
the points are:  [9, 34] [9, 35]
type for point in is_valid_node  <class 'list'>
[9, 34] 9 34
type for point in is_valid_node  <class 'list'>
[9, 35] 9 35
the point we are trying to find neighbors for  [9, 35]
neighboring cells are:  [[9, 36], [9, 34], [8, 35], [10, 35]]
dealing with [9, 36] at loop 0
[9, 36] is NOT a wall
dealing with [9, 34] at loop 1
[9, 34] is NOT a wall
dealing with [8, 35] at loop 2
dealing with [10, 35] at loop 3
neighbors of b [[9, 36], [9, 34]]
cost from [9, 34] to [9, 35] is 1
<class 'int'>
1 23 24
1 23 24
24 <class 'int'>
1 23 24
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
49[9, 34][9, 33]
the points are:  [9, 34] [9, 33]
type for point in is_valid_node  <class 'list'>
[9, 34] 9 34
type for point in is_valid_node  <class 'list'>
[9, 33] 9 33
the point we are trying to find neighbors for  [9, 33]
neighboring cells are:  [[9, 34], [9, 32], [8, 33], [10, 33]]
dealing with [9, 34] at loop 0
[9, 34] is NOT a wall
dealing with [9, 32] at loop 1
[9, 32] is NOT a wall
dealing with [8, 33] at loop 2
dealing with [10, 33] at loop 3
neighbors of b [[9, 34], [9, 32]]
cost from [9, 34] to [9, 33] is 1
[13, 29] (13, 29)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 29] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 29] 13 29
the point we are trying to find neighbors for  [13, 29]
neighboring cells are:  [[13, 30], [13, 28], [12, 29], [14, 29]]
dealing with [13, 30] at loop 0
dealing with [13, 28] at loop 1
[13, 28] is NOT a wall
dealing with [12, 29] at loop 2
[12, 29] is NOT a wall
dealing with [14, 29] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
52[13, 29][13, 28]
the points are:  [13, 29] [13, 28]
type for point in is_valid_node  <class 'list'>
[13, 29] 13 29
type for point in is_valid_node  <class 'list'>
[13, 28] 13 28
the point we are trying to find neighbors for  [13, 28]
neighboring cells are:  [[13, 29], [13, 27], [12, 28], [14, 28]]
dealing with [13, 29] at loop 0
[13, 29] is NOT a wall
dealing with [13, 27] at loop 1
[13, 27] is NOT a wall
dealing with [12, 28] at loop 2
dealing with [14, 28] at loop 3
neighbors of b [[13, 29], [13, 27]]
cost from [13, 29] to [13, 28] is 1
<class 'int'>
3 16 19
3 16 19
19 <class 'int'>
3 16 19
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
52[13, 29][12, 29]
the points are:  [13, 29] [12, 29]
type for point in is_valid_node  <class 'list'>
[13, 29] 13 29
type for point in is_valid_node  <class 'list'>
[12, 29] 12 29
the point we are trying to find neighbors for  [12, 29]
neighboring cells are:  [[12, 30], [12, 28], [11, 29], [13, 29]]
dealing with [12, 30] at loop 0
dealing with [12, 28] at loop 1
dealing with [11, 29] at loop 2
[11, 29] is NOT a wall
dealing with [13, 29] at loop 3
[13, 29] is NOT a wall
neighbors of b [[11, 29], [13, 29]]
cost from [13, 29] to [12, 29] is 1
[13, 28] (13, 28)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 28] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 28] 13 28
the point we are trying to find neighbors for  [13, 28]
neighboring cells are:  [[13, 29], [13, 27], [12, 28], [14, 28]]
dealing with [13, 29] at loop 0
[13, 29] is NOT a wall
dealing with [13, 27] at loop 1
[13, 27] is NOT a wall
dealing with [12, 28] at loop 2
dealing with [14, 28] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[13, 28][13, 29]
the points are:  [13, 28] [13, 29]
type for point in is_valid_node  <class 'list'>
[13, 28] 13 28
type for point in is_valid_node  <class 'list'>
[13, 29] 13 29
the point we are trying to find neighbors for  [13, 29]
neighboring cells are:  [[13, 30], [13, 28], [12, 29], [14, 29]]
dealing with [13, 30] at loop 0
dealing with [13, 28] at loop 1
[13, 28] is NOT a wall
dealing with [12, 29] at loop 2
[12, 29] is NOT a wall
dealing with [14, 29] at loop 3
neighbors of b [[13, 28], [12, 29]]
cost from [13, 28] to [13, 29] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[13, 28][13, 27]
the points are:  [13, 28] [13, 27]
type for point in is_valid_node  <class 'list'>
[13, 28] 13 28
type for point in is_valid_node  <class 'list'>
[13, 27] 13 27
the point we are trying to find neighbors for  [13, 27]
neighboring cells are:  [[13, 28], [13, 26], [12, 27], [14, 27]]
dealing with [13, 28] at loop 0
[13, 28] is NOT a wall
dealing with [13, 26] at loop 1
dealing with [12, 27] at loop 2
dealing with [14, 27] at loop 3
[14, 27] is NOT a wall
neighbors of b [[13, 28], [14, 27]]
cost from [13, 28] to [13, 27] is 1
<class 'int'>
3 15 18
3 15 18
18 <class 'int'>
3 15 18
[13, 27] (13, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 27] 13 27
the point we are trying to find neighbors for  [13, 27]
neighboring cells are:  [[13, 28], [13, 26], [12, 27], [14, 27]]
dealing with [13, 28] at loop 0
[13, 28] is NOT a wall
dealing with [13, 26] at loop 1
dealing with [12, 27] at loop 2
dealing with [14, 27] at loop 3
[14, 27] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[13, 27][13, 28]
the points are:  [13, 27] [13, 28]
type for point in is_valid_node  <class 'list'>
[13, 27] 13 27
type for point in is_valid_node  <class 'list'>
[13, 28] 13 28
the point we are trying to find neighbors for  [13, 28]
neighboring cells are:  [[13, 29], [13, 27], [12, 28], [14, 28]]
dealing with [13, 29] at loop 0
[13, 29] is NOT a wall
dealing with [13, 27] at loop 1
[13, 27] is NOT a wall
dealing with [12, 28] at loop 2
dealing with [14, 28] at loop 3
neighbors of b [[13, 29], [13, 27]]
cost from [13, 27] to [13, 28] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[13, 27][14, 27]
the points are:  [13, 27] [14, 27]
type for point in is_valid_node  <class 'list'>
[13, 27] 13 27
type for point in is_valid_node  <class 'list'>
[14, 27] 14 27
the point we are trying to find neighbors for  [14, 27]
neighboring cells are:  [[14, 28], [14, 26], [13, 27], [15, 27]]
dealing with [14, 28] at loop 0
dealing with [14, 26] at loop 1
dealing with [13, 27] at loop 2
[13, 27] is NOT a wall
dealing with [15, 27] at loop 3
[15, 27] is NOT a wall
neighbors of b [[13, 27], [15, 27]]
cost from [13, 27] to [14, 27] is 1
<class 'int'>
4 15 19
4 15 19
19 <class 'int'>
4 15 19
[21, 25] (21, 25)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 25] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 25] 21 25
the point we are trying to find neighbors for  [21, 25]
neighboring cells are:  [[21, 26], [21, 24], [20, 25], [22, 25]]
dealing with [21, 26] at loop 0
[21, 26] is NOT a wall
dealing with [21, 24] at loop 1
[21, 24] is NOT a wall
dealing with [20, 25] at loop 2
dealing with [22, 25] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
48[21, 25][21, 26]
the points are:  [21, 25] [21, 26]
type for point in is_valid_node  <class 'list'>
[21, 25] 21 25
type for point in is_valid_node  <class 'list'>
[21, 26] 21 26
the point we are trying to find neighbors for  [21, 26]
neighboring cells are:  [[21, 27], [21, 25], [20, 26], [22, 26]]
dealing with [21, 27] at loop 0
[21, 27] is NOT a wall
dealing with [21, 25] at loop 1
[21, 25] is NOT a wall
dealing with [20, 26] at loop 2
dealing with [22, 26] at loop 3
neighbors of b [[21, 27], [21, 25]]
cost from [21, 25] to [21, 26] is 1
<class 'int'>
11 14 25
11 14 25
25 <class 'int'>
11 14 25
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
48[21, 25][21, 24]
the points are:  [21, 25] [21, 24]
type for point in is_valid_node  <class 'list'>
[21, 25] 21 25
type for point in is_valid_node  <class 'list'>
[21, 24] 21 24
the point we are trying to find neighbors for  [21, 24]
neighboring cells are:  [[21, 25], [21, 23], [20, 24], [22, 24]]
dealing with [21, 25] at loop 0
[21, 25] is NOT a wall
dealing with [21, 23] at loop 1
[21, 23] is NOT a wall
dealing with [20, 24] at loop 2
dealing with [22, 24] at loop 3
neighbors of b [[21, 25], [21, 23]]
cost from [21, 25] to [21, 24] is 1
[1, 23] (1, 23)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 23] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 23] 1 23
the point we are trying to find neighbors for  [1, 23]
neighboring cells are:  [[1, 24], [1, 22], [0, 23], [2, 23]]
dealing with [1, 24] at loop 0
dealing with [1, 22] at loop 1
[1, 22] is NOT a wall
dealing with [0, 23] at loop 2
dealing with [2, 23] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[1, 23][1, 22]
the points are:  [1, 23] [1, 22]
type for point in is_valid_node  <class 'list'>
[1, 23] 1 23
type for point in is_valid_node  <class 'list'>
[1, 22] 1 22
the point we are trying to find neighbors for  [1, 22]
neighboring cells are:  [[1, 23], [1, 21], [0, 22], [2, 22]]
dealing with [1, 23] at loop 0
[1, 23] is NOT a wall
dealing with [1, 21] at loop 1
[1, 21] is NOT a wall
dealing with [0, 22] at loop 2
dealing with [2, 22] at loop 3
neighbors of b [[1, 23], [1, 21]]
cost from [1, 23] to [1, 22] is 1
[3, 23] (3, 23)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 23] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 23] 3 23
the point we are trying to find neighbors for  [3, 23]
neighboring cells are:  [[3, 24], [3, 22], [2, 23], [4, 23]]
dealing with [3, 24] at loop 0
[3, 24] is NOT a wall
dealing with [3, 22] at loop 1
[3, 22] is NOT a wall
dealing with [2, 23] at loop 2
dealing with [4, 23] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[3, 23][3, 24]
the points are:  [3, 23] [3, 24]
type for point in is_valid_node  <class 'list'>
[3, 23] 3 23
type for point in is_valid_node  <class 'list'>
[3, 24] 3 24
the point we are trying to find neighbors for  [3, 24]
neighboring cells are:  [[3, 25], [3, 23], [2, 24], [4, 24]]
dealing with [3, 25] at loop 0
[3, 25] is NOT a wall
dealing with [3, 23] at loop 1
[3, 23] is NOT a wall
dealing with [2, 24] at loop 2
dealing with [4, 24] at loop 3
neighbors of b [[3, 25], [3, 23]]
cost from [3, 23] to [3, 24] is 1
<class 'int'>
7 12 19
7 12 19
19 <class 'int'>
7 12 19
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[3, 23][3, 22]
the points are:  [3, 23] [3, 22]
type for point in is_valid_node  <class 'list'>
[3, 23] 3 23
type for point in is_valid_node  <class 'list'>
[3, 22] 3 22
the point we are trying to find neighbors for  [3, 22]
neighboring cells are:  [[3, 23], [3, 21], [2, 22], [4, 22]]
dealing with [3, 23] at loop 0
[3, 23] is NOT a wall
dealing with [3, 21] at loop 1
[3, 21] is NOT a wall
dealing with [2, 22] at loop 2
dealing with [4, 22] at loop 3
neighbors of b [[3, 23], [3, 21]]
cost from [3, 23] to [3, 22] is 1
[3, 28] (3, 28)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 28] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 28] 3 28
the point we are trying to find neighbors for  [3, 28]
neighboring cells are:  [[3, 29], [3, 27], [2, 28], [4, 28]]
dealing with [3, 29] at loop 0
[3, 29] is NOT a wall
dealing with [3, 27] at loop 1
[3, 27] is NOT a wall
dealing with [2, 28] at loop 2
dealing with [4, 28] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
51[3, 28][3, 29]
the points are:  [3, 28] [3, 29]
type for point in is_valid_node  <class 'list'>
[3, 28] 3 28
type for point in is_valid_node  <class 'list'>
[3, 29] 3 29
the point we are trying to find neighbors for  [3, 29]
neighboring cells are:  [[3, 30], [3, 28], [2, 29], [4, 29]]
dealing with [3, 30] at loop 0
dealing with [3, 28] at loop 1
[3, 28] is NOT a wall
dealing with [2, 29] at loop 2
[2, 29] is NOT a wall
dealing with [4, 29] at loop 3
neighbors of b [[3, 28], [2, 29]]
cost from [3, 28] to [3, 29] is 1
<class 'int'>
7 17 24
7 17 24
24 <class 'int'>
7 17 24
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
51[3, 28][3, 27]
the points are:  [3, 28] [3, 27]
type for point in is_valid_node  <class 'list'>
[3, 28] 3 28
type for point in is_valid_node  <class 'list'>
[3, 27] 3 27
the point we are trying to find neighbors for  [3, 27]
neighboring cells are:  [[3, 28], [3, 26], [2, 27], [4, 27]]
dealing with [3, 28] at loop 0
[3, 28] is NOT a wall
dealing with [3, 26] at loop 1
dealing with [2, 27] at loop 2
dealing with [4, 27] at loop 3
[4, 27] is NOT a wall
neighbors of b [[3, 28], [4, 27]]
cost from [3, 28] to [3, 27] is 1
[5, 33] (5, 33)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 33] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 33] 5 33
the point we are trying to find neighbors for  [5, 33]
neighboring cells are:  [[5, 34], [5, 32], [4, 33], [6, 33]]
dealing with [5, 34] at loop 0
dealing with [5, 32] at loop 1
[5, 32] is NOT a wall
dealing with [4, 33] at loop 2
[4, 33] is NOT a wall
dealing with [6, 33] at loop 3
[6, 33] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
48[5, 33][5, 32]
the points are:  [5, 33] [5, 32]
type for point in is_valid_node  <class 'list'>
[5, 33] 5 33
type for point in is_valid_node  <class 'list'>
[5, 32] 5 32
the point we are trying to find neighbors for  [5, 32]
neighboring cells are:  [[5, 33], [5, 31], [4, 32], [6, 32]]
dealing with [5, 33] at loop 0
[5, 33] is NOT a wall
dealing with [5, 31] at loop 1
[5, 31] is NOT a wall
dealing with [4, 32] at loop 2
dealing with [6, 32] at loop 3
neighbors of b [[5, 33], [5, 31]]
cost from [5, 33] to [5, 32] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
48[5, 33][4, 33]
the points are:  [5, 33] [4, 33]
type for point in is_valid_node  <class 'list'>
[5, 33] 5 33
type for point in is_valid_node  <class 'list'>
[4, 33] 4 33
the point we are trying to find neighbors for  [4, 33]
neighboring cells are:  [[4, 34], [4, 32], [3, 33], [5, 33]]
dealing with [4, 34] at loop 0
dealing with [4, 32] at loop 1
dealing with [3, 33] at loop 2
[3, 33] is NOT a wall
dealing with [5, 33] at loop 3
[5, 33] is NOT a wall
neighbors of b [[3, 33], [5, 33]]
cost from [5, 33] to [4, 33] is 1
<class 'int'>
6 21 27
6 21 27
27 <class 'int'>
6 21 27
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
48[5, 33][6, 33]
the points are:  [5, 33] [6, 33]
type for point in is_valid_node  <class 'list'>
[5, 33] 5 33
type for point in is_valid_node  <class 'list'>
[6, 33] 6 33
the point we are trying to find neighbors for  [6, 33]
neighboring cells are:  [[6, 34], [6, 32], [5, 33], [7, 33]]
dealing with [6, 34] at loop 0
dealing with [6, 32] at loop 1
dealing with [5, 33] at loop 2
[5, 33] is NOT a wall
dealing with [7, 33] at loop 3
[7, 33] is NOT a wall
neighbors of b [[5, 33], [7, 33]]
cost from [5, 33] to [6, 33] is 1
<class 'int'>
4 21 25
4 21 25
25 <class 'int'>
4 21 25
[6, 33] (6, 33)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 33] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 33] 6 33
the point we are trying to find neighbors for  [6, 33]
neighboring cells are:  [[6, 34], [6, 32], [5, 33], [7, 33]]
dealing with [6, 34] at loop 0
dealing with [6, 32] at loop 1
dealing with [5, 33] at loop 2
[5, 33] is NOT a wall
dealing with [7, 33] at loop 3
[7, 33] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
49[6, 33][5, 33]
the points are:  [6, 33] [5, 33]
type for point in is_valid_node  <class 'list'>
[6, 33] 6 33
type for point in is_valid_node  <class 'list'>
[5, 33] 5 33
the point we are trying to find neighbors for  [5, 33]
neighboring cells are:  [[5, 34], [5, 32], [4, 33], [6, 33]]
dealing with [5, 34] at loop 0
dealing with [5, 32] at loop 1
[5, 32] is NOT a wall
dealing with [4, 33] at loop 2
[4, 33] is NOT a wall
dealing with [6, 33] at loop 3
[6, 33] is NOT a wall
neighbors of b [[5, 32], [4, 33], [6, 33]]
cost from [6, 33] to [5, 33] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
49[6, 33][7, 33]
the points are:  [6, 33] [7, 33]
type for point in is_valid_node  <class 'list'>
[6, 33] 6 33
type for point in is_valid_node  <class 'list'>
[7, 33] 7 33
the point we are trying to find neighbors for  [7, 33]
neighboring cells are:  [[7, 34], [7, 32], [6, 33], [8, 33]]
dealing with [7, 34] at loop 0
dealing with [7, 32] at loop 1
dealing with [6, 33] at loop 2
[6, 33] is NOT a wall
dealing with [8, 33] at loop 3
neighbors of b [[6, 33]]
cost from [6, 33] to [7, 33] is 1
<class 'int'>
3 21 24
3 21 24
24 <class 'int'>
3 21 24
[7, 33] (7, 33)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 33] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 33] 7 33
the point we are trying to find neighbors for  [7, 33]
neighboring cells are:  [[7, 34], [7, 32], [6, 33], [8, 33]]
dealing with [7, 34] at loop 0
dealing with [7, 32] at loop 1
dealing with [6, 33] at loop 2
[6, 33] is NOT a wall
dealing with [8, 33] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
50[7, 33][6, 33]
the points are:  [7, 33] [6, 33]
type for point in is_valid_node  <class 'list'>
[7, 33] 7 33
type for point in is_valid_node  <class 'list'>
[6, 33] 6 33
the point we are trying to find neighbors for  [6, 33]
neighboring cells are:  [[6, 34], [6, 32], [5, 33], [7, 33]]
dealing with [6, 34] at loop 0
dealing with [6, 32] at loop 1
dealing with [5, 33] at loop 2
[5, 33] is NOT a wall
dealing with [7, 33] at loop 3
[7, 33] is NOT a wall
neighbors of b [[5, 33], [7, 33]]
cost from [7, 33] to [6, 33] is 1
[9, 35] (9, 35)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 35] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 35] 9 35
the point we are trying to find neighbors for  [9, 35]
neighboring cells are:  [[9, 36], [9, 34], [8, 35], [10, 35]]
dealing with [9, 36] at loop 0
[9, 36] is NOT a wall
dealing with [9, 34] at loop 1
[9, 34] is NOT a wall
dealing with [8, 35] at loop 2
dealing with [10, 35] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
50[9, 35][9, 36]
the points are:  [9, 35] [9, 36]
type for point in is_valid_node  <class 'list'>
[9, 35] 9 35
type for point in is_valid_node  <class 'list'>
[9, 36] 9 36
the point we are trying to find neighbors for  [9, 36]
neighboring cells are:  [[9, 37], [9, 35], [8, 36], [10, 36]]
dealing with [9, 37] at loop 0
[9, 37] is NOT a wall
dealing with [9, 35] at loop 1
[9, 35] is NOT a wall
dealing with [8, 36] at loop 2
dealing with [10, 36] at loop 3
neighbors of b [[9, 37], [9, 35]]
cost from [9, 35] to [9, 36] is 1
<class 'int'>
1 24 25
1 24 25
25 <class 'int'>
1 24 25
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
50[9, 35][9, 34]
the points are:  [9, 35] [9, 34]
type for point in is_valid_node  <class 'list'>
[9, 35] 9 35
type for point in is_valid_node  <class 'list'>
[9, 34] 9 34
the point we are trying to find neighbors for  [9, 34]
neighboring cells are:  [[9, 35], [9, 33], [8, 34], [10, 34]]
dealing with [9, 35] at loop 0
[9, 35] is NOT a wall
dealing with [9, 33] at loop 1
[9, 33] is NOT a wall
dealing with [8, 34] at loop 2
dealing with [10, 34] at loop 3
neighbors of b [[9, 35], [9, 33]]
cost from [9, 35] to [9, 34] is 1
[14, 27] (14, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 27] 14 27
the point we are trying to find neighbors for  [14, 27]
neighboring cells are:  [[14, 28], [14, 26], [13, 27], [15, 27]]
dealing with [14, 28] at loop 0
dealing with [14, 26] at loop 1
dealing with [13, 27] at loop 2
[13, 27] is NOT a wall
dealing with [15, 27] at loop 3
[15, 27] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[14, 27][13, 27]
the points are:  [14, 27] [13, 27]
type for point in is_valid_node  <class 'list'>
[14, 27] 14 27
type for point in is_valid_node  <class 'list'>
[13, 27] 13 27
the point we are trying to find neighbors for  [13, 27]
neighboring cells are:  [[13, 28], [13, 26], [12, 27], [14, 27]]
dealing with [13, 28] at loop 0
[13, 28] is NOT a wall
dealing with [13, 26] at loop 1
dealing with [12, 27] at loop 2
dealing with [14, 27] at loop 3
[14, 27] is NOT a wall
neighbors of b [[13, 28], [14, 27]]
cost from [14, 27] to [13, 27] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[14, 27][15, 27]
the points are:  [14, 27] [15, 27]
type for point in is_valid_node  <class 'list'>
[14, 27] 14 27
type for point in is_valid_node  <class 'list'>
[15, 27] 15 27
the point we are trying to find neighbors for  [15, 27]
neighboring cells are:  [[15, 28], [15, 26], [14, 27], [16, 27]]
dealing with [15, 28] at loop 0
dealing with [15, 26] at loop 1
dealing with [14, 27] at loop 2
[14, 27] is NOT a wall
dealing with [16, 27] at loop 3
[16, 27] is NOT a wall
neighbors of b [[14, 27], [16, 27]]
cost from [14, 27] to [15, 27] is 1
<class 'int'>
5 15 20
5 15 20
20 <class 'int'>
5 15 20
[21, 26] (21, 26)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 26] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 26] 21 26
the point we are trying to find neighbors for  [21, 26]
neighboring cells are:  [[21, 27], [21, 25], [20, 26], [22, 26]]
dealing with [21, 27] at loop 0
[21, 27] is NOT a wall
dealing with [21, 25] at loop 1
[21, 25] is NOT a wall
dealing with [20, 26] at loop 2
dealing with [22, 26] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
49[21, 26][21, 27]
the points are:  [21, 26] [21, 27]
type for point in is_valid_node  <class 'list'>
[21, 26] 21 26
type for point in is_valid_node  <class 'list'>
[21, 27] 21 27
the point we are trying to find neighbors for  [21, 27]
neighboring cells are:  [[21, 28], [21, 26], [20, 27], [22, 27]]
dealing with [21, 28] at loop 0
dealing with [21, 26] at loop 1
[21, 26] is NOT a wall
dealing with [20, 27] at loop 2
[20, 27] is NOT a wall
dealing with [22, 27] at loop 3
neighbors of b [[21, 26], [20, 27]]
cost from [21, 26] to [21, 27] is 1
<class 'int'>
11 15 26
11 15 26
26 <class 'int'>
11 15 26
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
49[21, 26][21, 25]
the points are:  [21, 26] [21, 25]
type for point in is_valid_node  <class 'list'>
[21, 26] 21 26
type for point in is_valid_node  <class 'list'>
[21, 25] 21 25
the point we are trying to find neighbors for  [21, 25]
neighboring cells are:  [[21, 26], [21, 24], [20, 25], [22, 25]]
dealing with [21, 26] at loop 0
[21, 26] is NOT a wall
dealing with [21, 24] at loop 1
[21, 24] is NOT a wall
dealing with [20, 25] at loop 2
dealing with [22, 25] at loop 3
neighbors of b [[21, 26], [21, 24]]
cost from [21, 26] to [21, 25] is 1
[3, 24] (3, 24)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 24] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 24] 3 24
the point we are trying to find neighbors for  [3, 24]
neighboring cells are:  [[3, 25], [3, 23], [2, 24], [4, 24]]
dealing with [3, 25] at loop 0
[3, 25] is NOT a wall
dealing with [3, 23] at loop 1
[3, 23] is NOT a wall
dealing with [2, 24] at loop 2
dealing with [4, 24] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[3, 24][3, 25]
the points are:  [3, 24] [3, 25]
type for point in is_valid_node  <class 'list'>
[3, 24] 3 24
type for point in is_valid_node  <class 'list'>
[3, 25] 3 25
the point we are trying to find neighbors for  [3, 25]
neighboring cells are:  [[3, 26], [3, 24], [2, 25], [4, 25]]
dealing with [3, 26] at loop 0
dealing with [3, 24] at loop 1
[3, 24] is NOT a wall
dealing with [2, 25] at loop 2
[2, 25] is NOT a wall
dealing with [4, 25] at loop 3
neighbors of b [[3, 24], [2, 25]]
cost from [3, 24] to [3, 25] is 1
<class 'int'>
7 13 20
7 13 20
20 <class 'int'>
7 13 20
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[3, 24][3, 23]
the points are:  [3, 24] [3, 23]
type for point in is_valid_node  <class 'list'>
[3, 24] 3 24
type for point in is_valid_node  <class 'list'>
[3, 23] 3 23
the point we are trying to find neighbors for  [3, 23]
neighboring cells are:  [[3, 24], [3, 22], [2, 23], [4, 23]]
dealing with [3, 24] at loop 0
[3, 24] is NOT a wall
dealing with [3, 22] at loop 1
[3, 22] is NOT a wall
dealing with [2, 23] at loop 2
dealing with [4, 23] at loop 3
neighbors of b [[3, 24], [3, 22]]
cost from [3, 24] to [3, 23] is 1
[3, 29] (3, 29)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 29] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 29] 3 29
the point we are trying to find neighbors for  [3, 29]
neighboring cells are:  [[3, 30], [3, 28], [2, 29], [4, 29]]
dealing with [3, 30] at loop 0
dealing with [3, 28] at loop 1
[3, 28] is NOT a wall
dealing with [2, 29] at loop 2
[2, 29] is NOT a wall
dealing with [4, 29] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
52[3, 29][3, 28]
the points are:  [3, 29] [3, 28]
type for point in is_valid_node  <class 'list'>
[3, 29] 3 29
type for point in is_valid_node  <class 'list'>
[3, 28] 3 28
the point we are trying to find neighbors for  [3, 28]
neighboring cells are:  [[3, 29], [3, 27], [2, 28], [4, 28]]
dealing with [3, 29] at loop 0
[3, 29] is NOT a wall
dealing with [3, 27] at loop 1
[3, 27] is NOT a wall
dealing with [2, 28] at loop 2
dealing with [4, 28] at loop 3
neighbors of b [[3, 29], [3, 27]]
cost from [3, 29] to [3, 28] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
52[3, 29][2, 29]
the points are:  [3, 29] [2, 29]
type for point in is_valid_node  <class 'list'>
[3, 29] 3 29
type for point in is_valid_node  <class 'list'>
[2, 29] 2 29
the point we are trying to find neighbors for  [2, 29]
neighboring cells are:  [[2, 30], [2, 28], [1, 29], [3, 29]]
dealing with [2, 30] at loop 0
dealing with [2, 28] at loop 1
dealing with [1, 29] at loop 2
[1, 29] is NOT a wall
dealing with [3, 29] at loop 3
[3, 29] is NOT a wall
neighbors of b [[1, 29], [3, 29]]
cost from [3, 29] to [2, 29] is 1
<class 'int'>
8 17 25
8 17 25
25 <class 'int'>
8 17 25
[4, 33] (4, 33)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 33] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 33] 4 33
the point we are trying to find neighbors for  [4, 33]
neighboring cells are:  [[4, 34], [4, 32], [3, 33], [5, 33]]
dealing with [4, 34] at loop 0
dealing with [4, 32] at loop 1
dealing with [3, 33] at loop 2
[3, 33] is NOT a wall
dealing with [5, 33] at loop 3
[5, 33] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
49[4, 33][3, 33]
the points are:  [4, 33] [3, 33]
type for point in is_valid_node  <class 'list'>
[4, 33] 4 33
type for point in is_valid_node  <class 'list'>
[3, 33] 3 33
the point we are trying to find neighbors for  [3, 33]
neighboring cells are:  [[3, 34], [3, 32], [2, 33], [4, 33]]
dealing with [3, 34] at loop 0
[3, 34] is NOT a wall
dealing with [3, 32] at loop 1
[3, 32] is NOT a wall
dealing with [2, 33] at loop 2
dealing with [4, 33] at loop 3
[4, 33] is NOT a wall
neighbors of b [[3, 34], [3, 32], [4, 33]]
cost from [4, 33] to [3, 33] is 1
<class 'int'>
7 21 28
7 21 28
28 <class 'int'>
7 21 28
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
49[4, 33][5, 33]
the points are:  [4, 33] [5, 33]
type for point in is_valid_node  <class 'list'>
[4, 33] 4 33
type for point in is_valid_node  <class 'list'>
[5, 33] 5 33
the point we are trying to find neighbors for  [5, 33]
neighboring cells are:  [[5, 34], [5, 32], [4, 33], [6, 33]]
dealing with [5, 34] at loop 0
dealing with [5, 32] at loop 1
[5, 32] is NOT a wall
dealing with [4, 33] at loop 2
[4, 33] is NOT a wall
dealing with [6, 33] at loop 3
[6, 33] is NOT a wall
neighbors of b [[5, 32], [4, 33], [6, 33]]
cost from [4, 33] to [5, 33] is 1
[9, 36] (9, 36)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 36] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 36] 9 36
the point we are trying to find neighbors for  [9, 36]
neighboring cells are:  [[9, 37], [9, 35], [8, 36], [10, 36]]
dealing with [9, 37] at loop 0
[9, 37] is NOT a wall
dealing with [9, 35] at loop 1
[9, 35] is NOT a wall
dealing with [8, 36] at loop 2
dealing with [10, 36] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
51[9, 36][9, 37]
the points are:  [9, 36] [9, 37]
type for point in is_valid_node  <class 'list'>
[9, 36] 9 36
type for point in is_valid_node  <class 'list'>
[9, 37] 9 37
the point we are trying to find neighbors for  [9, 37]
neighboring cells are:  [[9, 38], [9, 36], [8, 37], [10, 37]]
dealing with [9, 38] at loop 0
dealing with [9, 36] at loop 1
[9, 36] is NOT a wall
dealing with [8, 37] at loop 2
[8, 37] is NOT a wall
dealing with [10, 37] at loop 3
neighbors of b [[9, 36], [8, 37]]
cost from [9, 36] to [9, 37] is 1
<class 'int'>
1 25 26
1 25 26
26 <class 'int'>
1 25 26
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
51[9, 36][9, 35]
the points are:  [9, 36] [9, 35]
type for point in is_valid_node  <class 'list'>
[9, 36] 9 36
type for point in is_valid_node  <class 'list'>
[9, 35] 9 35
the point we are trying to find neighbors for  [9, 35]
neighboring cells are:  [[9, 36], [9, 34], [8, 35], [10, 35]]
dealing with [9, 36] at loop 0
[9, 36] is NOT a wall
dealing with [9, 34] at loop 1
[9, 34] is NOT a wall
dealing with [8, 35] at loop 2
dealing with [10, 35] at loop 3
neighbors of b [[9, 36], [9, 34]]
cost from [9, 36] to [9, 35] is 1
[15, 27] (15, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 27] 15 27
the point we are trying to find neighbors for  [15, 27]
neighboring cells are:  [[15, 28], [15, 26], [14, 27], [16, 27]]
dealing with [15, 28] at loop 0
dealing with [15, 26] at loop 1
dealing with [14, 27] at loop 2
[14, 27] is NOT a wall
dealing with [16, 27] at loop 3
[16, 27] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[15, 27][14, 27]
the points are:  [15, 27] [14, 27]
type for point in is_valid_node  <class 'list'>
[15, 27] 15 27
type for point in is_valid_node  <class 'list'>
[14, 27] 14 27
the point we are trying to find neighbors for  [14, 27]
neighboring cells are:  [[14, 28], [14, 26], [13, 27], [15, 27]]
dealing with [14, 28] at loop 0
dealing with [14, 26] at loop 1
dealing with [13, 27] at loop 2
[13, 27] is NOT a wall
dealing with [15, 27] at loop 3
[15, 27] is NOT a wall
neighbors of b [[13, 27], [15, 27]]
cost from [15, 27] to [14, 27] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[15, 27][16, 27]
the points are:  [15, 27] [16, 27]
type for point in is_valid_node  <class 'list'>
[15, 27] 15 27
type for point in is_valid_node  <class 'list'>
[16, 27] 16 27
the point we are trying to find neighbors for  [16, 27]
neighboring cells are:  [[16, 28], [16, 26], [15, 27], [17, 27]]
dealing with [16, 28] at loop 0
dealing with [16, 26] at loop 1
dealing with [15, 27] at loop 2
[15, 27] is NOT a wall
dealing with [17, 27] at loop 3
[17, 27] is NOT a wall
neighbors of b [[15, 27], [17, 27]]
cost from [15, 27] to [16, 27] is 1
<class 'int'>
6 15 21
6 15 21
21 <class 'int'>
6 15 21
[21, 27] (21, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 27] 21 27
the point we are trying to find neighbors for  [21, 27]
neighboring cells are:  [[21, 28], [21, 26], [20, 27], [22, 27]]
dealing with [21, 28] at loop 0
dealing with [21, 26] at loop 1
[21, 26] is NOT a wall
dealing with [20, 27] at loop 2
[20, 27] is NOT a wall
dealing with [22, 27] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
50[21, 27][21, 26]
the points are:  [21, 27] [21, 26]
type for point in is_valid_node  <class 'list'>
[21, 27] 21 27
type for point in is_valid_node  <class 'list'>
[21, 26] 21 26
the point we are trying to find neighbors for  [21, 26]
neighboring cells are:  [[21, 27], [21, 25], [20, 26], [22, 26]]
dealing with [21, 27] at loop 0
[21, 27] is NOT a wall
dealing with [21, 25] at loop 1
[21, 25] is NOT a wall
dealing with [20, 26] at loop 2
dealing with [22, 26] at loop 3
neighbors of b [[21, 27], [21, 25]]
cost from [21, 27] to [21, 26] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
50[21, 27][20, 27]
the points are:  [21, 27] [20, 27]
type for point in is_valid_node  <class 'list'>
[21, 27] 21 27
type for point in is_valid_node  <class 'list'>
[20, 27] 20 27
the point we are trying to find neighbors for  [20, 27]
neighboring cells are:  [[20, 28], [20, 26], [19, 27], [21, 27]]
dealing with [20, 28] at loop 0
dealing with [20, 26] at loop 1
dealing with [19, 27] at loop 2
[19, 27] is NOT a wall
dealing with [21, 27] at loop 3
[21, 27] is NOT a wall
neighbors of b [[19, 27], [21, 27]]
cost from [21, 27] to [20, 27] is 1
<class 'int'>
10 15 25
10 15 25
25 <class 'int'>
10 15 25
[20, 27] (20, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[20, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[20, 27] 20 27
the point we are trying to find neighbors for  [20, 27]
neighboring cells are:  [[20, 28], [20, 26], [19, 27], [21, 27]]
dealing with [20, 28] at loop 0
dealing with [20, 26] at loop 1
dealing with [19, 27] at loop 2
[19, 27] is NOT a wall
dealing with [21, 27] at loop 3
[21, 27] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
51[20, 27][19, 27]
the points are:  [20, 27] [19, 27]
type for point in is_valid_node  <class 'list'>
[20, 27] 20 27
type for point in is_valid_node  <class 'list'>
[19, 27] 19 27
the point we are trying to find neighbors for  [19, 27]
neighboring cells are:  [[19, 28], [19, 26], [18, 27], [20, 27]]
dealing with [19, 28] at loop 0
[19, 28] is NOT a wall
dealing with [19, 26] at loop 1
dealing with [18, 27] at loop 2
dealing with [20, 27] at loop 3
[20, 27] is NOT a wall
neighbors of b [[19, 28], [20, 27]]
cost from [20, 27] to [19, 27] is 1
<class 'int'>
9 15 24
9 15 24
24 <class 'int'>
9 15 24
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
51[20, 27][21, 27]
the points are:  [20, 27] [21, 27]
type for point in is_valid_node  <class 'list'>
[20, 27] 20 27
type for point in is_valid_node  <class 'list'>
[21, 27] 21 27
the point we are trying to find neighbors for  [21, 27]
neighboring cells are:  [[21, 28], [21, 26], [20, 27], [22, 27]]
dealing with [21, 28] at loop 0
dealing with [21, 26] at loop 1
[21, 26] is NOT a wall
dealing with [20, 27] at loop 2
[20, 27] is NOT a wall
dealing with [22, 27] at loop 3
neighbors of b [[21, 26], [20, 27]]
cost from [20, 27] to [21, 27] is 1
[19, 27] (19, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 27] 19 27
the point we are trying to find neighbors for  [19, 27]
neighboring cells are:  [[19, 28], [19, 26], [18, 27], [20, 27]]
dealing with [19, 28] at loop 0
[19, 28] is NOT a wall
dealing with [19, 26] at loop 1
dealing with [18, 27] at loop 2
dealing with [20, 27] at loop 3
[20, 27] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
52[19, 27][19, 28]
the points are:  [19, 27] [19, 28]
type for point in is_valid_node  <class 'list'>
[19, 27] 19 27
type for point in is_valid_node  <class 'list'>
[19, 28] 19 28
the point we are trying to find neighbors for  [19, 28]
neighboring cells are:  [[19, 29], [19, 27], [18, 28], [20, 28]]
dealing with [19, 29] at loop 0
[19, 29] is NOT a wall
dealing with [19, 27] at loop 1
[19, 27] is NOT a wall
dealing with [18, 28] at loop 2
dealing with [20, 28] at loop 3
neighbors of b [[19, 29], [19, 27]]
cost from [19, 27] to [19, 28] is 1
<class 'int'>
9 16 25
9 16 25
25 <class 'int'>
9 16 25
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
52[19, 27][20, 27]
the points are:  [19, 27] [20, 27]
type for point in is_valid_node  <class 'list'>
[19, 27] 19 27
type for point in is_valid_node  <class 'list'>
[20, 27] 20 27
the point we are trying to find neighbors for  [20, 27]
neighboring cells are:  [[20, 28], [20, 26], [19, 27], [21, 27]]
dealing with [20, 28] at loop 0
dealing with [20, 26] at loop 1
dealing with [19, 27] at loop 2
[19, 27] is NOT a wall
dealing with [21, 27] at loop 3
[21, 27] is NOT a wall
neighbors of b [[19, 27], [21, 27]]
cost from [19, 27] to [20, 27] is 1
[2, 29] (2, 29)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 29] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 29] 2 29
the point we are trying to find neighbors for  [2, 29]
neighboring cells are:  [[2, 30], [2, 28], [1, 29], [3, 29]]
dealing with [2, 30] at loop 0
dealing with [2, 28] at loop 1
dealing with [1, 29] at loop 2
[1, 29] is NOT a wall
dealing with [3, 29] at loop 3
[3, 29] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[2, 29][1, 29]
the points are:  [2, 29] [1, 29]
type for point in is_valid_node  <class 'list'>
[2, 29] 2 29
type for point in is_valid_node  <class 'list'>
[1, 29] 1 29
the point we are trying to find neighbors for  [1, 29]
neighboring cells are:  [[1, 30], [1, 28], [0, 29], [2, 29]]
dealing with [1, 30] at loop 0
dealing with [1, 28] at loop 1
[1, 28] is NOT a wall
dealing with [0, 29] at loop 2
dealing with [2, 29] at loop 3
[2, 29] is NOT a wall
neighbors of b [[1, 28], [2, 29]]
cost from [2, 29] to [1, 29] is 1
<class 'int'>
9 17 26
9 17 26
26 <class 'int'>
9 17 26
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[2, 29][3, 29]
the points are:  [2, 29] [3, 29]
type for point in is_valid_node  <class 'list'>
[2, 29] 2 29
type for point in is_valid_node  <class 'list'>
[3, 29] 3 29
the point we are trying to find neighbors for  [3, 29]
neighboring cells are:  [[3, 30], [3, 28], [2, 29], [4, 29]]
dealing with [3, 30] at loop 0
dealing with [3, 28] at loop 1
[3, 28] is NOT a wall
dealing with [2, 29] at loop 2
[2, 29] is NOT a wall
dealing with [4, 29] at loop 3
neighbors of b [[3, 28], [2, 29]]
cost from [2, 29] to [3, 29] is 1
[3, 25] (3, 25)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 25] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 25] 3 25
the point we are trying to find neighbors for  [3, 25]
neighboring cells are:  [[3, 26], [3, 24], [2, 25], [4, 25]]
dealing with [3, 26] at loop 0
dealing with [3, 24] at loop 1
[3, 24] is NOT a wall
dealing with [2, 25] at loop 2
[2, 25] is NOT a wall
dealing with [4, 25] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[3, 25][3, 24]
the points are:  [3, 25] [3, 24]
type for point in is_valid_node  <class 'list'>
[3, 25] 3 25
type for point in is_valid_node  <class 'list'>
[3, 24] 3 24
the point we are trying to find neighbors for  [3, 24]
neighboring cells are:  [[3, 25], [3, 23], [2, 24], [4, 24]]
dealing with [3, 25] at loop 0
[3, 25] is NOT a wall
dealing with [3, 23] at loop 1
[3, 23] is NOT a wall
dealing with [2, 24] at loop 2
dealing with [4, 24] at loop 3
neighbors of b [[3, 25], [3, 23]]
cost from [3, 25] to [3, 24] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[3, 25][2, 25]
the points are:  [3, 25] [2, 25]
type for point in is_valid_node  <class 'list'>
[3, 25] 3 25
type for point in is_valid_node  <class 'list'>
[2, 25] 2 25
the point we are trying to find neighbors for  [2, 25]
neighboring cells are:  [[2, 26], [2, 24], [1, 25], [3, 25]]
dealing with [2, 26] at loop 0
dealing with [2, 24] at loop 1
dealing with [1, 25] at loop 2
[1, 25] is NOT a wall
dealing with [3, 25] at loop 3
[3, 25] is NOT a wall
neighbors of b [[1, 25], [3, 25]]
cost from [3, 25] to [2, 25] is 1
<class 'int'>
8 13 21
8 13 21
21 <class 'int'>
8 13 21
[3, 33] (3, 33)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 33] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 33] 3 33
the point we are trying to find neighbors for  [3, 33]
neighboring cells are:  [[3, 34], [3, 32], [2, 33], [4, 33]]
dealing with [3, 34] at loop 0
[3, 34] is NOT a wall
dealing with [3, 32] at loop 1
[3, 32] is NOT a wall
dealing with [2, 33] at loop 2
dealing with [4, 33] at loop 3
[4, 33] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
50[3, 33][3, 34]
the points are:  [3, 33] [3, 34]
type for point in is_valid_node  <class 'list'>
[3, 33] 3 33
type for point in is_valid_node  <class 'list'>
[3, 34] 3 34
the point we are trying to find neighbors for  [3, 34]
neighboring cells are:  [[3, 35], [3, 33], [2, 34], [4, 34]]
dealing with [3, 35] at loop 0
[3, 35] is NOT a wall
dealing with [3, 33] at loop 1
[3, 33] is NOT a wall
dealing with [2, 34] at loop 2
dealing with [4, 34] at loop 3
neighbors of b [[3, 35], [3, 33]]
cost from [3, 33] to [3, 34] is 1
<class 'int'>
7 22 29
7 22 29
29 <class 'int'>
7 22 29
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
50[3, 33][3, 32]
the points are:  [3, 33] [3, 32]
type for point in is_valid_node  <class 'list'>
[3, 33] 3 33
type for point in is_valid_node  <class 'list'>
[3, 32] 3 32
the point we are trying to find neighbors for  [3, 32]
neighboring cells are:  [[3, 33], [3, 31], [2, 32], [4, 32]]
dealing with [3, 33] at loop 0
[3, 33] is NOT a wall
dealing with [3, 31] at loop 1
[3, 31] is NOT a wall
dealing with [2, 32] at loop 2
dealing with [4, 32] at loop 3
neighbors of b [[3, 33], [3, 31]]
cost from [3, 33] to [3, 32] is 1
<class 'int'>
7 20 27
7 20 27
27 <class 'int'>
7 20 27
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
50[3, 33][4, 33]
the points are:  [3, 33] [4, 33]
type for point in is_valid_node  <class 'list'>
[3, 33] 3 33
type for point in is_valid_node  <class 'list'>
[4, 33] 4 33
the point we are trying to find neighbors for  [4, 33]
neighboring cells are:  [[4, 34], [4, 32], [3, 33], [5, 33]]
dealing with [4, 34] at loop 0
dealing with [4, 32] at loop 1
dealing with [3, 33] at loop 2
[3, 33] is NOT a wall
dealing with [5, 33] at loop 3
[5, 33] is NOT a wall
neighbors of b [[3, 33], [5, 33]]
cost from [3, 33] to [4, 33] is 1
[3, 32] (3, 32)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 32] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 32] 3 32
the point we are trying to find neighbors for  [3, 32]
neighboring cells are:  [[3, 33], [3, 31], [2, 32], [4, 32]]
dealing with [3, 33] at loop 0
[3, 33] is NOT a wall
dealing with [3, 31] at loop 1
[3, 31] is NOT a wall
dealing with [2, 32] at loop 2
dealing with [4, 32] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
51[3, 32][3, 33]
the points are:  [3, 32] [3, 33]
type for point in is_valid_node  <class 'list'>
[3, 32] 3 32
type for point in is_valid_node  <class 'list'>
[3, 33] 3 33
the point we are trying to find neighbors for  [3, 33]
neighboring cells are:  [[3, 34], [3, 32], [2, 33], [4, 33]]
dealing with [3, 34] at loop 0
[3, 34] is NOT a wall
dealing with [3, 32] at loop 1
[3, 32] is NOT a wall
dealing with [2, 33] at loop 2
dealing with [4, 33] at loop 3
[4, 33] is NOT a wall
neighbors of b [[3, 34], [3, 32], [4, 33]]
cost from [3, 32] to [3, 33] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
51[3, 32][3, 31]
the points are:  [3, 32] [3, 31]
type for point in is_valid_node  <class 'list'>
[3, 32] 3 32
type for point in is_valid_node  <class 'list'>
[3, 31] 3 31
the point we are trying to find neighbors for  [3, 31]
neighboring cells are:  [[3, 32], [3, 30], [2, 31], [4, 31]]
dealing with [3, 32] at loop 0
[3, 32] is NOT a wall
dealing with [3, 30] at loop 1
dealing with [2, 31] at loop 2
[2, 31] is NOT a wall
dealing with [4, 31] at loop 3
neighbors of b [[3, 32], [2, 31]]
cost from [3, 32] to [3, 31] is 1
<class 'int'>
7 19 26
7 19 26
26 <class 'int'>
7 19 26
[3, 31] (3, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 31] 3 31
the point we are trying to find neighbors for  [3, 31]
neighboring cells are:  [[3, 32], [3, 30], [2, 31], [4, 31]]
dealing with [3, 32] at loop 0
[3, 32] is NOT a wall
dealing with [3, 30] at loop 1
dealing with [2, 31] at loop 2
[2, 31] is NOT a wall
dealing with [4, 31] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
52[3, 31][3, 32]
the points are:  [3, 31] [3, 32]
type for point in is_valid_node  <class 'list'>
[3, 31] 3 31
type for point in is_valid_node  <class 'list'>
[3, 32] 3 32
the point we are trying to find neighbors for  [3, 32]
neighboring cells are:  [[3, 33], [3, 31], [2, 32], [4, 32]]
dealing with [3, 33] at loop 0
[3, 33] is NOT a wall
dealing with [3, 31] at loop 1
[3, 31] is NOT a wall
dealing with [2, 32] at loop 2
dealing with [4, 32] at loop 3
neighbors of b [[3, 33], [3, 31]]
cost from [3, 31] to [3, 32] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
52[3, 31][2, 31]
the points are:  [3, 31] [2, 31]
type for point in is_valid_node  <class 'list'>
[3, 31] 3 31
type for point in is_valid_node  <class 'list'>
[2, 31] 2 31
the point we are trying to find neighbors for  [2, 31]
neighboring cells are:  [[2, 32], [2, 30], [1, 31], [3, 31]]
dealing with [2, 32] at loop 0
dealing with [2, 30] at loop 1
dealing with [1, 31] at loop 2
[1, 31] is NOT a wall
dealing with [3, 31] at loop 3
[3, 31] is NOT a wall
neighbors of b [[1, 31], [3, 31]]
cost from [3, 31] to [2, 31] is 1
<class 'int'>
8 19 27
8 19 27
27 <class 'int'>
8 19 27
[9, 37] (9, 37)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 37] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 37] 9 37
the point we are trying to find neighbors for  [9, 37]
neighboring cells are:  [[9, 38], [9, 36], [8, 37], [10, 37]]
dealing with [9, 38] at loop 0
dealing with [9, 36] at loop 1
[9, 36] is NOT a wall
dealing with [8, 37] at loop 2
[8, 37] is NOT a wall
dealing with [10, 37] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
52[9, 37][9, 36]
the points are:  [9, 37] [9, 36]
type for point in is_valid_node  <class 'list'>
[9, 37] 9 37
type for point in is_valid_node  <class 'list'>
[9, 36] 9 36
the point we are trying to find neighbors for  [9, 36]
neighboring cells are:  [[9, 37], [9, 35], [8, 36], [10, 36]]
dealing with [9, 37] at loop 0
[9, 37] is NOT a wall
dealing with [9, 35] at loop 1
[9, 35] is NOT a wall
dealing with [8, 36] at loop 2
dealing with [10, 36] at loop 3
neighbors of b [[9, 37], [9, 35]]
cost from [9, 37] to [9, 36] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
52[9, 37][8, 37]
the points are:  [9, 37] [8, 37]
type for point in is_valid_node  <class 'list'>
[9, 37] 9 37
type for point in is_valid_node  <class 'list'>
[8, 37] 8 37
the point we are trying to find neighbors for  [8, 37]
neighboring cells are:  [[8, 38], [8, 36], [7, 37], [9, 37]]
dealing with [8, 38] at loop 0
dealing with [8, 36] at loop 1
dealing with [7, 37] at loop 2
[7, 37] is NOT a wall
dealing with [9, 37] at loop 3
[9, 37] is NOT a wall
neighbors of b [[7, 37], [9, 37]]
cost from [9, 37] to [8, 37] is 1
<class 'int'>
2 25 27
2 25 27
27 <class 'int'>
2 25 27
[16, 27] (16, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 27] 16 27
the point we are trying to find neighbors for  [16, 27]
neighboring cells are:  [[16, 28], [16, 26], [15, 27], [17, 27]]
dealing with [16, 28] at loop 0
dealing with [16, 26] at loop 1
dealing with [15, 27] at loop 2
[15, 27] is NOT a wall
dealing with [17, 27] at loop 3
[17, 27] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[16, 27][15, 27]
the points are:  [16, 27] [15, 27]
type for point in is_valid_node  <class 'list'>
[16, 27] 16 27
type for point in is_valid_node  <class 'list'>
[15, 27] 15 27
the point we are trying to find neighbors for  [15, 27]
neighboring cells are:  [[15, 28], [15, 26], [14, 27], [16, 27]]
dealing with [15, 28] at loop 0
dealing with [15, 26] at loop 1
dealing with [14, 27] at loop 2
[14, 27] is NOT a wall
dealing with [16, 27] at loop 3
[16, 27] is NOT a wall
neighbors of b [[14, 27], [16, 27]]
cost from [16, 27] to [15, 27] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[16, 27][17, 27]
the points are:  [16, 27] [17, 27]
type for point in is_valid_node  <class 'list'>
[16, 27] 16 27
type for point in is_valid_node  <class 'list'>
[17, 27] 17 27
the point we are trying to find neighbors for  [17, 27]
neighboring cells are:  [[17, 28], [17, 26], [16, 27], [18, 27]]
dealing with [17, 28] at loop 0
[17, 28] is NOT a wall
dealing with [17, 26] at loop 1
[17, 26] is NOT a wall
dealing with [16, 27] at loop 2
[16, 27] is NOT a wall
dealing with [18, 27] at loop 3
neighbors of b [[17, 28], [17, 26], [16, 27]]
cost from [16, 27] to [17, 27] is 1
<class 'int'>
7 15 22
7 15 22
22 <class 'int'>
7 15 22
[19, 28] (19, 28)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 28] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 28] 19 28
the point we are trying to find neighbors for  [19, 28]
neighboring cells are:  [[19, 29], [19, 27], [18, 28], [20, 28]]
dealing with [19, 29] at loop 0
[19, 29] is NOT a wall
dealing with [19, 27] at loop 1
[19, 27] is NOT a wall
dealing with [18, 28] at loop 2
dealing with [20, 28] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[19, 28][19, 29]
the points are:  [19, 28] [19, 29]
type for point in is_valid_node  <class 'list'>
[19, 28] 19 28
type for point in is_valid_node  <class 'list'>
[19, 29] 19 29
the point we are trying to find neighbors for  [19, 29]
neighboring cells are:  [[19, 30], [19, 28], [18, 29], [20, 29]]
dealing with [19, 30] at loop 0
dealing with [19, 28] at loop 1
[19, 28] is NOT a wall
dealing with [18, 29] at loop 2
[18, 29] is NOT a wall
dealing with [20, 29] at loop 3
neighbors of b [[19, 28], [18, 29]]
cost from [19, 28] to [19, 29] is 1
<class 'int'>
9 17 26
9 17 26
26 <class 'int'>
9 17 26
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[19, 28][19, 27]
the points are:  [19, 28] [19, 27]
type for point in is_valid_node  <class 'list'>
[19, 28] 19 28
type for point in is_valid_node  <class 'list'>
[19, 27] 19 27
the point we are trying to find neighbors for  [19, 27]
neighboring cells are:  [[19, 28], [19, 26], [18, 27], [20, 27]]
dealing with [19, 28] at loop 0
[19, 28] is NOT a wall
dealing with [19, 26] at loop 1
dealing with [18, 27] at loop 2
dealing with [20, 27] at loop 3
[20, 27] is NOT a wall
neighbors of b [[19, 28], [20, 27]]
cost from [19, 28] to [19, 27] is 1
[1, 29] (1, 29)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 29] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 29] 1 29
the point we are trying to find neighbors for  [1, 29]
neighboring cells are:  [[1, 30], [1, 28], [0, 29], [2, 29]]
dealing with [1, 30] at loop 0
dealing with [1, 28] at loop 1
[1, 28] is NOT a wall
dealing with [0, 29] at loop 2
dealing with [2, 29] at loop 3
[2, 29] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[1, 29][1, 28]
the points are:  [1, 29] [1, 28]
type for point in is_valid_node  <class 'list'>
[1, 29] 1 29
type for point in is_valid_node  <class 'list'>
[1, 28] 1 28
the point we are trying to find neighbors for  [1, 28]
neighboring cells are:  [[1, 29], [1, 27], [0, 28], [2, 28]]
dealing with [1, 29] at loop 0
[1, 29] is NOT a wall
dealing with [1, 27] at loop 1
[1, 27] is NOT a wall
dealing with [0, 28] at loop 2
dealing with [2, 28] at loop 3
neighbors of b [[1, 29], [1, 27]]
cost from [1, 29] to [1, 28] is 1
<class 'int'>
9 16 25
9 16 25
25 <class 'int'>
9 16 25
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[1, 29][2, 29]
the points are:  [1, 29] [2, 29]
type for point in is_valid_node  <class 'list'>
[1, 29] 1 29
type for point in is_valid_node  <class 'list'>
[2, 29] 2 29
the point we are trying to find neighbors for  [2, 29]
neighboring cells are:  [[2, 30], [2, 28], [1, 29], [3, 29]]
dealing with [2, 30] at loop 0
dealing with [2, 28] at loop 1
dealing with [1, 29] at loop 2
[1, 29] is NOT a wall
dealing with [3, 29] at loop 3
[3, 29] is NOT a wall
neighbors of b [[1, 29], [3, 29]]
cost from [1, 29] to [2, 29] is 1
[1, 28] (1, 28)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 28] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 28] 1 28
the point we are trying to find neighbors for  [1, 28]
neighboring cells are:  [[1, 29], [1, 27], [0, 28], [2, 28]]
dealing with [1, 29] at loop 0
[1, 29] is NOT a wall
dealing with [1, 27] at loop 1
[1, 27] is NOT a wall
dealing with [0, 28] at loop 2
dealing with [2, 28] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[1, 28][1, 29]
the points are:  [1, 28] [1, 29]
type for point in is_valid_node  <class 'list'>
[1, 28] 1 28
type for point in is_valid_node  <class 'list'>
[1, 29] 1 29
the point we are trying to find neighbors for  [1, 29]
neighboring cells are:  [[1, 30], [1, 28], [0, 29], [2, 29]]
dealing with [1, 30] at loop 0
dealing with [1, 28] at loop 1
[1, 28] is NOT a wall
dealing with [0, 29] at loop 2
dealing with [2, 29] at loop 3
[2, 29] is NOT a wall
neighbors of b [[1, 28], [2, 29]]
cost from [1, 28] to [1, 29] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[1, 28][1, 27]
the points are:  [1, 28] [1, 27]
type for point in is_valid_node  <class 'list'>
[1, 28] 1 28
type for point in is_valid_node  <class 'list'>
[1, 27] 1 27
the point we are trying to find neighbors for  [1, 27]
neighboring cells are:  [[1, 28], [1, 26], [0, 27], [2, 27]]
dealing with [1, 28] at loop 0
[1, 28] is NOT a wall
dealing with [1, 26] at loop 1
[1, 26] is NOT a wall
dealing with [0, 27] at loop 2
dealing with [2, 27] at loop 3
neighbors of b [[1, 28], [1, 26]]
cost from [1, 28] to [1, 27] is 1
<class 'int'>
9 15 24
9 15 24
24 <class 'int'>
9 15 24
[1, 27] (1, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 27] 1 27
the point we are trying to find neighbors for  [1, 27]
neighboring cells are:  [[1, 28], [1, 26], [0, 27], [2, 27]]
dealing with [1, 28] at loop 0
[1, 28] is NOT a wall
dealing with [1, 26] at loop 1
[1, 26] is NOT a wall
dealing with [0, 27] at loop 2
dealing with [2, 27] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[1, 27][1, 28]
the points are:  [1, 27] [1, 28]
type for point in is_valid_node  <class 'list'>
[1, 27] 1 27
type for point in is_valid_node  <class 'list'>
[1, 28] 1 28
the point we are trying to find neighbors for  [1, 28]
neighboring cells are:  [[1, 29], [1, 27], [0, 28], [2, 28]]
dealing with [1, 29] at loop 0
[1, 29] is NOT a wall
dealing with [1, 27] at loop 1
[1, 27] is NOT a wall
dealing with [0, 28] at loop 2
dealing with [2, 28] at loop 3
neighbors of b [[1, 29], [1, 27]]
cost from [1, 27] to [1, 28] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[1, 27][1, 26]
the points are:  [1, 27] [1, 26]
type for point in is_valid_node  <class 'list'>
[1, 27] 1 27
type for point in is_valid_node  <class 'list'>
[1, 26] 1 26
the point we are trying to find neighbors for  [1, 26]
neighboring cells are:  [[1, 27], [1, 25], [0, 26], [2, 26]]
dealing with [1, 27] at loop 0
[1, 27] is NOT a wall
dealing with [1, 25] at loop 1
[1, 25] is NOT a wall
dealing with [0, 26] at loop 2
dealing with [2, 26] at loop 3
neighbors of b [[1, 27], [1, 25]]
cost from [1, 27] to [1, 26] is 1
<class 'int'>
9 14 23
9 14 23
23 <class 'int'>
9 14 23
[1, 26] (1, 26)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 26] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 26] 1 26
the point we are trying to find neighbors for  [1, 26]
neighboring cells are:  [[1, 27], [1, 25], [0, 26], [2, 26]]
dealing with [1, 27] at loop 0
[1, 27] is NOT a wall
dealing with [1, 25] at loop 1
[1, 25] is NOT a wall
dealing with [0, 26] at loop 2
dealing with [2, 26] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[1, 26][1, 27]
the points are:  [1, 26] [1, 27]
type for point in is_valid_node  <class 'list'>
[1, 26] 1 26
type for point in is_valid_node  <class 'list'>
[1, 27] 1 27
the point we are trying to find neighbors for  [1, 27]
neighboring cells are:  [[1, 28], [1, 26], [0, 27], [2, 27]]
dealing with [1, 28] at loop 0
[1, 28] is NOT a wall
dealing with [1, 26] at loop 1
[1, 26] is NOT a wall
dealing with [0, 27] at loop 2
dealing with [2, 27] at loop 3
neighbors of b [[1, 28], [1, 26]]
cost from [1, 26] to [1, 27] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[1, 26][1, 25]
the points are:  [1, 26] [1, 25]
type for point in is_valid_node  <class 'list'>
[1, 26] 1 26
type for point in is_valid_node  <class 'list'>
[1, 25] 1 25
the point we are trying to find neighbors for  [1, 25]
neighboring cells are:  [[1, 26], [1, 24], [0, 25], [2, 25]]
dealing with [1, 26] at loop 0
[1, 26] is NOT a wall
dealing with [1, 24] at loop 1
dealing with [0, 25] at loop 2
dealing with [2, 25] at loop 3
[2, 25] is NOT a wall
neighbors of b [[1, 26], [2, 25]]
cost from [1, 26] to [1, 25] is 1
<class 'int'>
9 13 22
9 13 22
22 <class 'int'>
9 13 22
[1, 25] (1, 25)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 25] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 25] 1 25
the point we are trying to find neighbors for  [1, 25]
neighboring cells are:  [[1, 26], [1, 24], [0, 25], [2, 25]]
dealing with [1, 26] at loop 0
[1, 26] is NOT a wall
dealing with [1, 24] at loop 1
dealing with [0, 25] at loop 2
dealing with [2, 25] at loop 3
[2, 25] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[1, 25][1, 26]
the points are:  [1, 25] [1, 26]
type for point in is_valid_node  <class 'list'>
[1, 25] 1 25
type for point in is_valid_node  <class 'list'>
[1, 26] 1 26
the point we are trying to find neighbors for  [1, 26]
neighboring cells are:  [[1, 27], [1, 25], [0, 26], [2, 26]]
dealing with [1, 27] at loop 0
[1, 27] is NOT a wall
dealing with [1, 25] at loop 1
[1, 25] is NOT a wall
dealing with [0, 26] at loop 2
dealing with [2, 26] at loop 3
neighbors of b [[1, 27], [1, 25]]
cost from [1, 25] to [1, 26] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[1, 25][2, 25]
the points are:  [1, 25] [2, 25]
type for point in is_valid_node  <class 'list'>
[1, 25] 1 25
type for point in is_valid_node  <class 'list'>
[2, 25] 2 25
the point we are trying to find neighbors for  [2, 25]
neighboring cells are:  [[2, 26], [2, 24], [1, 25], [3, 25]]
dealing with [2, 26] at loop 0
dealing with [2, 24] at loop 1
dealing with [1, 25] at loop 2
[1, 25] is NOT a wall
dealing with [3, 25] at loop 3
[3, 25] is NOT a wall
neighbors of b [[1, 25], [3, 25]]
cost from [1, 25] to [2, 25] is 1
[2, 25] (2, 25)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 25] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 25] 2 25
the point we are trying to find neighbors for  [2, 25]
neighboring cells are:  [[2, 26], [2, 24], [1, 25], [3, 25]]
dealing with [2, 26] at loop 0
dealing with [2, 24] at loop 1
dealing with [1, 25] at loop 2
[1, 25] is NOT a wall
dealing with [3, 25] at loop 3
[3, 25] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[2, 25][1, 25]
the points are:  [2, 25] [1, 25]
type for point in is_valid_node  <class 'list'>
[2, 25] 2 25
type for point in is_valid_node  <class 'list'>
[1, 25] 1 25
the point we are trying to find neighbors for  [1, 25]
neighboring cells are:  [[1, 26], [1, 24], [0, 25], [2, 25]]
dealing with [1, 26] at loop 0
[1, 26] is NOT a wall
dealing with [1, 24] at loop 1
dealing with [0, 25] at loop 2
dealing with [2, 25] at loop 3
[2, 25] is NOT a wall
neighbors of b [[1, 26], [2, 25]]
cost from [2, 25] to [1, 25] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[2, 25][3, 25]
the points are:  [2, 25] [3, 25]
type for point in is_valid_node  <class 'list'>
[2, 25] 2 25
type for point in is_valid_node  <class 'list'>
[3, 25] 3 25
the point we are trying to find neighbors for  [3, 25]
neighboring cells are:  [[3, 26], [3, 24], [2, 25], [4, 25]]
dealing with [3, 26] at loop 0
dealing with [3, 24] at loop 1
[3, 24] is NOT a wall
dealing with [2, 25] at loop 2
[2, 25] is NOT a wall
dealing with [4, 25] at loop 3
neighbors of b [[3, 24], [2, 25]]
cost from [2, 25] to [3, 25] is 1
[2, 31] (2, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 31] 2 31
the point we are trying to find neighbors for  [2, 31]
neighboring cells are:  [[2, 32], [2, 30], [1, 31], [3, 31]]
dealing with [2, 32] at loop 0
dealing with [2, 30] at loop 1
dealing with [1, 31] at loop 2
[1, 31] is NOT a wall
dealing with [3, 31] at loop 3
[3, 31] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[2, 31][1, 31]
the points are:  [2, 31] [1, 31]
type for point in is_valid_node  <class 'list'>
[2, 31] 2 31
type for point in is_valid_node  <class 'list'>
[1, 31] 1 31
the point we are trying to find neighbors for  [1, 31]
neighboring cells are:  [[1, 32], [1, 30], [0, 31], [2, 31]]
dealing with [1, 32] at loop 0
[1, 32] is NOT a wall
dealing with [1, 30] at loop 1
dealing with [0, 31] at loop 2
dealing with [2, 31] at loop 3
[2, 31] is NOT a wall
neighbors of b [[1, 32], [2, 31]]
cost from [2, 31] to [1, 31] is 1
<class 'int'>
9 19 28
9 19 28
28 <class 'int'>
9 19 28
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[2, 31][3, 31]
the points are:  [2, 31] [3, 31]
type for point in is_valid_node  <class 'list'>
[2, 31] 2 31
type for point in is_valid_node  <class 'list'>
[3, 31] 3 31
the point we are trying to find neighbors for  [3, 31]
neighboring cells are:  [[3, 32], [3, 30], [2, 31], [4, 31]]
dealing with [3, 32] at loop 0
[3, 32] is NOT a wall
dealing with [3, 30] at loop 1
dealing with [2, 31] at loop 2
[2, 31] is NOT a wall
dealing with [4, 31] at loop 3
neighbors of b [[3, 32], [2, 31]]
cost from [2, 31] to [3, 31] is 1
[3, 34] (3, 34)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 34] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 34] 3 34
the point we are trying to find neighbors for  [3, 34]
neighboring cells are:  [[3, 35], [3, 33], [2, 34], [4, 34]]
dealing with [3, 35] at loop 0
[3, 35] is NOT a wall
dealing with [3, 33] at loop 1
[3, 33] is NOT a wall
dealing with [2, 34] at loop 2
dealing with [4, 34] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
51[3, 34][3, 35]
the points are:  [3, 34] [3, 35]
type for point in is_valid_node  <class 'list'>
[3, 34] 3 34
type for point in is_valid_node  <class 'list'>
[3, 35] 3 35
the point we are trying to find neighbors for  [3, 35]
neighboring cells are:  [[3, 36], [3, 34], [2, 35], [4, 35]]
dealing with [3, 36] at loop 0
[3, 36] is NOT a wall
dealing with [3, 34] at loop 1
[3, 34] is NOT a wall
dealing with [2, 35] at loop 2
dealing with [4, 35] at loop 3
neighbors of b [[3, 36], [3, 34]]
cost from [3, 34] to [3, 35] is 1
<class 'int'>
7 23 30
7 23 30
30 <class 'int'>
7 23 30
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
51[3, 34][3, 33]
the points are:  [3, 34] [3, 33]
type for point in is_valid_node  <class 'list'>
[3, 34] 3 34
type for point in is_valid_node  <class 'list'>
[3, 33] 3 33
the point we are trying to find neighbors for  [3, 33]
neighboring cells are:  [[3, 34], [3, 32], [2, 33], [4, 33]]
dealing with [3, 34] at loop 0
[3, 34] is NOT a wall
dealing with [3, 32] at loop 1
[3, 32] is NOT a wall
dealing with [2, 33] at loop 2
dealing with [4, 33] at loop 3
[4, 33] is NOT a wall
neighbors of b [[3, 34], [3, 32], [4, 33]]
cost from [3, 34] to [3, 33] is 1
[8, 37] (8, 37)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[8, 37] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[8, 37] 8 37
the point we are trying to find neighbors for  [8, 37]
neighboring cells are:  [[8, 38], [8, 36], [7, 37], [9, 37]]
dealing with [8, 38] at loop 0
dealing with [8, 36] at loop 1
dealing with [7, 37] at loop 2
[7, 37] is NOT a wall
dealing with [9, 37] at loop 3
[9, 37] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[8, 37][7, 37]
the points are:  [8, 37] [7, 37]
type for point in is_valid_node  <class 'list'>
[8, 37] 8 37
type for point in is_valid_node  <class 'list'>
[7, 37] 7 37
the point we are trying to find neighbors for  [7, 37]
neighboring cells are:  [[7, 38], [7, 36], [6, 37], [8, 37]]
dealing with [7, 38] at loop 0
[7, 38] is NOT a wall
dealing with [7, 36] at loop 1
dealing with [6, 37] at loop 2
dealing with [8, 37] at loop 3
[8, 37] is NOT a wall
neighbors of b [[7, 38], [8, 37]]
cost from [8, 37] to [7, 37] is 1
<class 'int'>
3 25 28
3 25 28
28 <class 'int'>
3 25 28
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[8, 37][9, 37]
the points are:  [8, 37] [9, 37]
type for point in is_valid_node  <class 'list'>
[8, 37] 8 37
type for point in is_valid_node  <class 'list'>
[9, 37] 9 37
the point we are trying to find neighbors for  [9, 37]
neighboring cells are:  [[9, 38], [9, 36], [8, 37], [10, 37]]
dealing with [9, 38] at loop 0
dealing with [9, 36] at loop 1
[9, 36] is NOT a wall
dealing with [8, 37] at loop 2
[8, 37] is NOT a wall
dealing with [10, 37] at loop 3
neighbors of b [[9, 36], [8, 37]]
cost from [8, 37] to [9, 37] is 1
[17, 27] (17, 27)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 27] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 27] 17 27
the point we are trying to find neighbors for  [17, 27]
neighboring cells are:  [[17, 28], [17, 26], [16, 27], [18, 27]]
dealing with [17, 28] at loop 0
[17, 28] is NOT a wall
dealing with [17, 26] at loop 1
[17, 26] is NOT a wall
dealing with [16, 27] at loop 2
[16, 27] is NOT a wall
dealing with [18, 27] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[17, 27][17, 28]
the points are:  [17, 27] [17, 28]
type for point in is_valid_node  <class 'list'>
[17, 27] 17 27
type for point in is_valid_node  <class 'list'>
[17, 28] 17 28
the point we are trying to find neighbors for  [17, 28]
neighboring cells are:  [[17, 29], [17, 27], [16, 28], [18, 28]]
dealing with [17, 29] at loop 0
[17, 29] is NOT a wall
dealing with [17, 27] at loop 1
[17, 27] is NOT a wall
dealing with [16, 28] at loop 2
dealing with [18, 28] at loop 3
neighbors of b [[17, 29], [17, 27]]
cost from [17, 27] to [17, 28] is 1
<class 'int'>
7 16 23
7 16 23
23 <class 'int'>
7 16 23
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[17, 27][17, 26]
the points are:  [17, 27] [17, 26]
type for point in is_valid_node  <class 'list'>
[17, 27] 17 27
type for point in is_valid_node  <class 'list'>
[17, 26] 17 26
the point we are trying to find neighbors for  [17, 26]
neighboring cells are:  [[17, 27], [17, 25], [16, 26], [18, 26]]
dealing with [17, 27] at loop 0
[17, 27] is NOT a wall
dealing with [17, 25] at loop 1
[17, 25] is NOT a wall
dealing with [16, 26] at loop 2
dealing with [18, 26] at loop 3
neighbors of b [[17, 27], [17, 25]]
cost from [17, 27] to [17, 26] is 1
<class 'int'>
7 14 21
7 14 21
21 <class 'int'>
7 14 21
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[17, 27][16, 27]
the points are:  [17, 27] [16, 27]
type for point in is_valid_node  <class 'list'>
[17, 27] 17 27
type for point in is_valid_node  <class 'list'>
[16, 27] 16 27
the point we are trying to find neighbors for  [16, 27]
neighboring cells are:  [[16, 28], [16, 26], [15, 27], [17, 27]]
dealing with [16, 28] at loop 0
dealing with [16, 26] at loop 1
dealing with [15, 27] at loop 2
[15, 27] is NOT a wall
dealing with [17, 27] at loop 3
[17, 27] is NOT a wall
neighbors of b [[15, 27], [17, 27]]
cost from [17, 27] to [16, 27] is 1
[17, 26] (17, 26)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 26] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 26] 17 26
the point we are trying to find neighbors for  [17, 26]
neighboring cells are:  [[17, 27], [17, 25], [16, 26], [18, 26]]
dealing with [17, 27] at loop 0
[17, 27] is NOT a wall
dealing with [17, 25] at loop 1
[17, 25] is NOT a wall
dealing with [16, 26] at loop 2
dealing with [18, 26] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[17, 26][17, 27]
the points are:  [17, 26] [17, 27]
type for point in is_valid_node  <class 'list'>
[17, 26] 17 26
type for point in is_valid_node  <class 'list'>
[17, 27] 17 27
the point we are trying to find neighbors for  [17, 27]
neighboring cells are:  [[17, 28], [17, 26], [16, 27], [18, 27]]
dealing with [17, 28] at loop 0
[17, 28] is NOT a wall
dealing with [17, 26] at loop 1
[17, 26] is NOT a wall
dealing with [16, 27] at loop 2
[16, 27] is NOT a wall
dealing with [18, 27] at loop 3
neighbors of b [[17, 28], [17, 26], [16, 27]]
cost from [17, 26] to [17, 27] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[17, 26][17, 25]
the points are:  [17, 26] [17, 25]
type for point in is_valid_node  <class 'list'>
[17, 26] 17 26
type for point in is_valid_node  <class 'list'>
[17, 25] 17 25
the point we are trying to find neighbors for  [17, 25]
neighboring cells are:  [[17, 26], [17, 24], [16, 25], [18, 25]]
dealing with [17, 26] at loop 0
[17, 26] is NOT a wall
dealing with [17, 24] at loop 1
dealing with [16, 25] at loop 2
dealing with [18, 25] at loop 3
[18, 25] is NOT a wall
neighbors of b [[17, 26], [18, 25]]
cost from [17, 26] to [17, 25] is 1
<class 'int'>
7 13 20
7 13 20
20 <class 'int'>
7 13 20
[17, 25] (17, 25)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 25] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 25] 17 25
the point we are trying to find neighbors for  [17, 25]
neighboring cells are:  [[17, 26], [17, 24], [16, 25], [18, 25]]
dealing with [17, 26] at loop 0
[17, 26] is NOT a wall
dealing with [17, 24] at loop 1
dealing with [16, 25] at loop 2
dealing with [18, 25] at loop 3
[18, 25] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[17, 25][17, 26]
the points are:  [17, 25] [17, 26]
type for point in is_valid_node  <class 'list'>
[17, 25] 17 25
type for point in is_valid_node  <class 'list'>
[17, 26] 17 26
the point we are trying to find neighbors for  [17, 26]
neighboring cells are:  [[17, 27], [17, 25], [16, 26], [18, 26]]
dealing with [17, 27] at loop 0
[17, 27] is NOT a wall
dealing with [17, 25] at loop 1
[17, 25] is NOT a wall
dealing with [16, 26] at loop 2
dealing with [18, 26] at loop 3
neighbors of b [[17, 27], [17, 25]]
cost from [17, 25] to [17, 26] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[17, 25][18, 25]
the points are:  [17, 25] [18, 25]
type for point in is_valid_node  <class 'list'>
[17, 25] 17 25
type for point in is_valid_node  <class 'list'>
[18, 25] 18 25
the point we are trying to find neighbors for  [18, 25]
neighboring cells are:  [[18, 26], [18, 24], [17, 25], [19, 25]]
dealing with [18, 26] at loop 0
dealing with [18, 24] at loop 1
dealing with [17, 25] at loop 2
[17, 25] is NOT a wall
dealing with [19, 25] at loop 3
[19, 25] is NOT a wall
neighbors of b [[17, 25], [19, 25]]
cost from [17, 25] to [18, 25] is 1
<class 'int'>
8 13 21
8 13 21
21 <class 'int'>
8 13 21
[19, 29] (19, 29)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 29] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 29] 19 29
the point we are trying to find neighbors for  [19, 29]
neighboring cells are:  [[19, 30], [19, 28], [18, 29], [20, 29]]
dealing with [19, 30] at loop 0
dealing with [19, 28] at loop 1
[19, 28] is NOT a wall
dealing with [18, 29] at loop 2
[18, 29] is NOT a wall
dealing with [20, 29] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[19, 29][19, 28]
the points are:  [19, 29] [19, 28]
type for point in is_valid_node  <class 'list'>
[19, 29] 19 29
type for point in is_valid_node  <class 'list'>
[19, 28] 19 28
the point we are trying to find neighbors for  [19, 28]
neighboring cells are:  [[19, 29], [19, 27], [18, 28], [20, 28]]
dealing with [19, 29] at loop 0
[19, 29] is NOT a wall
dealing with [19, 27] at loop 1
[19, 27] is NOT a wall
dealing with [18, 28] at loop 2
dealing with [20, 28] at loop 3
neighbors of b [[19, 29], [19, 27]]
cost from [19, 29] to [19, 28] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[19, 29][18, 29]
the points are:  [19, 29] [18, 29]
type for point in is_valid_node  <class 'list'>
[19, 29] 19 29
type for point in is_valid_node  <class 'list'>
[18, 29] 18 29
the point we are trying to find neighbors for  [18, 29]
neighboring cells are:  [[18, 30], [18, 28], [17, 29], [19, 29]]
dealing with [18, 30] at loop 0
dealing with [18, 28] at loop 1
dealing with [17, 29] at loop 2
[17, 29] is NOT a wall
dealing with [19, 29] at loop 3
[19, 29] is NOT a wall
neighbors of b [[17, 29], [19, 29]]
cost from [19, 29] to [18, 29] is 1
<class 'int'>
8 17 25
8 17 25
25 <class 'int'>
8 17 25
[18, 29] (18, 29)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 29] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 29] 18 29
the point we are trying to find neighbors for  [18, 29]
neighboring cells are:  [[18, 30], [18, 28], [17, 29], [19, 29]]
dealing with [18, 30] at loop 0
dealing with [18, 28] at loop 1
dealing with [17, 29] at loop 2
[17, 29] is NOT a wall
dealing with [19, 29] at loop 3
[19, 29] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[18, 29][17, 29]
the points are:  [18, 29] [17, 29]
type for point in is_valid_node  <class 'list'>
[18, 29] 18 29
type for point in is_valid_node  <class 'list'>
[17, 29] 17 29
the point we are trying to find neighbors for  [17, 29]
neighboring cells are:  [[17, 30], [17, 28], [16, 29], [18, 29]]
dealing with [17, 30] at loop 0
[17, 30] is NOT a wall
dealing with [17, 28] at loop 1
[17, 28] is NOT a wall
dealing with [16, 29] at loop 2
[16, 29] is NOT a wall
dealing with [18, 29] at loop 3
[18, 29] is NOT a wall
neighbors of b [[17, 30], [17, 28], [16, 29], [18, 29]]
cost from [18, 29] to [17, 29] is 1
<class 'int'>
7 17 24
7 17 24
24 <class 'int'>
7 17 24
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[18, 29][19, 29]
the points are:  [18, 29] [19, 29]
type for point in is_valid_node  <class 'list'>
[18, 29] 18 29
type for point in is_valid_node  <class 'list'>
[19, 29] 19 29
the point we are trying to find neighbors for  [19, 29]
neighboring cells are:  [[19, 30], [19, 28], [18, 29], [20, 29]]
dealing with [19, 30] at loop 0
dealing with [19, 28] at loop 1
[19, 28] is NOT a wall
dealing with [18, 29] at loop 2
[18, 29] is NOT a wall
dealing with [20, 29] at loop 3
neighbors of b [[19, 28], [18, 29]]
cost from [18, 29] to [19, 29] is 1
[17, 29] (17, 29)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 29] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 29] 17 29
the point we are trying to find neighbors for  [17, 29]
neighboring cells are:  [[17, 30], [17, 28], [16, 29], [18, 29]]
dealing with [17, 30] at loop 0
[17, 30] is NOT a wall
dealing with [17, 28] at loop 1
[17, 28] is NOT a wall
dealing with [16, 29] at loop 2
[16, 29] is NOT a wall
dealing with [18, 29] at loop 3
[18, 29] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[17, 29][17, 30]
the points are:  [17, 29] [17, 30]
type for point in is_valid_node  <class 'list'>
[17, 29] 17 29
type for point in is_valid_node  <class 'list'>
[17, 30] 17 30
the point we are trying to find neighbors for  [17, 30]
neighboring cells are:  [[17, 31], [17, 29], [16, 30], [18, 30]]
dealing with [17, 31] at loop 0
[17, 31] is NOT a wall
dealing with [17, 29] at loop 1
[17, 29] is NOT a wall
dealing with [16, 30] at loop 2
dealing with [18, 30] at loop 3
neighbors of b [[17, 31], [17, 29]]
cost from [17, 29] to [17, 30] is 1
<class 'int'>
7 18 25
7 18 25
25 <class 'int'>
7 18 25
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[17, 29][17, 28]
the points are:  [17, 29] [17, 28]
type for point in is_valid_node  <class 'list'>
[17, 29] 17 29
type for point in is_valid_node  <class 'list'>
[17, 28] 17 28
the point we are trying to find neighbors for  [17, 28]
neighboring cells are:  [[17, 29], [17, 27], [16, 28], [18, 28]]
dealing with [17, 29] at loop 0
[17, 29] is NOT a wall
dealing with [17, 27] at loop 1
[17, 27] is NOT a wall
dealing with [16, 28] at loop 2
dealing with [18, 28] at loop 3
neighbors of b [[17, 29], [17, 27]]
cost from [17, 29] to [17, 28] is 1
<class 'int'>
7 16 23
7 16 23
23 <class 'int'>
7 16 23
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[17, 29][16, 29]
the points are:  [17, 29] [16, 29]
type for point in is_valid_node  <class 'list'>
[17, 29] 17 29
type for point in is_valid_node  <class 'list'>
[16, 29] 16 29
the point we are trying to find neighbors for  [16, 29]
neighboring cells are:  [[16, 30], [16, 28], [15, 29], [17, 29]]
dealing with [16, 30] at loop 0
dealing with [16, 28] at loop 1
dealing with [15, 29] at loop 2
[15, 29] is NOT a wall
dealing with [17, 29] at loop 3
[17, 29] is NOT a wall
neighbors of b [[15, 29], [17, 29]]
cost from [17, 29] to [16, 29] is 1
<class 'int'>
6 17 23
6 17 23
23 <class 'int'>
6 17 23
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[17, 29][18, 29]
the points are:  [17, 29] [18, 29]
type for point in is_valid_node  <class 'list'>
[17, 29] 17 29
type for point in is_valid_node  <class 'list'>
[18, 29] 18 29
the point we are trying to find neighbors for  [18, 29]
neighboring cells are:  [[18, 30], [18, 28], [17, 29], [19, 29]]
dealing with [18, 30] at loop 0
dealing with [18, 28] at loop 1
dealing with [17, 29] at loop 2
[17, 29] is NOT a wall
dealing with [19, 29] at loop 3
[19, 29] is NOT a wall
neighbors of b [[17, 29], [19, 29]]
cost from [17, 29] to [18, 29] is 1
[16, 29] (16, 29)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 29] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 29] 16 29
the point we are trying to find neighbors for  [16, 29]
neighboring cells are:  [[16, 30], [16, 28], [15, 29], [17, 29]]
dealing with [16, 30] at loop 0
dealing with [16, 28] at loop 1
dealing with [15, 29] at loop 2
[15, 29] is NOT a wall
dealing with [17, 29] at loop 3
[17, 29] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[16, 29][15, 29]
the points are:  [16, 29] [15, 29]
type for point in is_valid_node  <class 'list'>
[16, 29] 16 29
type for point in is_valid_node  <class 'list'>
[15, 29] 15 29
the point we are trying to find neighbors for  [15, 29]
neighboring cells are:  [[15, 30], [15, 28], [14, 29], [16, 29]]
dealing with [15, 30] at loop 0
[15, 30] is NOT a wall
dealing with [15, 28] at loop 1
dealing with [14, 29] at loop 2
dealing with [16, 29] at loop 3
[16, 29] is NOT a wall
neighbors of b [[15, 30], [16, 29]]
cost from [16, 29] to [15, 29] is 1
<class 'int'>
5 17 22
5 17 22
22 <class 'int'>
5 17 22
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[16, 29][17, 29]
the points are:  [16, 29] [17, 29]
type for point in is_valid_node  <class 'list'>
[16, 29] 16 29
type for point in is_valid_node  <class 'list'>
[17, 29] 17 29
the point we are trying to find neighbors for  [17, 29]
neighboring cells are:  [[17, 30], [17, 28], [16, 29], [18, 29]]
dealing with [17, 30] at loop 0
[17, 30] is NOT a wall
dealing with [17, 28] at loop 1
[17, 28] is NOT a wall
dealing with [16, 29] at loop 2
[16, 29] is NOT a wall
dealing with [18, 29] at loop 3
[18, 29] is NOT a wall
neighbors of b [[17, 30], [17, 28], [16, 29], [18, 29]]
cost from [16, 29] to [17, 29] is 1
[15, 29] (15, 29)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 29] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 29] 15 29
the point we are trying to find neighbors for  [15, 29]
neighboring cells are:  [[15, 30], [15, 28], [14, 29], [16, 29]]
dealing with [15, 30] at loop 0
[15, 30] is NOT a wall
dealing with [15, 28] at loop 1
dealing with [14, 29] at loop 2
dealing with [16, 29] at loop 3
[16, 29] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[15, 29][15, 30]
the points are:  [15, 29] [15, 30]
type for point in is_valid_node  <class 'list'>
[15, 29] 15 29
type for point in is_valid_node  <class 'list'>
[15, 30] 15 30
the point we are trying to find neighbors for  [15, 30]
neighboring cells are:  [[15, 31], [15, 29], [14, 30], [16, 30]]
dealing with [15, 31] at loop 0
[15, 31] is NOT a wall
dealing with [15, 29] at loop 1
[15, 29] is NOT a wall
dealing with [14, 30] at loop 2
dealing with [16, 30] at loop 3
neighbors of b [[15, 31], [15, 29]]
cost from [15, 29] to [15, 30] is 1
<class 'int'>
5 18 23
5 18 23
23 <class 'int'>
5 18 23
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[15, 29][16, 29]
the points are:  [15, 29] [16, 29]
type for point in is_valid_node  <class 'list'>
[15, 29] 15 29
type for point in is_valid_node  <class 'list'>
[16, 29] 16 29
the point we are trying to find neighbors for  [16, 29]
neighboring cells are:  [[16, 30], [16, 28], [15, 29], [17, 29]]
dealing with [16, 30] at loop 0
dealing with [16, 28] at loop 1
dealing with [15, 29] at loop 2
[15, 29] is NOT a wall
dealing with [17, 29] at loop 3
[17, 29] is NOT a wall
neighbors of b [[15, 29], [17, 29]]
cost from [15, 29] to [16, 29] is 1
[17, 28] (17, 28)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 28] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 28] 17 28
the point we are trying to find neighbors for  [17, 28]
neighboring cells are:  [[17, 29], [17, 27], [16, 28], [18, 28]]
dealing with [17, 29] at loop 0
[17, 29] is NOT a wall
dealing with [17, 27] at loop 1
[17, 27] is NOT a wall
dealing with [16, 28] at loop 2
dealing with [18, 28] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[17, 28][17, 29]
the points are:  [17, 28] [17, 29]
type for point in is_valid_node  <class 'list'>
[17, 28] 17 28
type for point in is_valid_node  <class 'list'>
[17, 29] 17 29
the point we are trying to find neighbors for  [17, 29]
neighboring cells are:  [[17, 30], [17, 28], [16, 29], [18, 29]]
dealing with [17, 30] at loop 0
[17, 30] is NOT a wall
dealing with [17, 28] at loop 1
[17, 28] is NOT a wall
dealing with [16, 29] at loop 2
[16, 29] is NOT a wall
dealing with [18, 29] at loop 3
[18, 29] is NOT a wall
neighbors of b [[17, 30], [17, 28], [16, 29], [18, 29]]
cost from [17, 28] to [17, 29] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[17, 28][17, 27]
the points are:  [17, 28] [17, 27]
type for point in is_valid_node  <class 'list'>
[17, 28] 17 28
type for point in is_valid_node  <class 'list'>
[17, 27] 17 27
the point we are trying to find neighbors for  [17, 27]
neighboring cells are:  [[17, 28], [17, 26], [16, 27], [18, 27]]
dealing with [17, 28] at loop 0
[17, 28] is NOT a wall
dealing with [17, 26] at loop 1
[17, 26] is NOT a wall
dealing with [16, 27] at loop 2
[16, 27] is NOT a wall
dealing with [18, 27] at loop 3
neighbors of b [[17, 28], [17, 26], [16, 27]]
cost from [17, 28] to [17, 27] is 1
[1, 31] (1, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 31] 1 31
the point we are trying to find neighbors for  [1, 31]
neighboring cells are:  [[1, 32], [1, 30], [0, 31], [2, 31]]
dealing with [1, 32] at loop 0
[1, 32] is NOT a wall
dealing with [1, 30] at loop 1
dealing with [0, 31] at loop 2
dealing with [2, 31] at loop 3
[2, 31] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[1, 31][1, 32]
the points are:  [1, 31] [1, 32]
type for point in is_valid_node  <class 'list'>
[1, 31] 1 31
type for point in is_valid_node  <class 'list'>
[1, 32] 1 32
the point we are trying to find neighbors for  [1, 32]
neighboring cells are:  [[1, 33], [1, 31], [0, 32], [2, 32]]
dealing with [1, 33] at loop 0
[1, 33] is NOT a wall
dealing with [1, 31] at loop 1
[1, 31] is NOT a wall
dealing with [0, 32] at loop 2
dealing with [2, 32] at loop 3
neighbors of b [[1, 33], [1, 31]]
cost from [1, 31] to [1, 32] is 1
<class 'int'>
9 20 29
9 20 29
29 <class 'int'>
9 20 29
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[1, 31][2, 31]
the points are:  [1, 31] [2, 31]
type for point in is_valid_node  <class 'list'>
[1, 31] 1 31
type for point in is_valid_node  <class 'list'>
[2, 31] 2 31
the point we are trying to find neighbors for  [2, 31]
neighboring cells are:  [[2, 32], [2, 30], [1, 31], [3, 31]]
dealing with [2, 32] at loop 0
dealing with [2, 30] at loop 1
dealing with [1, 31] at loop 2
[1, 31] is NOT a wall
dealing with [3, 31] at loop 3
[3, 31] is NOT a wall
neighbors of b [[1, 31], [3, 31]]
cost from [1, 31] to [2, 31] is 1
[3, 35] (3, 35)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 35] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 35] 3 35
the point we are trying to find neighbors for  [3, 35]
neighboring cells are:  [[3, 36], [3, 34], [2, 35], [4, 35]]
dealing with [3, 36] at loop 0
[3, 36] is NOT a wall
dealing with [3, 34] at loop 1
[3, 34] is NOT a wall
dealing with [2, 35] at loop 2
dealing with [4, 35] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
52[3, 35][3, 36]
the points are:  [3, 35] [3, 36]
type for point in is_valid_node  <class 'list'>
[3, 35] 3 35
type for point in is_valid_node  <class 'list'>
[3, 36] 3 36
the point we are trying to find neighbors for  [3, 36]
neighboring cells are:  [[3, 37], [3, 35], [2, 36], [4, 36]]
dealing with [3, 37] at loop 0
[3, 37] is NOT a wall
dealing with [3, 35] at loop 1
[3, 35] is NOT a wall
dealing with [2, 36] at loop 2
[2, 36] is NOT a wall
dealing with [4, 36] at loop 3
neighbors of b [[3, 37], [3, 35], [2, 36]]
cost from [3, 35] to [3, 36] is 1
<class 'int'>
7 24 31
7 24 31
31 <class 'int'>
7 24 31
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
52[3, 35][3, 34]
the points are:  [3, 35] [3, 34]
type for point in is_valid_node  <class 'list'>
[3, 35] 3 35
type for point in is_valid_node  <class 'list'>
[3, 34] 3 34
the point we are trying to find neighbors for  [3, 34]
neighboring cells are:  [[3, 35], [3, 33], [2, 34], [4, 34]]
dealing with [3, 35] at loop 0
[3, 35] is NOT a wall
dealing with [3, 33] at loop 1
[3, 33] is NOT a wall
dealing with [2, 34] at loop 2
dealing with [4, 34] at loop 3
neighbors of b [[3, 35], [3, 33]]
cost from [3, 35] to [3, 34] is 1
[7, 37] (7, 37)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 37] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 37] 7 37
the point we are trying to find neighbors for  [7, 37]
neighboring cells are:  [[7, 38], [7, 36], [6, 37], [8, 37]]
dealing with [7, 38] at loop 0
[7, 38] is NOT a wall
dealing with [7, 36] at loop 1
dealing with [6, 37] at loop 2
dealing with [8, 37] at loop 3
[8, 37] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[7, 37][7, 38]
the points are:  [7, 37] [7, 38]
type for point in is_valid_node  <class 'list'>
[7, 37] 7 37
type for point in is_valid_node  <class 'list'>
[7, 38] 7 38
the point we are trying to find neighbors for  [7, 38]
neighboring cells are:  [[7, 39], [7, 37], [6, 38], [8, 38]]
dealing with [7, 39] at loop 0
[7, 39] is NOT a wall
dealing with [7, 37] at loop 1
[7, 37] is NOT a wall
dealing with [6, 38] at loop 2
dealing with [8, 38] at loop 3
neighbors of b [[7, 39], [7, 37]]
cost from [7, 37] to [7, 38] is 1
<class 'int'>
3 26 29
3 26 29
29 <class 'int'>
3 26 29
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[7, 37][8, 37]
the points are:  [7, 37] [8, 37]
type for point in is_valid_node  <class 'list'>
[7, 37] 7 37
type for point in is_valid_node  <class 'list'>
[8, 37] 8 37
the point we are trying to find neighbors for  [8, 37]
neighboring cells are:  [[8, 38], [8, 36], [7, 37], [9, 37]]
dealing with [8, 38] at loop 0
dealing with [8, 36] at loop 1
dealing with [7, 37] at loop 2
[7, 37] is NOT a wall
dealing with [9, 37] at loop 3
[9, 37] is NOT a wall
neighbors of b [[7, 37], [9, 37]]
cost from [7, 37] to [8, 37] is 1
[15, 30] (15, 30)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 30] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 30] 15 30
the point we are trying to find neighbors for  [15, 30]
neighboring cells are:  [[15, 31], [15, 29], [14, 30], [16, 30]]
dealing with [15, 31] at loop 0
[15, 31] is NOT a wall
dealing with [15, 29] at loop 1
[15, 29] is NOT a wall
dealing with [14, 30] at loop 2
dealing with [16, 30] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[15, 30][15, 31]
the points are:  [15, 30] [15, 31]
type for point in is_valid_node  <class 'list'>
[15, 30] 15 30
type for point in is_valid_node  <class 'list'>
[15, 31] 15 31
the point we are trying to find neighbors for  [15, 31]
neighboring cells are:  [[15, 32], [15, 30], [14, 31], [16, 31]]
dealing with [15, 32] at loop 0
[15, 32] is NOT a wall
dealing with [15, 30] at loop 1
[15, 30] is NOT a wall
dealing with [14, 31] at loop 2
[14, 31] is NOT a wall
dealing with [16, 31] at loop 3
neighbors of b [[15, 32], [15, 30], [14, 31]]
cost from [15, 30] to [15, 31] is 1
<class 'int'>
5 19 24
5 19 24
24 <class 'int'>
5 19 24
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[15, 30][15, 29]
the points are:  [15, 30] [15, 29]
type for point in is_valid_node  <class 'list'>
[15, 30] 15 30
type for point in is_valid_node  <class 'list'>
[15, 29] 15 29
the point we are trying to find neighbors for  [15, 29]
neighboring cells are:  [[15, 30], [15, 28], [14, 29], [16, 29]]
dealing with [15, 30] at loop 0
[15, 30] is NOT a wall
dealing with [15, 28] at loop 1
dealing with [14, 29] at loop 2
dealing with [16, 29] at loop 3
[16, 29] is NOT a wall
neighbors of b [[15, 30], [16, 29]]
cost from [15, 30] to [15, 29] is 1
[17, 28] (17, 28)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 28] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 28] 17 28
the point we are trying to find neighbors for  [17, 28]
neighboring cells are:  [[17, 29], [17, 27], [16, 28], [18, 28]]
dealing with [17, 29] at loop 0
[17, 29] is NOT a wall
dealing with [17, 27] at loop 1
[17, 27] is NOT a wall
dealing with [16, 28] at loop 2
dealing with [18, 28] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[17, 28][17, 29]
the points are:  [17, 28] [17, 29]
type for point in is_valid_node  <class 'list'>
[17, 28] 17 28
type for point in is_valid_node  <class 'list'>
[17, 29] 17 29
the point we are trying to find neighbors for  [17, 29]
neighboring cells are:  [[17, 30], [17, 28], [16, 29], [18, 29]]
dealing with [17, 30] at loop 0
[17, 30] is NOT a wall
dealing with [17, 28] at loop 1
[17, 28] is NOT a wall
dealing with [16, 29] at loop 2
[16, 29] is NOT a wall
dealing with [18, 29] at loop 3
[18, 29] is NOT a wall
neighbors of b [[17, 30], [17, 28], [16, 29], [18, 29]]
cost from [17, 28] to [17, 29] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[17, 28][17, 27]
the points are:  [17, 28] [17, 27]
type for point in is_valid_node  <class 'list'>
[17, 28] 17 28
type for point in is_valid_node  <class 'list'>
[17, 27] 17 27
the point we are trying to find neighbors for  [17, 27]
neighboring cells are:  [[17, 28], [17, 26], [16, 27], [18, 27]]
dealing with [17, 28] at loop 0
[17, 28] is NOT a wall
dealing with [17, 26] at loop 1
[17, 26] is NOT a wall
dealing with [16, 27] at loop 2
[16, 27] is NOT a wall
dealing with [18, 27] at loop 3
neighbors of b [[17, 28], [17, 26], [16, 27]]
cost from [17, 28] to [17, 27] is 1
[17, 30] (17, 30)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 30] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 30] 17 30
the point we are trying to find neighbors for  [17, 30]
neighboring cells are:  [[17, 31], [17, 29], [16, 30], [18, 30]]
dealing with [17, 31] at loop 0
[17, 31] is NOT a wall
dealing with [17, 29] at loop 1
[17, 29] is NOT a wall
dealing with [16, 30] at loop 2
dealing with [18, 30] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[17, 30][17, 31]
the points are:  [17, 30] [17, 31]
type for point in is_valid_node  <class 'list'>
[17, 30] 17 30
type for point in is_valid_node  <class 'list'>
[17, 31] 17 31
the point we are trying to find neighbors for  [17, 31]
neighboring cells are:  [[17, 32], [17, 30], [16, 31], [18, 31]]
dealing with [17, 32] at loop 0
[17, 32] is NOT a wall
dealing with [17, 30] at loop 1
[17, 30] is NOT a wall
dealing with [16, 31] at loop 2
dealing with [18, 31] at loop 3
[18, 31] is NOT a wall
neighbors of b [[17, 32], [17, 30], [18, 31]]
cost from [17, 30] to [17, 31] is 1
<class 'int'>
7 19 26
7 19 26
26 <class 'int'>
7 19 26
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[17, 30][17, 29]
the points are:  [17, 30] [17, 29]
type for point in is_valid_node  <class 'list'>
[17, 30] 17 30
type for point in is_valid_node  <class 'list'>
[17, 29] 17 29
the point we are trying to find neighbors for  [17, 29]
neighboring cells are:  [[17, 30], [17, 28], [16, 29], [18, 29]]
dealing with [17, 30] at loop 0
[17, 30] is NOT a wall
dealing with [17, 28] at loop 1
[17, 28] is NOT a wall
dealing with [16, 29] at loop 2
[16, 29] is NOT a wall
dealing with [18, 29] at loop 3
[18, 29] is NOT a wall
neighbors of b [[17, 30], [17, 28], [16, 29], [18, 29]]
cost from [17, 30] to [17, 29] is 1
[18, 25] (18, 25)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 25] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 25] 18 25
the point we are trying to find neighbors for  [18, 25]
neighboring cells are:  [[18, 26], [18, 24], [17, 25], [19, 25]]
dealing with [18, 26] at loop 0
dealing with [18, 24] at loop 1
dealing with [17, 25] at loop 2
[17, 25] is NOT a wall
dealing with [19, 25] at loop 3
[19, 25] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
61[18, 25][17, 25]
the points are:  [18, 25] [17, 25]
type for point in is_valid_node  <class 'list'>
[18, 25] 18 25
type for point in is_valid_node  <class 'list'>
[17, 25] 17 25
the point we are trying to find neighbors for  [17, 25]
neighboring cells are:  [[17, 26], [17, 24], [16, 25], [18, 25]]
dealing with [17, 26] at loop 0
[17, 26] is NOT a wall
dealing with [17, 24] at loop 1
dealing with [16, 25] at loop 2
dealing with [18, 25] at loop 3
[18, 25] is NOT a wall
neighbors of b [[17, 26], [18, 25]]
cost from [18, 25] to [17, 25] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
61[18, 25][19, 25]
the points are:  [18, 25] [19, 25]
type for point in is_valid_node  <class 'list'>
[18, 25] 18 25
type for point in is_valid_node  <class 'list'>
[19, 25] 19 25
the point we are trying to find neighbors for  [19, 25]
neighboring cells are:  [[19, 26], [19, 24], [18, 25], [20, 25]]
dealing with [19, 26] at loop 0
dealing with [19, 24] at loop 1
dealing with [18, 25] at loop 2
[18, 25] is NOT a wall
dealing with [20, 25] at loop 3
neighbors of b [[18, 25]]
cost from [18, 25] to [19, 25] is 1
<class 'int'>
9 13 22
9 13 22
22 <class 'int'>
9 13 22
[1, 32] (1, 32)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 32] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 32] 1 32
the point we are trying to find neighbors for  [1, 32]
neighboring cells are:  [[1, 33], [1, 31], [0, 32], [2, 32]]
dealing with [1, 33] at loop 0
[1, 33] is NOT a wall
dealing with [1, 31] at loop 1
[1, 31] is NOT a wall
dealing with [0, 32] at loop 2
dealing with [2, 32] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[1, 32][1, 33]
the points are:  [1, 32] [1, 33]
type for point in is_valid_node  <class 'list'>
[1, 32] 1 32
type for point in is_valid_node  <class 'list'>
[1, 33] 1 33
the point we are trying to find neighbors for  [1, 33]
neighboring cells are:  [[1, 34], [1, 32], [0, 33], [2, 33]]
dealing with [1, 34] at loop 0
[1, 34] is NOT a wall
dealing with [1, 32] at loop 1
[1, 32] is NOT a wall
dealing with [0, 33] at loop 2
dealing with [2, 33] at loop 3
neighbors of b [[1, 34], [1, 32]]
cost from [1, 32] to [1, 33] is 1
<class 'int'>
9 21 30
9 21 30
30 <class 'int'>
9 21 30
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[1, 32][1, 31]
the points are:  [1, 32] [1, 31]
type for point in is_valid_node  <class 'list'>
[1, 32] 1 32
type for point in is_valid_node  <class 'list'>
[1, 31] 1 31
the point we are trying to find neighbors for  [1, 31]
neighboring cells are:  [[1, 32], [1, 30], [0, 31], [2, 31]]
dealing with [1, 32] at loop 0
[1, 32] is NOT a wall
dealing with [1, 30] at loop 1
dealing with [0, 31] at loop 2
dealing with [2, 31] at loop 3
[2, 31] is NOT a wall
neighbors of b [[1, 32], [2, 31]]
cost from [1, 32] to [1, 31] is 1
[3, 36] (3, 36)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 36] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 36] 3 36
the point we are trying to find neighbors for  [3, 36]
neighboring cells are:  [[3, 37], [3, 35], [2, 36], [4, 36]]
dealing with [3, 37] at loop 0
[3, 37] is NOT a wall
dealing with [3, 35] at loop 1
[3, 35] is NOT a wall
dealing with [2, 36] at loop 2
[2, 36] is NOT a wall
dealing with [4, 36] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[3, 36][3, 37]
the points are:  [3, 36] [3, 37]
type for point in is_valid_node  <class 'list'>
[3, 36] 3 36
type for point in is_valid_node  <class 'list'>
[3, 37] 3 37
the point we are trying to find neighbors for  [3, 37]
neighboring cells are:  [[3, 38], [3, 36], [2, 37], [4, 37]]
dealing with [3, 38] at loop 0
dealing with [3, 36] at loop 1
[3, 36] is NOT a wall
dealing with [2, 37] at loop 2
dealing with [4, 37] at loop 3
[4, 37] is NOT a wall
neighbors of b [[3, 36], [4, 37]]
cost from [3, 36] to [3, 37] is 1
<class 'int'>
7 25 32
7 25 32
32 <class 'int'>
7 25 32
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[3, 36][3, 35]
the points are:  [3, 36] [3, 35]
type for point in is_valid_node  <class 'list'>
[3, 36] 3 36
type for point in is_valid_node  <class 'list'>
[3, 35] 3 35
the point we are trying to find neighbors for  [3, 35]
neighboring cells are:  [[3, 36], [3, 34], [2, 35], [4, 35]]
dealing with [3, 36] at loop 0
[3, 36] is NOT a wall
dealing with [3, 34] at loop 1
[3, 34] is NOT a wall
dealing with [2, 35] at loop 2
dealing with [4, 35] at loop 3
neighbors of b [[3, 36], [3, 34]]
cost from [3, 36] to [3, 35] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
53[3, 36][2, 36]
the points are:  [3, 36] [2, 36]
type for point in is_valid_node  <class 'list'>
[3, 36] 3 36
type for point in is_valid_node  <class 'list'>
[2, 36] 2 36
the point we are trying to find neighbors for  [2, 36]
neighboring cells are:  [[2, 37], [2, 35], [1, 36], [3, 36]]
dealing with [2, 37] at loop 0
dealing with [2, 35] at loop 1
dealing with [1, 36] at loop 2
[1, 36] is NOT a wall
dealing with [3, 36] at loop 3
[3, 36] is NOT a wall
neighbors of b [[1, 36], [3, 36]]
cost from [3, 36] to [2, 36] is 1
<class 'int'>
8 24 32
8 24 32
32 <class 'int'>
8 24 32
[7, 38] (7, 38)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 38] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 38] 7 38
the point we are trying to find neighbors for  [7, 38]
neighboring cells are:  [[7, 39], [7, 37], [6, 38], [8, 38]]
dealing with [7, 39] at loop 0
[7, 39] is NOT a wall
dealing with [7, 37] at loop 1
[7, 37] is NOT a wall
dealing with [6, 38] at loop 2
dealing with [8, 38] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[7, 38][7, 39]
the points are:  [7, 38] [7, 39]
type for point in is_valid_node  <class 'list'>
[7, 38] 7 38
type for point in is_valid_node  <class 'list'>
[7, 39] 7 39
the point we are trying to find neighbors for  [7, 39]
neighboring cells are:  [[7, 40], [7, 38], [6, 39], [8, 39]]
dealing with [7, 40] at loop 0
dealing with [7, 38] at loop 1
[7, 38] is NOT a wall
dealing with [6, 39] at loop 2
[6, 39] is NOT a wall
dealing with [8, 39] at loop 3
neighbors of b [[7, 38], [6, 39]]
cost from [7, 38] to [7, 39] is 1
<class 'int'>
3 27 30
3 27 30
30 <class 'int'>
3 27 30
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[7, 38][7, 37]
the points are:  [7, 38] [7, 37]
type for point in is_valid_node  <class 'list'>
[7, 38] 7 38
type for point in is_valid_node  <class 'list'>
[7, 37] 7 37
the point we are trying to find neighbors for  [7, 37]
neighboring cells are:  [[7, 38], [7, 36], [6, 37], [8, 37]]
dealing with [7, 38] at loop 0
[7, 38] is NOT a wall
dealing with [7, 36] at loop 1
dealing with [6, 37] at loop 2
dealing with [8, 37] at loop 3
[8, 37] is NOT a wall
neighbors of b [[7, 38], [8, 37]]
cost from [7, 38] to [7, 37] is 1
[15, 31] (15, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 31] 15 31
the point we are trying to find neighbors for  [15, 31]
neighboring cells are:  [[15, 32], [15, 30], [14, 31], [16, 31]]
dealing with [15, 32] at loop 0
[15, 32] is NOT a wall
dealing with [15, 30] at loop 1
[15, 30] is NOT a wall
dealing with [14, 31] at loop 2
[14, 31] is NOT a wall
dealing with [16, 31] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[15, 31][15, 32]
the points are:  [15, 31] [15, 32]
type for point in is_valid_node  <class 'list'>
[15, 31] 15 31
type for point in is_valid_node  <class 'list'>
[15, 32] 15 32
the point we are trying to find neighbors for  [15, 32]
neighboring cells are:  [[15, 33], [15, 31], [14, 32], [16, 32]]
dealing with [15, 33] at loop 0
[15, 33] is NOT a wall
dealing with [15, 31] at loop 1
[15, 31] is NOT a wall
dealing with [14, 32] at loop 2
dealing with [16, 32] at loop 3
neighbors of b [[15, 33], [15, 31]]
cost from [15, 31] to [15, 32] is 1
<class 'int'>
5 20 25
5 20 25
25 <class 'int'>
5 20 25
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[15, 31][15, 30]
the points are:  [15, 31] [15, 30]
type for point in is_valid_node  <class 'list'>
[15, 31] 15 31
type for point in is_valid_node  <class 'list'>
[15, 30] 15 30
the point we are trying to find neighbors for  [15, 30]
neighboring cells are:  [[15, 31], [15, 29], [14, 30], [16, 30]]
dealing with [15, 31] at loop 0
[15, 31] is NOT a wall
dealing with [15, 29] at loop 1
[15, 29] is NOT a wall
dealing with [14, 30] at loop 2
dealing with [16, 30] at loop 3
neighbors of b [[15, 31], [15, 29]]
cost from [15, 31] to [15, 30] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[15, 31][14, 31]
the points are:  [15, 31] [14, 31]
type for point in is_valid_node  <class 'list'>
[15, 31] 15 31
type for point in is_valid_node  <class 'list'>
[14, 31] 14 31
the point we are trying to find neighbors for  [14, 31]
neighboring cells are:  [[14, 32], [14, 30], [13, 31], [15, 31]]
dealing with [14, 32] at loop 0
dealing with [14, 30] at loop 1
dealing with [13, 31] at loop 2
[13, 31] is NOT a wall
dealing with [15, 31] at loop 3
[15, 31] is NOT a wall
neighbors of b [[13, 31], [15, 31]]
cost from [15, 31] to [14, 31] is 1
<class 'int'>
4 19 23
4 19 23
23 <class 'int'>
4 19 23
[14, 31] (14, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 31] 14 31
the point we are trying to find neighbors for  [14, 31]
neighboring cells are:  [[14, 32], [14, 30], [13, 31], [15, 31]]
dealing with [14, 32] at loop 0
dealing with [14, 30] at loop 1
dealing with [13, 31] at loop 2
[13, 31] is NOT a wall
dealing with [15, 31] at loop 3
[15, 31] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
61[14, 31][13, 31]
the points are:  [14, 31] [13, 31]
type for point in is_valid_node  <class 'list'>
[14, 31] 14 31
type for point in is_valid_node  <class 'list'>
[13, 31] 13 31
the point we are trying to find neighbors for  [13, 31]
neighboring cells are:  [[13, 32], [13, 30], [12, 31], [14, 31]]
dealing with [13, 32] at loop 0
dealing with [13, 30] at loop 1
dealing with [12, 31] at loop 2
[12, 31] is NOT a wall
dealing with [14, 31] at loop 3
[14, 31] is NOT a wall
neighbors of b [[12, 31], [14, 31]]
cost from [14, 31] to [13, 31] is 1
<class 'int'>
3 19 22
3 19 22
22 <class 'int'>
3 19 22
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
61[14, 31][15, 31]
the points are:  [14, 31] [15, 31]
type for point in is_valid_node  <class 'list'>
[14, 31] 14 31
type for point in is_valid_node  <class 'list'>
[15, 31] 15 31
the point we are trying to find neighbors for  [15, 31]
neighboring cells are:  [[15, 32], [15, 30], [14, 31], [16, 31]]
dealing with [15, 32] at loop 0
[15, 32] is NOT a wall
dealing with [15, 30] at loop 1
[15, 30] is NOT a wall
dealing with [14, 31] at loop 2
[14, 31] is NOT a wall
dealing with [16, 31] at loop 3
neighbors of b [[15, 32], [15, 30], [14, 31]]
cost from [14, 31] to [15, 31] is 1
[13, 31] (13, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 31] 13 31
the point we are trying to find neighbors for  [13, 31]
neighboring cells are:  [[13, 32], [13, 30], [12, 31], [14, 31]]
dealing with [13, 32] at loop 0
dealing with [13, 30] at loop 1
dealing with [12, 31] at loop 2
[12, 31] is NOT a wall
dealing with [14, 31] at loop 3
[14, 31] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
62[13, 31][12, 31]
the points are:  [13, 31] [12, 31]
type for point in is_valid_node  <class 'list'>
[13, 31] 13 31
type for point in is_valid_node  <class 'list'>
[12, 31] 12 31
the point we are trying to find neighbors for  [12, 31]
neighboring cells are:  [[12, 32], [12, 30], [11, 31], [13, 31]]
dealing with [12, 32] at loop 0
dealing with [12, 30] at loop 1
dealing with [11, 31] at loop 2
[11, 31] is NOT a wall
dealing with [13, 31] at loop 3
[13, 31] is NOT a wall
neighbors of b [[11, 31], [13, 31]]
cost from [13, 31] to [12, 31] is 1
<class 'int'>
2 19 21
2 19 21
21 <class 'int'>
2 19 21
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
62[13, 31][14, 31]
the points are:  [13, 31] [14, 31]
type for point in is_valid_node  <class 'list'>
[13, 31] 13 31
type for point in is_valid_node  <class 'list'>
[14, 31] 14 31
the point we are trying to find neighbors for  [14, 31]
neighboring cells are:  [[14, 32], [14, 30], [13, 31], [15, 31]]
dealing with [14, 32] at loop 0
dealing with [14, 30] at loop 1
dealing with [13, 31] at loop 2
[13, 31] is NOT a wall
dealing with [15, 31] at loop 3
[15, 31] is NOT a wall
neighbors of b [[13, 31], [15, 31]]
cost from [13, 31] to [14, 31] is 1
[12, 31] (12, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 31] 12 31
the point we are trying to find neighbors for  [12, 31]
neighboring cells are:  [[12, 32], [12, 30], [11, 31], [13, 31]]
dealing with [12, 32] at loop 0
dealing with [12, 30] at loop 1
dealing with [11, 31] at loop 2
[11, 31] is NOT a wall
dealing with [13, 31] at loop 3
[13, 31] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
63[12, 31][11, 31]
the points are:  [12, 31] [11, 31]
type for point in is_valid_node  <class 'list'>
[12, 31] 12 31
type for point in is_valid_node  <class 'list'>
[11, 31] 11 31
the point we are trying to find neighbors for  [11, 31]
neighboring cells are:  [[11, 32], [11, 30], [10, 31], [12, 31]]
dealing with [11, 32] at loop 0
[11, 32] is NOT a wall
dealing with [11, 30] at loop 1
dealing with [10, 31] at loop 2
dealing with [12, 31] at loop 3
[12, 31] is NOT a wall
neighbors of b [[11, 32], [12, 31]]
cost from [12, 31] to [11, 31] is 1
<class 'int'>
1 19 20
1 19 20
20 <class 'int'>
1 19 20
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
63[12, 31][13, 31]
the points are:  [12, 31] [13, 31]
type for point in is_valid_node  <class 'list'>
[12, 31] 12 31
type for point in is_valid_node  <class 'list'>
[13, 31] 13 31
the point we are trying to find neighbors for  [13, 31]
neighboring cells are:  [[13, 32], [13, 30], [12, 31], [14, 31]]
dealing with [13, 32] at loop 0
dealing with [13, 30] at loop 1
dealing with [12, 31] at loop 2
[12, 31] is NOT a wall
dealing with [14, 31] at loop 3
[14, 31] is NOT a wall
neighbors of b [[12, 31], [14, 31]]
cost from [12, 31] to [13, 31] is 1
[11, 31] (11, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 31] 11 31
the point we are trying to find neighbors for  [11, 31]
neighboring cells are:  [[11, 32], [11, 30], [10, 31], [12, 31]]
dealing with [11, 32] at loop 0
[11, 32] is NOT a wall
dealing with [11, 30] at loop 1
dealing with [10, 31] at loop 2
dealing with [12, 31] at loop 3
[12, 31] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
64[11, 31][11, 32]
the points are:  [11, 31] [11, 32]
type for point in is_valid_node  <class 'list'>
[11, 31] 11 31
type for point in is_valid_node  <class 'list'>
[11, 32] 11 32
the point we are trying to find neighbors for  [11, 32]
neighboring cells are:  [[11, 33], [11, 31], [10, 32], [12, 32]]
dealing with [11, 33] at loop 0
[11, 33] is NOT a wall
dealing with [11, 31] at loop 1
[11, 31] is NOT a wall
dealing with [10, 32] at loop 2
dealing with [12, 32] at loop 3
neighbors of b [[11, 33], [11, 31]]
cost from [11, 31] to [11, 32] is 1
<class 'int'>
1 20 21
1 20 21
21 <class 'int'>
1 20 21
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
64[11, 31][12, 31]
the points are:  [11, 31] [12, 31]
type for point in is_valid_node  <class 'list'>
[11, 31] 11 31
type for point in is_valid_node  <class 'list'>
[12, 31] 12 31
the point we are trying to find neighbors for  [12, 31]
neighboring cells are:  [[12, 32], [12, 30], [11, 31], [13, 31]]
dealing with [12, 32] at loop 0
dealing with [12, 30] at loop 1
dealing with [11, 31] at loop 2
[11, 31] is NOT a wall
dealing with [13, 31] at loop 3
[13, 31] is NOT a wall
neighbors of b [[11, 31], [13, 31]]
cost from [11, 31] to [12, 31] is 1
[17, 31] (17, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 31] 17 31
the point we are trying to find neighbors for  [17, 31]
neighboring cells are:  [[17, 32], [17, 30], [16, 31], [18, 31]]
dealing with [17, 32] at loop 0
[17, 32] is NOT a wall
dealing with [17, 30] at loop 1
[17, 30] is NOT a wall
dealing with [16, 31] at loop 2
dealing with [18, 31] at loop 3
[18, 31] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[17, 31][17, 32]
the points are:  [17, 31] [17, 32]
type for point in is_valid_node  <class 'list'>
[17, 31] 17 31
type for point in is_valid_node  <class 'list'>
[17, 32] 17 32
the point we are trying to find neighbors for  [17, 32]
neighboring cells are:  [[17, 33], [17, 31], [16, 32], [18, 32]]
dealing with [17, 33] at loop 0
[17, 33] is NOT a wall
dealing with [17, 31] at loop 1
[17, 31] is NOT a wall
dealing with [16, 32] at loop 2
dealing with [18, 32] at loop 3
neighbors of b [[17, 33], [17, 31]]
cost from [17, 31] to [17, 32] is 1
<class 'int'>
7 20 27
7 20 27
27 <class 'int'>
7 20 27
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[17, 31][17, 30]
the points are:  [17, 31] [17, 30]
type for point in is_valid_node  <class 'list'>
[17, 31] 17 31
type for point in is_valid_node  <class 'list'>
[17, 30] 17 30
the point we are trying to find neighbors for  [17, 30]
neighboring cells are:  [[17, 31], [17, 29], [16, 30], [18, 30]]
dealing with [17, 31] at loop 0
[17, 31] is NOT a wall
dealing with [17, 29] at loop 1
[17, 29] is NOT a wall
dealing with [16, 30] at loop 2
dealing with [18, 30] at loop 3
neighbors of b [[17, 31], [17, 29]]
cost from [17, 31] to [17, 30] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[17, 31][18, 31]
the points are:  [17, 31] [18, 31]
type for point in is_valid_node  <class 'list'>
[17, 31] 17 31
type for point in is_valid_node  <class 'list'>
[18, 31] 18 31
the point we are trying to find neighbors for  [18, 31]
neighboring cells are:  [[18, 32], [18, 30], [17, 31], [19, 31]]
dealing with [18, 32] at loop 0
dealing with [18, 30] at loop 1
dealing with [17, 31] at loop 2
[17, 31] is NOT a wall
dealing with [19, 31] at loop 3
[19, 31] is NOT a wall
neighbors of b [[17, 31], [19, 31]]
cost from [17, 31] to [18, 31] is 1
<class 'int'>
8 19 27
8 19 27
27 <class 'int'>
8 19 27
[19, 25] (19, 25)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 25] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 25] 19 25
the point we are trying to find neighbors for  [19, 25]
neighboring cells are:  [[19, 26], [19, 24], [18, 25], [20, 25]]
dealing with [19, 26] at loop 0
dealing with [19, 24] at loop 1
dealing with [18, 25] at loop 2
[18, 25] is NOT a wall
dealing with [20, 25] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
62[19, 25][18, 25]
the points are:  [19, 25] [18, 25]
type for point in is_valid_node  <class 'list'>
[19, 25] 19 25
type for point in is_valid_node  <class 'list'>
[18, 25] 18 25
the point we are trying to find neighbors for  [18, 25]
neighboring cells are:  [[18, 26], [18, 24], [17, 25], [19, 25]]
dealing with [18, 26] at loop 0
dealing with [18, 24] at loop 1
dealing with [17, 25] at loop 2
[17, 25] is NOT a wall
dealing with [19, 25] at loop 3
[19, 25] is NOT a wall
neighbors of b [[17, 25], [19, 25]]
cost from [19, 25] to [18, 25] is 1
[1, 33] (1, 33)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 33] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 33] 1 33
the point we are trying to find neighbors for  [1, 33]
neighboring cells are:  [[1, 34], [1, 32], [0, 33], [2, 33]]
dealing with [1, 34] at loop 0
[1, 34] is NOT a wall
dealing with [1, 32] at loop 1
[1, 32] is NOT a wall
dealing with [0, 33] at loop 2
dealing with [2, 33] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[1, 33][1, 34]
the points are:  [1, 33] [1, 34]
type for point in is_valid_node  <class 'list'>
[1, 33] 1 33
type for point in is_valid_node  <class 'list'>
[1, 34] 1 34
the point we are trying to find neighbors for  [1, 34]
neighboring cells are:  [[1, 35], [1, 33], [0, 34], [2, 34]]
dealing with [1, 35] at loop 0
[1, 35] is NOT a wall
dealing with [1, 33] at loop 1
[1, 33] is NOT a wall
dealing with [0, 34] at loop 2
dealing with [2, 34] at loop 3
neighbors of b [[1, 35], [1, 33]]
cost from [1, 33] to [1, 34] is 1
<class 'int'>
9 22 31
9 22 31
31 <class 'int'>
9 22 31
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[1, 33][1, 32]
the points are:  [1, 33] [1, 32]
type for point in is_valid_node  <class 'list'>
[1, 33] 1 33
type for point in is_valid_node  <class 'list'>
[1, 32] 1 32
the point we are trying to find neighbors for  [1, 32]
neighboring cells are:  [[1, 33], [1, 31], [0, 32], [2, 32]]
dealing with [1, 33] at loop 0
[1, 33] is NOT a wall
dealing with [1, 31] at loop 1
[1, 31] is NOT a wall
dealing with [0, 32] at loop 2
dealing with [2, 32] at loop 3
neighbors of b [[1, 33], [1, 31]]
cost from [1, 33] to [1, 32] is 1
[2, 36] (2, 36)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 36] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 36] 2 36
the point we are trying to find neighbors for  [2, 36]
neighboring cells are:  [[2, 37], [2, 35], [1, 36], [3, 36]]
dealing with [2, 37] at loop 0
dealing with [2, 35] at loop 1
dealing with [1, 36] at loop 2
[1, 36] is NOT a wall
dealing with [3, 36] at loop 3
[3, 36] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[2, 36][1, 36]
the points are:  [2, 36] [1, 36]
type for point in is_valid_node  <class 'list'>
[2, 36] 2 36
type for point in is_valid_node  <class 'list'>
[1, 36] 1 36
the point we are trying to find neighbors for  [1, 36]
neighboring cells are:  [[1, 37], [1, 35], [0, 36], [2, 36]]
dealing with [1, 37] at loop 0
[1, 37] is NOT a wall
dealing with [1, 35] at loop 1
[1, 35] is NOT a wall
dealing with [0, 36] at loop 2
dealing with [2, 36] at loop 3
[2, 36] is NOT a wall
neighbors of b [[1, 37], [1, 35], [2, 36]]
cost from [2, 36] to [1, 36] is 1
<class 'int'>
9 24 33
9 24 33
33 <class 'int'>
9 24 33
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[2, 36][3, 36]
the points are:  [2, 36] [3, 36]
type for point in is_valid_node  <class 'list'>
[2, 36] 2 36
type for point in is_valid_node  <class 'list'>
[3, 36] 3 36
the point we are trying to find neighbors for  [3, 36]
neighboring cells are:  [[3, 37], [3, 35], [2, 36], [4, 36]]
dealing with [3, 37] at loop 0
[3, 37] is NOT a wall
dealing with [3, 35] at loop 1
[3, 35] is NOT a wall
dealing with [2, 36] at loop 2
[2, 36] is NOT a wall
dealing with [4, 36] at loop 3
neighbors of b [[3, 37], [3, 35], [2, 36]]
cost from [2, 36] to [3, 36] is 1
[3, 37] (3, 37)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 37] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 37] 3 37
the point we are trying to find neighbors for  [3, 37]
neighboring cells are:  [[3, 38], [3, 36], [2, 37], [4, 37]]
dealing with [3, 38] at loop 0
dealing with [3, 36] at loop 1
[3, 36] is NOT a wall
dealing with [2, 37] at loop 2
dealing with [4, 37] at loop 3
[4, 37] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[3, 37][3, 36]
the points are:  [3, 37] [3, 36]
type for point in is_valid_node  <class 'list'>
[3, 37] 3 37
type for point in is_valid_node  <class 'list'>
[3, 36] 3 36
the point we are trying to find neighbors for  [3, 36]
neighboring cells are:  [[3, 37], [3, 35], [2, 36], [4, 36]]
dealing with [3, 37] at loop 0
[3, 37] is NOT a wall
dealing with [3, 35] at loop 1
[3, 35] is NOT a wall
dealing with [2, 36] at loop 2
[2, 36] is NOT a wall
dealing with [4, 36] at loop 3
neighbors of b [[3, 37], [3, 35], [2, 36]]
cost from [3, 37] to [3, 36] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
54[3, 37][4, 37]
the points are:  [3, 37] [4, 37]
type for point in is_valid_node  <class 'list'>
[3, 37] 3 37
type for point in is_valid_node  <class 'list'>
[4, 37] 4 37
the point we are trying to find neighbors for  [4, 37]
neighboring cells are:  [[4, 38], [4, 36], [3, 37], [5, 37]]
dealing with [4, 38] at loop 0
dealing with [4, 36] at loop 1
dealing with [3, 37] at loop 2
[3, 37] is NOT a wall
dealing with [5, 37] at loop 3
[5, 37] is NOT a wall
neighbors of b [[3, 37], [5, 37]]
cost from [3, 37] to [4, 37] is 1
<class 'int'>
6 25 31
6 25 31
31 <class 'int'>
6 25 31
[4, 37] (4, 37)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 37] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 37] 4 37
the point we are trying to find neighbors for  [4, 37]
neighboring cells are:  [[4, 38], [4, 36], [3, 37], [5, 37]]
dealing with [4, 38] at loop 0
dealing with [4, 36] at loop 1
dealing with [3, 37] at loop 2
[3, 37] is NOT a wall
dealing with [5, 37] at loop 3
[5, 37] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[4, 37][3, 37]
the points are:  [4, 37] [3, 37]
type for point in is_valid_node  <class 'list'>
[4, 37] 4 37
type for point in is_valid_node  <class 'list'>
[3, 37] 3 37
the point we are trying to find neighbors for  [3, 37]
neighboring cells are:  [[3, 38], [3, 36], [2, 37], [4, 37]]
dealing with [3, 38] at loop 0
dealing with [3, 36] at loop 1
[3, 36] is NOT a wall
dealing with [2, 37] at loop 2
dealing with [4, 37] at loop 3
[4, 37] is NOT a wall
neighbors of b [[3, 36], [4, 37]]
cost from [4, 37] to [3, 37] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[4, 37][5, 37]
the points are:  [4, 37] [5, 37]
type for point in is_valid_node  <class 'list'>
[4, 37] 4 37
type for point in is_valid_node  <class 'list'>
[5, 37] 5 37
the point we are trying to find neighbors for  [5, 37]
neighboring cells are:  [[5, 38], [5, 36], [4, 37], [6, 37]]
dealing with [5, 38] at loop 0
dealing with [5, 36] at loop 1
[5, 36] is NOT a wall
dealing with [4, 37] at loop 2
[4, 37] is NOT a wall
dealing with [6, 37] at loop 3
neighbors of b [[5, 36], [4, 37]]
cost from [4, 37] to [5, 37] is 1
<class 'int'>
5 25 30
5 25 30
30 <class 'int'>
5 25 30
[5, 37] (5, 37)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 37] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 37] 5 37
the point we are trying to find neighbors for  [5, 37]
neighboring cells are:  [[5, 38], [5, 36], [4, 37], [6, 37]]
dealing with [5, 38] at loop 0
dealing with [5, 36] at loop 1
[5, 36] is NOT a wall
dealing with [4, 37] at loop 2
[4, 37] is NOT a wall
dealing with [6, 37] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[5, 37][5, 36]
the points are:  [5, 37] [5, 36]
type for point in is_valid_node  <class 'list'>
[5, 37] 5 37
type for point in is_valid_node  <class 'list'>
[5, 36] 5 36
the point we are trying to find neighbors for  [5, 36]
neighboring cells are:  [[5, 37], [5, 35], [4, 36], [6, 36]]
dealing with [5, 37] at loop 0
[5, 37] is NOT a wall
dealing with [5, 35] at loop 1
[5, 35] is NOT a wall
dealing with [4, 36] at loop 2
dealing with [6, 36] at loop 3
neighbors of b [[5, 37], [5, 35]]
cost from [5, 37] to [5, 36] is 1
<class 'int'>
5 24 29
5 24 29
29 <class 'int'>
5 24 29
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[5, 37][4, 37]
the points are:  [5, 37] [4, 37]
type for point in is_valid_node  <class 'list'>
[5, 37] 5 37
type for point in is_valid_node  <class 'list'>
[4, 37] 4 37
the point we are trying to find neighbors for  [4, 37]
neighboring cells are:  [[4, 38], [4, 36], [3, 37], [5, 37]]
dealing with [4, 38] at loop 0
dealing with [4, 36] at loop 1
dealing with [3, 37] at loop 2
[3, 37] is NOT a wall
dealing with [5, 37] at loop 3
[5, 37] is NOT a wall
neighbors of b [[3, 37], [5, 37]]
cost from [5, 37] to [4, 37] is 1
[5, 36] (5, 36)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 36] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 36] 5 36
the point we are trying to find neighbors for  [5, 36]
neighboring cells are:  [[5, 37], [5, 35], [4, 36], [6, 36]]
dealing with [5, 37] at loop 0
[5, 37] is NOT a wall
dealing with [5, 35] at loop 1
[5, 35] is NOT a wall
dealing with [4, 36] at loop 2
dealing with [6, 36] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[5, 36][5, 37]
the points are:  [5, 36] [5, 37]
type for point in is_valid_node  <class 'list'>
[5, 36] 5 36
type for point in is_valid_node  <class 'list'>
[5, 37] 5 37
the point we are trying to find neighbors for  [5, 37]
neighboring cells are:  [[5, 38], [5, 36], [4, 37], [6, 37]]
dealing with [5, 38] at loop 0
dealing with [5, 36] at loop 1
[5, 36] is NOT a wall
dealing with [4, 37] at loop 2
[4, 37] is NOT a wall
dealing with [6, 37] at loop 3
neighbors of b [[5, 36], [4, 37]]
cost from [5, 36] to [5, 37] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[5, 36][5, 35]
the points are:  [5, 36] [5, 35]
type for point in is_valid_node  <class 'list'>
[5, 36] 5 36
type for point in is_valid_node  <class 'list'>
[5, 35] 5 35
the point we are trying to find neighbors for  [5, 35]
neighboring cells are:  [[5, 36], [5, 34], [4, 35], [6, 35]]
dealing with [5, 36] at loop 0
[5, 36] is NOT a wall
dealing with [5, 34] at loop 1
dealing with [4, 35] at loop 2
dealing with [6, 35] at loop 3
[6, 35] is NOT a wall
neighbors of b [[5, 36], [6, 35]]
cost from [5, 36] to [5, 35] is 1
<class 'int'>
5 23 28
5 23 28
28 <class 'int'>
5 23 28
[5, 35] (5, 35)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 35] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 35] 5 35
the point we are trying to find neighbors for  [5, 35]
neighboring cells are:  [[5, 36], [5, 34], [4, 35], [6, 35]]
dealing with [5, 36] at loop 0
[5, 36] is NOT a wall
dealing with [5, 34] at loop 1
dealing with [4, 35] at loop 2
dealing with [6, 35] at loop 3
[6, 35] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[5, 35][5, 36]
the points are:  [5, 35] [5, 36]
type for point in is_valid_node  <class 'list'>
[5, 35] 5 35
type for point in is_valid_node  <class 'list'>
[5, 36] 5 36
the point we are trying to find neighbors for  [5, 36]
neighboring cells are:  [[5, 37], [5, 35], [4, 36], [6, 36]]
dealing with [5, 37] at loop 0
[5, 37] is NOT a wall
dealing with [5, 35] at loop 1
[5, 35] is NOT a wall
dealing with [4, 36] at loop 2
dealing with [6, 36] at loop 3
neighbors of b [[5, 37], [5, 35]]
cost from [5, 35] to [5, 36] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[5, 35][6, 35]
the points are:  [5, 35] [6, 35]
type for point in is_valid_node  <class 'list'>
[5, 35] 5 35
type for point in is_valid_node  <class 'list'>
[6, 35] 6 35
the point we are trying to find neighbors for  [6, 35]
neighboring cells are:  [[6, 36], [6, 34], [5, 35], [7, 35]]
dealing with [6, 36] at loop 0
dealing with [6, 34] at loop 1
dealing with [5, 35] at loop 2
[5, 35] is NOT a wall
dealing with [7, 35] at loop 3
[7, 35] is NOT a wall
neighbors of b [[5, 35], [7, 35]]
cost from [5, 35] to [6, 35] is 1
<class 'int'>
4 23 27
4 23 27
27 <class 'int'>
4 23 27
[6, 35] (6, 35)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 35] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 35] 6 35
the point we are trying to find neighbors for  [6, 35]
neighboring cells are:  [[6, 36], [6, 34], [5, 35], [7, 35]]
dealing with [6, 36] at loop 0
dealing with [6, 34] at loop 1
dealing with [5, 35] at loop 2
[5, 35] is NOT a wall
dealing with [7, 35] at loop 3
[7, 35] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[6, 35][5, 35]
the points are:  [6, 35] [5, 35]
type for point in is_valid_node  <class 'list'>
[6, 35] 6 35
type for point in is_valid_node  <class 'list'>
[5, 35] 5 35
the point we are trying to find neighbors for  [5, 35]
neighboring cells are:  [[5, 36], [5, 34], [4, 35], [6, 35]]
dealing with [5, 36] at loop 0
[5, 36] is NOT a wall
dealing with [5, 34] at loop 1
dealing with [4, 35] at loop 2
dealing with [6, 35] at loop 3
[6, 35] is NOT a wall
neighbors of b [[5, 36], [6, 35]]
cost from [6, 35] to [5, 35] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[6, 35][7, 35]
the points are:  [6, 35] [7, 35]
type for point in is_valid_node  <class 'list'>
[6, 35] 6 35
type for point in is_valid_node  <class 'list'>
[7, 35] 7 35
the point we are trying to find neighbors for  [7, 35]
neighboring cells are:  [[7, 36], [7, 34], [6, 35], [8, 35]]
dealing with [7, 36] at loop 0
dealing with [7, 34] at loop 1
dealing with [6, 35] at loop 2
[6, 35] is NOT a wall
dealing with [8, 35] at loop 3
neighbors of b [[6, 35]]
cost from [6, 35] to [7, 35] is 1
<class 'int'>
3 23 26
3 23 26
26 <class 'int'>
3 23 26
[7, 35] (7, 35)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 35] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 35] 7 35
the point we are trying to find neighbors for  [7, 35]
neighboring cells are:  [[7, 36], [7, 34], [6, 35], [8, 35]]
dealing with [7, 36] at loop 0
dealing with [7, 34] at loop 1
dealing with [6, 35] at loop 2
[6, 35] is NOT a wall
dealing with [8, 35] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[7, 35][6, 35]
the points are:  [7, 35] [6, 35]
type for point in is_valid_node  <class 'list'>
[7, 35] 7 35
type for point in is_valid_node  <class 'list'>
[6, 35] 6 35
the point we are trying to find neighbors for  [6, 35]
neighboring cells are:  [[6, 36], [6, 34], [5, 35], [7, 35]]
dealing with [6, 36] at loop 0
dealing with [6, 34] at loop 1
dealing with [5, 35] at loop 2
[5, 35] is NOT a wall
dealing with [7, 35] at loop 3
[7, 35] is NOT a wall
neighbors of b [[5, 35], [7, 35]]
cost from [7, 35] to [6, 35] is 1
[7, 39] (7, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 39] 7 39
the point we are trying to find neighbors for  [7, 39]
neighboring cells are:  [[7, 40], [7, 38], [6, 39], [8, 39]]
dealing with [7, 40] at loop 0
dealing with [7, 38] at loop 1
[7, 38] is NOT a wall
dealing with [6, 39] at loop 2
[6, 39] is NOT a wall
dealing with [8, 39] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[7, 39][7, 38]
the points are:  [7, 39] [7, 38]
type for point in is_valid_node  <class 'list'>
[7, 39] 7 39
type for point in is_valid_node  <class 'list'>
[7, 38] 7 38
the point we are trying to find neighbors for  [7, 38]
neighboring cells are:  [[7, 39], [7, 37], [6, 38], [8, 38]]
dealing with [7, 39] at loop 0
[7, 39] is NOT a wall
dealing with [7, 37] at loop 1
[7, 37] is NOT a wall
dealing with [6, 38] at loop 2
dealing with [8, 38] at loop 3
neighbors of b [[7, 39], [7, 37]]
cost from [7, 39] to [7, 38] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[7, 39][6, 39]
the points are:  [7, 39] [6, 39]
type for point in is_valid_node  <class 'list'>
[7, 39] 7 39
type for point in is_valid_node  <class 'list'>
[6, 39] 6 39
the point we are trying to find neighbors for  [6, 39]
neighboring cells are:  [[6, 40], [6, 38], [5, 39], [7, 39]]
dealing with [6, 40] at loop 0
dealing with [6, 38] at loop 1
dealing with [5, 39] at loop 2
[5, 39] is NOT a wall
dealing with [7, 39] at loop 3
[7, 39] is NOT a wall
neighbors of b [[5, 39], [7, 39]]
cost from [7, 39] to [6, 39] is 1
<class 'int'>
4 27 31
4 27 31
31 <class 'int'>
4 27 31
[11, 32] (11, 32)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 32] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 32] 11 32
the point we are trying to find neighbors for  [11, 32]
neighboring cells are:  [[11, 33], [11, 31], [10, 32], [12, 32]]
dealing with [11, 33] at loop 0
[11, 33] is NOT a wall
dealing with [11, 31] at loop 1
[11, 31] is NOT a wall
dealing with [10, 32] at loop 2
dealing with [12, 32] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[11, 32][11, 33]
the points are:  [11, 32] [11, 33]
type for point in is_valid_node  <class 'list'>
[11, 32] 11 32
type for point in is_valid_node  <class 'list'>
[11, 33] 11 33
the point we are trying to find neighbors for  [11, 33]
neighboring cells are:  [[11, 34], [11, 32], [10, 33], [12, 33]]
dealing with [11, 34] at loop 0
[11, 34] is NOT a wall
dealing with [11, 32] at loop 1
[11, 32] is NOT a wall
dealing with [10, 33] at loop 2
dealing with [12, 33] at loop 3
[12, 33] is NOT a wall
neighbors of b [[11, 34], [11, 32], [12, 33]]
cost from [11, 32] to [11, 33] is 1
<class 'int'>
1 21 22
1 21 22
22 <class 'int'>
1 21 22
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[11, 32][11, 31]
the points are:  [11, 32] [11, 31]
type for point in is_valid_node  <class 'list'>
[11, 32] 11 32
type for point in is_valid_node  <class 'list'>
[11, 31] 11 31
the point we are trying to find neighbors for  [11, 31]
neighboring cells are:  [[11, 32], [11, 30], [10, 31], [12, 31]]
dealing with [11, 32] at loop 0
[11, 32] is NOT a wall
dealing with [11, 30] at loop 1
dealing with [10, 31] at loop 2
dealing with [12, 31] at loop 3
[12, 31] is NOT a wall
neighbors of b [[11, 32], [12, 31]]
cost from [11, 32] to [11, 31] is 1
[15, 32] (15, 32)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 32] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 32] 15 32
the point we are trying to find neighbors for  [15, 32]
neighboring cells are:  [[15, 33], [15, 31], [14, 32], [16, 32]]
dealing with [15, 33] at loop 0
[15, 33] is NOT a wall
dealing with [15, 31] at loop 1
[15, 31] is NOT a wall
dealing with [14, 32] at loop 2
dealing with [16, 32] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
61[15, 32][15, 33]
the points are:  [15, 32] [15, 33]
type for point in is_valid_node  <class 'list'>
[15, 32] 15 32
type for point in is_valid_node  <class 'list'>
[15, 33] 15 33
the point we are trying to find neighbors for  [15, 33]
neighboring cells are:  [[15, 34], [15, 32], [14, 33], [16, 33]]
dealing with [15, 34] at loop 0
dealing with [15, 32] at loop 1
[15, 32] is NOT a wall
dealing with [14, 33] at loop 2
dealing with [16, 33] at loop 3
neighbors of b [[15, 32]]
cost from [15, 32] to [15, 33] is 1
<class 'int'>
5 21 26
5 21 26
26 <class 'int'>
5 21 26
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
61[15, 32][15, 31]
the points are:  [15, 32] [15, 31]
type for point in is_valid_node  <class 'list'>
[15, 32] 15 32
type for point in is_valid_node  <class 'list'>
[15, 31] 15 31
the point we are trying to find neighbors for  [15, 31]
neighboring cells are:  [[15, 32], [15, 30], [14, 31], [16, 31]]
dealing with [15, 32] at loop 0
[15, 32] is NOT a wall
dealing with [15, 30] at loop 1
[15, 30] is NOT a wall
dealing with [14, 31] at loop 2
[14, 31] is NOT a wall
dealing with [16, 31] at loop 3
neighbors of b [[15, 32], [15, 30], [14, 31]]
cost from [15, 32] to [15, 31] is 1
[17, 32] (17, 32)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 32] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 32] 17 32
the point we are trying to find neighbors for  [17, 32]
neighboring cells are:  [[17, 33], [17, 31], [16, 32], [18, 32]]
dealing with [17, 33] at loop 0
[17, 33] is NOT a wall
dealing with [17, 31] at loop 1
[17, 31] is NOT a wall
dealing with [16, 32] at loop 2
dealing with [18, 32] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[17, 32][17, 33]
the points are:  [17, 32] [17, 33]
type for point in is_valid_node  <class 'list'>
[17, 32] 17 32
type for point in is_valid_node  <class 'list'>
[17, 33] 17 33
the point we are trying to find neighbors for  [17, 33]
neighboring cells are:  [[17, 34], [17, 32], [16, 33], [18, 33]]
dealing with [17, 34] at loop 0
[17, 34] is NOT a wall
dealing with [17, 32] at loop 1
[17, 32] is NOT a wall
dealing with [16, 33] at loop 2
dealing with [18, 33] at loop 3
neighbors of b [[17, 34], [17, 32]]
cost from [17, 32] to [17, 33] is 1
<class 'int'>
7 21 28
7 21 28
28 <class 'int'>
7 21 28
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[17, 32][17, 31]
the points are:  [17, 32] [17, 31]
type for point in is_valid_node  <class 'list'>
[17, 32] 17 32
type for point in is_valid_node  <class 'list'>
[17, 31] 17 31
the point we are trying to find neighbors for  [17, 31]
neighboring cells are:  [[17, 32], [17, 30], [16, 31], [18, 31]]
dealing with [17, 32] at loop 0
[17, 32] is NOT a wall
dealing with [17, 30] at loop 1
[17, 30] is NOT a wall
dealing with [16, 31] at loop 2
dealing with [18, 31] at loop 3
[18, 31] is NOT a wall
neighbors of b [[17, 32], [17, 30], [18, 31]]
cost from [17, 32] to [17, 31] is 1
[18, 31] (18, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 31] 18 31
the point we are trying to find neighbors for  [18, 31]
neighboring cells are:  [[18, 32], [18, 30], [17, 31], [19, 31]]
dealing with [18, 32] at loop 0
dealing with [18, 30] at loop 1
dealing with [17, 31] at loop 2
[17, 31] is NOT a wall
dealing with [19, 31] at loop 3
[19, 31] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[18, 31][17, 31]
the points are:  [18, 31] [17, 31]
type for point in is_valid_node  <class 'list'>
[18, 31] 18 31
type for point in is_valid_node  <class 'list'>
[17, 31] 17 31
the point we are trying to find neighbors for  [17, 31]
neighboring cells are:  [[17, 32], [17, 30], [16, 31], [18, 31]]
dealing with [17, 32] at loop 0
[17, 32] is NOT a wall
dealing with [17, 30] at loop 1
[17, 30] is NOT a wall
dealing with [16, 31] at loop 2
dealing with [18, 31] at loop 3
[18, 31] is NOT a wall
neighbors of b [[17, 32], [17, 30], [18, 31]]
cost from [18, 31] to [17, 31] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[18, 31][19, 31]
the points are:  [18, 31] [19, 31]
type for point in is_valid_node  <class 'list'>
[18, 31] 18 31
type for point in is_valid_node  <class 'list'>
[19, 31] 19 31
the point we are trying to find neighbors for  [19, 31]
neighboring cells are:  [[19, 32], [19, 30], [18, 31], [20, 31]]
dealing with [19, 32] at loop 0
[19, 32] is NOT a wall
dealing with [19, 30] at loop 1
dealing with [18, 31] at loop 2
[18, 31] is NOT a wall
dealing with [20, 31] at loop 3
[20, 31] is NOT a wall
neighbors of b [[19, 32], [18, 31], [20, 31]]
cost from [18, 31] to [19, 31] is 1
<class 'int'>
9 19 28
9 19 28
28 <class 'int'>
9 19 28
[1, 34] (1, 34)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 34] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 34] 1 34
the point we are trying to find neighbors for  [1, 34]
neighboring cells are:  [[1, 35], [1, 33], [0, 34], [2, 34]]
dealing with [1, 35] at loop 0
[1, 35] is NOT a wall
dealing with [1, 33] at loop 1
[1, 33] is NOT a wall
dealing with [0, 34] at loop 2
dealing with [2, 34] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[1, 34][1, 35]
the points are:  [1, 34] [1, 35]
type for point in is_valid_node  <class 'list'>
[1, 34] 1 34
type for point in is_valid_node  <class 'list'>
[1, 35] 1 35
the point we are trying to find neighbors for  [1, 35]
neighboring cells are:  [[1, 36], [1, 34], [0, 35], [2, 35]]
dealing with [1, 36] at loop 0
[1, 36] is NOT a wall
dealing with [1, 34] at loop 1
[1, 34] is NOT a wall
dealing with [0, 35] at loop 2
dealing with [2, 35] at loop 3
neighbors of b [[1, 36], [1, 34]]
cost from [1, 34] to [1, 35] is 1
<class 'int'>
9 23 32
9 23 32
32 <class 'int'>
9 23 32
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[1, 34][1, 33]
the points are:  [1, 34] [1, 33]
type for point in is_valid_node  <class 'list'>
[1, 34] 1 34
type for point in is_valid_node  <class 'list'>
[1, 33] 1 33
the point we are trying to find neighbors for  [1, 33]
neighboring cells are:  [[1, 34], [1, 32], [0, 33], [2, 33]]
dealing with [1, 34] at loop 0
[1, 34] is NOT a wall
dealing with [1, 32] at loop 1
[1, 32] is NOT a wall
dealing with [0, 33] at loop 2
dealing with [2, 33] at loop 3
neighbors of b [[1, 34], [1, 32]]
cost from [1, 34] to [1, 33] is 1
[1, 36] (1, 36)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 36] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 36] 1 36
the point we are trying to find neighbors for  [1, 36]
neighboring cells are:  [[1, 37], [1, 35], [0, 36], [2, 36]]
dealing with [1, 37] at loop 0
[1, 37] is NOT a wall
dealing with [1, 35] at loop 1
[1, 35] is NOT a wall
dealing with [0, 36] at loop 2
dealing with [2, 36] at loop 3
[2, 36] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[1, 36][1, 37]
the points are:  [1, 36] [1, 37]
type for point in is_valid_node  <class 'list'>
[1, 36] 1 36
type for point in is_valid_node  <class 'list'>
[1, 37] 1 37
the point we are trying to find neighbors for  [1, 37]
neighboring cells are:  [[1, 38], [1, 36], [0, 37], [2, 37]]
dealing with [1, 38] at loop 0
[1, 38] is NOT a wall
dealing with [1, 36] at loop 1
[1, 36] is NOT a wall
dealing with [0, 37] at loop 2
dealing with [2, 37] at loop 3
neighbors of b [[1, 38], [1, 36]]
cost from [1, 36] to [1, 37] is 1
<class 'int'>
9 25 34
9 25 34
34 <class 'int'>
9 25 34
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[1, 36][1, 35]
the points are:  [1, 36] [1, 35]
type for point in is_valid_node  <class 'list'>
[1, 36] 1 36
type for point in is_valid_node  <class 'list'>
[1, 35] 1 35
the point we are trying to find neighbors for  [1, 35]
neighboring cells are:  [[1, 36], [1, 34], [0, 35], [2, 35]]
dealing with [1, 36] at loop 0
[1, 36] is NOT a wall
dealing with [1, 34] at loop 1
[1, 34] is NOT a wall
dealing with [0, 35] at loop 2
dealing with [2, 35] at loop 3
neighbors of b [[1, 36], [1, 34]]
cost from [1, 36] to [1, 35] is 1
<class 'int'>
9 23 32
9 23 32
32 <class 'int'>
9 23 32
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
55[1, 36][2, 36]
the points are:  [1, 36] [2, 36]
type for point in is_valid_node  <class 'list'>
[1, 36] 1 36
type for point in is_valid_node  <class 'list'>
[2, 36] 2 36
the point we are trying to find neighbors for  [2, 36]
neighboring cells are:  [[2, 37], [2, 35], [1, 36], [3, 36]]
dealing with [2, 37] at loop 0
dealing with [2, 35] at loop 1
dealing with [1, 36] at loop 2
[1, 36] is NOT a wall
dealing with [3, 36] at loop 3
[3, 36] is NOT a wall
neighbors of b [[1, 36], [3, 36]]
cost from [1, 36] to [2, 36] is 1
[1, 35] (1, 35)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 35] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 35] 1 35
the point we are trying to find neighbors for  [1, 35]
neighboring cells are:  [[1, 36], [1, 34], [0, 35], [2, 35]]
dealing with [1, 36] at loop 0
[1, 36] is NOT a wall
dealing with [1, 34] at loop 1
[1, 34] is NOT a wall
dealing with [0, 35] at loop 2
dealing with [2, 35] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[1, 35][1, 36]
the points are:  [1, 35] [1, 36]
type for point in is_valid_node  <class 'list'>
[1, 35] 1 35
type for point in is_valid_node  <class 'list'>
[1, 36] 1 36
the point we are trying to find neighbors for  [1, 36]
neighboring cells are:  [[1, 37], [1, 35], [0, 36], [2, 36]]
dealing with [1, 37] at loop 0
[1, 37] is NOT a wall
dealing with [1, 35] at loop 1
[1, 35] is NOT a wall
dealing with [0, 36] at loop 2
dealing with [2, 36] at loop 3
[2, 36] is NOT a wall
neighbors of b [[1, 37], [1, 35], [2, 36]]
cost from [1, 35] to [1, 36] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[1, 35][1, 34]
the points are:  [1, 35] [1, 34]
type for point in is_valid_node  <class 'list'>
[1, 35] 1 35
type for point in is_valid_node  <class 'list'>
[1, 34] 1 34
the point we are trying to find neighbors for  [1, 34]
neighboring cells are:  [[1, 35], [1, 33], [0, 34], [2, 34]]
dealing with [1, 35] at loop 0
[1, 35] is NOT a wall
dealing with [1, 33] at loop 1
[1, 33] is NOT a wall
dealing with [0, 34] at loop 2
dealing with [2, 34] at loop 3
neighbors of b [[1, 35], [1, 33]]
cost from [1, 35] to [1, 34] is 1
[6, 39] (6, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 39] 6 39
the point we are trying to find neighbors for  [6, 39]
neighboring cells are:  [[6, 40], [6, 38], [5, 39], [7, 39]]
dealing with [6, 40] at loop 0
dealing with [6, 38] at loop 1
dealing with [5, 39] at loop 2
[5, 39] is NOT a wall
dealing with [7, 39] at loop 3
[7, 39] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[6, 39][5, 39]
the points are:  [6, 39] [5, 39]
type for point in is_valid_node  <class 'list'>
[6, 39] 6 39
type for point in is_valid_node  <class 'list'>
[5, 39] 5 39
the point we are trying to find neighbors for  [5, 39]
neighboring cells are:  [[5, 40], [5, 38], [4, 39], [6, 39]]
dealing with [5, 40] at loop 0
[5, 40] is NOT a wall
dealing with [5, 38] at loop 1
dealing with [4, 39] at loop 2
[4, 39] is NOT a wall
dealing with [6, 39] at loop 3
[6, 39] is NOT a wall
neighbors of b [[5, 40], [4, 39], [6, 39]]
cost from [6, 39] to [5, 39] is 1
<class 'int'>
5 27 32
5 27 32
32 <class 'int'>
5 27 32
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[6, 39][7, 39]
the points are:  [6, 39] [7, 39]
type for point in is_valid_node  <class 'list'>
[6, 39] 6 39
type for point in is_valid_node  <class 'list'>
[7, 39] 7 39
the point we are trying to find neighbors for  [7, 39]
neighboring cells are:  [[7, 40], [7, 38], [6, 39], [8, 39]]
dealing with [7, 40] at loop 0
dealing with [7, 38] at loop 1
[7, 38] is NOT a wall
dealing with [6, 39] at loop 2
[6, 39] is NOT a wall
dealing with [8, 39] at loop 3
neighbors of b [[7, 38], [6, 39]]
cost from [6, 39] to [7, 39] is 1
[11, 33] (11, 33)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 33] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 33] 11 33
the point we are trying to find neighbors for  [11, 33]
neighboring cells are:  [[11, 34], [11, 32], [10, 33], [12, 33]]
dealing with [11, 34] at loop 0
[11, 34] is NOT a wall
dealing with [11, 32] at loop 1
[11, 32] is NOT a wall
dealing with [10, 33] at loop 2
dealing with [12, 33] at loop 3
[12, 33] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[11, 33][11, 34]
the points are:  [11, 33] [11, 34]
type for point in is_valid_node  <class 'list'>
[11, 33] 11 33
type for point in is_valid_node  <class 'list'>
[11, 34] 11 34
the point we are trying to find neighbors for  [11, 34]
neighboring cells are:  [[11, 35], [11, 33], [10, 34], [12, 34]]
dealing with [11, 35] at loop 0
[11, 35] is NOT a wall
dealing with [11, 33] at loop 1
[11, 33] is NOT a wall
dealing with [10, 34] at loop 2
dealing with [12, 34] at loop 3
neighbors of b [[11, 35], [11, 33]]
cost from [11, 33] to [11, 34] is 1
<class 'int'>
1 22 23
1 22 23
23 <class 'int'>
1 22 23
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[11, 33][11, 32]
the points are:  [11, 33] [11, 32]
type for point in is_valid_node  <class 'list'>
[11, 33] 11 33
type for point in is_valid_node  <class 'list'>
[11, 32] 11 32
the point we are trying to find neighbors for  [11, 32]
neighboring cells are:  [[11, 33], [11, 31], [10, 32], [12, 32]]
dealing with [11, 33] at loop 0
[11, 33] is NOT a wall
dealing with [11, 31] at loop 1
[11, 31] is NOT a wall
dealing with [10, 32] at loop 2
dealing with [12, 32] at loop 3
neighbors of b [[11, 33], [11, 31]]
cost from [11, 33] to [11, 32] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[11, 33][12, 33]
the points are:  [11, 33] [12, 33]
type for point in is_valid_node  <class 'list'>
[11, 33] 11 33
type for point in is_valid_node  <class 'list'>
[12, 33] 12 33
the point we are trying to find neighbors for  [12, 33]
neighboring cells are:  [[12, 34], [12, 32], [11, 33], [13, 33]]
dealing with [12, 34] at loop 0
dealing with [12, 32] at loop 1
dealing with [11, 33] at loop 2
[11, 33] is NOT a wall
dealing with [13, 33] at loop 3
[13, 33] is NOT a wall
neighbors of b [[11, 33], [13, 33]]
cost from [11, 33] to [12, 33] is 1
<class 'int'>
2 21 23
2 21 23
23 <class 'int'>
2 21 23
[15, 33] (15, 33)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 33] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 33] 15 33
the point we are trying to find neighbors for  [15, 33]
neighboring cells are:  [[15, 34], [15, 32], [14, 33], [16, 33]]
dealing with [15, 34] at loop 0
dealing with [15, 32] at loop 1
[15, 32] is NOT a wall
dealing with [14, 33] at loop 2
dealing with [16, 33] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
62[15, 33][15, 32]
the points are:  [15, 33] [15, 32]
type for point in is_valid_node  <class 'list'>
[15, 33] 15 33
type for point in is_valid_node  <class 'list'>
[15, 32] 15 32
the point we are trying to find neighbors for  [15, 32]
neighboring cells are:  [[15, 33], [15, 31], [14, 32], [16, 32]]
dealing with [15, 33] at loop 0
[15, 33] is NOT a wall
dealing with [15, 31] at loop 1
[15, 31] is NOT a wall
dealing with [14, 32] at loop 2
dealing with [16, 32] at loop 3
neighbors of b [[15, 33], [15, 31]]
cost from [15, 33] to [15, 32] is 1
[17, 33] (17, 33)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 33] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 33] 17 33
the point we are trying to find neighbors for  [17, 33]
neighboring cells are:  [[17, 34], [17, 32], [16, 33], [18, 33]]
dealing with [17, 34] at loop 0
[17, 34] is NOT a wall
dealing with [17, 32] at loop 1
[17, 32] is NOT a wall
dealing with [16, 33] at loop 2
dealing with [18, 33] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[17, 33][17, 34]
the points are:  [17, 33] [17, 34]
type for point in is_valid_node  <class 'list'>
[17, 33] 17 33
type for point in is_valid_node  <class 'list'>
[17, 34] 17 34
the point we are trying to find neighbors for  [17, 34]
neighboring cells are:  [[17, 35], [17, 33], [16, 34], [18, 34]]
dealing with [17, 35] at loop 0
[17, 35] is NOT a wall
dealing with [17, 33] at loop 1
[17, 33] is NOT a wall
dealing with [16, 34] at loop 2
dealing with [18, 34] at loop 3
neighbors of b [[17, 35], [17, 33]]
cost from [17, 33] to [17, 34] is 1
<class 'int'>
7 22 29
7 22 29
29 <class 'int'>
7 22 29
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[17, 33][17, 32]
the points are:  [17, 33] [17, 32]
type for point in is_valid_node  <class 'list'>
[17, 33] 17 33
type for point in is_valid_node  <class 'list'>
[17, 32] 17 32
the point we are trying to find neighbors for  [17, 32]
neighboring cells are:  [[17, 33], [17, 31], [16, 32], [18, 32]]
dealing with [17, 33] at loop 0
[17, 33] is NOT a wall
dealing with [17, 31] at loop 1
[17, 31] is NOT a wall
dealing with [16, 32] at loop 2
dealing with [18, 32] at loop 3
neighbors of b [[17, 33], [17, 31]]
cost from [17, 33] to [17, 32] is 1
[19, 31] (19, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 31] 19 31
the point we are trying to find neighbors for  [19, 31]
neighboring cells are:  [[19, 32], [19, 30], [18, 31], [20, 31]]
dealing with [19, 32] at loop 0
[19, 32] is NOT a wall
dealing with [19, 30] at loop 1
dealing with [18, 31] at loop 2
[18, 31] is NOT a wall
dealing with [20, 31] at loop 3
[20, 31] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[19, 31][19, 32]
the points are:  [19, 31] [19, 32]
type for point in is_valid_node  <class 'list'>
[19, 31] 19 31
type for point in is_valid_node  <class 'list'>
[19, 32] 19 32
the point we are trying to find neighbors for  [19, 32]
neighboring cells are:  [[19, 33], [19, 31], [18, 32], [20, 32]]
dealing with [19, 33] at loop 0
[19, 33] is NOT a wall
dealing with [19, 31] at loop 1
[19, 31] is NOT a wall
dealing with [18, 32] at loop 2
dealing with [20, 32] at loop 3
neighbors of b [[19, 33], [19, 31]]
cost from [19, 31] to [19, 32] is 1
<class 'int'>
9 20 29
9 20 29
29 <class 'int'>
9 20 29
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[19, 31][18, 31]
the points are:  [19, 31] [18, 31]
type for point in is_valid_node  <class 'list'>
[19, 31] 19 31
type for point in is_valid_node  <class 'list'>
[18, 31] 18 31
the point we are trying to find neighbors for  [18, 31]
neighboring cells are:  [[18, 32], [18, 30], [17, 31], [19, 31]]
dealing with [18, 32] at loop 0
dealing with [18, 30] at loop 1
dealing with [17, 31] at loop 2
[17, 31] is NOT a wall
dealing with [19, 31] at loop 3
[19, 31] is NOT a wall
neighbors of b [[17, 31], [19, 31]]
cost from [19, 31] to [18, 31] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[19, 31][20, 31]
the points are:  [19, 31] [20, 31]
type for point in is_valid_node  <class 'list'>
[19, 31] 19 31
type for point in is_valid_node  <class 'list'>
[20, 31] 20 31
the point we are trying to find neighbors for  [20, 31]
neighboring cells are:  [[20, 32], [20, 30], [19, 31], [21, 31]]
dealing with [20, 32] at loop 0
dealing with [20, 30] at loop 1
dealing with [19, 31] at loop 2
[19, 31] is NOT a wall
dealing with [21, 31] at loop 3
[21, 31] is NOT a wall
neighbors of b [[19, 31], [21, 31]]
cost from [19, 31] to [20, 31] is 1
<class 'int'>
10 19 29
10 19 29
29 <class 'int'>
10 19 29
[1, 35] (1, 35)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 35] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 35] 1 35
the point we are trying to find neighbors for  [1, 35]
neighboring cells are:  [[1, 36], [1, 34], [0, 35], [2, 35]]
dealing with [1, 36] at loop 0
[1, 36] is NOT a wall
dealing with [1, 34] at loop 1
[1, 34] is NOT a wall
dealing with [0, 35] at loop 2
dealing with [2, 35] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[1, 35][1, 36]
the points are:  [1, 35] [1, 36]
type for point in is_valid_node  <class 'list'>
[1, 35] 1 35
type for point in is_valid_node  <class 'list'>
[1, 36] 1 36
the point we are trying to find neighbors for  [1, 36]
neighboring cells are:  [[1, 37], [1, 35], [0, 36], [2, 36]]
dealing with [1, 37] at loop 0
[1, 37] is NOT a wall
dealing with [1, 35] at loop 1
[1, 35] is NOT a wall
dealing with [0, 36] at loop 2
dealing with [2, 36] at loop 3
[2, 36] is NOT a wall
neighbors of b [[1, 37], [1, 35], [2, 36]]
cost from [1, 35] to [1, 36] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[1, 35][1, 34]
the points are:  [1, 35] [1, 34]
type for point in is_valid_node  <class 'list'>
[1, 35] 1 35
type for point in is_valid_node  <class 'list'>
[1, 34] 1 34
the point we are trying to find neighbors for  [1, 34]
neighboring cells are:  [[1, 35], [1, 33], [0, 34], [2, 34]]
dealing with [1, 35] at loop 0
[1, 35] is NOT a wall
dealing with [1, 33] at loop 1
[1, 33] is NOT a wall
dealing with [0, 34] at loop 2
dealing with [2, 34] at loop 3
neighbors of b [[1, 35], [1, 33]]
cost from [1, 35] to [1, 34] is 1
[1, 37] (1, 37)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 37] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 37] 1 37
the point we are trying to find neighbors for  [1, 37]
neighboring cells are:  [[1, 38], [1, 36], [0, 37], [2, 37]]
dealing with [1, 38] at loop 0
[1, 38] is NOT a wall
dealing with [1, 36] at loop 1
[1, 36] is NOT a wall
dealing with [0, 37] at loop 2
dealing with [2, 37] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[1, 37][1, 38]
the points are:  [1, 37] [1, 38]
type for point in is_valid_node  <class 'list'>
[1, 37] 1 37
type for point in is_valid_node  <class 'list'>
[1, 38] 1 38
the point we are trying to find neighbors for  [1, 38]
neighboring cells are:  [[1, 39], [1, 37], [0, 38], [2, 38]]
dealing with [1, 39] at loop 0
[1, 39] is NOT a wall
dealing with [1, 37] at loop 1
[1, 37] is NOT a wall
dealing with [0, 38] at loop 2
dealing with [2, 38] at loop 3
neighbors of b [[1, 39], [1, 37]]
cost from [1, 37] to [1, 38] is 1
<class 'int'>
9 26 35
9 26 35
35 <class 'int'>
9 26 35
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
56[1, 37][1, 36]
the points are:  [1, 37] [1, 36]
type for point in is_valid_node  <class 'list'>
[1, 37] 1 37
type for point in is_valid_node  <class 'list'>
[1, 36] 1 36
the point we are trying to find neighbors for  [1, 36]
neighboring cells are:  [[1, 37], [1, 35], [0, 36], [2, 36]]
dealing with [1, 37] at loop 0
[1, 37] is NOT a wall
dealing with [1, 35] at loop 1
[1, 35] is NOT a wall
dealing with [0, 36] at loop 2
dealing with [2, 36] at loop 3
[2, 36] is NOT a wall
neighbors of b [[1, 37], [1, 35], [2, 36]]
cost from [1, 37] to [1, 36] is 1
[5, 39] (5, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 39] 5 39
the point we are trying to find neighbors for  [5, 39]
neighboring cells are:  [[5, 40], [5, 38], [4, 39], [6, 39]]
dealing with [5, 40] at loop 0
[5, 40] is NOT a wall
dealing with [5, 38] at loop 1
dealing with [4, 39] at loop 2
[4, 39] is NOT a wall
dealing with [6, 39] at loop 3
[6, 39] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[5, 39][5, 40]
the points are:  [5, 39] [5, 40]
type for point in is_valid_node  <class 'list'>
[5, 39] 5 39
type for point in is_valid_node  <class 'list'>
[5, 40] 5 40
the point we are trying to find neighbors for  [5, 40]
neighboring cells are:  [[5, 41], [5, 39], [4, 40], [6, 40]]
dealing with [5, 41] at loop 0
[5, 41] is NOT a wall
dealing with [5, 39] at loop 1
[5, 39] is NOT a wall
dealing with [4, 40] at loop 2
dealing with [6, 40] at loop 3
neighbors of b [[5, 41], [5, 39]]
cost from [5, 39] to [5, 40] is 1
<class 'int'>
5 28 33
5 28 33
33 <class 'int'>
5 28 33
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[5, 39][4, 39]
the points are:  [5, 39] [4, 39]
type for point in is_valid_node  <class 'list'>
[5, 39] 5 39
type for point in is_valid_node  <class 'list'>
[4, 39] 4 39
the point we are trying to find neighbors for  [4, 39]
neighboring cells are:  [[4, 40], [4, 38], [3, 39], [5, 39]]
dealing with [4, 40] at loop 0
dealing with [4, 38] at loop 1
dealing with [3, 39] at loop 2
[3, 39] is NOT a wall
dealing with [5, 39] at loop 3
[5, 39] is NOT a wall
neighbors of b [[3, 39], [5, 39]]
cost from [5, 39] to [4, 39] is 1
<class 'int'>
6 27 33
6 27 33
33 <class 'int'>
6 27 33
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[5, 39][6, 39]
the points are:  [5, 39] [6, 39]
type for point in is_valid_node  <class 'list'>
[5, 39] 5 39
type for point in is_valid_node  <class 'list'>
[6, 39] 6 39
the point we are trying to find neighbors for  [6, 39]
neighboring cells are:  [[6, 40], [6, 38], [5, 39], [7, 39]]
dealing with [6, 40] at loop 0
dealing with [6, 38] at loop 1
dealing with [5, 39] at loop 2
[5, 39] is NOT a wall
dealing with [7, 39] at loop 3
[7, 39] is NOT a wall
neighbors of b [[5, 39], [7, 39]]
cost from [5, 39] to [6, 39] is 1
[11, 34] (11, 34)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 34] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 34] 11 34
the point we are trying to find neighbors for  [11, 34]
neighboring cells are:  [[11, 35], [11, 33], [10, 34], [12, 34]]
dealing with [11, 35] at loop 0
[11, 35] is NOT a wall
dealing with [11, 33] at loop 1
[11, 33] is NOT a wall
dealing with [10, 34] at loop 2
dealing with [12, 34] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[11, 34][11, 35]
the points are:  [11, 34] [11, 35]
type for point in is_valid_node  <class 'list'>
[11, 34] 11 34
type for point in is_valid_node  <class 'list'>
[11, 35] 11 35
the point we are trying to find neighbors for  [11, 35]
neighboring cells are:  [[11, 36], [11, 34], [10, 35], [12, 35]]
dealing with [11, 36] at loop 0
dealing with [11, 34] at loop 1
[11, 34] is NOT a wall
dealing with [10, 35] at loop 2
dealing with [12, 35] at loop 3
neighbors of b [[11, 34]]
cost from [11, 34] to [11, 35] is 1
<class 'int'>
1 23 24
1 23 24
24 <class 'int'>
1 23 24
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[11, 34][11, 33]
the points are:  [11, 34] [11, 33]
type for point in is_valid_node  <class 'list'>
[11, 34] 11 34
type for point in is_valid_node  <class 'list'>
[11, 33] 11 33
the point we are trying to find neighbors for  [11, 33]
neighboring cells are:  [[11, 34], [11, 32], [10, 33], [12, 33]]
dealing with [11, 34] at loop 0
[11, 34] is NOT a wall
dealing with [11, 32] at loop 1
[11, 32] is NOT a wall
dealing with [10, 33] at loop 2
dealing with [12, 33] at loop 3
[12, 33] is NOT a wall
neighbors of b [[11, 34], [11, 32], [12, 33]]
cost from [11, 34] to [11, 33] is 1
[12, 33] (12, 33)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 33] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 33] 12 33
the point we are trying to find neighbors for  [12, 33]
neighboring cells are:  [[12, 34], [12, 32], [11, 33], [13, 33]]
dealing with [12, 34] at loop 0
dealing with [12, 32] at loop 1
dealing with [11, 33] at loop 2
[11, 33] is NOT a wall
dealing with [13, 33] at loop 3
[13, 33] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[12, 33][11, 33]
the points are:  [12, 33] [11, 33]
type for point in is_valid_node  <class 'list'>
[12, 33] 12 33
type for point in is_valid_node  <class 'list'>
[11, 33] 11 33
the point we are trying to find neighbors for  [11, 33]
neighboring cells are:  [[11, 34], [11, 32], [10, 33], [12, 33]]
dealing with [11, 34] at loop 0
[11, 34] is NOT a wall
dealing with [11, 32] at loop 1
[11, 32] is NOT a wall
dealing with [10, 33] at loop 2
dealing with [12, 33] at loop 3
[12, 33] is NOT a wall
neighbors of b [[11, 34], [11, 32], [12, 33]]
cost from [12, 33] to [11, 33] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[12, 33][13, 33]
the points are:  [12, 33] [13, 33]
type for point in is_valid_node  <class 'list'>
[12, 33] 12 33
type for point in is_valid_node  <class 'list'>
[13, 33] 13 33
the point we are trying to find neighbors for  [13, 33]
neighboring cells are:  [[13, 34], [13, 32], [12, 33], [14, 33]]
dealing with [13, 34] at loop 0
[13, 34] is NOT a wall
dealing with [13, 32] at loop 1
dealing with [12, 33] at loop 2
[12, 33] is NOT a wall
dealing with [14, 33] at loop 3
neighbors of b [[13, 34], [12, 33]]
cost from [12, 33] to [13, 33] is 1
<class 'int'>
3 21 24
3 21 24
24 <class 'int'>
3 21 24
[17, 34] (17, 34)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 34] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 34] 17 34
the point we are trying to find neighbors for  [17, 34]
neighboring cells are:  [[17, 35], [17, 33], [16, 34], [18, 34]]
dealing with [17, 35] at loop 0
[17, 35] is NOT a wall
dealing with [17, 33] at loop 1
[17, 33] is NOT a wall
dealing with [16, 34] at loop 2
dealing with [18, 34] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
61[17, 34][17, 35]
the points are:  [17, 34] [17, 35]
type for point in is_valid_node  <class 'list'>
[17, 34] 17 34
type for point in is_valid_node  <class 'list'>
[17, 35] 17 35
the point we are trying to find neighbors for  [17, 35]
neighboring cells are:  [[17, 36], [17, 34], [16, 35], [18, 35]]
dealing with [17, 36] at loop 0
[17, 36] is NOT a wall
dealing with [17, 34] at loop 1
[17, 34] is NOT a wall
dealing with [16, 35] at loop 2
dealing with [18, 35] at loop 3
neighbors of b [[17, 36], [17, 34]]
cost from [17, 34] to [17, 35] is 1
<class 'int'>
7 23 30
7 23 30
30 <class 'int'>
7 23 30
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
61[17, 34][17, 33]
the points are:  [17, 34] [17, 33]
type for point in is_valid_node  <class 'list'>
[17, 34] 17 34
type for point in is_valid_node  <class 'list'>
[17, 33] 17 33
the point we are trying to find neighbors for  [17, 33]
neighboring cells are:  [[17, 34], [17, 32], [16, 33], [18, 33]]
dealing with [17, 34] at loop 0
[17, 34] is NOT a wall
dealing with [17, 32] at loop 1
[17, 32] is NOT a wall
dealing with [16, 33] at loop 2
dealing with [18, 33] at loop 3
neighbors of b [[17, 34], [17, 32]]
cost from [17, 34] to [17, 33] is 1
[19, 32] (19, 32)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 32] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 32] 19 32
the point we are trying to find neighbors for  [19, 32]
neighboring cells are:  [[19, 33], [19, 31], [18, 32], [20, 32]]
dealing with [19, 33] at loop 0
[19, 33] is NOT a wall
dealing with [19, 31] at loop 1
[19, 31] is NOT a wall
dealing with [18, 32] at loop 2
dealing with [20, 32] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
61[19, 32][19, 33]
the points are:  [19, 32] [19, 33]
type for point in is_valid_node  <class 'list'>
[19, 32] 19 32
type for point in is_valid_node  <class 'list'>
[19, 33] 19 33
the point we are trying to find neighbors for  [19, 33]
neighboring cells are:  [[19, 34], [19, 32], [18, 33], [20, 33]]
dealing with [19, 34] at loop 0
[19, 34] is NOT a wall
dealing with [19, 32] at loop 1
[19, 32] is NOT a wall
dealing with [18, 33] at loop 2
dealing with [20, 33] at loop 3
neighbors of b [[19, 34], [19, 32]]
cost from [19, 32] to [19, 33] is 1
<class 'int'>
9 21 30
9 21 30
30 <class 'int'>
9 21 30
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
61[19, 32][19, 31]
the points are:  [19, 32] [19, 31]
type for point in is_valid_node  <class 'list'>
[19, 32] 19 32
type for point in is_valid_node  <class 'list'>
[19, 31] 19 31
the point we are trying to find neighbors for  [19, 31]
neighboring cells are:  [[19, 32], [19, 30], [18, 31], [20, 31]]
dealing with [19, 32] at loop 0
[19, 32] is NOT a wall
dealing with [19, 30] at loop 1
dealing with [18, 31] at loop 2
[18, 31] is NOT a wall
dealing with [20, 31] at loop 3
[20, 31] is NOT a wall
neighbors of b [[19, 32], [18, 31], [20, 31]]
cost from [19, 32] to [19, 31] is 1
[20, 31] (20, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[20, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[20, 31] 20 31
the point we are trying to find neighbors for  [20, 31]
neighboring cells are:  [[20, 32], [20, 30], [19, 31], [21, 31]]
dealing with [20, 32] at loop 0
dealing with [20, 30] at loop 1
dealing with [19, 31] at loop 2
[19, 31] is NOT a wall
dealing with [21, 31] at loop 3
[21, 31] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
61[20, 31][19, 31]
the points are:  [20, 31] [19, 31]
type for point in is_valid_node  <class 'list'>
[20, 31] 20 31
type for point in is_valid_node  <class 'list'>
[19, 31] 19 31
the point we are trying to find neighbors for  [19, 31]
neighboring cells are:  [[19, 32], [19, 30], [18, 31], [20, 31]]
dealing with [19, 32] at loop 0
[19, 32] is NOT a wall
dealing with [19, 30] at loop 1
dealing with [18, 31] at loop 2
[18, 31] is NOT a wall
dealing with [20, 31] at loop 3
[20, 31] is NOT a wall
neighbors of b [[19, 32], [18, 31], [20, 31]]
cost from [20, 31] to [19, 31] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
61[20, 31][21, 31]
the points are:  [20, 31] [21, 31]
type for point in is_valid_node  <class 'list'>
[20, 31] 20 31
type for point in is_valid_node  <class 'list'>
[21, 31] 21 31
the point we are trying to find neighbors for  [21, 31]
neighboring cells are:  [[21, 32], [21, 30], [20, 31], [22, 31]]
dealing with [21, 32] at loop 0
[21, 32] is NOT a wall
dealing with [21, 30] at loop 1
[21, 30] is NOT a wall
dealing with [20, 31] at loop 2
[20, 31] is NOT a wall
dealing with [22, 31] at loop 3
neighbors of b [[21, 32], [21, 30], [20, 31]]
cost from [20, 31] to [21, 31] is 1
<class 'int'>
11 19 30
11 19 30
30 <class 'int'>
11 19 30
[1, 38] (1, 38)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 38] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 38] 1 38
the point we are trying to find neighbors for  [1, 38]
neighboring cells are:  [[1, 39], [1, 37], [0, 38], [2, 38]]
dealing with [1, 39] at loop 0
[1, 39] is NOT a wall
dealing with [1, 37] at loop 1
[1, 37] is NOT a wall
dealing with [0, 38] at loop 2
dealing with [2, 38] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[1, 38][1, 39]
the points are:  [1, 38] [1, 39]
type for point in is_valid_node  <class 'list'>
[1, 38] 1 38
type for point in is_valid_node  <class 'list'>
[1, 39] 1 39
the point we are trying to find neighbors for  [1, 39]
neighboring cells are:  [[1, 40], [1, 38], [0, 39], [2, 39]]
dealing with [1, 40] at loop 0
[1, 40] is NOT a wall
dealing with [1, 38] at loop 1
[1, 38] is NOT a wall
dealing with [0, 39] at loop 2
dealing with [2, 39] at loop 3
[2, 39] is NOT a wall
neighbors of b [[1, 40], [1, 38], [2, 39]]
cost from [1, 38] to [1, 39] is 1
<class 'int'>
9 27 36
9 27 36
36 <class 'int'>
9 27 36
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
57[1, 38][1, 37]
the points are:  [1, 38] [1, 37]
type for point in is_valid_node  <class 'list'>
[1, 38] 1 38
type for point in is_valid_node  <class 'list'>
[1, 37] 1 37
the point we are trying to find neighbors for  [1, 37]
neighboring cells are:  [[1, 38], [1, 36], [0, 37], [2, 37]]
dealing with [1, 38] at loop 0
[1, 38] is NOT a wall
dealing with [1, 36] at loop 1
[1, 36] is NOT a wall
dealing with [0, 37] at loop 2
dealing with [2, 37] at loop 3
neighbors of b [[1, 38], [1, 36]]
cost from [1, 38] to [1, 37] is 1
[4, 39] (4, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 39] 4 39
the point we are trying to find neighbors for  [4, 39]
neighboring cells are:  [[4, 40], [4, 38], [3, 39], [5, 39]]
dealing with [4, 40] at loop 0
dealing with [4, 38] at loop 1
dealing with [3, 39] at loop 2
[3, 39] is NOT a wall
dealing with [5, 39] at loop 3
[5, 39] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[4, 39][3, 39]
the points are:  [4, 39] [3, 39]
type for point in is_valid_node  <class 'list'>
[4, 39] 4 39
type for point in is_valid_node  <class 'list'>
[3, 39] 3 39
the point we are trying to find neighbors for  [3, 39]
neighboring cells are:  [[3, 40], [3, 38], [2, 39], [4, 39]]
dealing with [3, 40] at loop 0
[3, 40] is NOT a wall
dealing with [3, 38] at loop 1
dealing with [2, 39] at loop 2
[2, 39] is NOT a wall
dealing with [4, 39] at loop 3
[4, 39] is NOT a wall
neighbors of b [[3, 40], [2, 39], [4, 39]]
cost from [4, 39] to [3, 39] is 1
<class 'int'>
7 27 34
7 27 34
34 <class 'int'>
7 27 34
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[4, 39][5, 39]
the points are:  [4, 39] [5, 39]
type for point in is_valid_node  <class 'list'>
[4, 39] 4 39
type for point in is_valid_node  <class 'list'>
[5, 39] 5 39
the point we are trying to find neighbors for  [5, 39]
neighboring cells are:  [[5, 40], [5, 38], [4, 39], [6, 39]]
dealing with [5, 40] at loop 0
[5, 40] is NOT a wall
dealing with [5, 38] at loop 1
dealing with [4, 39] at loop 2
[4, 39] is NOT a wall
dealing with [6, 39] at loop 3
[6, 39] is NOT a wall
neighbors of b [[5, 40], [4, 39], [6, 39]]
cost from [4, 39] to [5, 39] is 1
[5, 40] (5, 40)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 40] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 40] 5 40
the point we are trying to find neighbors for  [5, 40]
neighboring cells are:  [[5, 41], [5, 39], [4, 40], [6, 40]]
dealing with [5, 41] at loop 0
[5, 41] is NOT a wall
dealing with [5, 39] at loop 1
[5, 39] is NOT a wall
dealing with [4, 40] at loop 2
dealing with [6, 40] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[5, 40][5, 41]
the points are:  [5, 40] [5, 41]
type for point in is_valid_node  <class 'list'>
[5, 40] 5 40
type for point in is_valid_node  <class 'list'>
[5, 41] 5 41
the point we are trying to find neighbors for  [5, 41]
neighboring cells are:  [[5, 42], [5, 40], [4, 41], [6, 41]]
dealing with [5, 42] at loop 0
dealing with [5, 40] at loop 1
[5, 40] is NOT a wall
dealing with [4, 41] at loop 2
dealing with [6, 41] at loop 3
[6, 41] is NOT a wall
neighbors of b [[5, 40], [6, 41]]
cost from [5, 40] to [5, 41] is 1
<class 'int'>
5 29 34
5 29 34
34 <class 'int'>
5 29 34
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[5, 40][5, 39]
the points are:  [5, 40] [5, 39]
type for point in is_valid_node  <class 'list'>
[5, 40] 5 40
type for point in is_valid_node  <class 'list'>
[5, 39] 5 39
the point we are trying to find neighbors for  [5, 39]
neighboring cells are:  [[5, 40], [5, 38], [4, 39], [6, 39]]
dealing with [5, 40] at loop 0
[5, 40] is NOT a wall
dealing with [5, 38] at loop 1
dealing with [4, 39] at loop 2
[4, 39] is NOT a wall
dealing with [6, 39] at loop 3
[6, 39] is NOT a wall
neighbors of b [[5, 40], [4, 39], [6, 39]]
cost from [5, 40] to [5, 39] is 1
[11, 35] (11, 35)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 35] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 35] 11 35
the point we are trying to find neighbors for  [11, 35]
neighboring cells are:  [[11, 36], [11, 34], [10, 35], [12, 35]]
dealing with [11, 36] at loop 0
dealing with [11, 34] at loop 1
[11, 34] is NOT a wall
dealing with [10, 35] at loop 2
dealing with [12, 35] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[11, 35][11, 34]
the points are:  [11, 35] [11, 34]
type for point in is_valid_node  <class 'list'>
[11, 35] 11 35
type for point in is_valid_node  <class 'list'>
[11, 34] 11 34
the point we are trying to find neighbors for  [11, 34]
neighboring cells are:  [[11, 35], [11, 33], [10, 34], [12, 34]]
dealing with [11, 35] at loop 0
[11, 35] is NOT a wall
dealing with [11, 33] at loop 1
[11, 33] is NOT a wall
dealing with [10, 34] at loop 2
dealing with [12, 34] at loop 3
neighbors of b [[11, 35], [11, 33]]
cost from [11, 35] to [11, 34] is 1
[13, 33] (13, 33)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 33] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 33] 13 33
the point we are trying to find neighbors for  [13, 33]
neighboring cells are:  [[13, 34], [13, 32], [12, 33], [14, 33]]
dealing with [13, 34] at loop 0
[13, 34] is NOT a wall
dealing with [13, 32] at loop 1
dealing with [12, 33] at loop 2
[12, 33] is NOT a wall
dealing with [14, 33] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[13, 33][13, 34]
the points are:  [13, 33] [13, 34]
type for point in is_valid_node  <class 'list'>
[13, 33] 13 33
type for point in is_valid_node  <class 'list'>
[13, 34] 13 34
the point we are trying to find neighbors for  [13, 34]
neighboring cells are:  [[13, 35], [13, 33], [12, 34], [14, 34]]
dealing with [13, 35] at loop 0
[13, 35] is NOT a wall
dealing with [13, 33] at loop 1
[13, 33] is NOT a wall
dealing with [12, 34] at loop 2
dealing with [14, 34] at loop 3
neighbors of b [[13, 35], [13, 33]]
cost from [13, 33] to [13, 34] is 1
<class 'int'>
3 22 25
3 22 25
25 <class 'int'>
3 22 25
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[13, 33][12, 33]
the points are:  [13, 33] [12, 33]
type for point in is_valid_node  <class 'list'>
[13, 33] 13 33
type for point in is_valid_node  <class 'list'>
[12, 33] 12 33
the point we are trying to find neighbors for  [12, 33]
neighboring cells are:  [[12, 34], [12, 32], [11, 33], [13, 33]]
dealing with [12, 34] at loop 0
dealing with [12, 32] at loop 1
dealing with [11, 33] at loop 2
[11, 33] is NOT a wall
dealing with [13, 33] at loop 3
[13, 33] is NOT a wall
neighbors of b [[11, 33], [13, 33]]
cost from [13, 33] to [12, 33] is 1
[17, 35] (17, 35)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 35] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 35] 17 35
the point we are trying to find neighbors for  [17, 35]
neighboring cells are:  [[17, 36], [17, 34], [16, 35], [18, 35]]
dealing with [17, 36] at loop 0
[17, 36] is NOT a wall
dealing with [17, 34] at loop 1
[17, 34] is NOT a wall
dealing with [16, 35] at loop 2
dealing with [18, 35] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
62[17, 35][17, 36]
the points are:  [17, 35] [17, 36]
type for point in is_valid_node  <class 'list'>
[17, 35] 17 35
type for point in is_valid_node  <class 'list'>
[17, 36] 17 36
the point we are trying to find neighbors for  [17, 36]
neighboring cells are:  [[17, 37], [17, 35], [16, 36], [18, 36]]
dealing with [17, 37] at loop 0
[17, 37] is NOT a wall
dealing with [17, 35] at loop 1
[17, 35] is NOT a wall
dealing with [16, 36] at loop 2
dealing with [18, 36] at loop 3
neighbors of b [[17, 37], [17, 35]]
cost from [17, 35] to [17, 36] is 1
<class 'int'>
7 24 31
7 24 31
31 <class 'int'>
7 24 31
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
62[17, 35][17, 34]
the points are:  [17, 35] [17, 34]
type for point in is_valid_node  <class 'list'>
[17, 35] 17 35
type for point in is_valid_node  <class 'list'>
[17, 34] 17 34
the point we are trying to find neighbors for  [17, 34]
neighboring cells are:  [[17, 35], [17, 33], [16, 34], [18, 34]]
dealing with [17, 35] at loop 0
[17, 35] is NOT a wall
dealing with [17, 33] at loop 1
[17, 33] is NOT a wall
dealing with [16, 34] at loop 2
dealing with [18, 34] at loop 3
neighbors of b [[17, 35], [17, 33]]
cost from [17, 35] to [17, 34] is 1
[19, 33] (19, 33)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 33] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 33] 19 33
the point we are trying to find neighbors for  [19, 33]
neighboring cells are:  [[19, 34], [19, 32], [18, 33], [20, 33]]
dealing with [19, 34] at loop 0
[19, 34] is NOT a wall
dealing with [19, 32] at loop 1
[19, 32] is NOT a wall
dealing with [18, 33] at loop 2
dealing with [20, 33] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
62[19, 33][19, 34]
the points are:  [19, 33] [19, 34]
type for point in is_valid_node  <class 'list'>
[19, 33] 19 33
type for point in is_valid_node  <class 'list'>
[19, 34] 19 34
the point we are trying to find neighbors for  [19, 34]
neighboring cells are:  [[19, 35], [19, 33], [18, 34], [20, 34]]
dealing with [19, 35] at loop 0
[19, 35] is NOT a wall
dealing with [19, 33] at loop 1
[19, 33] is NOT a wall
dealing with [18, 34] at loop 2
dealing with [20, 34] at loop 3
neighbors of b [[19, 35], [19, 33]]
cost from [19, 33] to [19, 34] is 1
<class 'int'>
9 22 31
9 22 31
31 <class 'int'>
9 22 31
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
62[19, 33][19, 32]
the points are:  [19, 33] [19, 32]
type for point in is_valid_node  <class 'list'>
[19, 33] 19 33
type for point in is_valid_node  <class 'list'>
[19, 32] 19 32
the point we are trying to find neighbors for  [19, 32]
neighboring cells are:  [[19, 33], [19, 31], [18, 32], [20, 32]]
dealing with [19, 33] at loop 0
[19, 33] is NOT a wall
dealing with [19, 31] at loop 1
[19, 31] is NOT a wall
dealing with [18, 32] at loop 2
dealing with [20, 32] at loop 3
neighbors of b [[19, 33], [19, 31]]
cost from [19, 33] to [19, 32] is 1
[21, 31] (21, 31)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 31] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 31] 21 31
the point we are trying to find neighbors for  [21, 31]
neighboring cells are:  [[21, 32], [21, 30], [20, 31], [22, 31]]
dealing with [21, 32] at loop 0
[21, 32] is NOT a wall
dealing with [21, 30] at loop 1
[21, 30] is NOT a wall
dealing with [20, 31] at loop 2
[20, 31] is NOT a wall
dealing with [22, 31] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
62[21, 31][21, 32]
the points are:  [21, 31] [21, 32]
type for point in is_valid_node  <class 'list'>
[21, 31] 21 31
type for point in is_valid_node  <class 'list'>
[21, 32] 21 32
the point we are trying to find neighbors for  [21, 32]
neighboring cells are:  [[21, 33], [21, 31], [20, 32], [22, 32]]
dealing with [21, 33] at loop 0
[21, 33] is NOT a wall
dealing with [21, 31] at loop 1
[21, 31] is NOT a wall
dealing with [20, 32] at loop 2
dealing with [22, 32] at loop 3
neighbors of b [[21, 33], [21, 31]]
cost from [21, 31] to [21, 32] is 1
<class 'int'>
11 20 31
11 20 31
31 <class 'int'>
11 20 31
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
62[21, 31][21, 30]
the points are:  [21, 31] [21, 30]
type for point in is_valid_node  <class 'list'>
[21, 31] 21 31
type for point in is_valid_node  <class 'list'>
[21, 30] 21 30
the point we are trying to find neighbors for  [21, 30]
neighboring cells are:  [[21, 31], [21, 29], [20, 30], [22, 30]]
dealing with [21, 31] at loop 0
[21, 31] is NOT a wall
dealing with [21, 29] at loop 1
[21, 29] is NOT a wall
dealing with [20, 30] at loop 2
dealing with [22, 30] at loop 3
neighbors of b [[21, 31], [21, 29]]
cost from [21, 31] to [21, 30] is 1
<class 'int'>
11 18 29
11 18 29
29 <class 'int'>
11 18 29
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
62[21, 31][20, 31]
the points are:  [21, 31] [20, 31]
type for point in is_valid_node  <class 'list'>
[21, 31] 21 31
type for point in is_valid_node  <class 'list'>
[20, 31] 20 31
the point we are trying to find neighbors for  [20, 31]
neighboring cells are:  [[20, 32], [20, 30], [19, 31], [21, 31]]
dealing with [20, 32] at loop 0
dealing with [20, 30] at loop 1
dealing with [19, 31] at loop 2
[19, 31] is NOT a wall
dealing with [21, 31] at loop 3
[21, 31] is NOT a wall
neighbors of b [[19, 31], [21, 31]]
cost from [21, 31] to [20, 31] is 1
[21, 30] (21, 30)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 30] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 30] 21 30
the point we are trying to find neighbors for  [21, 30]
neighboring cells are:  [[21, 31], [21, 29], [20, 30], [22, 30]]
dealing with [21, 31] at loop 0
[21, 31] is NOT a wall
dealing with [21, 29] at loop 1
[21, 29] is NOT a wall
dealing with [20, 30] at loop 2
dealing with [22, 30] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
63[21, 30][21, 31]
the points are:  [21, 30] [21, 31]
type for point in is_valid_node  <class 'list'>
[21, 30] 21 30
type for point in is_valid_node  <class 'list'>
[21, 31] 21 31
the point we are trying to find neighbors for  [21, 31]
neighboring cells are:  [[21, 32], [21, 30], [20, 31], [22, 31]]
dealing with [21, 32] at loop 0
[21, 32] is NOT a wall
dealing with [21, 30] at loop 1
[21, 30] is NOT a wall
dealing with [20, 31] at loop 2
[20, 31] is NOT a wall
dealing with [22, 31] at loop 3
neighbors of b [[21, 32], [21, 30], [20, 31]]
cost from [21, 30] to [21, 31] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
63[21, 30][21, 29]
the points are:  [21, 30] [21, 29]
type for point in is_valid_node  <class 'list'>
[21, 30] 21 30
type for point in is_valid_node  <class 'list'>
[21, 29] 21 29
the point we are trying to find neighbors for  [21, 29]
neighboring cells are:  [[21, 30], [21, 28], [20, 29], [22, 29]]
dealing with [21, 30] at loop 0
[21, 30] is NOT a wall
dealing with [21, 28] at loop 1
dealing with [20, 29] at loop 2
dealing with [22, 29] at loop 3
neighbors of b [[21, 30]]
cost from [21, 30] to [21, 29] is 1
<class 'int'>
11 17 28
11 17 28
28 <class 'int'>
11 17 28
[21, 29] (21, 29)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 29] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 29] 21 29
the point we are trying to find neighbors for  [21, 29]
neighboring cells are:  [[21, 30], [21, 28], [20, 29], [22, 29]]
dealing with [21, 30] at loop 0
[21, 30] is NOT a wall
dealing with [21, 28] at loop 1
dealing with [20, 29] at loop 2
dealing with [22, 29] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
64[21, 29][21, 30]
the points are:  [21, 29] [21, 30]
type for point in is_valid_node  <class 'list'>
[21, 29] 21 29
type for point in is_valid_node  <class 'list'>
[21, 30] 21 30
the point we are trying to find neighbors for  [21, 30]
neighboring cells are:  [[21, 31], [21, 29], [20, 30], [22, 30]]
dealing with [21, 31] at loop 0
[21, 31] is NOT a wall
dealing with [21, 29] at loop 1
[21, 29] is NOT a wall
dealing with [20, 30] at loop 2
dealing with [22, 30] at loop 3
neighbors of b [[21, 31], [21, 29]]
cost from [21, 29] to [21, 30] is 1
[1, 39] (1, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 39] 1 39
the point we are trying to find neighbors for  [1, 39]
neighboring cells are:  [[1, 40], [1, 38], [0, 39], [2, 39]]
dealing with [1, 40] at loop 0
[1, 40] is NOT a wall
dealing with [1, 38] at loop 1
[1, 38] is NOT a wall
dealing with [0, 39] at loop 2
dealing with [2, 39] at loop 3
[2, 39] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[1, 39][1, 40]
the points are:  [1, 39] [1, 40]
type for point in is_valid_node  <class 'list'>
[1, 39] 1 39
type for point in is_valid_node  <class 'list'>
[1, 40] 1 40
the point we are trying to find neighbors for  [1, 40]
neighboring cells are:  [[1, 41], [1, 39], [0, 40], [2, 40]]
dealing with [1, 41] at loop 0
[1, 41] is NOT a wall
dealing with [1, 39] at loop 1
[1, 39] is NOT a wall
dealing with [0, 40] at loop 2
dealing with [2, 40] at loop 3
neighbors of b [[1, 41], [1, 39]]
cost from [1, 39] to [1, 40] is 1
<class 'int'>
9 28 37
9 28 37
37 <class 'int'>
9 28 37
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[1, 39][1, 38]
the points are:  [1, 39] [1, 38]
type for point in is_valid_node  <class 'list'>
[1, 39] 1 39
type for point in is_valid_node  <class 'list'>
[1, 38] 1 38
the point we are trying to find neighbors for  [1, 38]
neighboring cells are:  [[1, 39], [1, 37], [0, 38], [2, 38]]
dealing with [1, 39] at loop 0
[1, 39] is NOT a wall
dealing with [1, 37] at loop 1
[1, 37] is NOT a wall
dealing with [0, 38] at loop 2
dealing with [2, 38] at loop 3
neighbors of b [[1, 39], [1, 37]]
cost from [1, 39] to [1, 38] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
58[1, 39][2, 39]
the points are:  [1, 39] [2, 39]
type for point in is_valid_node  <class 'list'>
[1, 39] 1 39
type for point in is_valid_node  <class 'list'>
[2, 39] 2 39
the point we are trying to find neighbors for  [2, 39]
neighboring cells are:  [[2, 40], [2, 38], [1, 39], [3, 39]]
dealing with [2, 40] at loop 0
dealing with [2, 38] at loop 1
dealing with [1, 39] at loop 2
[1, 39] is NOT a wall
dealing with [3, 39] at loop 3
[3, 39] is NOT a wall
neighbors of b [[1, 39], [3, 39]]
cost from [1, 39] to [2, 39] is 1
<class 'int'>
8 27 35
8 27 35
35 <class 'int'>
8 27 35
[2, 39] (2, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 39] 2 39
the point we are trying to find neighbors for  [2, 39]
neighboring cells are:  [[2, 40], [2, 38], [1, 39], [3, 39]]
dealing with [2, 40] at loop 0
dealing with [2, 38] at loop 1
dealing with [1, 39] at loop 2
[1, 39] is NOT a wall
dealing with [3, 39] at loop 3
[3, 39] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[2, 39][1, 39]
the points are:  [2, 39] [1, 39]
type for point in is_valid_node  <class 'list'>
[2, 39] 2 39
type for point in is_valid_node  <class 'list'>
[1, 39] 1 39
the point we are trying to find neighbors for  [1, 39]
neighboring cells are:  [[1, 40], [1, 38], [0, 39], [2, 39]]
dealing with [1, 40] at loop 0
[1, 40] is NOT a wall
dealing with [1, 38] at loop 1
[1, 38] is NOT a wall
dealing with [0, 39] at loop 2
dealing with [2, 39] at loop 3
[2, 39] is NOT a wall
neighbors of b [[1, 40], [1, 38], [2, 39]]
cost from [2, 39] to [1, 39] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[2, 39][3, 39]
the points are:  [2, 39] [3, 39]
type for point in is_valid_node  <class 'list'>
[2, 39] 2 39
type for point in is_valid_node  <class 'list'>
[3, 39] 3 39
the point we are trying to find neighbors for  [3, 39]
neighboring cells are:  [[3, 40], [3, 38], [2, 39], [4, 39]]
dealing with [3, 40] at loop 0
[3, 40] is NOT a wall
dealing with [3, 38] at loop 1
dealing with [2, 39] at loop 2
[2, 39] is NOT a wall
dealing with [4, 39] at loop 3
[4, 39] is NOT a wall
neighbors of b [[3, 40], [2, 39], [4, 39]]
cost from [2, 39] to [3, 39] is 1
[3, 39] (3, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 39] 3 39
the point we are trying to find neighbors for  [3, 39]
neighboring cells are:  [[3, 40], [3, 38], [2, 39], [4, 39]]
dealing with [3, 40] at loop 0
[3, 40] is NOT a wall
dealing with [3, 38] at loop 1
dealing with [2, 39] at loop 2
[2, 39] is NOT a wall
dealing with [4, 39] at loop 3
[4, 39] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[3, 39][3, 40]
the points are:  [3, 39] [3, 40]
type for point in is_valid_node  <class 'list'>
[3, 39] 3 39
type for point in is_valid_node  <class 'list'>
[3, 40] 3 40
the point we are trying to find neighbors for  [3, 40]
neighboring cells are:  [[3, 41], [3, 39], [2, 40], [4, 40]]
dealing with [3, 41] at loop 0
[3, 41] is NOT a wall
dealing with [3, 39] at loop 1
[3, 39] is NOT a wall
dealing with [2, 40] at loop 2
dealing with [4, 40] at loop 3
neighbors of b [[3, 41], [3, 39]]
cost from [3, 39] to [3, 40] is 1
<class 'int'>
7 28 35
7 28 35
35 <class 'int'>
7 28 35
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[3, 39][2, 39]
the points are:  [3, 39] [2, 39]
type for point in is_valid_node  <class 'list'>
[3, 39] 3 39
type for point in is_valid_node  <class 'list'>
[2, 39] 2 39
the point we are trying to find neighbors for  [2, 39]
neighboring cells are:  [[2, 40], [2, 38], [1, 39], [3, 39]]
dealing with [2, 40] at loop 0
dealing with [2, 38] at loop 1
dealing with [1, 39] at loop 2
[1, 39] is NOT a wall
dealing with [3, 39] at loop 3
[3, 39] is NOT a wall
neighbors of b [[1, 39], [3, 39]]
cost from [3, 39] to [2, 39] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[3, 39][4, 39]
the points are:  [3, 39] [4, 39]
type for point in is_valid_node  <class 'list'>
[3, 39] 3 39
type for point in is_valid_node  <class 'list'>
[4, 39] 4 39
the point we are trying to find neighbors for  [4, 39]
neighboring cells are:  [[4, 40], [4, 38], [3, 39], [5, 39]]
dealing with [4, 40] at loop 0
dealing with [4, 38] at loop 1
dealing with [3, 39] at loop 2
[3, 39] is NOT a wall
dealing with [5, 39] at loop 3
[5, 39] is NOT a wall
neighbors of b [[3, 39], [5, 39]]
cost from [3, 39] to [4, 39] is 1
[5, 41] (5, 41)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 41] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 41] 5 41
the point we are trying to find neighbors for  [5, 41]
neighboring cells are:  [[5, 42], [5, 40], [4, 41], [6, 41]]
dealing with [5, 42] at loop 0
dealing with [5, 40] at loop 1
[5, 40] is NOT a wall
dealing with [4, 41] at loop 2
dealing with [6, 41] at loop 3
[6, 41] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[5, 41][5, 40]
the points are:  [5, 41] [5, 40]
type for point in is_valid_node  <class 'list'>
[5, 41] 5 41
type for point in is_valid_node  <class 'list'>
[5, 40] 5 40
the point we are trying to find neighbors for  [5, 40]
neighboring cells are:  [[5, 41], [5, 39], [4, 40], [6, 40]]
dealing with [5, 41] at loop 0
[5, 41] is NOT a wall
dealing with [5, 39] at loop 1
[5, 39] is NOT a wall
dealing with [4, 40] at loop 2
dealing with [6, 40] at loop 3
neighbors of b [[5, 41], [5, 39]]
cost from [5, 41] to [5, 40] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[5, 41][6, 41]
the points are:  [5, 41] [6, 41]
type for point in is_valid_node  <class 'list'>
[5, 41] 5 41
type for point in is_valid_node  <class 'list'>
[6, 41] 6 41
the point we are trying to find neighbors for  [6, 41]
neighboring cells are:  [[6, 42], [6, 40], [5, 41], [7, 41]]
dealing with [6, 42] at loop 0
dealing with [6, 40] at loop 1
dealing with [5, 41] at loop 2
[5, 41] is NOT a wall
dealing with [7, 41] at loop 3
[7, 41] is NOT a wall
neighbors of b [[5, 41], [7, 41]]
cost from [5, 41] to [6, 41] is 1
<class 'int'>
4 29 33
4 29 33
33 <class 'int'>
4 29 33
[6, 41] (6, 41)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 41] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 41] 6 41
the point we are trying to find neighbors for  [6, 41]
neighboring cells are:  [[6, 42], [6, 40], [5, 41], [7, 41]]
dealing with [6, 42] at loop 0
dealing with [6, 40] at loop 1
dealing with [5, 41] at loop 2
[5, 41] is NOT a wall
dealing with [7, 41] at loop 3
[7, 41] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
61[6, 41][5, 41]
the points are:  [6, 41] [5, 41]
type for point in is_valid_node  <class 'list'>
[6, 41] 6 41
type for point in is_valid_node  <class 'list'>
[5, 41] 5 41
the point we are trying to find neighbors for  [5, 41]
neighboring cells are:  [[5, 42], [5, 40], [4, 41], [6, 41]]
dealing with [5, 42] at loop 0
dealing with [5, 40] at loop 1
[5, 40] is NOT a wall
dealing with [4, 41] at loop 2
dealing with [6, 41] at loop 3
[6, 41] is NOT a wall
neighbors of b [[5, 40], [6, 41]]
cost from [6, 41] to [5, 41] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
61[6, 41][7, 41]
the points are:  [6, 41] [7, 41]
type for point in is_valid_node  <class 'list'>
[6, 41] 6 41
type for point in is_valid_node  <class 'list'>
[7, 41] 7 41
the point we are trying to find neighbors for  [7, 41]
neighboring cells are:  [[7, 42], [7, 40], [6, 41], [8, 41]]
dealing with [7, 42] at loop 0
[7, 42] is NOT a wall
dealing with [7, 40] at loop 1
dealing with [6, 41] at loop 2
[6, 41] is NOT a wall
dealing with [8, 41] at loop 3
neighbors of b [[7, 42], [6, 41]]
cost from [6, 41] to [7, 41] is 1
<class 'int'>
3 29 32
3 29 32
32 <class 'int'>
3 29 32
[7, 41] (7, 41)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 41] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 41] 7 41
the point we are trying to find neighbors for  [7, 41]
neighboring cells are:  [[7, 42], [7, 40], [6, 41], [8, 41]]
dealing with [7, 42] at loop 0
[7, 42] is NOT a wall
dealing with [7, 40] at loop 1
dealing with [6, 41] at loop 2
[6, 41] is NOT a wall
dealing with [8, 41] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
62[7, 41][7, 42]
the points are:  [7, 41] [7, 42]
type for point in is_valid_node  <class 'list'>
[7, 41] 7 41
type for point in is_valid_node  <class 'list'>
[7, 42] 7 42
the point we are trying to find neighbors for  [7, 42]
neighboring cells are:  [[7, 43], [7, 41], [6, 42], [8, 42]]
dealing with [7, 43] at loop 0
[7, 43] is NOT a wall
dealing with [7, 41] at loop 1
[7, 41] is NOT a wall
dealing with [6, 42] at loop 2
dealing with [8, 42] at loop 3
neighbors of b [[7, 43], [7, 41]]
cost from [7, 41] to [7, 42] is 1
<class 'int'>
3 30 33
3 30 33
33 <class 'int'>
3 30 33
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
62[7, 41][6, 41]
the points are:  [7, 41] [6, 41]
type for point in is_valid_node  <class 'list'>
[7, 41] 7 41
type for point in is_valid_node  <class 'list'>
[6, 41] 6 41
the point we are trying to find neighbors for  [6, 41]
neighboring cells are:  [[6, 42], [6, 40], [5, 41], [7, 41]]
dealing with [6, 42] at loop 0
dealing with [6, 40] at loop 1
dealing with [5, 41] at loop 2
[5, 41] is NOT a wall
dealing with [7, 41] at loop 3
[7, 41] is NOT a wall
neighbors of b [[5, 41], [7, 41]]
cost from [7, 41] to [6, 41] is 1
[13, 34] (13, 34)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 34] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 34] 13 34
the point we are trying to find neighbors for  [13, 34]
neighboring cells are:  [[13, 35], [13, 33], [12, 34], [14, 34]]
dealing with [13, 35] at loop 0
[13, 35] is NOT a wall
dealing with [13, 33] at loop 1
[13, 33] is NOT a wall
dealing with [12, 34] at loop 2
dealing with [14, 34] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[13, 34][13, 35]
the points are:  [13, 34] [13, 35]
type for point in is_valid_node  <class 'list'>
[13, 34] 13 34
type for point in is_valid_node  <class 'list'>
[13, 35] 13 35
the point we are trying to find neighbors for  [13, 35]
neighboring cells are:  [[13, 36], [13, 34], [12, 35], [14, 35]]
dealing with [13, 36] at loop 0
dealing with [13, 34] at loop 1
[13, 34] is NOT a wall
dealing with [12, 35] at loop 2
dealing with [14, 35] at loop 3
[14, 35] is NOT a wall
neighbors of b [[13, 34], [14, 35]]
cost from [13, 34] to [13, 35] is 1
<class 'int'>
3 23 26
3 23 26
26 <class 'int'>
3 23 26
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[13, 34][13, 33]
the points are:  [13, 34] [13, 33]
type for point in is_valid_node  <class 'list'>
[13, 34] 13 34
type for point in is_valid_node  <class 'list'>
[13, 33] 13 33
the point we are trying to find neighbors for  [13, 33]
neighboring cells are:  [[13, 34], [13, 32], [12, 33], [14, 33]]
dealing with [13, 34] at loop 0
[13, 34] is NOT a wall
dealing with [13, 32] at loop 1
dealing with [12, 33] at loop 2
[12, 33] is NOT a wall
dealing with [14, 33] at loop 3
neighbors of b [[13, 34], [12, 33]]
cost from [13, 34] to [13, 33] is 1
[17, 36] (17, 36)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 36] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 36] 17 36
the point we are trying to find neighbors for  [17, 36]
neighboring cells are:  [[17, 37], [17, 35], [16, 36], [18, 36]]
dealing with [17, 37] at loop 0
[17, 37] is NOT a wall
dealing with [17, 35] at loop 1
[17, 35] is NOT a wall
dealing with [16, 36] at loop 2
dealing with [18, 36] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
63[17, 36][17, 37]
the points are:  [17, 36] [17, 37]
type for point in is_valid_node  <class 'list'>
[17, 36] 17 36
type for point in is_valid_node  <class 'list'>
[17, 37] 17 37
the point we are trying to find neighbors for  [17, 37]
neighboring cells are:  [[17, 38], [17, 36], [16, 37], [18, 37]]
dealing with [17, 38] at loop 0
[17, 38] is NOT a wall
dealing with [17, 36] at loop 1
[17, 36] is NOT a wall
dealing with [16, 37] at loop 2
[16, 37] is NOT a wall
dealing with [18, 37] at loop 3
neighbors of b [[17, 38], [17, 36], [16, 37]]
cost from [17, 36] to [17, 37] is 1
<class 'int'>
7 25 32
7 25 32
32 <class 'int'>
7 25 32
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
63[17, 36][17, 35]
the points are:  [17, 36] [17, 35]
type for point in is_valid_node  <class 'list'>
[17, 36] 17 36
type for point in is_valid_node  <class 'list'>
[17, 35] 17 35
the point we are trying to find neighbors for  [17, 35]
neighboring cells are:  [[17, 36], [17, 34], [16, 35], [18, 35]]
dealing with [17, 36] at loop 0
[17, 36] is NOT a wall
dealing with [17, 34] at loop 1
[17, 34] is NOT a wall
dealing with [16, 35] at loop 2
dealing with [18, 35] at loop 3
neighbors of b [[17, 36], [17, 34]]
cost from [17, 36] to [17, 35] is 1
[19, 34] (19, 34)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 34] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 34] 19 34
the point we are trying to find neighbors for  [19, 34]
neighboring cells are:  [[19, 35], [19, 33], [18, 34], [20, 34]]
dealing with [19, 35] at loop 0
[19, 35] is NOT a wall
dealing with [19, 33] at loop 1
[19, 33] is NOT a wall
dealing with [18, 34] at loop 2
dealing with [20, 34] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
63[19, 34][19, 35]
the points are:  [19, 34] [19, 35]
type for point in is_valid_node  <class 'list'>
[19, 34] 19 34
type for point in is_valid_node  <class 'list'>
[19, 35] 19 35
the point we are trying to find neighbors for  [19, 35]
neighboring cells are:  [[19, 36], [19, 34], [18, 35], [20, 35]]
dealing with [19, 36] at loop 0
[19, 36] is NOT a wall
dealing with [19, 34] at loop 1
[19, 34] is NOT a wall
dealing with [18, 35] at loop 2
dealing with [20, 35] at loop 3
neighbors of b [[19, 36], [19, 34]]
cost from [19, 34] to [19, 35] is 1
<class 'int'>
9 23 32
9 23 32
32 <class 'int'>
9 23 32
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
63[19, 34][19, 33]
the points are:  [19, 34] [19, 33]
type for point in is_valid_node  <class 'list'>
[19, 34] 19 34
type for point in is_valid_node  <class 'list'>
[19, 33] 19 33
the point we are trying to find neighbors for  [19, 33]
neighboring cells are:  [[19, 34], [19, 32], [18, 33], [20, 33]]
dealing with [19, 34] at loop 0
[19, 34] is NOT a wall
dealing with [19, 32] at loop 1
[19, 32] is NOT a wall
dealing with [18, 33] at loop 2
dealing with [20, 33] at loop 3
neighbors of b [[19, 34], [19, 32]]
cost from [19, 34] to [19, 33] is 1
[21, 32] (21, 32)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 32] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 32] 21 32
the point we are trying to find neighbors for  [21, 32]
neighboring cells are:  [[21, 33], [21, 31], [20, 32], [22, 32]]
dealing with [21, 33] at loop 0
[21, 33] is NOT a wall
dealing with [21, 31] at loop 1
[21, 31] is NOT a wall
dealing with [20, 32] at loop 2
dealing with [22, 32] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
63[21, 32][21, 33]
the points are:  [21, 32] [21, 33]
type for point in is_valid_node  <class 'list'>
[21, 32] 21 32
type for point in is_valid_node  <class 'list'>
[21, 33] 21 33
the point we are trying to find neighbors for  [21, 33]
neighboring cells are:  [[21, 34], [21, 32], [20, 33], [22, 33]]
dealing with [21, 34] at loop 0
[21, 34] is NOT a wall
dealing with [21, 32] at loop 1
[21, 32] is NOT a wall
dealing with [20, 33] at loop 2
dealing with [22, 33] at loop 3
neighbors of b [[21, 34], [21, 32]]
cost from [21, 32] to [21, 33] is 1
<class 'int'>
11 21 32
11 21 32
32 <class 'int'>
11 21 32
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
63[21, 32][21, 31]
the points are:  [21, 32] [21, 31]
type for point in is_valid_node  <class 'list'>
[21, 32] 21 32
type for point in is_valid_node  <class 'list'>
[21, 31] 21 31
the point we are trying to find neighbors for  [21, 31]
neighboring cells are:  [[21, 32], [21, 30], [20, 31], [22, 31]]
dealing with [21, 32] at loop 0
[21, 32] is NOT a wall
dealing with [21, 30] at loop 1
[21, 30] is NOT a wall
dealing with [20, 31] at loop 2
[20, 31] is NOT a wall
dealing with [22, 31] at loop 3
neighbors of b [[21, 32], [21, 30], [20, 31]]
cost from [21, 32] to [21, 31] is 1
[1, 40] (1, 40)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 40] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 40] 1 40
the point we are trying to find neighbors for  [1, 40]
neighboring cells are:  [[1, 41], [1, 39], [0, 40], [2, 40]]
dealing with [1, 41] at loop 0
[1, 41] is NOT a wall
dealing with [1, 39] at loop 1
[1, 39] is NOT a wall
dealing with [0, 40] at loop 2
dealing with [2, 40] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[1, 40][1, 41]
the points are:  [1, 40] [1, 41]
type for point in is_valid_node  <class 'list'>
[1, 40] 1 40
type for point in is_valid_node  <class 'list'>
[1, 41] 1 41
the point we are trying to find neighbors for  [1, 41]
neighboring cells are:  [[1, 42], [1, 40], [0, 41], [2, 41]]
dealing with [1, 42] at loop 0
dealing with [1, 40] at loop 1
[1, 40] is NOT a wall
dealing with [0, 41] at loop 2
dealing with [2, 41] at loop 3
neighbors of b [[1, 40]]
cost from [1, 40] to [1, 41] is 1
<class 'int'>
9 29 38
9 29 38
38 <class 'int'>
9 29 38
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
59[1, 40][1, 39]
the points are:  [1, 40] [1, 39]
type for point in is_valid_node  <class 'list'>
[1, 40] 1 40
type for point in is_valid_node  <class 'list'>
[1, 39] 1 39
the point we are trying to find neighbors for  [1, 39]
neighboring cells are:  [[1, 40], [1, 38], [0, 39], [2, 39]]
dealing with [1, 40] at loop 0
[1, 40] is NOT a wall
dealing with [1, 38] at loop 1
[1, 38] is NOT a wall
dealing with [0, 39] at loop 2
dealing with [2, 39] at loop 3
[2, 39] is NOT a wall
neighbors of b [[1, 40], [1, 38], [2, 39]]
cost from [1, 40] to [1, 39] is 1
[3, 40] (3, 40)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 40] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 40] 3 40
the point we are trying to find neighbors for  [3, 40]
neighboring cells are:  [[3, 41], [3, 39], [2, 40], [4, 40]]
dealing with [3, 41] at loop 0
[3, 41] is NOT a wall
dealing with [3, 39] at loop 1
[3, 39] is NOT a wall
dealing with [2, 40] at loop 2
dealing with [4, 40] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
61[3, 40][3, 41]
the points are:  [3, 40] [3, 41]
type for point in is_valid_node  <class 'list'>
[3, 40] 3 40
type for point in is_valid_node  <class 'list'>
[3, 41] 3 41
the point we are trying to find neighbors for  [3, 41]
neighboring cells are:  [[3, 42], [3, 40], [2, 41], [4, 41]]
dealing with [3, 42] at loop 0
[3, 42] is NOT a wall
dealing with [3, 40] at loop 1
[3, 40] is NOT a wall
dealing with [2, 41] at loop 2
dealing with [4, 41] at loop 3
neighbors of b [[3, 42], [3, 40]]
cost from [3, 40] to [3, 41] is 1
<class 'int'>
7 29 36
7 29 36
36 <class 'int'>
7 29 36
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
61[3, 40][3, 39]
the points are:  [3, 40] [3, 39]
type for point in is_valid_node  <class 'list'>
[3, 40] 3 40
type for point in is_valid_node  <class 'list'>
[3, 39] 3 39
the point we are trying to find neighbors for  [3, 39]
neighboring cells are:  [[3, 40], [3, 38], [2, 39], [4, 39]]
dealing with [3, 40] at loop 0
[3, 40] is NOT a wall
dealing with [3, 38] at loop 1
dealing with [2, 39] at loop 2
[2, 39] is NOT a wall
dealing with [4, 39] at loop 3
[4, 39] is NOT a wall
neighbors of b [[3, 40], [2, 39], [4, 39]]
cost from [3, 40] to [3, 39] is 1
[7, 42] (7, 42)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 42] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 42] 7 42
the point we are trying to find neighbors for  [7, 42]
neighboring cells are:  [[7, 43], [7, 41], [6, 42], [8, 42]]
dealing with [7, 43] at loop 0
[7, 43] is NOT a wall
dealing with [7, 41] at loop 1
[7, 41] is NOT a wall
dealing with [6, 42] at loop 2
dealing with [8, 42] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
63[7, 42][7, 43]
the points are:  [7, 42] [7, 43]
type for point in is_valid_node  <class 'list'>
[7, 42] 7 42
type for point in is_valid_node  <class 'list'>
[7, 43] 7 43
the point we are trying to find neighbors for  [7, 43]
neighboring cells are:  [[7, 44], [7, 42], [6, 43], [8, 43]]
dealing with [7, 44] at loop 0
[7, 44] is NOT a wall
dealing with [7, 42] at loop 1
[7, 42] is NOT a wall
dealing with [6, 43] at loop 2
dealing with [8, 43] at loop 3
neighbors of b [[7, 44], [7, 42]]
cost from [7, 42] to [7, 43] is 1
<class 'int'>
3 31 34
3 31 34
34 <class 'int'>
3 31 34
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
63[7, 42][7, 41]
the points are:  [7, 42] [7, 41]
type for point in is_valid_node  <class 'list'>
[7, 42] 7 42
type for point in is_valid_node  <class 'list'>
[7, 41] 7 41
the point we are trying to find neighbors for  [7, 41]
neighboring cells are:  [[7, 42], [7, 40], [6, 41], [8, 41]]
dealing with [7, 42] at loop 0
[7, 42] is NOT a wall
dealing with [7, 40] at loop 1
dealing with [6, 41] at loop 2
[6, 41] is NOT a wall
dealing with [8, 41] at loop 3
neighbors of b [[7, 42], [6, 41]]
cost from [7, 42] to [7, 41] is 1
[13, 35] (13, 35)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 35] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 35] 13 35
the point we are trying to find neighbors for  [13, 35]
neighboring cells are:  [[13, 36], [13, 34], [12, 35], [14, 35]]
dealing with [13, 36] at loop 0
dealing with [13, 34] at loop 1
[13, 34] is NOT a wall
dealing with [12, 35] at loop 2
dealing with [14, 35] at loop 3
[14, 35] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[13, 35][13, 34]
the points are:  [13, 35] [13, 34]
type for point in is_valid_node  <class 'list'>
[13, 35] 13 35
type for point in is_valid_node  <class 'list'>
[13, 34] 13 34
the point we are trying to find neighbors for  [13, 34]
neighboring cells are:  [[13, 35], [13, 33], [12, 34], [14, 34]]
dealing with [13, 35] at loop 0
[13, 35] is NOT a wall
dealing with [13, 33] at loop 1
[13, 33] is NOT a wall
dealing with [12, 34] at loop 2
dealing with [14, 34] at loop 3
neighbors of b [[13, 35], [13, 33]]
cost from [13, 35] to [13, 34] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[13, 35][14, 35]
the points are:  [13, 35] [14, 35]
type for point in is_valid_node  <class 'list'>
[13, 35] 13 35
type for point in is_valid_node  <class 'list'>
[14, 35] 14 35
the point we are trying to find neighbors for  [14, 35]
neighboring cells are:  [[14, 36], [14, 34], [13, 35], [15, 35]]
dealing with [14, 36] at loop 0
dealing with [14, 34] at loop 1
dealing with [13, 35] at loop 2
[13, 35] is NOT a wall
dealing with [15, 35] at loop 3
[15, 35] is NOT a wall
neighbors of b [[13, 35], [15, 35]]
cost from [13, 35] to [14, 35] is 1
<class 'int'>
4 23 27
4 23 27
27 <class 'int'>
4 23 27
[17, 37] (17, 37)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 37] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 37] 17 37
the point we are trying to find neighbors for  [17, 37]
neighboring cells are:  [[17, 38], [17, 36], [16, 37], [18, 37]]
dealing with [17, 38] at loop 0
[17, 38] is NOT a wall
dealing with [17, 36] at loop 1
[17, 36] is NOT a wall
dealing with [16, 37] at loop 2
[16, 37] is NOT a wall
dealing with [18, 37] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
64[17, 37][17, 38]
the points are:  [17, 37] [17, 38]
type for point in is_valid_node  <class 'list'>
[17, 37] 17 37
type for point in is_valid_node  <class 'list'>
[17, 38] 17 38
the point we are trying to find neighbors for  [17, 38]
neighboring cells are:  [[17, 39], [17, 37], [16, 38], [18, 38]]
dealing with [17, 39] at loop 0
[17, 39] is NOT a wall
dealing with [17, 37] at loop 1
[17, 37] is NOT a wall
dealing with [16, 38] at loop 2
dealing with [18, 38] at loop 3
[18, 38] is NOT a wall
neighbors of b [[17, 39], [17, 37], [18, 38]]
cost from [17, 37] to [17, 38] is 1
<class 'int'>
7 26 33
7 26 33
33 <class 'int'>
7 26 33
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
64[17, 37][17, 36]
the points are:  [17, 37] [17, 36]
type for point in is_valid_node  <class 'list'>
[17, 37] 17 37
type for point in is_valid_node  <class 'list'>
[17, 36] 17 36
the point we are trying to find neighbors for  [17, 36]
neighboring cells are:  [[17, 37], [17, 35], [16, 36], [18, 36]]
dealing with [17, 37] at loop 0
[17, 37] is NOT a wall
dealing with [17, 35] at loop 1
[17, 35] is NOT a wall
dealing with [16, 36] at loop 2
dealing with [18, 36] at loop 3
neighbors of b [[17, 37], [17, 35]]
cost from [17, 37] to [17, 36] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
64[17, 37][16, 37]
the points are:  [17, 37] [16, 37]
type for point in is_valid_node  <class 'list'>
[17, 37] 17 37
type for point in is_valid_node  <class 'list'>
[16, 37] 16 37
the point we are trying to find neighbors for  [16, 37]
neighboring cells are:  [[16, 38], [16, 36], [15, 37], [17, 37]]
dealing with [16, 38] at loop 0
dealing with [16, 36] at loop 1
dealing with [15, 37] at loop 2
[15, 37] is NOT a wall
dealing with [17, 37] at loop 3
[17, 37] is NOT a wall
neighbors of b [[15, 37], [17, 37]]
cost from [17, 37] to [16, 37] is 1
<class 'int'>
6 25 31
6 25 31
31 <class 'int'>
6 25 31
[16, 37] (16, 37)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 37] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 37] 16 37
the point we are trying to find neighbors for  [16, 37]
neighboring cells are:  [[16, 38], [16, 36], [15, 37], [17, 37]]
dealing with [16, 38] at loop 0
dealing with [16, 36] at loop 1
dealing with [15, 37] at loop 2
[15, 37] is NOT a wall
dealing with [17, 37] at loop 3
[17, 37] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[16, 37][15, 37]
the points are:  [16, 37] [15, 37]
type for point in is_valid_node  <class 'list'>
[16, 37] 16 37
type for point in is_valid_node  <class 'list'>
[15, 37] 15 37
the point we are trying to find neighbors for  [15, 37]
neighboring cells are:  [[15, 38], [15, 36], [14, 37], [16, 37]]
dealing with [15, 38] at loop 0
dealing with [15, 36] at loop 1
[15, 36] is NOT a wall
dealing with [14, 37] at loop 2
[14, 37] is NOT a wall
dealing with [16, 37] at loop 3
[16, 37] is NOT a wall
neighbors of b [[15, 36], [14, 37], [16, 37]]
cost from [16, 37] to [15, 37] is 1
<class 'int'>
5 25 30
5 25 30
30 <class 'int'>
5 25 30
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[16, 37][17, 37]
the points are:  [16, 37] [17, 37]
type for point in is_valid_node  <class 'list'>
[16, 37] 16 37
type for point in is_valid_node  <class 'list'>
[17, 37] 17 37
the point we are trying to find neighbors for  [17, 37]
neighboring cells are:  [[17, 38], [17, 36], [16, 37], [18, 37]]
dealing with [17, 38] at loop 0
[17, 38] is NOT a wall
dealing with [17, 36] at loop 1
[17, 36] is NOT a wall
dealing with [16, 37] at loop 2
[16, 37] is NOT a wall
dealing with [18, 37] at loop 3
neighbors of b [[17, 38], [17, 36], [16, 37]]
cost from [16, 37] to [17, 37] is 1
[15, 37] (15, 37)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 37] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 37] 15 37
the point we are trying to find neighbors for  [15, 37]
neighboring cells are:  [[15, 38], [15, 36], [14, 37], [16, 37]]
dealing with [15, 38] at loop 0
dealing with [15, 36] at loop 1
[15, 36] is NOT a wall
dealing with [14, 37] at loop 2
[14, 37] is NOT a wall
dealing with [16, 37] at loop 3
[16, 37] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[15, 37][15, 36]
the points are:  [15, 37] [15, 36]
type for point in is_valid_node  <class 'list'>
[15, 37] 15 37
type for point in is_valid_node  <class 'list'>
[15, 36] 15 36
the point we are trying to find neighbors for  [15, 36]
neighboring cells are:  [[15, 37], [15, 35], [14, 36], [16, 36]]
dealing with [15, 37] at loop 0
[15, 37] is NOT a wall
dealing with [15, 35] at loop 1
[15, 35] is NOT a wall
dealing with [14, 36] at loop 2
dealing with [16, 36] at loop 3
neighbors of b [[15, 37], [15, 35]]
cost from [15, 37] to [15, 36] is 1
<class 'int'>
5 24 29
5 24 29
29 <class 'int'>
5 24 29
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[15, 37][14, 37]
the points are:  [15, 37] [14, 37]
type for point in is_valid_node  <class 'list'>
[15, 37] 15 37
type for point in is_valid_node  <class 'list'>
[14, 37] 14 37
the point we are trying to find neighbors for  [14, 37]
neighboring cells are:  [[14, 38], [14, 36], [13, 37], [15, 37]]
dealing with [14, 38] at loop 0
dealing with [14, 36] at loop 1
dealing with [13, 37] at loop 2
[13, 37] is NOT a wall
dealing with [15, 37] at loop 3
[15, 37] is NOT a wall
neighbors of b [[13, 37], [15, 37]]
cost from [15, 37] to [14, 37] is 1
<class 'int'>
4 25 29
4 25 29
29 <class 'int'>
4 25 29
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[15, 37][16, 37]
the points are:  [15, 37] [16, 37]
type for point in is_valid_node  <class 'list'>
[15, 37] 15 37
type for point in is_valid_node  <class 'list'>
[16, 37] 16 37
the point we are trying to find neighbors for  [16, 37]
neighboring cells are:  [[16, 38], [16, 36], [15, 37], [17, 37]]
dealing with [16, 38] at loop 0
dealing with [16, 36] at loop 1
dealing with [15, 37] at loop 2
[15, 37] is NOT a wall
dealing with [17, 37] at loop 3
[17, 37] is NOT a wall
neighbors of b [[15, 37], [17, 37]]
cost from [15, 37] to [16, 37] is 1
[14, 37] (14, 37)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 37] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 37] 14 37
the point we are trying to find neighbors for  [14, 37]
neighboring cells are:  [[14, 38], [14, 36], [13, 37], [15, 37]]
dealing with [14, 38] at loop 0
dealing with [14, 36] at loop 1
dealing with [13, 37] at loop 2
[13, 37] is NOT a wall
dealing with [15, 37] at loop 3
[15, 37] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[14, 37][13, 37]
the points are:  [14, 37] [13, 37]
type for point in is_valid_node  <class 'list'>
[14, 37] 14 37
type for point in is_valid_node  <class 'list'>
[13, 37] 13 37
the point we are trying to find neighbors for  [13, 37]
neighboring cells are:  [[13, 38], [13, 36], [12, 37], [14, 37]]
dealing with [13, 38] at loop 0
dealing with [13, 36] at loop 1
dealing with [12, 37] at loop 2
[12, 37] is NOT a wall
dealing with [14, 37] at loop 3
[14, 37] is NOT a wall
neighbors of b [[12, 37], [14, 37]]
cost from [14, 37] to [13, 37] is 1
<class 'int'>
3 25 28
3 25 28
28 <class 'int'>
3 25 28
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[14, 37][15, 37]
the points are:  [14, 37] [15, 37]
type for point in is_valid_node  <class 'list'>
[14, 37] 14 37
type for point in is_valid_node  <class 'list'>
[15, 37] 15 37
the point we are trying to find neighbors for  [15, 37]
neighboring cells are:  [[15, 38], [15, 36], [14, 37], [16, 37]]
dealing with [15, 38] at loop 0
dealing with [15, 36] at loop 1
[15, 36] is NOT a wall
dealing with [14, 37] at loop 2
[14, 37] is NOT a wall
dealing with [16, 37] at loop 3
[16, 37] is NOT a wall
neighbors of b [[15, 36], [14, 37], [16, 37]]
cost from [14, 37] to [15, 37] is 1
[13, 37] (13, 37)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 37] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 37] 13 37
the point we are trying to find neighbors for  [13, 37]
neighboring cells are:  [[13, 38], [13, 36], [12, 37], [14, 37]]
dealing with [13, 38] at loop 0
dealing with [13, 36] at loop 1
dealing with [12, 37] at loop 2
[12, 37] is NOT a wall
dealing with [14, 37] at loop 3
[14, 37] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[13, 37][12, 37]
the points are:  [13, 37] [12, 37]
type for point in is_valid_node  <class 'list'>
[13, 37] 13 37
type for point in is_valid_node  <class 'list'>
[12, 37] 12 37
the point we are trying to find neighbors for  [12, 37]
neighboring cells are:  [[12, 38], [12, 36], [11, 37], [13, 37]]
dealing with [12, 38] at loop 0
dealing with [12, 36] at loop 1
dealing with [11, 37] at loop 2
[11, 37] is NOT a wall
dealing with [13, 37] at loop 3
[13, 37] is NOT a wall
neighbors of b [[11, 37], [13, 37]]
cost from [13, 37] to [12, 37] is 1
<class 'int'>
2 25 27
2 25 27
27 <class 'int'>
2 25 27
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[13, 37][14, 37]
the points are:  [13, 37] [14, 37]
type for point in is_valid_node  <class 'list'>
[13, 37] 13 37
type for point in is_valid_node  <class 'list'>
[14, 37] 14 37
the point we are trying to find neighbors for  [14, 37]
neighboring cells are:  [[14, 38], [14, 36], [13, 37], [15, 37]]
dealing with [14, 38] at loop 0
dealing with [14, 36] at loop 1
dealing with [13, 37] at loop 2
[13, 37] is NOT a wall
dealing with [15, 37] at loop 3
[15, 37] is NOT a wall
neighbors of b [[13, 37], [15, 37]]
cost from [13, 37] to [14, 37] is 1
[12, 37] (12, 37)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 37] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 37] 12 37
the point we are trying to find neighbors for  [12, 37]
neighboring cells are:  [[12, 38], [12, 36], [11, 37], [13, 37]]
dealing with [12, 38] at loop 0
dealing with [12, 36] at loop 1
dealing with [11, 37] at loop 2
[11, 37] is NOT a wall
dealing with [13, 37] at loop 3
[13, 37] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[12, 37][11, 37]
the points are:  [12, 37] [11, 37]
type for point in is_valid_node  <class 'list'>
[12, 37] 12 37
type for point in is_valid_node  <class 'list'>
[11, 37] 11 37
the point we are trying to find neighbors for  [11, 37]
neighboring cells are:  [[11, 38], [11, 36], [10, 37], [12, 37]]
dealing with [11, 38] at loop 0
[11, 38] is NOT a wall
dealing with [11, 36] at loop 1
dealing with [10, 37] at loop 2
dealing with [12, 37] at loop 3
[12, 37] is NOT a wall
neighbors of b [[11, 38], [12, 37]]
cost from [12, 37] to [11, 37] is 1
<class 'int'>
1 25 26
1 25 26
26 <class 'int'>
1 25 26
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[12, 37][13, 37]
the points are:  [12, 37] [13, 37]
type for point in is_valid_node  <class 'list'>
[12, 37] 12 37
type for point in is_valid_node  <class 'list'>
[13, 37] 13 37
the point we are trying to find neighbors for  [13, 37]
neighboring cells are:  [[13, 38], [13, 36], [12, 37], [14, 37]]
dealing with [13, 38] at loop 0
dealing with [13, 36] at loop 1
dealing with [12, 37] at loop 2
[12, 37] is NOT a wall
dealing with [14, 37] at loop 3
[14, 37] is NOT a wall
neighbors of b [[12, 37], [14, 37]]
cost from [12, 37] to [13, 37] is 1
[11, 37] (11, 37)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 37] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 37] 11 37
the point we are trying to find neighbors for  [11, 37]
neighboring cells are:  [[11, 38], [11, 36], [10, 37], [12, 37]]
dealing with [11, 38] at loop 0
[11, 38] is NOT a wall
dealing with [11, 36] at loop 1
dealing with [10, 37] at loop 2
dealing with [12, 37] at loop 3
[12, 37] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[11, 37][11, 38]
the points are:  [11, 37] [11, 38]
type for point in is_valid_node  <class 'list'>
[11, 37] 11 37
type for point in is_valid_node  <class 'list'>
[11, 38] 11 38
the point we are trying to find neighbors for  [11, 38]
neighboring cells are:  [[11, 39], [11, 37], [10, 38], [12, 38]]
dealing with [11, 39] at loop 0
[11, 39] is NOT a wall
dealing with [11, 37] at loop 1
[11, 37] is NOT a wall
dealing with [10, 38] at loop 2
dealing with [12, 38] at loop 3
neighbors of b [[11, 39], [11, 37]]
cost from [11, 37] to [11, 38] is 1
<class 'int'>
1 26 27
1 26 27
27 <class 'int'>
1 26 27
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[11, 37][12, 37]
the points are:  [11, 37] [12, 37]
type for point in is_valid_node  <class 'list'>
[11, 37] 11 37
type for point in is_valid_node  <class 'list'>
[12, 37] 12 37
the point we are trying to find neighbors for  [12, 37]
neighboring cells are:  [[12, 38], [12, 36], [11, 37], [13, 37]]
dealing with [12, 38] at loop 0
dealing with [12, 36] at loop 1
dealing with [11, 37] at loop 2
[11, 37] is NOT a wall
dealing with [13, 37] at loop 3
[13, 37] is NOT a wall
neighbors of b [[11, 37], [13, 37]]
cost from [11, 37] to [12, 37] is 1
[15, 36] (15, 36)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 36] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 36] 15 36
the point we are trying to find neighbors for  [15, 36]
neighboring cells are:  [[15, 37], [15, 35], [14, 36], [16, 36]]
dealing with [15, 37] at loop 0
[15, 37] is NOT a wall
dealing with [15, 35] at loop 1
[15, 35] is NOT a wall
dealing with [14, 36] at loop 2
dealing with [16, 36] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[15, 36][15, 37]
the points are:  [15, 36] [15, 37]
type for point in is_valid_node  <class 'list'>
[15, 36] 15 36
type for point in is_valid_node  <class 'list'>
[15, 37] 15 37
the point we are trying to find neighbors for  [15, 37]
neighboring cells are:  [[15, 38], [15, 36], [14, 37], [16, 37]]
dealing with [15, 38] at loop 0
dealing with [15, 36] at loop 1
[15, 36] is NOT a wall
dealing with [14, 37] at loop 2
[14, 37] is NOT a wall
dealing with [16, 37] at loop 3
[16, 37] is NOT a wall
neighbors of b [[15, 36], [14, 37], [16, 37]]
cost from [15, 36] to [15, 37] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[15, 36][15, 35]
the points are:  [15, 36] [15, 35]
type for point in is_valid_node  <class 'list'>
[15, 36] 15 36
type for point in is_valid_node  <class 'list'>
[15, 35] 15 35
the point we are trying to find neighbors for  [15, 35]
neighboring cells are:  [[15, 36], [15, 34], [14, 35], [16, 35]]
dealing with [15, 36] at loop 0
[15, 36] is NOT a wall
dealing with [15, 34] at loop 1
dealing with [14, 35] at loop 2
[14, 35] is NOT a wall
dealing with [16, 35] at loop 3
neighbors of b [[15, 36], [14, 35]]
cost from [15, 36] to [15, 35] is 1
<class 'int'>
5 23 28
5 23 28
28 <class 'int'>
5 23 28
[15, 35] (15, 35)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 35] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 35] 15 35
the point we are trying to find neighbors for  [15, 35]
neighboring cells are:  [[15, 36], [15, 34], [14, 35], [16, 35]]
dealing with [15, 36] at loop 0
[15, 36] is NOT a wall
dealing with [15, 34] at loop 1
dealing with [14, 35] at loop 2
[14, 35] is NOT a wall
dealing with [16, 35] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[15, 35][15, 36]
the points are:  [15, 35] [15, 36]
type for point in is_valid_node  <class 'list'>
[15, 35] 15 35
type for point in is_valid_node  <class 'list'>
[15, 36] 15 36
the point we are trying to find neighbors for  [15, 36]
neighboring cells are:  [[15, 37], [15, 35], [14, 36], [16, 36]]
dealing with [15, 37] at loop 0
[15, 37] is NOT a wall
dealing with [15, 35] at loop 1
[15, 35] is NOT a wall
dealing with [14, 36] at loop 2
dealing with [16, 36] at loop 3
neighbors of b [[15, 37], [15, 35]]
cost from [15, 35] to [15, 36] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[15, 35][14, 35]
the points are:  [15, 35] [14, 35]
type for point in is_valid_node  <class 'list'>
[15, 35] 15 35
type for point in is_valid_node  <class 'list'>
[14, 35] 14 35
the point we are trying to find neighbors for  [14, 35]
neighboring cells are:  [[14, 36], [14, 34], [13, 35], [15, 35]]
dealing with [14, 36] at loop 0
dealing with [14, 34] at loop 1
dealing with [13, 35] at loop 2
[13, 35] is NOT a wall
dealing with [15, 35] at loop 3
[15, 35] is NOT a wall
neighbors of b [[13, 35], [15, 35]]
cost from [15, 35] to [14, 35] is 1
<class 'int'>
4 23 27
4 23 27
27 <class 'int'>
4 23 27
[14, 35] (14, 35)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 35] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 35] 14 35
the point we are trying to find neighbors for  [14, 35]
neighboring cells are:  [[14, 36], [14, 34], [13, 35], [15, 35]]
dealing with [14, 36] at loop 0
dealing with [14, 34] at loop 1
dealing with [13, 35] at loop 2
[13, 35] is NOT a wall
dealing with [15, 35] at loop 3
[15, 35] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[14, 35][13, 35]
the points are:  [14, 35] [13, 35]
type for point in is_valid_node  <class 'list'>
[14, 35] 14 35
type for point in is_valid_node  <class 'list'>
[13, 35] 13 35
the point we are trying to find neighbors for  [13, 35]
neighboring cells are:  [[13, 36], [13, 34], [12, 35], [14, 35]]
dealing with [13, 36] at loop 0
dealing with [13, 34] at loop 1
[13, 34] is NOT a wall
dealing with [12, 35] at loop 2
dealing with [14, 35] at loop 3
[14, 35] is NOT a wall
neighbors of b [[13, 34], [14, 35]]
cost from [14, 35] to [13, 35] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[14, 35][15, 35]
the points are:  [14, 35] [15, 35]
type for point in is_valid_node  <class 'list'>
[14, 35] 14 35
type for point in is_valid_node  <class 'list'>
[15, 35] 15 35
the point we are trying to find neighbors for  [15, 35]
neighboring cells are:  [[15, 36], [15, 34], [14, 35], [16, 35]]
dealing with [15, 36] at loop 0
[15, 36] is NOT a wall
dealing with [15, 34] at loop 1
dealing with [14, 35] at loop 2
[14, 35] is NOT a wall
dealing with [16, 35] at loop 3
neighbors of b [[15, 36], [14, 35]]
cost from [14, 35] to [15, 35] is 1
[19, 35] (19, 35)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 35] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 35] 19 35
the point we are trying to find neighbors for  [19, 35]
neighboring cells are:  [[19, 36], [19, 34], [18, 35], [20, 35]]
dealing with [19, 36] at loop 0
[19, 36] is NOT a wall
dealing with [19, 34] at loop 1
[19, 34] is NOT a wall
dealing with [18, 35] at loop 2
dealing with [20, 35] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
64[19, 35][19, 36]
the points are:  [19, 35] [19, 36]
type for point in is_valid_node  <class 'list'>
[19, 35] 19 35
type for point in is_valid_node  <class 'list'>
[19, 36] 19 36
the point we are trying to find neighbors for  [19, 36]
neighboring cells are:  [[19, 37], [19, 35], [18, 36], [20, 36]]
dealing with [19, 37] at loop 0
[19, 37] is NOT a wall
dealing with [19, 35] at loop 1
[19, 35] is NOT a wall
dealing with [18, 36] at loop 2
dealing with [20, 36] at loop 3
neighbors of b [[19, 37], [19, 35]]
cost from [19, 35] to [19, 36] is 1
<class 'int'>
9 24 33
9 24 33
33 <class 'int'>
9 24 33
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
64[19, 35][19, 34]
the points are:  [19, 35] [19, 34]
type for point in is_valid_node  <class 'list'>
[19, 35] 19 35
type for point in is_valid_node  <class 'list'>
[19, 34] 19 34
the point we are trying to find neighbors for  [19, 34]
neighboring cells are:  [[19, 35], [19, 33], [18, 34], [20, 34]]
dealing with [19, 35] at loop 0
[19, 35] is NOT a wall
dealing with [19, 33] at loop 1
[19, 33] is NOT a wall
dealing with [18, 34] at loop 2
dealing with [20, 34] at loop 3
neighbors of b [[19, 35], [19, 33]]
cost from [19, 35] to [19, 34] is 1
[21, 33] (21, 33)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 33] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 33] 21 33
the point we are trying to find neighbors for  [21, 33]
neighboring cells are:  [[21, 34], [21, 32], [20, 33], [22, 33]]
dealing with [21, 34] at loop 0
[21, 34] is NOT a wall
dealing with [21, 32] at loop 1
[21, 32] is NOT a wall
dealing with [20, 33] at loop 2
dealing with [22, 33] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
64[21, 33][21, 34]
the points are:  [21, 33] [21, 34]
type for point in is_valid_node  <class 'list'>
[21, 33] 21 33
type for point in is_valid_node  <class 'list'>
[21, 34] 21 34
the point we are trying to find neighbors for  [21, 34]
neighboring cells are:  [[21, 35], [21, 33], [20, 34], [22, 34]]
dealing with [21, 35] at loop 0
[21, 35] is NOT a wall
dealing with [21, 33] at loop 1
[21, 33] is NOT a wall
dealing with [20, 34] at loop 2
dealing with [22, 34] at loop 3
neighbors of b [[21, 35], [21, 33]]
cost from [21, 33] to [21, 34] is 1
<class 'int'>
11 22 33
11 22 33
33 <class 'int'>
11 22 33
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
64[21, 33][21, 32]
the points are:  [21, 33] [21, 32]
type for point in is_valid_node  <class 'list'>
[21, 33] 21 33
type for point in is_valid_node  <class 'list'>
[21, 32] 21 32
the point we are trying to find neighbors for  [21, 32]
neighboring cells are:  [[21, 33], [21, 31], [20, 32], [22, 32]]
dealing with [21, 33] at loop 0
[21, 33] is NOT a wall
dealing with [21, 31] at loop 1
[21, 31] is NOT a wall
dealing with [20, 32] at loop 2
dealing with [22, 32] at loop 3
neighbors of b [[21, 33], [21, 31]]
cost from [21, 33] to [21, 32] is 1
[1, 41] (1, 41)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 41] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 41] 1 41
the point we are trying to find neighbors for  [1, 41]
neighboring cells are:  [[1, 42], [1, 40], [0, 41], [2, 41]]
dealing with [1, 42] at loop 0
dealing with [1, 40] at loop 1
[1, 40] is NOT a wall
dealing with [0, 41] at loop 2
dealing with [2, 41] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
60[1, 41][1, 40]
the points are:  [1, 41] [1, 40]
type for point in is_valid_node  <class 'list'>
[1, 41] 1 41
type for point in is_valid_node  <class 'list'>
[1, 40] 1 40
the point we are trying to find neighbors for  [1, 40]
neighboring cells are:  [[1, 41], [1, 39], [0, 40], [2, 40]]
dealing with [1, 41] at loop 0
[1, 41] is NOT a wall
dealing with [1, 39] at loop 1
[1, 39] is NOT a wall
dealing with [0, 40] at loop 2
dealing with [2, 40] at loop 3
neighbors of b [[1, 41], [1, 39]]
cost from [1, 41] to [1, 40] is 1
[3, 41] (3, 41)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 41] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 41] 3 41
the point we are trying to find neighbors for  [3, 41]
neighboring cells are:  [[3, 42], [3, 40], [2, 41], [4, 41]]
dealing with [3, 42] at loop 0
[3, 42] is NOT a wall
dealing with [3, 40] at loop 1
[3, 40] is NOT a wall
dealing with [2, 41] at loop 2
dealing with [4, 41] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
62[3, 41][3, 42]
the points are:  [3, 41] [3, 42]
type for point in is_valid_node  <class 'list'>
[3, 41] 3 41
type for point in is_valid_node  <class 'list'>
[3, 42] 3 42
the point we are trying to find neighbors for  [3, 42]
neighboring cells are:  [[3, 43], [3, 41], [2, 42], [4, 42]]
dealing with [3, 43] at loop 0
[3, 43] is NOT a wall
dealing with [3, 41] at loop 1
[3, 41] is NOT a wall
dealing with [2, 42] at loop 2
dealing with [4, 42] at loop 3
neighbors of b [[3, 43], [3, 41]]
cost from [3, 41] to [3, 42] is 1
<class 'int'>
7 30 37
7 30 37
37 <class 'int'>
7 30 37
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
62[3, 41][3, 40]
the points are:  [3, 41] [3, 40]
type for point in is_valid_node  <class 'list'>
[3, 41] 3 41
type for point in is_valid_node  <class 'list'>
[3, 40] 3 40
the point we are trying to find neighbors for  [3, 40]
neighboring cells are:  [[3, 41], [3, 39], [2, 40], [4, 40]]
dealing with [3, 41] at loop 0
[3, 41] is NOT a wall
dealing with [3, 39] at loop 1
[3, 39] is NOT a wall
dealing with [2, 40] at loop 2
dealing with [4, 40] at loop 3
neighbors of b [[3, 41], [3, 39]]
cost from [3, 41] to [3, 40] is 1
[7, 43] (7, 43)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 43] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 43] 7 43
the point we are trying to find neighbors for  [7, 43]
neighboring cells are:  [[7, 44], [7, 42], [6, 43], [8, 43]]
dealing with [7, 44] at loop 0
[7, 44] is NOT a wall
dealing with [7, 42] at loop 1
[7, 42] is NOT a wall
dealing with [6, 43] at loop 2
dealing with [8, 43] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
64[7, 43][7, 44]
the points are:  [7, 43] [7, 44]
type for point in is_valid_node  <class 'list'>
[7, 43] 7 43
type for point in is_valid_node  <class 'list'>
[7, 44] 7 44
the point we are trying to find neighbors for  [7, 44]
neighboring cells are:  [[7, 45], [7, 43], [6, 44], [8, 44]]
dealing with [7, 45] at loop 0
[7, 45] is NOT a wall
dealing with [7, 43] at loop 1
[7, 43] is NOT a wall
dealing with [6, 44] at loop 2
dealing with [8, 44] at loop 3
[8, 44] is NOT a wall
neighbors of b [[7, 45], [7, 43], [8, 44]]
cost from [7, 43] to [7, 44] is 1
<class 'int'>
3 32 35
3 32 35
35 <class 'int'>
3 32 35
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
64[7, 43][7, 42]
the points are:  [7, 43] [7, 42]
type for point in is_valid_node  <class 'list'>
[7, 43] 7 43
type for point in is_valid_node  <class 'list'>
[7, 42] 7 42
the point we are trying to find neighbors for  [7, 42]
neighboring cells are:  [[7, 43], [7, 41], [6, 42], [8, 42]]
dealing with [7, 43] at loop 0
[7, 43] is NOT a wall
dealing with [7, 41] at loop 1
[7, 41] is NOT a wall
dealing with [6, 42] at loop 2
dealing with [8, 42] at loop 3
neighbors of b [[7, 43], [7, 41]]
cost from [7, 43] to [7, 42] is 1
[11, 38] (11, 38)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 38] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 38] 11 38
the point we are trying to find neighbors for  [11, 38]
neighboring cells are:  [[11, 39], [11, 37], [10, 38], [12, 38]]
dealing with [11, 39] at loop 0
[11, 39] is NOT a wall
dealing with [11, 37] at loop 1
[11, 37] is NOT a wall
dealing with [10, 38] at loop 2
dealing with [12, 38] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
71[11, 38][11, 39]
the points are:  [11, 38] [11, 39]
type for point in is_valid_node  <class 'list'>
[11, 38] 11 38
type for point in is_valid_node  <class 'list'>
[11, 39] 11 39
the point we are trying to find neighbors for  [11, 39]
neighboring cells are:  [[11, 40], [11, 38], [10, 39], [12, 39]]
dealing with [11, 40] at loop 0
dealing with [11, 38] at loop 1
[11, 38] is NOT a wall
dealing with [10, 39] at loop 2
[10, 39] is NOT a wall
dealing with [12, 39] at loop 3
[12, 39] is NOT a wall
neighbors of b [[11, 38], [10, 39], [12, 39]]
cost from [11, 38] to [11, 39] is 1
<class 'int'>
1 27 28
1 27 28
28 <class 'int'>
1 27 28
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
71[11, 38][11, 37]
the points are:  [11, 38] [11, 37]
type for point in is_valid_node  <class 'list'>
[11, 38] 11 38
type for point in is_valid_node  <class 'list'>
[11, 37] 11 37
the point we are trying to find neighbors for  [11, 37]
neighboring cells are:  [[11, 38], [11, 36], [10, 37], [12, 37]]
dealing with [11, 38] at loop 0
[11, 38] is NOT a wall
dealing with [11, 36] at loop 1
dealing with [10, 37] at loop 2
dealing with [12, 37] at loop 3
[12, 37] is NOT a wall
neighbors of b [[11, 38], [12, 37]]
cost from [11, 38] to [11, 37] is 1
[14, 35] (14, 35)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 35] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 35] 14 35
the point we are trying to find neighbors for  [14, 35]
neighboring cells are:  [[14, 36], [14, 34], [13, 35], [15, 35]]
dealing with [14, 36] at loop 0
dealing with [14, 34] at loop 1
dealing with [13, 35] at loop 2
[13, 35] is NOT a wall
dealing with [15, 35] at loop 3
[15, 35] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[14, 35][13, 35]
the points are:  [14, 35] [13, 35]
type for point in is_valid_node  <class 'list'>
[14, 35] 14 35
type for point in is_valid_node  <class 'list'>
[13, 35] 13 35
the point we are trying to find neighbors for  [13, 35]
neighboring cells are:  [[13, 36], [13, 34], [12, 35], [14, 35]]
dealing with [13, 36] at loop 0
dealing with [13, 34] at loop 1
[13, 34] is NOT a wall
dealing with [12, 35] at loop 2
dealing with [14, 35] at loop 3
[14, 35] is NOT a wall
neighbors of b [[13, 34], [14, 35]]
cost from [14, 35] to [13, 35] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[14, 35][15, 35]
the points are:  [14, 35] [15, 35]
type for point in is_valid_node  <class 'list'>
[14, 35] 14 35
type for point in is_valid_node  <class 'list'>
[15, 35] 15 35
the point we are trying to find neighbors for  [15, 35]
neighboring cells are:  [[15, 36], [15, 34], [14, 35], [16, 35]]
dealing with [15, 36] at loop 0
[15, 36] is NOT a wall
dealing with [15, 34] at loop 1
dealing with [14, 35] at loop 2
[14, 35] is NOT a wall
dealing with [16, 35] at loop 3
neighbors of b [[15, 36], [14, 35]]
cost from [14, 35] to [15, 35] is 1
[17, 38] (17, 38)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 38] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 38] 17 38
the point we are trying to find neighbors for  [17, 38]
neighboring cells are:  [[17, 39], [17, 37], [16, 38], [18, 38]]
dealing with [17, 39] at loop 0
[17, 39] is NOT a wall
dealing with [17, 37] at loop 1
[17, 37] is NOT a wall
dealing with [16, 38] at loop 2
dealing with [18, 38] at loop 3
[18, 38] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[17, 38][17, 39]
the points are:  [17, 38] [17, 39]
type for point in is_valid_node  <class 'list'>
[17, 38] 17 38
type for point in is_valid_node  <class 'list'>
[17, 39] 17 39
the point we are trying to find neighbors for  [17, 39]
neighboring cells are:  [[17, 40], [17, 38], [16, 39], [18, 39]]
dealing with [17, 40] at loop 0
[17, 40] is NOT a wall
dealing with [17, 38] at loop 1
[17, 38] is NOT a wall
dealing with [16, 39] at loop 2
dealing with [18, 39] at loop 3
neighbors of b [[17, 40], [17, 38]]
cost from [17, 38] to [17, 39] is 1
<class 'int'>
7 27 34
7 27 34
34 <class 'int'>
7 27 34
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[17, 38][17, 37]
the points are:  [17, 38] [17, 37]
type for point in is_valid_node  <class 'list'>
[17, 38] 17 38
type for point in is_valid_node  <class 'list'>
[17, 37] 17 37
the point we are trying to find neighbors for  [17, 37]
neighboring cells are:  [[17, 38], [17, 36], [16, 37], [18, 37]]
dealing with [17, 38] at loop 0
[17, 38] is NOT a wall
dealing with [17, 36] at loop 1
[17, 36] is NOT a wall
dealing with [16, 37] at loop 2
[16, 37] is NOT a wall
dealing with [18, 37] at loop 3
neighbors of b [[17, 38], [17, 36], [16, 37]]
cost from [17, 38] to [17, 37] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[17, 38][18, 38]
the points are:  [17, 38] [18, 38]
type for point in is_valid_node  <class 'list'>
[17, 38] 17 38
type for point in is_valid_node  <class 'list'>
[18, 38] 18 38
the point we are trying to find neighbors for  [18, 38]
neighboring cells are:  [[18, 39], [18, 37], [17, 38], [19, 38]]
dealing with [18, 39] at loop 0
dealing with [18, 37] at loop 1
dealing with [17, 38] at loop 2
[17, 38] is NOT a wall
dealing with [19, 38] at loop 3
[19, 38] is NOT a wall
neighbors of b [[17, 38], [19, 38]]
cost from [17, 38] to [18, 38] is 1
<class 'int'>
8 26 34
8 26 34
34 <class 'int'>
8 26 34
[19, 36] (19, 36)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 36] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 36] 19 36
the point we are trying to find neighbors for  [19, 36]
neighboring cells are:  [[19, 37], [19, 35], [18, 36], [20, 36]]
dealing with [19, 37] at loop 0
[19, 37] is NOT a wall
dealing with [19, 35] at loop 1
[19, 35] is NOT a wall
dealing with [18, 36] at loop 2
dealing with [20, 36] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[19, 36][19, 37]
the points are:  [19, 36] [19, 37]
type for point in is_valid_node  <class 'list'>
[19, 36] 19 36
type for point in is_valid_node  <class 'list'>
[19, 37] 19 37
the point we are trying to find neighbors for  [19, 37]
neighboring cells are:  [[19, 38], [19, 36], [18, 37], [20, 37]]
dealing with [19, 38] at loop 0
[19, 38] is NOT a wall
dealing with [19, 36] at loop 1
[19, 36] is NOT a wall
dealing with [18, 37] at loop 2
dealing with [20, 37] at loop 3
neighbors of b [[19, 38], [19, 36]]
cost from [19, 36] to [19, 37] is 1
<class 'int'>
9 25 34
9 25 34
34 <class 'int'>
9 25 34
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[19, 36][19, 35]
the points are:  [19, 36] [19, 35]
type for point in is_valid_node  <class 'list'>
[19, 36] 19 36
type for point in is_valid_node  <class 'list'>
[19, 35] 19 35
the point we are trying to find neighbors for  [19, 35]
neighboring cells are:  [[19, 36], [19, 34], [18, 35], [20, 35]]
dealing with [19, 36] at loop 0
[19, 36] is NOT a wall
dealing with [19, 34] at loop 1
[19, 34] is NOT a wall
dealing with [18, 35] at loop 2
dealing with [20, 35] at loop 3
neighbors of b [[19, 36], [19, 34]]
cost from [19, 36] to [19, 35] is 1
[21, 34] (21, 34)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 34] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 34] 21 34
the point we are trying to find neighbors for  [21, 34]
neighboring cells are:  [[21, 35], [21, 33], [20, 34], [22, 34]]
dealing with [21, 35] at loop 0
[21, 35] is NOT a wall
dealing with [21, 33] at loop 1
[21, 33] is NOT a wall
dealing with [20, 34] at loop 2
dealing with [22, 34] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[21, 34][21, 35]
the points are:  [21, 34] [21, 35]
type for point in is_valid_node  <class 'list'>
[21, 34] 21 34
type for point in is_valid_node  <class 'list'>
[21, 35] 21 35
the point we are trying to find neighbors for  [21, 35]
neighboring cells are:  [[21, 36], [21, 34], [20, 35], [22, 35]]
dealing with [21, 36] at loop 0
[21, 36] is NOT a wall
dealing with [21, 34] at loop 1
[21, 34] is NOT a wall
dealing with [20, 35] at loop 2
dealing with [22, 35] at loop 3
neighbors of b [[21, 36], [21, 34]]
cost from [21, 34] to [21, 35] is 1
<class 'int'>
11 23 34
11 23 34
34 <class 'int'>
11 23 34
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[21, 34][21, 33]
the points are:  [21, 34] [21, 33]
type for point in is_valid_node  <class 'list'>
[21, 34] 21 34
type for point in is_valid_node  <class 'list'>
[21, 33] 21 33
the point we are trying to find neighbors for  [21, 33]
neighboring cells are:  [[21, 34], [21, 32], [20, 33], [22, 33]]
dealing with [21, 34] at loop 0
[21, 34] is NOT a wall
dealing with [21, 32] at loop 1
[21, 32] is NOT a wall
dealing with [20, 33] at loop 2
dealing with [22, 33] at loop 3
neighbors of b [[21, 34], [21, 32]]
cost from [21, 34] to [21, 33] is 1
[3, 42] (3, 42)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 42] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 42] 3 42
the point we are trying to find neighbors for  [3, 42]
neighboring cells are:  [[3, 43], [3, 41], [2, 42], [4, 42]]
dealing with [3, 43] at loop 0
[3, 43] is NOT a wall
dealing with [3, 41] at loop 1
[3, 41] is NOT a wall
dealing with [2, 42] at loop 2
dealing with [4, 42] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
63[3, 42][3, 43]
the points are:  [3, 42] [3, 43]
type for point in is_valid_node  <class 'list'>
[3, 42] 3 42
type for point in is_valid_node  <class 'list'>
[3, 43] 3 43
the point we are trying to find neighbors for  [3, 43]
neighboring cells are:  [[3, 44], [3, 42], [2, 43], [4, 43]]
dealing with [3, 44] at loop 0
dealing with [3, 42] at loop 1
[3, 42] is NOT a wall
dealing with [2, 43] at loop 2
[2, 43] is NOT a wall
dealing with [4, 43] at loop 3
[4, 43] is NOT a wall
neighbors of b [[3, 42], [2, 43], [4, 43]]
cost from [3, 42] to [3, 43] is 1
<class 'int'>
7 31 38
7 31 38
38 <class 'int'>
7 31 38
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
63[3, 42][3, 41]
the points are:  [3, 42] [3, 41]
type for point in is_valid_node  <class 'list'>
[3, 42] 3 42
type for point in is_valid_node  <class 'list'>
[3, 41] 3 41
the point we are trying to find neighbors for  [3, 41]
neighboring cells are:  [[3, 42], [3, 40], [2, 41], [4, 41]]
dealing with [3, 42] at loop 0
[3, 42] is NOT a wall
dealing with [3, 40] at loop 1
[3, 40] is NOT a wall
dealing with [2, 41] at loop 2
dealing with [4, 41] at loop 3
neighbors of b [[3, 42], [3, 40]]
cost from [3, 42] to [3, 41] is 1
[7, 44] (7, 44)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 44] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 44] 7 44
the point we are trying to find neighbors for  [7, 44]
neighboring cells are:  [[7, 45], [7, 43], [6, 44], [8, 44]]
dealing with [7, 45] at loop 0
[7, 45] is NOT a wall
dealing with [7, 43] at loop 1
[7, 43] is NOT a wall
dealing with [6, 44] at loop 2
dealing with [8, 44] at loop 3
[8, 44] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[7, 44][7, 45]
the points are:  [7, 44] [7, 45]
type for point in is_valid_node  <class 'list'>
[7, 44] 7 44
type for point in is_valid_node  <class 'list'>
[7, 45] 7 45
the point we are trying to find neighbors for  [7, 45]
neighboring cells are:  [[7, 46], [7, 44], [6, 45], [8, 45]]
dealing with [7, 46] at loop 0
dealing with [7, 44] at loop 1
[7, 44] is NOT a wall
dealing with [6, 45] at loop 2
[6, 45] is NOT a wall
dealing with [8, 45] at loop 3
neighbors of b [[7, 44], [6, 45]]
cost from [7, 44] to [7, 45] is 1
<class 'int'>
3 33 36
3 33 36
36 <class 'int'>
3 33 36
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[7, 44][7, 43]
the points are:  [7, 44] [7, 43]
type for point in is_valid_node  <class 'list'>
[7, 44] 7 44
type for point in is_valid_node  <class 'list'>
[7, 43] 7 43
the point we are trying to find neighbors for  [7, 43]
neighboring cells are:  [[7, 44], [7, 42], [6, 43], [8, 43]]
dealing with [7, 44] at loop 0
[7, 44] is NOT a wall
dealing with [7, 42] at loop 1
[7, 42] is NOT a wall
dealing with [6, 43] at loop 2
dealing with [8, 43] at loop 3
neighbors of b [[7, 44], [7, 42]]
cost from [7, 44] to [7, 43] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[7, 44][8, 44]
the points are:  [7, 44] [8, 44]
type for point in is_valid_node  <class 'list'>
[7, 44] 7 44
type for point in is_valid_node  <class 'list'>
[8, 44] 8 44
the point we are trying to find neighbors for  [8, 44]
neighboring cells are:  [[8, 45], [8, 43], [7, 44], [9, 44]]
dealing with [8, 45] at loop 0
dealing with [8, 43] at loop 1
dealing with [7, 44] at loop 2
[7, 44] is NOT a wall
dealing with [9, 44] at loop 3
[9, 44] is NOT a wall
neighbors of b [[7, 44], [9, 44]]
cost from [7, 44] to [8, 44] is 1
<class 'int'>
2 32 34
2 32 34
34 <class 'int'>
2 32 34
[8, 44] (8, 44)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[8, 44] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[8, 44] 8 44
the point we are trying to find neighbors for  [8, 44]
neighboring cells are:  [[8, 45], [8, 43], [7, 44], [9, 44]]
dealing with [8, 45] at loop 0
dealing with [8, 43] at loop 1
dealing with [7, 44] at loop 2
[7, 44] is NOT a wall
dealing with [9, 44] at loop 3
[9, 44] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[8, 44][7, 44]
the points are:  [8, 44] [7, 44]
type for point in is_valid_node  <class 'list'>
[8, 44] 8 44
type for point in is_valid_node  <class 'list'>
[7, 44] 7 44
the point we are trying to find neighbors for  [7, 44]
neighboring cells are:  [[7, 45], [7, 43], [6, 44], [8, 44]]
dealing with [7, 45] at loop 0
[7, 45] is NOT a wall
dealing with [7, 43] at loop 1
[7, 43] is NOT a wall
dealing with [6, 44] at loop 2
dealing with [8, 44] at loop 3
[8, 44] is NOT a wall
neighbors of b [[7, 45], [7, 43], [8, 44]]
cost from [8, 44] to [7, 44] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[8, 44][9, 44]
the points are:  [8, 44] [9, 44]
type for point in is_valid_node  <class 'list'>
[8, 44] 8 44
type for point in is_valid_node  <class 'list'>
[9, 44] 9 44
the point we are trying to find neighbors for  [9, 44]
neighboring cells are:  [[9, 45], [9, 43], [8, 44], [10, 44]]
dealing with [9, 45] at loop 0
[9, 45] is NOT a wall
dealing with [9, 43] at loop 1
[9, 43] is NOT a wall
dealing with [8, 44] at loop 2
[8, 44] is NOT a wall
dealing with [10, 44] at loop 3
neighbors of b [[9, 45], [9, 43], [8, 44]]
cost from [8, 44] to [9, 44] is 1
<class 'int'>
1 32 33
1 32 33
33 <class 'int'>
1 32 33
[9, 44] (9, 44)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 44] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 44] 9 44
the point we are trying to find neighbors for  [9, 44]
neighboring cells are:  [[9, 45], [9, 43], [8, 44], [10, 44]]
dealing with [9, 45] at loop 0
[9, 45] is NOT a wall
dealing with [9, 43] at loop 1
[9, 43] is NOT a wall
dealing with [8, 44] at loop 2
[8, 44] is NOT a wall
dealing with [10, 44] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[9, 44][9, 45]
the points are:  [9, 44] [9, 45]
type for point in is_valid_node  <class 'list'>
[9, 44] 9 44
type for point in is_valid_node  <class 'list'>
[9, 45] 9 45
the point we are trying to find neighbors for  [9, 45]
neighboring cells are:  [[9, 46], [9, 44], [8, 45], [10, 45]]
dealing with [9, 46] at loop 0
[9, 46] is NOT a wall
dealing with [9, 44] at loop 1
[9, 44] is NOT a wall
dealing with [8, 45] at loop 2
dealing with [10, 45] at loop 3
neighbors of b [[9, 46], [9, 44]]
cost from [9, 44] to [9, 45] is 1
<class 'int'>
1 33 34
1 33 34
34 <class 'int'>
1 33 34
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[9, 44][9, 43]
the points are:  [9, 44] [9, 43]
type for point in is_valid_node  <class 'list'>
[9, 44] 9 44
type for point in is_valid_node  <class 'list'>
[9, 43] 9 43
the point we are trying to find neighbors for  [9, 43]
neighboring cells are:  [[9, 44], [9, 42], [8, 43], [10, 43]]
dealing with [9, 44] at loop 0
[9, 44] is NOT a wall
dealing with [9, 42] at loop 1
dealing with [8, 43] at loop 2
dealing with [10, 43] at loop 3
[10, 43] is NOT a wall
neighbors of b [[9, 44], [10, 43]]
cost from [9, 44] to [9, 43] is 1
<class 'int'>
1 31 32
1 31 32
32 <class 'int'>
1 31 32
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[9, 44][8, 44]
the points are:  [9, 44] [8, 44]
type for point in is_valid_node  <class 'list'>
[9, 44] 9 44
type for point in is_valid_node  <class 'list'>
[8, 44] 8 44
the point we are trying to find neighbors for  [8, 44]
neighboring cells are:  [[8, 45], [8, 43], [7, 44], [9, 44]]
dealing with [8, 45] at loop 0
dealing with [8, 43] at loop 1
dealing with [7, 44] at loop 2
[7, 44] is NOT a wall
dealing with [9, 44] at loop 3
[9, 44] is NOT a wall
neighbors of b [[7, 44], [9, 44]]
cost from [9, 44] to [8, 44] is 1
[9, 43] (9, 43)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 43] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 43] 9 43
the point we are trying to find neighbors for  [9, 43]
neighboring cells are:  [[9, 44], [9, 42], [8, 43], [10, 43]]
dealing with [9, 44] at loop 0
[9, 44] is NOT a wall
dealing with [9, 42] at loop 1
dealing with [8, 43] at loop 2
dealing with [10, 43] at loop 3
[10, 43] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[9, 43][9, 44]
the points are:  [9, 43] [9, 44]
type for point in is_valid_node  <class 'list'>
[9, 43] 9 43
type for point in is_valid_node  <class 'list'>
[9, 44] 9 44
the point we are trying to find neighbors for  [9, 44]
neighboring cells are:  [[9, 45], [9, 43], [8, 44], [10, 44]]
dealing with [9, 45] at loop 0
[9, 45] is NOT a wall
dealing with [9, 43] at loop 1
[9, 43] is NOT a wall
dealing with [8, 44] at loop 2
[8, 44] is NOT a wall
dealing with [10, 44] at loop 3
neighbors of b [[9, 45], [9, 43], [8, 44]]
cost from [9, 43] to [9, 44] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[9, 43][10, 43]
the points are:  [9, 43] [10, 43]
type for point in is_valid_node  <class 'list'>
[9, 43] 9 43
type for point in is_valid_node  <class 'list'>
[10, 43] 10 43
the point we are trying to find neighbors for  [10, 43]
neighboring cells are:  [[10, 44], [10, 42], [9, 43], [11, 43]]
dealing with [10, 44] at loop 0
dealing with [10, 42] at loop 1
dealing with [9, 43] at loop 2
[9, 43] is NOT a wall
dealing with [11, 43] at loop 3
[11, 43] is NOT a wall
neighbors of b [[9, 43], [11, 43]]
cost from [9, 43] to [10, 43] is 1
<class 'int'>
0 31 31
0 31 31
31 <class 'int'>
0 31 31
[10, 43] (10, 43)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[10, 43] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[10, 43] 10 43
the point we are trying to find neighbors for  [10, 43]
neighboring cells are:  [[10, 44], [10, 42], [9, 43], [11, 43]]
dealing with [10, 44] at loop 0
dealing with [10, 42] at loop 1
dealing with [9, 43] at loop 2
[9, 43] is NOT a wall
dealing with [11, 43] at loop 3
[11, 43] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[10, 43][9, 43]
the points are:  [10, 43] [9, 43]
type for point in is_valid_node  <class 'list'>
[10, 43] 10 43
type for point in is_valid_node  <class 'list'>
[9, 43] 9 43
the point we are trying to find neighbors for  [9, 43]
neighboring cells are:  [[9, 44], [9, 42], [8, 43], [10, 43]]
dealing with [9, 44] at loop 0
[9, 44] is NOT a wall
dealing with [9, 42] at loop 1
dealing with [8, 43] at loop 2
dealing with [10, 43] at loop 3
[10, 43] is NOT a wall
neighbors of b [[9, 44], [10, 43]]
cost from [10, 43] to [9, 43] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[10, 43][11, 43]
the points are:  [10, 43] [11, 43]
type for point in is_valid_node  <class 'list'>
[10, 43] 10 43
type for point in is_valid_node  <class 'list'>
[11, 43] 11 43
the point we are trying to find neighbors for  [11, 43]
neighboring cells are:  [[11, 44], [11, 42], [10, 43], [12, 43]]
dealing with [11, 44] at loop 0
dealing with [11, 42] at loop 1
dealing with [10, 43] at loop 2
[10, 43] is NOT a wall
dealing with [12, 43] at loop 3
neighbors of b [[10, 43]]
cost from [10, 43] to [11, 43] is 1
<class 'int'>
1 31 32
1 31 32
32 <class 'int'>
1 31 32
[11, 39] (11, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 39] 11 39
the point we are trying to find neighbors for  [11, 39]
neighboring cells are:  [[11, 40], [11, 38], [10, 39], [12, 39]]
dealing with [11, 40] at loop 0
dealing with [11, 38] at loop 1
[11, 38] is NOT a wall
dealing with [10, 39] at loop 2
[10, 39] is NOT a wall
dealing with [12, 39] at loop 3
[12, 39] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
72[11, 39][11, 38]
the points are:  [11, 39] [11, 38]
type for point in is_valid_node  <class 'list'>
[11, 39] 11 39
type for point in is_valid_node  <class 'list'>
[11, 38] 11 38
the point we are trying to find neighbors for  [11, 38]
neighboring cells are:  [[11, 39], [11, 37], [10, 38], [12, 38]]
dealing with [11, 39] at loop 0
[11, 39] is NOT a wall
dealing with [11, 37] at loop 1
[11, 37] is NOT a wall
dealing with [10, 38] at loop 2
dealing with [12, 38] at loop 3
neighbors of b [[11, 39], [11, 37]]
cost from [11, 39] to [11, 38] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
72[11, 39][10, 39]
the points are:  [11, 39] [10, 39]
type for point in is_valid_node  <class 'list'>
[11, 39] 11 39
type for point in is_valid_node  <class 'list'>
[10, 39] 10 39
the point we are trying to find neighbors for  [10, 39]
neighboring cells are:  [[10, 40], [10, 38], [9, 39], [11, 39]]
dealing with [10, 40] at loop 0
dealing with [10, 38] at loop 1
dealing with [9, 39] at loop 2
[9, 39] is NOT a wall
dealing with [11, 39] at loop 3
[11, 39] is NOT a wall
neighbors of b [[9, 39], [11, 39]]
cost from [11, 39] to [10, 39] is 1
<class 'int'>
0 27 27
0 27 27
27 <class 'int'>
0 27 27
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
72[11, 39][12, 39]
the points are:  [11, 39] [12, 39]
type for point in is_valid_node  <class 'list'>
[11, 39] 11 39
type for point in is_valid_node  <class 'list'>
[12, 39] 12 39
the point we are trying to find neighbors for  [12, 39]
neighboring cells are:  [[12, 40], [12, 38], [11, 39], [13, 39]]
dealing with [12, 40] at loop 0
dealing with [12, 38] at loop 1
dealing with [11, 39] at loop 2
[11, 39] is NOT a wall
dealing with [13, 39] at loop 3
[13, 39] is NOT a wall
neighbors of b [[11, 39], [13, 39]]
cost from [11, 39] to [12, 39] is 1
<class 'int'>
2 27 29
2 27 29
29 <class 'int'>
2 27 29
[10, 39] (10, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[10, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[10, 39] 10 39
the point we are trying to find neighbors for  [10, 39]
neighboring cells are:  [[10, 40], [10, 38], [9, 39], [11, 39]]
dealing with [10, 40] at loop 0
dealing with [10, 38] at loop 1
dealing with [9, 39] at loop 2
[9, 39] is NOT a wall
dealing with [11, 39] at loop 3
[11, 39] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[10, 39][9, 39]
the points are:  [10, 39] [9, 39]
type for point in is_valid_node  <class 'list'>
[10, 39] 10 39
type for point in is_valid_node  <class 'list'>
[9, 39] 9 39
the point we are trying to find neighbors for  [9, 39]
neighboring cells are:  [[9, 40], [9, 38], [8, 39], [10, 39]]
dealing with [9, 40] at loop 0
[9, 40] is NOT a wall
dealing with [9, 38] at loop 1
dealing with [8, 39] at loop 2
dealing with [10, 39] at loop 3
[10, 39] is NOT a wall
neighbors of b [[9, 40], [10, 39]]
cost from [10, 39] to [9, 39] is 1
<class 'int'>
1 27 28
1 27 28
28 <class 'int'>
1 27 28
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[10, 39][11, 39]
the points are:  [10, 39] [11, 39]
type for point in is_valid_node  <class 'list'>
[10, 39] 10 39
type for point in is_valid_node  <class 'list'>
[11, 39] 11 39
the point we are trying to find neighbors for  [11, 39]
neighboring cells are:  [[11, 40], [11, 38], [10, 39], [12, 39]]
dealing with [11, 40] at loop 0
dealing with [11, 38] at loop 1
[11, 38] is NOT a wall
dealing with [10, 39] at loop 2
[10, 39] is NOT a wall
dealing with [12, 39] at loop 3
[12, 39] is NOT a wall
neighbors of b [[11, 38], [10, 39], [12, 39]]
cost from [10, 39] to [11, 39] is 1
[17, 39] (17, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 39] 17 39
the point we are trying to find neighbors for  [17, 39]
neighboring cells are:  [[17, 40], [17, 38], [16, 39], [18, 39]]
dealing with [17, 40] at loop 0
[17, 40] is NOT a wall
dealing with [17, 38] at loop 1
[17, 38] is NOT a wall
dealing with [16, 39] at loop 2
dealing with [18, 39] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[17, 39][17, 40]
the points are:  [17, 39] [17, 40]
type for point in is_valid_node  <class 'list'>
[17, 39] 17 39
type for point in is_valid_node  <class 'list'>
[17, 40] 17 40
the point we are trying to find neighbors for  [17, 40]
neighboring cells are:  [[17, 41], [17, 39], [16, 40], [18, 40]]
dealing with [17, 41] at loop 0
[17, 41] is NOT a wall
dealing with [17, 39] at loop 1
[17, 39] is NOT a wall
dealing with [16, 40] at loop 2
dealing with [18, 40] at loop 3
neighbors of b [[17, 41], [17, 39]]
cost from [17, 39] to [17, 40] is 1
<class 'int'>
7 28 35
7 28 35
35 <class 'int'>
7 28 35
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[17, 39][17, 38]
the points are:  [17, 39] [17, 38]
type for point in is_valid_node  <class 'list'>
[17, 39] 17 39
type for point in is_valid_node  <class 'list'>
[17, 38] 17 38
the point we are trying to find neighbors for  [17, 38]
neighboring cells are:  [[17, 39], [17, 37], [16, 38], [18, 38]]
dealing with [17, 39] at loop 0
[17, 39] is NOT a wall
dealing with [17, 37] at loop 1
[17, 37] is NOT a wall
dealing with [16, 38] at loop 2
dealing with [18, 38] at loop 3
[18, 38] is NOT a wall
neighbors of b [[17, 39], [17, 37], [18, 38]]
cost from [17, 39] to [17, 38] is 1
[18, 38] (18, 38)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 38] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 38] 18 38
the point we are trying to find neighbors for  [18, 38]
neighboring cells are:  [[18, 39], [18, 37], [17, 38], [19, 38]]
dealing with [18, 39] at loop 0
dealing with [18, 37] at loop 1
dealing with [17, 38] at loop 2
[17, 38] is NOT a wall
dealing with [19, 38] at loop 3
[19, 38] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[18, 38][17, 38]
the points are:  [18, 38] [17, 38]
type for point in is_valid_node  <class 'list'>
[18, 38] 18 38
type for point in is_valid_node  <class 'list'>
[17, 38] 17 38
the point we are trying to find neighbors for  [17, 38]
neighboring cells are:  [[17, 39], [17, 37], [16, 38], [18, 38]]
dealing with [17, 39] at loop 0
[17, 39] is NOT a wall
dealing with [17, 37] at loop 1
[17, 37] is NOT a wall
dealing with [16, 38] at loop 2
dealing with [18, 38] at loop 3
[18, 38] is NOT a wall
neighbors of b [[17, 39], [17, 37], [18, 38]]
cost from [18, 38] to [17, 38] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[18, 38][19, 38]
the points are:  [18, 38] [19, 38]
type for point in is_valid_node  <class 'list'>
[18, 38] 18 38
type for point in is_valid_node  <class 'list'>
[19, 38] 19 38
the point we are trying to find neighbors for  [19, 38]
neighboring cells are:  [[19, 39], [19, 37], [18, 38], [20, 38]]
dealing with [19, 39] at loop 0
[19, 39] is NOT a wall
dealing with [19, 37] at loop 1
[19, 37] is NOT a wall
dealing with [18, 38] at loop 2
[18, 38] is NOT a wall
dealing with [20, 38] at loop 3
neighbors of b [[19, 39], [19, 37], [18, 38]]
cost from [18, 38] to [19, 38] is 1
<class 'int'>
9 26 35
9 26 35
35 <class 'int'>
9 26 35
[19, 37] (19, 37)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 37] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 37] 19 37
the point we are trying to find neighbors for  [19, 37]
neighboring cells are:  [[19, 38], [19, 36], [18, 37], [20, 37]]
dealing with [19, 38] at loop 0
[19, 38] is NOT a wall
dealing with [19, 36] at loop 1
[19, 36] is NOT a wall
dealing with [18, 37] at loop 2
dealing with [20, 37] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[19, 37][19, 38]
the points are:  [19, 37] [19, 38]
type for point in is_valid_node  <class 'list'>
[19, 37] 19 37
type for point in is_valid_node  <class 'list'>
[19, 38] 19 38
the point we are trying to find neighbors for  [19, 38]
neighboring cells are:  [[19, 39], [19, 37], [18, 38], [20, 38]]
dealing with [19, 39] at loop 0
[19, 39] is NOT a wall
dealing with [19, 37] at loop 1
[19, 37] is NOT a wall
dealing with [18, 38] at loop 2
[18, 38] is NOT a wall
dealing with [20, 38] at loop 3
neighbors of b [[19, 39], [19, 37], [18, 38]]
cost from [19, 37] to [19, 38] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[19, 37][19, 36]
the points are:  [19, 37] [19, 36]
type for point in is_valid_node  <class 'list'>
[19, 37] 19 37
type for point in is_valid_node  <class 'list'>
[19, 36] 19 36
the point we are trying to find neighbors for  [19, 36]
neighboring cells are:  [[19, 37], [19, 35], [18, 36], [20, 36]]
dealing with [19, 37] at loop 0
[19, 37] is NOT a wall
dealing with [19, 35] at loop 1
[19, 35] is NOT a wall
dealing with [18, 36] at loop 2
dealing with [20, 36] at loop 3
neighbors of b [[19, 37], [19, 35]]
cost from [19, 37] to [19, 36] is 1
[21, 35] (21, 35)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 35] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 35] 21 35
the point we are trying to find neighbors for  [21, 35]
neighboring cells are:  [[21, 36], [21, 34], [20, 35], [22, 35]]
dealing with [21, 36] at loop 0
[21, 36] is NOT a wall
dealing with [21, 34] at loop 1
[21, 34] is NOT a wall
dealing with [20, 35] at loop 2
dealing with [22, 35] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[21, 35][21, 36]
the points are:  [21, 35] [21, 36]
type for point in is_valid_node  <class 'list'>
[21, 35] 21 35
type for point in is_valid_node  <class 'list'>
[21, 36] 21 36
the point we are trying to find neighbors for  [21, 36]
neighboring cells are:  [[21, 37], [21, 35], [20, 36], [22, 36]]
dealing with [21, 37] at loop 0
[21, 37] is NOT a wall
dealing with [21, 35] at loop 1
[21, 35] is NOT a wall
dealing with [20, 36] at loop 2
dealing with [22, 36] at loop 3
neighbors of b [[21, 37], [21, 35]]
cost from [21, 35] to [21, 36] is 1
<class 'int'>
11 24 35
11 24 35
35 <class 'int'>
11 24 35
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[21, 35][21, 34]
the points are:  [21, 35] [21, 34]
type for point in is_valid_node  <class 'list'>
[21, 35] 21 35
type for point in is_valid_node  <class 'list'>
[21, 34] 21 34
the point we are trying to find neighbors for  [21, 34]
neighboring cells are:  [[21, 35], [21, 33], [20, 34], [22, 34]]
dealing with [21, 35] at loop 0
[21, 35] is NOT a wall
dealing with [21, 33] at loop 1
[21, 33] is NOT a wall
dealing with [20, 34] at loop 2
dealing with [22, 34] at loop 3
neighbors of b [[21, 35], [21, 33]]
cost from [21, 35] to [21, 34] is 1
[3, 43] (3, 43)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 43] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 43] 3 43
the point we are trying to find neighbors for  [3, 43]
neighboring cells are:  [[3, 44], [3, 42], [2, 43], [4, 43]]
dealing with [3, 44] at loop 0
dealing with [3, 42] at loop 1
[3, 42] is NOT a wall
dealing with [2, 43] at loop 2
[2, 43] is NOT a wall
dealing with [4, 43] at loop 3
[4, 43] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
64[3, 43][3, 42]
the points are:  [3, 43] [3, 42]
type for point in is_valid_node  <class 'list'>
[3, 43] 3 43
type for point in is_valid_node  <class 'list'>
[3, 42] 3 42
the point we are trying to find neighbors for  [3, 42]
neighboring cells are:  [[3, 43], [3, 41], [2, 42], [4, 42]]
dealing with [3, 43] at loop 0
[3, 43] is NOT a wall
dealing with [3, 41] at loop 1
[3, 41] is NOT a wall
dealing with [2, 42] at loop 2
dealing with [4, 42] at loop 3
neighbors of b [[3, 43], [3, 41]]
cost from [3, 43] to [3, 42] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
64[3, 43][2, 43]
the points are:  [3, 43] [2, 43]
type for point in is_valid_node  <class 'list'>
[3, 43] 3 43
type for point in is_valid_node  <class 'list'>
[2, 43] 2 43
the point we are trying to find neighbors for  [2, 43]
neighboring cells are:  [[2, 44], [2, 42], [1, 43], [3, 43]]
dealing with [2, 44] at loop 0
dealing with [2, 42] at loop 1
dealing with [1, 43] at loop 2
[1, 43] is NOT a wall
dealing with [3, 43] at loop 3
[3, 43] is NOT a wall
neighbors of b [[1, 43], [3, 43]]
cost from [3, 43] to [2, 43] is 1
<class 'int'>
8 31 39
8 31 39
39 <class 'int'>
8 31 39
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
64[3, 43][4, 43]
the points are:  [3, 43] [4, 43]
type for point in is_valid_node  <class 'list'>
[3, 43] 3 43
type for point in is_valid_node  <class 'list'>
[4, 43] 4 43
the point we are trying to find neighbors for  [4, 43]
neighboring cells are:  [[4, 44], [4, 42], [3, 43], [5, 43]]
dealing with [4, 44] at loop 0
dealing with [4, 42] at loop 1
dealing with [3, 43] at loop 2
[3, 43] is NOT a wall
dealing with [5, 43] at loop 3
[5, 43] is NOT a wall
neighbors of b [[3, 43], [5, 43]]
cost from [3, 43] to [4, 43] is 1
<class 'int'>
6 31 37
6 31 37
37 <class 'int'>
6 31 37
[4, 43] (4, 43)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 43] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 43] 4 43
the point we are trying to find neighbors for  [4, 43]
neighboring cells are:  [[4, 44], [4, 42], [3, 43], [5, 43]]
dealing with [4, 44] at loop 0
dealing with [4, 42] at loop 1
dealing with [3, 43] at loop 2
[3, 43] is NOT a wall
dealing with [5, 43] at loop 3
[5, 43] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[4, 43][3, 43]
the points are:  [4, 43] [3, 43]
type for point in is_valid_node  <class 'list'>
[4, 43] 4 43
type for point in is_valid_node  <class 'list'>
[3, 43] 3 43
the point we are trying to find neighbors for  [3, 43]
neighboring cells are:  [[3, 44], [3, 42], [2, 43], [4, 43]]
dealing with [3, 44] at loop 0
dealing with [3, 42] at loop 1
[3, 42] is NOT a wall
dealing with [2, 43] at loop 2
[2, 43] is NOT a wall
dealing with [4, 43] at loop 3
[4, 43] is NOT a wall
neighbors of b [[3, 42], [2, 43], [4, 43]]
cost from [4, 43] to [3, 43] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[4, 43][5, 43]
the points are:  [4, 43] [5, 43]
type for point in is_valid_node  <class 'list'>
[4, 43] 4 43
type for point in is_valid_node  <class 'list'>
[5, 43] 5 43
the point we are trying to find neighbors for  [5, 43]
neighboring cells are:  [[5, 44], [5, 42], [4, 43], [6, 43]]
dealing with [5, 44] at loop 0
dealing with [5, 42] at loop 1
dealing with [4, 43] at loop 2
[4, 43] is NOT a wall
dealing with [6, 43] at loop 3
neighbors of b [[4, 43]]
cost from [4, 43] to [5, 43] is 1
<class 'int'>
5 31 36
5 31 36
36 <class 'int'>
5 31 36
[5, 43] (5, 43)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 43] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 43] 5 43
the point we are trying to find neighbors for  [5, 43]
neighboring cells are:  [[5, 44], [5, 42], [4, 43], [6, 43]]
dealing with [5, 44] at loop 0
dealing with [5, 42] at loop 1
dealing with [4, 43] at loop 2
[4, 43] is NOT a wall
dealing with [6, 43] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[5, 43][4, 43]
the points are:  [5, 43] [4, 43]
type for point in is_valid_node  <class 'list'>
[5, 43] 5 43
type for point in is_valid_node  <class 'list'>
[4, 43] 4 43
the point we are trying to find neighbors for  [4, 43]
neighboring cells are:  [[4, 44], [4, 42], [3, 43], [5, 43]]
dealing with [4, 44] at loop 0
dealing with [4, 42] at loop 1
dealing with [3, 43] at loop 2
[3, 43] is NOT a wall
dealing with [5, 43] at loop 3
[5, 43] is NOT a wall
neighbors of b [[3, 43], [5, 43]]
cost from [5, 43] to [4, 43] is 1
[7, 45] (7, 45)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 45] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 45] 7 45
the point we are trying to find neighbors for  [7, 45]
neighboring cells are:  [[7, 46], [7, 44], [6, 45], [8, 45]]
dealing with [7, 46] at loop 0
dealing with [7, 44] at loop 1
[7, 44] is NOT a wall
dealing with [6, 45] at loop 2
[6, 45] is NOT a wall
dealing with [8, 45] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[7, 45][7, 44]
the points are:  [7, 45] [7, 44]
type for point in is_valid_node  <class 'list'>
[7, 45] 7 45
type for point in is_valid_node  <class 'list'>
[7, 44] 7 44
the point we are trying to find neighbors for  [7, 44]
neighboring cells are:  [[7, 45], [7, 43], [6, 44], [8, 44]]
dealing with [7, 45] at loop 0
[7, 45] is NOT a wall
dealing with [7, 43] at loop 1
[7, 43] is NOT a wall
dealing with [6, 44] at loop 2
dealing with [8, 44] at loop 3
[8, 44] is NOT a wall
neighbors of b [[7, 45], [7, 43], [8, 44]]
cost from [7, 45] to [7, 44] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[7, 45][6, 45]
the points are:  [7, 45] [6, 45]
type for point in is_valid_node  <class 'list'>
[7, 45] 7 45
type for point in is_valid_node  <class 'list'>
[6, 45] 6 45
the point we are trying to find neighbors for  [6, 45]
neighboring cells are:  [[6, 46], [6, 44], [5, 45], [7, 45]]
dealing with [6, 46] at loop 0
dealing with [6, 44] at loop 1
dealing with [5, 45] at loop 2
[5, 45] is NOT a wall
dealing with [7, 45] at loop 3
[7, 45] is NOT a wall
neighbors of b [[5, 45], [7, 45]]
cost from [7, 45] to [6, 45] is 1
<class 'int'>
4 33 37
4 33 37
37 <class 'int'>
4 33 37
[9, 39] (9, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 39] 9 39
the point we are trying to find neighbors for  [9, 39]
neighboring cells are:  [[9, 40], [9, 38], [8, 39], [10, 39]]
dealing with [9, 40] at loop 0
[9, 40] is NOT a wall
dealing with [9, 38] at loop 1
dealing with [8, 39] at loop 2
dealing with [10, 39] at loop 3
[10, 39] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[9, 39][9, 40]
the points are:  [9, 39] [9, 40]
type for point in is_valid_node  <class 'list'>
[9, 39] 9 39
type for point in is_valid_node  <class 'list'>
[9, 40] 9 40
the point we are trying to find neighbors for  [9, 40]
neighboring cells are:  [[9, 41], [9, 39], [8, 40], [10, 40]]
dealing with [9, 41] at loop 0
[9, 41] is NOT a wall
dealing with [9, 39] at loop 1
[9, 39] is NOT a wall
dealing with [8, 40] at loop 2
dealing with [10, 40] at loop 3
neighbors of b [[9, 41], [9, 39]]
cost from [9, 39] to [9, 40] is 1
<class 'int'>
1 28 29
1 28 29
29 <class 'int'>
1 28 29
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[9, 39][10, 39]
the points are:  [9, 39] [10, 39]
type for point in is_valid_node  <class 'list'>
[9, 39] 9 39
type for point in is_valid_node  <class 'list'>
[10, 39] 10 39
the point we are trying to find neighbors for  [10, 39]
neighboring cells are:  [[10, 40], [10, 38], [9, 39], [11, 39]]
dealing with [10, 40] at loop 0
dealing with [10, 38] at loop 1
dealing with [9, 39] at loop 2
[9, 39] is NOT a wall
dealing with [11, 39] at loop 3
[11, 39] is NOT a wall
neighbors of b [[9, 39], [11, 39]]
cost from [9, 39] to [10, 39] is 1
[9, 45] (9, 45)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 45] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 45] 9 45
the point we are trying to find neighbors for  [9, 45]
neighboring cells are:  [[9, 46], [9, 44], [8, 45], [10, 45]]
dealing with [9, 46] at loop 0
[9, 46] is NOT a wall
dealing with [9, 44] at loop 1
[9, 44] is NOT a wall
dealing with [8, 45] at loop 2
dealing with [10, 45] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[9, 45][9, 46]
the points are:  [9, 45] [9, 46]
type for point in is_valid_node  <class 'list'>
[9, 45] 9 45
type for point in is_valid_node  <class 'list'>
[9, 46] 9 46
the point we are trying to find neighbors for  [9, 46]
neighboring cells are:  [[9, 47], [9, 45], [8, 46], [10, 46]]
dealing with [9, 47] at loop 0
[9, 47] is NOT a wall
dealing with [9, 45] at loop 1
[9, 45] is NOT a wall
dealing with [8, 46] at loop 2
dealing with [10, 46] at loop 3
neighbors of b [[9, 47], [9, 45]]
cost from [9, 45] to [9, 46] is 1
<class 'int'>
1 34 35
1 34 35
35 <class 'int'>
1 34 35
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[9, 45][9, 44]
the points are:  [9, 45] [9, 44]
type for point in is_valid_node  <class 'list'>
[9, 45] 9 45
type for point in is_valid_node  <class 'list'>
[9, 44] 9 44
the point we are trying to find neighbors for  [9, 44]
neighboring cells are:  [[9, 45], [9, 43], [8, 44], [10, 44]]
dealing with [9, 45] at loop 0
[9, 45] is NOT a wall
dealing with [9, 43] at loop 1
[9, 43] is NOT a wall
dealing with [8, 44] at loop 2
[8, 44] is NOT a wall
dealing with [10, 44] at loop 3
neighbors of b [[9, 45], [9, 43], [8, 44]]
cost from [9, 45] to [9, 44] is 1
[11, 43] (11, 43)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 43] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 43] 11 43
the point we are trying to find neighbors for  [11, 43]
neighboring cells are:  [[11, 44], [11, 42], [10, 43], [12, 43]]
dealing with [11, 44] at loop 0
dealing with [11, 42] at loop 1
dealing with [10, 43] at loop 2
[10, 43] is NOT a wall
dealing with [12, 43] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[11, 43][10, 43]
the points are:  [11, 43] [10, 43]
type for point in is_valid_node  <class 'list'>
[11, 43] 11 43
type for point in is_valid_node  <class 'list'>
[10, 43] 10 43
the point we are trying to find neighbors for  [10, 43]
neighboring cells are:  [[10, 44], [10, 42], [9, 43], [11, 43]]
dealing with [10, 44] at loop 0
dealing with [10, 42] at loop 1
dealing with [9, 43] at loop 2
[9, 43] is NOT a wall
dealing with [11, 43] at loop 3
[11, 43] is NOT a wall
neighbors of b [[9, 43], [11, 43]]
cost from [11, 43] to [10, 43] is 1
[12, 39] (12, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 39] 12 39
the point we are trying to find neighbors for  [12, 39]
neighboring cells are:  [[12, 40], [12, 38], [11, 39], [13, 39]]
dealing with [12, 40] at loop 0
dealing with [12, 38] at loop 1
dealing with [11, 39] at loop 2
[11, 39] is NOT a wall
dealing with [13, 39] at loop 3
[13, 39] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[12, 39][11, 39]
the points are:  [12, 39] [11, 39]
type for point in is_valid_node  <class 'list'>
[12, 39] 12 39
type for point in is_valid_node  <class 'list'>
[11, 39] 11 39
the point we are trying to find neighbors for  [11, 39]
neighboring cells are:  [[11, 40], [11, 38], [10, 39], [12, 39]]
dealing with [11, 40] at loop 0
dealing with [11, 38] at loop 1
[11, 38] is NOT a wall
dealing with [10, 39] at loop 2
[10, 39] is NOT a wall
dealing with [12, 39] at loop 3
[12, 39] is NOT a wall
neighbors of b [[11, 38], [10, 39], [12, 39]]
cost from [12, 39] to [11, 39] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[12, 39][13, 39]
the points are:  [12, 39] [13, 39]
type for point in is_valid_node  <class 'list'>
[12, 39] 12 39
type for point in is_valid_node  <class 'list'>
[13, 39] 13 39
the point we are trying to find neighbors for  [13, 39]
neighboring cells are:  [[13, 40], [13, 38], [12, 39], [14, 39]]
dealing with [13, 40] at loop 0
dealing with [13, 38] at loop 1
dealing with [12, 39] at loop 2
[12, 39] is NOT a wall
dealing with [14, 39] at loop 3
[14, 39] is NOT a wall
neighbors of b [[12, 39], [14, 39]]
cost from [12, 39] to [13, 39] is 1
<class 'int'>
3 27 30
3 27 30
30 <class 'int'>
3 27 30
[17, 40] (17, 40)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 40] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 40] 17 40
the point we are trying to find neighbors for  [17, 40]
neighboring cells are:  [[17, 41], [17, 39], [16, 40], [18, 40]]
dealing with [17, 41] at loop 0
[17, 41] is NOT a wall
dealing with [17, 39] at loop 1
[17, 39] is NOT a wall
dealing with [16, 40] at loop 2
dealing with [18, 40] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[17, 40][17, 41]
the points are:  [17, 40] [17, 41]
type for point in is_valid_node  <class 'list'>
[17, 40] 17 40
type for point in is_valid_node  <class 'list'>
[17, 41] 17 41
the point we are trying to find neighbors for  [17, 41]
neighboring cells are:  [[17, 42], [17, 40], [16, 41], [18, 41]]
dealing with [17, 42] at loop 0
dealing with [17, 40] at loop 1
[17, 40] is NOT a wall
dealing with [16, 41] at loop 2
[16, 41] is NOT a wall
dealing with [18, 41] at loop 3
neighbors of b [[17, 40], [16, 41]]
cost from [17, 40] to [17, 41] is 1
<class 'int'>
7 29 36
7 29 36
36 <class 'int'>
7 29 36
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[17, 40][17, 39]
the points are:  [17, 40] [17, 39]
type for point in is_valid_node  <class 'list'>
[17, 40] 17 40
type for point in is_valid_node  <class 'list'>
[17, 39] 17 39
the point we are trying to find neighbors for  [17, 39]
neighboring cells are:  [[17, 40], [17, 38], [16, 39], [18, 39]]
dealing with [17, 40] at loop 0
[17, 40] is NOT a wall
dealing with [17, 38] at loop 1
[17, 38] is NOT a wall
dealing with [16, 39] at loop 2
dealing with [18, 39] at loop 3
neighbors of b [[17, 40], [17, 38]]
cost from [17, 40] to [17, 39] is 1
[19, 38] (19, 38)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 38] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 38] 19 38
the point we are trying to find neighbors for  [19, 38]
neighboring cells are:  [[19, 39], [19, 37], [18, 38], [20, 38]]
dealing with [19, 39] at loop 0
[19, 39] is NOT a wall
dealing with [19, 37] at loop 1
[19, 37] is NOT a wall
dealing with [18, 38] at loop 2
[18, 38] is NOT a wall
dealing with [20, 38] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[19, 38][19, 39]
the points are:  [19, 38] [19, 39]
type for point in is_valid_node  <class 'list'>
[19, 38] 19 38
type for point in is_valid_node  <class 'list'>
[19, 39] 19 39
the point we are trying to find neighbors for  [19, 39]
neighboring cells are:  [[19, 40], [19, 38], [18, 39], [20, 39]]
dealing with [19, 40] at loop 0
dealing with [19, 38] at loop 1
[19, 38] is NOT a wall
dealing with [18, 39] at loop 2
dealing with [20, 39] at loop 3
[20, 39] is NOT a wall
neighbors of b [[19, 38], [20, 39]]
cost from [19, 38] to [19, 39] is 1
<class 'int'>
9 27 36
9 27 36
36 <class 'int'>
9 27 36
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[19, 38][19, 37]
the points are:  [19, 38] [19, 37]
type for point in is_valid_node  <class 'list'>
[19, 38] 19 38
type for point in is_valid_node  <class 'list'>
[19, 37] 19 37
the point we are trying to find neighbors for  [19, 37]
neighboring cells are:  [[19, 38], [19, 36], [18, 37], [20, 37]]
dealing with [19, 38] at loop 0
[19, 38] is NOT a wall
dealing with [19, 36] at loop 1
[19, 36] is NOT a wall
dealing with [18, 37] at loop 2
dealing with [20, 37] at loop 3
neighbors of b [[19, 38], [19, 36]]
cost from [19, 38] to [19, 37] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[19, 38][18, 38]
the points are:  [19, 38] [18, 38]
type for point in is_valid_node  <class 'list'>
[19, 38] 19 38
type for point in is_valid_node  <class 'list'>
[18, 38] 18 38
the point we are trying to find neighbors for  [18, 38]
neighboring cells are:  [[18, 39], [18, 37], [17, 38], [19, 38]]
dealing with [18, 39] at loop 0
dealing with [18, 37] at loop 1
dealing with [17, 38] at loop 2
[17, 38] is NOT a wall
dealing with [19, 38] at loop 3
[19, 38] is NOT a wall
neighbors of b [[17, 38], [19, 38]]
cost from [19, 38] to [18, 38] is 1
[21, 36] (21, 36)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 36] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 36] 21 36
the point we are trying to find neighbors for  [21, 36]
neighboring cells are:  [[21, 37], [21, 35], [20, 36], [22, 36]]
dealing with [21, 37] at loop 0
[21, 37] is NOT a wall
dealing with [21, 35] at loop 1
[21, 35] is NOT a wall
dealing with [20, 36] at loop 2
dealing with [22, 36] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[21, 36][21, 37]
the points are:  [21, 36] [21, 37]
type for point in is_valid_node  <class 'list'>
[21, 36] 21 36
type for point in is_valid_node  <class 'list'>
[21, 37] 21 37
the point we are trying to find neighbors for  [21, 37]
neighboring cells are:  [[21, 38], [21, 36], [20, 37], [22, 37]]
dealing with [21, 38] at loop 0
dealing with [21, 36] at loop 1
[21, 36] is NOT a wall
dealing with [20, 37] at loop 2
dealing with [22, 37] at loop 3
neighbors of b [[21, 36]]
cost from [21, 36] to [21, 37] is 1
<class 'int'>
11 25 36
11 25 36
36 <class 'int'>
11 25 36
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[21, 36][21, 35]
the points are:  [21, 36] [21, 35]
type for point in is_valid_node  <class 'list'>
[21, 36] 21 36
type for point in is_valid_node  <class 'list'>
[21, 35] 21 35
the point we are trying to find neighbors for  [21, 35]
neighboring cells are:  [[21, 36], [21, 34], [20, 35], [22, 35]]
dealing with [21, 36] at loop 0
[21, 36] is NOT a wall
dealing with [21, 34] at loop 1
[21, 34] is NOT a wall
dealing with [20, 35] at loop 2
dealing with [22, 35] at loop 3
neighbors of b [[21, 36], [21, 34]]
cost from [21, 36] to [21, 35] is 1
[2, 43] (2, 43)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 43] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 43] 2 43
the point we are trying to find neighbors for  [2, 43]
neighboring cells are:  [[2, 44], [2, 42], [1, 43], [3, 43]]
dealing with [2, 44] at loop 0
dealing with [2, 42] at loop 1
dealing with [1, 43] at loop 2
[1, 43] is NOT a wall
dealing with [3, 43] at loop 3
[3, 43] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[2, 43][1, 43]
the points are:  [2, 43] [1, 43]
type for point in is_valid_node  <class 'list'>
[2, 43] 2 43
type for point in is_valid_node  <class 'list'>
[1, 43] 1 43
the point we are trying to find neighbors for  [1, 43]
neighboring cells are:  [[1, 44], [1, 42], [0, 43], [2, 43]]
dealing with [1, 44] at loop 0
[1, 44] is NOT a wall
dealing with [1, 42] at loop 1
dealing with [0, 43] at loop 2
dealing with [2, 43] at loop 3
[2, 43] is NOT a wall
neighbors of b [[1, 44], [2, 43]]
cost from [2, 43] to [1, 43] is 1
<class 'int'>
9 31 40
9 31 40
40 <class 'int'>
9 31 40
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
65[2, 43][3, 43]
the points are:  [2, 43] [3, 43]
type for point in is_valid_node  <class 'list'>
[2, 43] 2 43
type for point in is_valid_node  <class 'list'>
[3, 43] 3 43
the point we are trying to find neighbors for  [3, 43]
neighboring cells are:  [[3, 44], [3, 42], [2, 43], [4, 43]]
dealing with [3, 44] at loop 0
dealing with [3, 42] at loop 1
[3, 42] is NOT a wall
dealing with [2, 43] at loop 2
[2, 43] is NOT a wall
dealing with [4, 43] at loop 3
[4, 43] is NOT a wall
neighbors of b [[3, 42], [2, 43], [4, 43]]
cost from [2, 43] to [3, 43] is 1
[6, 45] (6, 45)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 45] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 45] 6 45
the point we are trying to find neighbors for  [6, 45]
neighboring cells are:  [[6, 46], [6, 44], [5, 45], [7, 45]]
dealing with [6, 46] at loop 0
dealing with [6, 44] at loop 1
dealing with [5, 45] at loop 2
[5, 45] is NOT a wall
dealing with [7, 45] at loop 3
[7, 45] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[6, 45][5, 45]
the points are:  [6, 45] [5, 45]
type for point in is_valid_node  <class 'list'>
[6, 45] 6 45
type for point in is_valid_node  <class 'list'>
[5, 45] 5 45
the point we are trying to find neighbors for  [5, 45]
neighboring cells are:  [[5, 46], [5, 44], [4, 45], [6, 45]]
dealing with [5, 46] at loop 0
dealing with [5, 44] at loop 1
dealing with [4, 45] at loop 2
[4, 45] is NOT a wall
dealing with [6, 45] at loop 3
[6, 45] is NOT a wall
neighbors of b [[4, 45], [6, 45]]
cost from [6, 45] to [5, 45] is 1
<class 'int'>
5 33 38
5 33 38
38 <class 'int'>
5 33 38
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[6, 45][7, 45]
the points are:  [6, 45] [7, 45]
type for point in is_valid_node  <class 'list'>
[6, 45] 6 45
type for point in is_valid_node  <class 'list'>
[7, 45] 7 45
the point we are trying to find neighbors for  [7, 45]
neighboring cells are:  [[7, 46], [7, 44], [6, 45], [8, 45]]
dealing with [7, 46] at loop 0
dealing with [7, 44] at loop 1
[7, 44] is NOT a wall
dealing with [6, 45] at loop 2
[6, 45] is NOT a wall
dealing with [8, 45] at loop 3
neighbors of b [[7, 44], [6, 45]]
cost from [6, 45] to [7, 45] is 1
[9, 40] (9, 40)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 40] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 40] 9 40
the point we are trying to find neighbors for  [9, 40]
neighboring cells are:  [[9, 41], [9, 39], [8, 40], [10, 40]]
dealing with [9, 41] at loop 0
[9, 41] is NOT a wall
dealing with [9, 39] at loop 1
[9, 39] is NOT a wall
dealing with [8, 40] at loop 2
dealing with [10, 40] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
75[9, 40][9, 41]
the points are:  [9, 40] [9, 41]
type for point in is_valid_node  <class 'list'>
[9, 40] 9 40
type for point in is_valid_node  <class 'list'>
[9, 41] 9 41
the point we are trying to find neighbors for  [9, 41]
neighboring cells are:  [[9, 42], [9, 40], [8, 41], [10, 41]]
dealing with [9, 42] at loop 0
dealing with [9, 40] at loop 1
[9, 40] is NOT a wall
dealing with [8, 41] at loop 2
dealing with [10, 41] at loop 3
[10, 41] is NOT a wall
neighbors of b [[9, 40], [10, 41]]
cost from [9, 40] to [9, 41] is 1
<class 'int'>
1 29 30
1 29 30
30 <class 'int'>
1 29 30
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
75[9, 40][9, 39]
the points are:  [9, 40] [9, 39]
type for point in is_valid_node  <class 'list'>
[9, 40] 9 40
type for point in is_valid_node  <class 'list'>
[9, 39] 9 39
the point we are trying to find neighbors for  [9, 39]
neighboring cells are:  [[9, 40], [9, 38], [8, 39], [10, 39]]
dealing with [9, 40] at loop 0
[9, 40] is NOT a wall
dealing with [9, 38] at loop 1
dealing with [8, 39] at loop 2
dealing with [10, 39] at loop 3
[10, 39] is NOT a wall
neighbors of b [[9, 40], [10, 39]]
cost from [9, 40] to [9, 39] is 1
[9, 46] (9, 46)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 46] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 46] 9 46
the point we are trying to find neighbors for  [9, 46]
neighboring cells are:  [[9, 47], [9, 45], [8, 46], [10, 46]]
dealing with [9, 47] at loop 0
[9, 47] is NOT a wall
dealing with [9, 45] at loop 1
[9, 45] is NOT a wall
dealing with [8, 46] at loop 2
dealing with [10, 46] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[9, 46][9, 47]
the points are:  [9, 46] [9, 47]
type for point in is_valid_node  <class 'list'>
[9, 46] 9 46
type for point in is_valid_node  <class 'list'>
[9, 47] 9 47
the point we are trying to find neighbors for  [9, 47]
neighboring cells are:  [[9, 48], [9, 46], [8, 47], [10, 47]]
dealing with [9, 48] at loop 0
dealing with [9, 46] at loop 1
[9, 46] is NOT a wall
dealing with [8, 47] at loop 2
dealing with [10, 47] at loop 3
[10, 47] is NOT a wall
neighbors of b [[9, 46], [10, 47]]
cost from [9, 46] to [9, 47] is 1
<class 'int'>
1 35 36
1 35 36
36 <class 'int'>
1 35 36
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[9, 46][9, 45]
the points are:  [9, 46] [9, 45]
type for point in is_valid_node  <class 'list'>
[9, 46] 9 46
type for point in is_valid_node  <class 'list'>
[9, 45] 9 45
the point we are trying to find neighbors for  [9, 45]
neighboring cells are:  [[9, 46], [9, 44], [8, 45], [10, 45]]
dealing with [9, 46] at loop 0
[9, 46] is NOT a wall
dealing with [9, 44] at loop 1
[9, 44] is NOT a wall
dealing with [8, 45] at loop 2
dealing with [10, 45] at loop 3
neighbors of b [[9, 46], [9, 44]]
cost from [9, 46] to [9, 45] is 1
[13, 39] (13, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 39] 13 39
the point we are trying to find neighbors for  [13, 39]
neighboring cells are:  [[13, 40], [13, 38], [12, 39], [14, 39]]
dealing with [13, 40] at loop 0
dealing with [13, 38] at loop 1
dealing with [12, 39] at loop 2
[12, 39] is NOT a wall
dealing with [14, 39] at loop 3
[14, 39] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[13, 39][12, 39]
the points are:  [13, 39] [12, 39]
type for point in is_valid_node  <class 'list'>
[13, 39] 13 39
type for point in is_valid_node  <class 'list'>
[12, 39] 12 39
the point we are trying to find neighbors for  [12, 39]
neighboring cells are:  [[12, 40], [12, 38], [11, 39], [13, 39]]
dealing with [12, 40] at loop 0
dealing with [12, 38] at loop 1
dealing with [11, 39] at loop 2
[11, 39] is NOT a wall
dealing with [13, 39] at loop 3
[13, 39] is NOT a wall
neighbors of b [[11, 39], [13, 39]]
cost from [13, 39] to [12, 39] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[13, 39][14, 39]
the points are:  [13, 39] [14, 39]
type for point in is_valid_node  <class 'list'>
[13, 39] 13 39
type for point in is_valid_node  <class 'list'>
[14, 39] 14 39
the point we are trying to find neighbors for  [14, 39]
neighboring cells are:  [[14, 40], [14, 38], [13, 39], [15, 39]]
dealing with [14, 40] at loop 0
dealing with [14, 38] at loop 1
dealing with [13, 39] at loop 2
[13, 39] is NOT a wall
dealing with [15, 39] at loop 3
[15, 39] is NOT a wall
neighbors of b [[13, 39], [15, 39]]
cost from [13, 39] to [14, 39] is 1
<class 'int'>
4 27 31
4 27 31
31 <class 'int'>
4 27 31
[17, 41] (17, 41)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 41] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 41] 17 41
the point we are trying to find neighbors for  [17, 41]
neighboring cells are:  [[17, 42], [17, 40], [16, 41], [18, 41]]
dealing with [17, 42] at loop 0
dealing with [17, 40] at loop 1
[17, 40] is NOT a wall
dealing with [16, 41] at loop 2
[16, 41] is NOT a wall
dealing with [18, 41] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[17, 41][17, 40]
the points are:  [17, 41] [17, 40]
type for point in is_valid_node  <class 'list'>
[17, 41] 17 41
type for point in is_valid_node  <class 'list'>
[17, 40] 17 40
the point we are trying to find neighbors for  [17, 40]
neighboring cells are:  [[17, 41], [17, 39], [16, 40], [18, 40]]
dealing with [17, 41] at loop 0
[17, 41] is NOT a wall
dealing with [17, 39] at loop 1
[17, 39] is NOT a wall
dealing with [16, 40] at loop 2
dealing with [18, 40] at loop 3
neighbors of b [[17, 41], [17, 39]]
cost from [17, 41] to [17, 40] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[17, 41][16, 41]
the points are:  [17, 41] [16, 41]
type for point in is_valid_node  <class 'list'>
[17, 41] 17 41
type for point in is_valid_node  <class 'list'>
[16, 41] 16 41
the point we are trying to find neighbors for  [16, 41]
neighboring cells are:  [[16, 42], [16, 40], [15, 41], [17, 41]]
dealing with [16, 42] at loop 0
dealing with [16, 40] at loop 1
dealing with [15, 41] at loop 2
[15, 41] is NOT a wall
dealing with [17, 41] at loop 3
[17, 41] is NOT a wall
neighbors of b [[15, 41], [17, 41]]
cost from [17, 41] to [16, 41] is 1
<class 'int'>
6 29 35
6 29 35
35 <class 'int'>
6 29 35
[16, 41] (16, 41)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 41] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 41] 16 41
the point we are trying to find neighbors for  [16, 41]
neighboring cells are:  [[16, 42], [16, 40], [15, 41], [17, 41]]
dealing with [16, 42] at loop 0
dealing with [16, 40] at loop 1
dealing with [15, 41] at loop 2
[15, 41] is NOT a wall
dealing with [17, 41] at loop 3
[17, 41] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[16, 41][15, 41]
the points are:  [16, 41] [15, 41]
type for point in is_valid_node  <class 'list'>
[16, 41] 16 41
type for point in is_valid_node  <class 'list'>
[15, 41] 15 41
the point we are trying to find neighbors for  [15, 41]
neighboring cells are:  [[15, 42], [15, 40], [14, 41], [16, 41]]
dealing with [15, 42] at loop 0
dealing with [15, 40] at loop 1
[15, 40] is NOT a wall
dealing with [14, 41] at loop 2
dealing with [16, 41] at loop 3
[16, 41] is NOT a wall
neighbors of b [[15, 40], [16, 41]]
cost from [16, 41] to [15, 41] is 1
<class 'int'>
5 29 34
5 29 34
34 <class 'int'>
5 29 34
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[16, 41][17, 41]
the points are:  [16, 41] [17, 41]
type for point in is_valid_node  <class 'list'>
[16, 41] 16 41
type for point in is_valid_node  <class 'list'>
[17, 41] 17 41
the point we are trying to find neighbors for  [17, 41]
neighboring cells are:  [[17, 42], [17, 40], [16, 41], [18, 41]]
dealing with [17, 42] at loop 0
dealing with [17, 40] at loop 1
[17, 40] is NOT a wall
dealing with [16, 41] at loop 2
[16, 41] is NOT a wall
dealing with [18, 41] at loop 3
neighbors of b [[17, 40], [16, 41]]
cost from [16, 41] to [17, 41] is 1
[15, 41] (15, 41)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 41] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 41] 15 41
the point we are trying to find neighbors for  [15, 41]
neighboring cells are:  [[15, 42], [15, 40], [14, 41], [16, 41]]
dealing with [15, 42] at loop 0
dealing with [15, 40] at loop 1
[15, 40] is NOT a wall
dealing with [14, 41] at loop 2
dealing with [16, 41] at loop 3
[16, 41] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[15, 41][15, 40]
the points are:  [15, 41] [15, 40]
type for point in is_valid_node  <class 'list'>
[15, 41] 15 41
type for point in is_valid_node  <class 'list'>
[15, 40] 15 40
the point we are trying to find neighbors for  [15, 40]
neighboring cells are:  [[15, 41], [15, 39], [14, 40], [16, 40]]
dealing with [15, 41] at loop 0
[15, 41] is NOT a wall
dealing with [15, 39] at loop 1
[15, 39] is NOT a wall
dealing with [14, 40] at loop 2
dealing with [16, 40] at loop 3
neighbors of b [[15, 41], [15, 39]]
cost from [15, 41] to [15, 40] is 1
<class 'int'>
5 28 33
5 28 33
33 <class 'int'>
5 28 33
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[15, 41][16, 41]
the points are:  [15, 41] [16, 41]
type for point in is_valid_node  <class 'list'>
[15, 41] 15 41
type for point in is_valid_node  <class 'list'>
[16, 41] 16 41
the point we are trying to find neighbors for  [16, 41]
neighboring cells are:  [[16, 42], [16, 40], [15, 41], [17, 41]]
dealing with [16, 42] at loop 0
dealing with [16, 40] at loop 1
dealing with [15, 41] at loop 2
[15, 41] is NOT a wall
dealing with [17, 41] at loop 3
[17, 41] is NOT a wall
neighbors of b [[15, 41], [17, 41]]
cost from [15, 41] to [16, 41] is 1
[15, 40] (15, 40)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 40] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 40] 15 40
the point we are trying to find neighbors for  [15, 40]
neighboring cells are:  [[15, 41], [15, 39], [14, 40], [16, 40]]
dealing with [15, 41] at loop 0
[15, 41] is NOT a wall
dealing with [15, 39] at loop 1
[15, 39] is NOT a wall
dealing with [14, 40] at loop 2
dealing with [16, 40] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
71[15, 40][15, 41]
the points are:  [15, 40] [15, 41]
type for point in is_valid_node  <class 'list'>
[15, 40] 15 40
type for point in is_valid_node  <class 'list'>
[15, 41] 15 41
the point we are trying to find neighbors for  [15, 41]
neighboring cells are:  [[15, 42], [15, 40], [14, 41], [16, 41]]
dealing with [15, 42] at loop 0
dealing with [15, 40] at loop 1
[15, 40] is NOT a wall
dealing with [14, 41] at loop 2
dealing with [16, 41] at loop 3
[16, 41] is NOT a wall
neighbors of b [[15, 40], [16, 41]]
cost from [15, 40] to [15, 41] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
71[15, 40][15, 39]
the points are:  [15, 40] [15, 39]
type for point in is_valid_node  <class 'list'>
[15, 40] 15 40
type for point in is_valid_node  <class 'list'>
[15, 39] 15 39
the point we are trying to find neighbors for  [15, 39]
neighboring cells are:  [[15, 40], [15, 38], [14, 39], [16, 39]]
dealing with [15, 40] at loop 0
[15, 40] is NOT a wall
dealing with [15, 38] at loop 1
dealing with [14, 39] at loop 2
[14, 39] is NOT a wall
dealing with [16, 39] at loop 3
neighbors of b [[15, 40], [14, 39]]
cost from [15, 40] to [15, 39] is 1
<class 'int'>
5 27 32
5 27 32
32 <class 'int'>
5 27 32
[15, 39] (15, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 39] 15 39
the point we are trying to find neighbors for  [15, 39]
neighboring cells are:  [[15, 40], [15, 38], [14, 39], [16, 39]]
dealing with [15, 40] at loop 0
[15, 40] is NOT a wall
dealing with [15, 38] at loop 1
dealing with [14, 39] at loop 2
[14, 39] is NOT a wall
dealing with [16, 39] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
72[15, 39][15, 40]
the points are:  [15, 39] [15, 40]
type for point in is_valid_node  <class 'list'>
[15, 39] 15 39
type for point in is_valid_node  <class 'list'>
[15, 40] 15 40
the point we are trying to find neighbors for  [15, 40]
neighboring cells are:  [[15, 41], [15, 39], [14, 40], [16, 40]]
dealing with [15, 41] at loop 0
[15, 41] is NOT a wall
dealing with [15, 39] at loop 1
[15, 39] is NOT a wall
dealing with [14, 40] at loop 2
dealing with [16, 40] at loop 3
neighbors of b [[15, 41], [15, 39]]
cost from [15, 39] to [15, 40] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
72[15, 39][14, 39]
the points are:  [15, 39] [14, 39]
type for point in is_valid_node  <class 'list'>
[15, 39] 15 39
type for point in is_valid_node  <class 'list'>
[14, 39] 14 39
the point we are trying to find neighbors for  [14, 39]
neighboring cells are:  [[14, 40], [14, 38], [13, 39], [15, 39]]
dealing with [14, 40] at loop 0
dealing with [14, 38] at loop 1
dealing with [13, 39] at loop 2
[13, 39] is NOT a wall
dealing with [15, 39] at loop 3
[15, 39] is NOT a wall
neighbors of b [[13, 39], [15, 39]]
cost from [15, 39] to [14, 39] is 1
<class 'int'>
4 27 31
4 27 31
31 <class 'int'>
4 27 31
[14, 39] (14, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 39] 14 39
the point we are trying to find neighbors for  [14, 39]
neighboring cells are:  [[14, 40], [14, 38], [13, 39], [15, 39]]
dealing with [14, 40] at loop 0
dealing with [14, 38] at loop 1
dealing with [13, 39] at loop 2
[13, 39] is NOT a wall
dealing with [15, 39] at loop 3
[15, 39] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[14, 39][13, 39]
the points are:  [14, 39] [13, 39]
type for point in is_valid_node  <class 'list'>
[14, 39] 14 39
type for point in is_valid_node  <class 'list'>
[13, 39] 13 39
the point we are trying to find neighbors for  [13, 39]
neighboring cells are:  [[13, 40], [13, 38], [12, 39], [14, 39]]
dealing with [13, 40] at loop 0
dealing with [13, 38] at loop 1
dealing with [12, 39] at loop 2
[12, 39] is NOT a wall
dealing with [14, 39] at loop 3
[14, 39] is NOT a wall
neighbors of b [[12, 39], [14, 39]]
cost from [14, 39] to [13, 39] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[14, 39][15, 39]
the points are:  [14, 39] [15, 39]
type for point in is_valid_node  <class 'list'>
[14, 39] 14 39
type for point in is_valid_node  <class 'list'>
[15, 39] 15 39
the point we are trying to find neighbors for  [15, 39]
neighboring cells are:  [[15, 40], [15, 38], [14, 39], [16, 39]]
dealing with [15, 40] at loop 0
[15, 40] is NOT a wall
dealing with [15, 38] at loop 1
dealing with [14, 39] at loop 2
[14, 39] is NOT a wall
dealing with [16, 39] at loop 3
neighbors of b [[15, 40], [14, 39]]
cost from [14, 39] to [15, 39] is 1
[19, 39] (19, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 39] 19 39
the point we are trying to find neighbors for  [19, 39]
neighboring cells are:  [[19, 40], [19, 38], [18, 39], [20, 39]]
dealing with [19, 40] at loop 0
dealing with [19, 38] at loop 1
[19, 38] is NOT a wall
dealing with [18, 39] at loop 2
dealing with [20, 39] at loop 3
[20, 39] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[19, 39][19, 38]
the points are:  [19, 39] [19, 38]
type for point in is_valid_node  <class 'list'>
[19, 39] 19 39
type for point in is_valid_node  <class 'list'>
[19, 38] 19 38
the point we are trying to find neighbors for  [19, 38]
neighboring cells are:  [[19, 39], [19, 37], [18, 38], [20, 38]]
dealing with [19, 39] at loop 0
[19, 39] is NOT a wall
dealing with [19, 37] at loop 1
[19, 37] is NOT a wall
dealing with [18, 38] at loop 2
[18, 38] is NOT a wall
dealing with [20, 38] at loop 3
neighbors of b [[19, 39], [19, 37], [18, 38]]
cost from [19, 39] to [19, 38] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[19, 39][20, 39]
the points are:  [19, 39] [20, 39]
type for point in is_valid_node  <class 'list'>
[19, 39] 19 39
type for point in is_valid_node  <class 'list'>
[20, 39] 20 39
the point we are trying to find neighbors for  [20, 39]
neighboring cells are:  [[20, 40], [20, 38], [19, 39], [21, 39]]
dealing with [20, 40] at loop 0
dealing with [20, 38] at loop 1
dealing with [19, 39] at loop 2
[19, 39] is NOT a wall
dealing with [21, 39] at loop 3
[21, 39] is NOT a wall
neighbors of b [[19, 39], [21, 39]]
cost from [19, 39] to [20, 39] is 1
<class 'int'>
10 27 37
10 27 37
37 <class 'int'>
10 27 37
[21, 37] (21, 37)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 37] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 37] 21 37
the point we are trying to find neighbors for  [21, 37]
neighboring cells are:  [[21, 38], [21, 36], [20, 37], [22, 37]]
dealing with [21, 38] at loop 0
dealing with [21, 36] at loop 1
[21, 36] is NOT a wall
dealing with [20, 37] at loop 2
dealing with [22, 37] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[21, 37][21, 36]
the points are:  [21, 37] [21, 36]
type for point in is_valid_node  <class 'list'>
[21, 37] 21 37
type for point in is_valid_node  <class 'list'>
[21, 36] 21 36
the point we are trying to find neighbors for  [21, 36]
neighboring cells are:  [[21, 37], [21, 35], [20, 36], [22, 36]]
dealing with [21, 37] at loop 0
[21, 37] is NOT a wall
dealing with [21, 35] at loop 1
[21, 35] is NOT a wall
dealing with [20, 36] at loop 2
dealing with [22, 36] at loop 3
neighbors of b [[21, 37], [21, 35]]
cost from [21, 37] to [21, 36] is 1
[1, 43] (1, 43)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 43] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 43] 1 43
the point we are trying to find neighbors for  [1, 43]
neighboring cells are:  [[1, 44], [1, 42], [0, 43], [2, 43]]
dealing with [1, 44] at loop 0
[1, 44] is NOT a wall
dealing with [1, 42] at loop 1
dealing with [0, 43] at loop 2
dealing with [2, 43] at loop 3
[2, 43] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[1, 43][1, 44]
the points are:  [1, 43] [1, 44]
type for point in is_valid_node  <class 'list'>
[1, 43] 1 43
type for point in is_valid_node  <class 'list'>
[1, 44] 1 44
the point we are trying to find neighbors for  [1, 44]
neighboring cells are:  [[1, 45], [1, 43], [0, 44], [2, 44]]
dealing with [1, 45] at loop 0
[1, 45] is NOT a wall
dealing with [1, 43] at loop 1
[1, 43] is NOT a wall
dealing with [0, 44] at loop 2
dealing with [2, 44] at loop 3
neighbors of b [[1, 45], [1, 43]]
cost from [1, 43] to [1, 44] is 1
<class 'int'>
9 32 41
9 32 41
41 <class 'int'>
9 32 41
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
66[1, 43][2, 43]
the points are:  [1, 43] [2, 43]
type for point in is_valid_node  <class 'list'>
[1, 43] 1 43
type for point in is_valid_node  <class 'list'>
[2, 43] 2 43
the point we are trying to find neighbors for  [2, 43]
neighboring cells are:  [[2, 44], [2, 42], [1, 43], [3, 43]]
dealing with [2, 44] at loop 0
dealing with [2, 42] at loop 1
dealing with [1, 43] at loop 2
[1, 43] is NOT a wall
dealing with [3, 43] at loop 3
[3, 43] is NOT a wall
neighbors of b [[1, 43], [3, 43]]
cost from [1, 43] to [2, 43] is 1
[5, 45] (5, 45)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 45] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 45] 5 45
the point we are trying to find neighbors for  [5, 45]
neighboring cells are:  [[5, 46], [5, 44], [4, 45], [6, 45]]
dealing with [5, 46] at loop 0
dealing with [5, 44] at loop 1
dealing with [4, 45] at loop 2
[4, 45] is NOT a wall
dealing with [6, 45] at loop 3
[6, 45] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[5, 45][4, 45]
the points are:  [5, 45] [4, 45]
type for point in is_valid_node  <class 'list'>
[5, 45] 5 45
type for point in is_valid_node  <class 'list'>
[4, 45] 4 45
the point we are trying to find neighbors for  [4, 45]
neighboring cells are:  [[4, 46], [4, 44], [3, 45], [5, 45]]
dealing with [4, 46] at loop 0
dealing with [4, 44] at loop 1
dealing with [3, 45] at loop 2
[3, 45] is NOT a wall
dealing with [5, 45] at loop 3
[5, 45] is NOT a wall
neighbors of b [[3, 45], [5, 45]]
cost from [5, 45] to [4, 45] is 1
<class 'int'>
6 33 39
6 33 39
39 <class 'int'>
6 33 39
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[5, 45][6, 45]
the points are:  [5, 45] [6, 45]
type for point in is_valid_node  <class 'list'>
[5, 45] 5 45
type for point in is_valid_node  <class 'list'>
[6, 45] 6 45
the point we are trying to find neighbors for  [6, 45]
neighboring cells are:  [[6, 46], [6, 44], [5, 45], [7, 45]]
dealing with [6, 46] at loop 0
dealing with [6, 44] at loop 1
dealing with [5, 45] at loop 2
[5, 45] is NOT a wall
dealing with [7, 45] at loop 3
[7, 45] is NOT a wall
neighbors of b [[5, 45], [7, 45]]
cost from [5, 45] to [6, 45] is 1
[9, 41] (9, 41)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 41] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 41] 9 41
the point we are trying to find neighbors for  [9, 41]
neighboring cells are:  [[9, 42], [9, 40], [8, 41], [10, 41]]
dealing with [9, 42] at loop 0
dealing with [9, 40] at loop 1
[9, 40] is NOT a wall
dealing with [8, 41] at loop 2
dealing with [10, 41] at loop 3
[10, 41] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
76[9, 41][9, 40]
the points are:  [9, 41] [9, 40]
type for point in is_valid_node  <class 'list'>
[9, 41] 9 41
type for point in is_valid_node  <class 'list'>
[9, 40] 9 40
the point we are trying to find neighbors for  [9, 40]
neighboring cells are:  [[9, 41], [9, 39], [8, 40], [10, 40]]
dealing with [9, 41] at loop 0
[9, 41] is NOT a wall
dealing with [9, 39] at loop 1
[9, 39] is NOT a wall
dealing with [8, 40] at loop 2
dealing with [10, 40] at loop 3
neighbors of b [[9, 41], [9, 39]]
cost from [9, 41] to [9, 40] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
76[9, 41][10, 41]
the points are:  [9, 41] [10, 41]
type for point in is_valid_node  <class 'list'>
[9, 41] 9 41
type for point in is_valid_node  <class 'list'>
[10, 41] 10 41
the point we are trying to find neighbors for  [10, 41]
neighboring cells are:  [[10, 42], [10, 40], [9, 41], [11, 41]]
dealing with [10, 42] at loop 0
dealing with [10, 40] at loop 1
dealing with [9, 41] at loop 2
[9, 41] is NOT a wall
dealing with [11, 41] at loop 3
[11, 41] is NOT a wall
neighbors of b [[9, 41], [11, 41]]
cost from [9, 41] to [10, 41] is 1
<class 'int'>
0 29 29
0 29 29
29 <class 'int'>
0 29 29
[9, 47] (9, 47)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 47] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 47] 9 47
the point we are trying to find neighbors for  [9, 47]
neighboring cells are:  [[9, 48], [9, 46], [8, 47], [10, 47]]
dealing with [9, 48] at loop 0
dealing with [9, 46] at loop 1
[9, 46] is NOT a wall
dealing with [8, 47] at loop 2
dealing with [10, 47] at loop 3
[10, 47] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[9, 47][9, 46]
the points are:  [9, 47] [9, 46]
type for point in is_valid_node  <class 'list'>
[9, 47] 9 47
type for point in is_valid_node  <class 'list'>
[9, 46] 9 46
the point we are trying to find neighbors for  [9, 46]
neighboring cells are:  [[9, 47], [9, 45], [8, 46], [10, 46]]
dealing with [9, 47] at loop 0
[9, 47] is NOT a wall
dealing with [9, 45] at loop 1
[9, 45] is NOT a wall
dealing with [8, 46] at loop 2
dealing with [10, 46] at loop 3
neighbors of b [[9, 47], [9, 45]]
cost from [9, 47] to [9, 46] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[9, 47][10, 47]
the points are:  [9, 47] [10, 47]
type for point in is_valid_node  <class 'list'>
[9, 47] 9 47
type for point in is_valid_node  <class 'list'>
[10, 47] 10 47
the point we are trying to find neighbors for  [10, 47]
neighboring cells are:  [[10, 48], [10, 46], [9, 47], [11, 47]]
dealing with [10, 48] at loop 0
dealing with [10, 46] at loop 1
dealing with [9, 47] at loop 2
[9, 47] is NOT a wall
dealing with [11, 47] at loop 3
[11, 47] is NOT a wall
neighbors of b [[9, 47], [11, 47]]
cost from [9, 47] to [10, 47] is 1
<class 'int'>
0 35 35
0 35 35
35 <class 'int'>
0 35 35
[10, 41] (10, 41)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[10, 41] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[10, 41] 10 41
the point we are trying to find neighbors for  [10, 41]
neighboring cells are:  [[10, 42], [10, 40], [9, 41], [11, 41]]
dealing with [10, 42] at loop 0
dealing with [10, 40] at loop 1
dealing with [9, 41] at loop 2
[9, 41] is NOT a wall
dealing with [11, 41] at loop 3
[11, 41] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[10, 41][9, 41]
the points are:  [10, 41] [9, 41]
type for point in is_valid_node  <class 'list'>
[10, 41] 10 41
type for point in is_valid_node  <class 'list'>
[9, 41] 9 41
the point we are trying to find neighbors for  [9, 41]
neighboring cells are:  [[9, 42], [9, 40], [8, 41], [10, 41]]
dealing with [9, 42] at loop 0
dealing with [9, 40] at loop 1
[9, 40] is NOT a wall
dealing with [8, 41] at loop 2
dealing with [10, 41] at loop 3
[10, 41] is NOT a wall
neighbors of b [[9, 40], [10, 41]]
cost from [10, 41] to [9, 41] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[10, 41][11, 41]
the points are:  [10, 41] [11, 41]
type for point in is_valid_node  <class 'list'>
[10, 41] 10 41
type for point in is_valid_node  <class 'list'>
[11, 41] 11 41
the point we are trying to find neighbors for  [11, 41]
neighboring cells are:  [[11, 42], [11, 40], [10, 41], [12, 41]]
dealing with [11, 42] at loop 0
dealing with [11, 40] at loop 1
dealing with [10, 41] at loop 2
[10, 41] is NOT a wall
dealing with [12, 41] at loop 3
[12, 41] is NOT a wall
neighbors of b [[10, 41], [12, 41]]
cost from [10, 41] to [11, 41] is 1
<class 'int'>
1 29 30
1 29 30
30 <class 'int'>
1 29 30
[10, 47] (10, 47)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[10, 47] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[10, 47] 10 47
the point we are trying to find neighbors for  [10, 47]
neighboring cells are:  [[10, 48], [10, 46], [9, 47], [11, 47]]
dealing with [10, 48] at loop 0
dealing with [10, 46] at loop 1
dealing with [9, 47] at loop 2
[9, 47] is NOT a wall
dealing with [11, 47] at loop 3
[11, 47] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
71[10, 47][9, 47]
the points are:  [10, 47] [9, 47]
type for point in is_valid_node  <class 'list'>
[10, 47] 10 47
type for point in is_valid_node  <class 'list'>
[9, 47] 9 47
the point we are trying to find neighbors for  [9, 47]
neighboring cells are:  [[9, 48], [9, 46], [8, 47], [10, 47]]
dealing with [9, 48] at loop 0
dealing with [9, 46] at loop 1
[9, 46] is NOT a wall
dealing with [8, 47] at loop 2
dealing with [10, 47] at loop 3
[10, 47] is NOT a wall
neighbors of b [[9, 46], [10, 47]]
cost from [10, 47] to [9, 47] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
71[10, 47][11, 47]
the points are:  [10, 47] [11, 47]
type for point in is_valid_node  <class 'list'>
[10, 47] 10 47
type for point in is_valid_node  <class 'list'>
[11, 47] 11 47
the point we are trying to find neighbors for  [11, 47]
neighboring cells are:  [[11, 48], [11, 46], [10, 47], [12, 47]]
dealing with [11, 48] at loop 0
[11, 48] is NOT a wall
dealing with [11, 46] at loop 1
[11, 46] is NOT a wall
dealing with [10, 47] at loop 2
[10, 47] is NOT a wall
dealing with [12, 47] at loop 3
neighbors of b [[11, 48], [11, 46], [10, 47]]
cost from [10, 47] to [11, 47] is 1
<class 'int'>
1 35 36
1 35 36
36 <class 'int'>
1 35 36
[14, 39] (14, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 39] 14 39
the point we are trying to find neighbors for  [14, 39]
neighboring cells are:  [[14, 40], [14, 38], [13, 39], [15, 39]]
dealing with [14, 40] at loop 0
dealing with [14, 38] at loop 1
dealing with [13, 39] at loop 2
[13, 39] is NOT a wall
dealing with [15, 39] at loop 3
[15, 39] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[14, 39][13, 39]
the points are:  [14, 39] [13, 39]
type for point in is_valid_node  <class 'list'>
[14, 39] 14 39
type for point in is_valid_node  <class 'list'>
[13, 39] 13 39
the point we are trying to find neighbors for  [13, 39]
neighboring cells are:  [[13, 40], [13, 38], [12, 39], [14, 39]]
dealing with [13, 40] at loop 0
dealing with [13, 38] at loop 1
dealing with [12, 39] at loop 2
[12, 39] is NOT a wall
dealing with [14, 39] at loop 3
[14, 39] is NOT a wall
neighbors of b [[12, 39], [14, 39]]
cost from [14, 39] to [13, 39] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[14, 39][15, 39]
the points are:  [14, 39] [15, 39]
type for point in is_valid_node  <class 'list'>
[14, 39] 14 39
type for point in is_valid_node  <class 'list'>
[15, 39] 15 39
the point we are trying to find neighbors for  [15, 39]
neighboring cells are:  [[15, 40], [15, 38], [14, 39], [16, 39]]
dealing with [15, 40] at loop 0
[15, 40] is NOT a wall
dealing with [15, 38] at loop 1
dealing with [14, 39] at loop 2
[14, 39] is NOT a wall
dealing with [16, 39] at loop 3
neighbors of b [[15, 40], [14, 39]]
cost from [14, 39] to [15, 39] is 1
[20, 39] (20, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[20, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[20, 39] 20 39
the point we are trying to find neighbors for  [20, 39]
neighboring cells are:  [[20, 40], [20, 38], [19, 39], [21, 39]]
dealing with [20, 40] at loop 0
dealing with [20, 38] at loop 1
dealing with [19, 39] at loop 2
[19, 39] is NOT a wall
dealing with [21, 39] at loop 3
[21, 39] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[20, 39][19, 39]
the points are:  [20, 39] [19, 39]
type for point in is_valid_node  <class 'list'>
[20, 39] 20 39
type for point in is_valid_node  <class 'list'>
[19, 39] 19 39
the point we are trying to find neighbors for  [19, 39]
neighboring cells are:  [[19, 40], [19, 38], [18, 39], [20, 39]]
dealing with [19, 40] at loop 0
dealing with [19, 38] at loop 1
[19, 38] is NOT a wall
dealing with [18, 39] at loop 2
dealing with [20, 39] at loop 3
[20, 39] is NOT a wall
neighbors of b [[19, 38], [20, 39]]
cost from [20, 39] to [19, 39] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[20, 39][21, 39]
the points are:  [20, 39] [21, 39]
type for point in is_valid_node  <class 'list'>
[20, 39] 20 39
type for point in is_valid_node  <class 'list'>
[21, 39] 21 39
the point we are trying to find neighbors for  [21, 39]
neighboring cells are:  [[21, 40], [21, 38], [20, 39], [22, 39]]
dealing with [21, 40] at loop 0
[21, 40] is NOT a wall
dealing with [21, 38] at loop 1
dealing with [20, 39] at loop 2
[20, 39] is NOT a wall
dealing with [22, 39] at loop 3
neighbors of b [[21, 40], [20, 39]]
cost from [20, 39] to [21, 39] is 1
<class 'int'>
11 27 38
11 27 38
38 <class 'int'>
11 27 38
[1, 44] (1, 44)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 44] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 44] 1 44
the point we are trying to find neighbors for  [1, 44]
neighboring cells are:  [[1, 45], [1, 43], [0, 44], [2, 44]]
dealing with [1, 45] at loop 0
[1, 45] is NOT a wall
dealing with [1, 43] at loop 1
[1, 43] is NOT a wall
dealing with [0, 44] at loop 2
dealing with [2, 44] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[1, 44][1, 45]
the points are:  [1, 44] [1, 45]
type for point in is_valid_node  <class 'list'>
[1, 44] 1 44
type for point in is_valid_node  <class 'list'>
[1, 45] 1 45
the point we are trying to find neighbors for  [1, 45]
neighboring cells are:  [[1, 46], [1, 44], [0, 45], [2, 45]]
dealing with [1, 46] at loop 0
[1, 46] is NOT a wall
dealing with [1, 44] at loop 1
[1, 44] is NOT a wall
dealing with [0, 45] at loop 2
dealing with [2, 45] at loop 3
neighbors of b [[1, 46], [1, 44]]
cost from [1, 44] to [1, 45] is 1
<class 'int'>
9 33 42
9 33 42
42 <class 'int'>
9 33 42
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
67[1, 44][1, 43]
the points are:  [1, 44] [1, 43]
type for point in is_valid_node  <class 'list'>
[1, 44] 1 44
type for point in is_valid_node  <class 'list'>
[1, 43] 1 43
the point we are trying to find neighbors for  [1, 43]
neighboring cells are:  [[1, 44], [1, 42], [0, 43], [2, 43]]
dealing with [1, 44] at loop 0
[1, 44] is NOT a wall
dealing with [1, 42] at loop 1
dealing with [0, 43] at loop 2
dealing with [2, 43] at loop 3
[2, 43] is NOT a wall
neighbors of b [[1, 44], [2, 43]]
cost from [1, 44] to [1, 43] is 1
[4, 45] (4, 45)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 45] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 45] 4 45
the point we are trying to find neighbors for  [4, 45]
neighboring cells are:  [[4, 46], [4, 44], [3, 45], [5, 45]]
dealing with [4, 46] at loop 0
dealing with [4, 44] at loop 1
dealing with [3, 45] at loop 2
[3, 45] is NOT a wall
dealing with [5, 45] at loop 3
[5, 45] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[4, 45][3, 45]
the points are:  [4, 45] [3, 45]
type for point in is_valid_node  <class 'list'>
[4, 45] 4 45
type for point in is_valid_node  <class 'list'>
[3, 45] 3 45
the point we are trying to find neighbors for  [3, 45]
neighboring cells are:  [[3, 46], [3, 44], [2, 45], [4, 45]]
dealing with [3, 46] at loop 0
[3, 46] is NOT a wall
dealing with [3, 44] at loop 1
dealing with [2, 45] at loop 2
dealing with [4, 45] at loop 3
[4, 45] is NOT a wall
neighbors of b [[3, 46], [4, 45]]
cost from [4, 45] to [3, 45] is 1
<class 'int'>
7 33 40
7 33 40
40 <class 'int'>
7 33 40
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[4, 45][5, 45]
the points are:  [4, 45] [5, 45]
type for point in is_valid_node  <class 'list'>
[4, 45] 4 45
type for point in is_valid_node  <class 'list'>
[5, 45] 5 45
the point we are trying to find neighbors for  [5, 45]
neighboring cells are:  [[5, 46], [5, 44], [4, 45], [6, 45]]
dealing with [5, 46] at loop 0
dealing with [5, 44] at loop 1
dealing with [4, 45] at loop 2
[4, 45] is NOT a wall
dealing with [6, 45] at loop 3
[6, 45] is NOT a wall
neighbors of b [[4, 45], [6, 45]]
cost from [4, 45] to [5, 45] is 1
[11, 41] (11, 41)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 41] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 41] 11 41
the point we are trying to find neighbors for  [11, 41]
neighboring cells are:  [[11, 42], [11, 40], [10, 41], [12, 41]]
dealing with [11, 42] at loop 0
dealing with [11, 40] at loop 1
dealing with [10, 41] at loop 2
[10, 41] is NOT a wall
dealing with [12, 41] at loop 3
[12, 41] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[11, 41][10, 41]
the points are:  [11, 41] [10, 41]
type for point in is_valid_node  <class 'list'>
[11, 41] 11 41
type for point in is_valid_node  <class 'list'>
[10, 41] 10 41
the point we are trying to find neighbors for  [10, 41]
neighboring cells are:  [[10, 42], [10, 40], [9, 41], [11, 41]]
dealing with [10, 42] at loop 0
dealing with [10, 40] at loop 1
dealing with [9, 41] at loop 2
[9, 41] is NOT a wall
dealing with [11, 41] at loop 3
[11, 41] is NOT a wall
neighbors of b [[9, 41], [11, 41]]
cost from [11, 41] to [10, 41] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[11, 41][12, 41]
the points are:  [11, 41] [12, 41]
type for point in is_valid_node  <class 'list'>
[11, 41] 11 41
type for point in is_valid_node  <class 'list'>
[12, 41] 12 41
the point we are trying to find neighbors for  [12, 41]
neighboring cells are:  [[12, 42], [12, 40], [11, 41], [13, 41]]
dealing with [12, 42] at loop 0
dealing with [12, 40] at loop 1
dealing with [11, 41] at loop 2
[11, 41] is NOT a wall
dealing with [13, 41] at loop 3
[13, 41] is NOT a wall
neighbors of b [[11, 41], [13, 41]]
cost from [11, 41] to [12, 41] is 1
<class 'int'>
2 29 31
2 29 31
31 <class 'int'>
2 29 31
[11, 47] (11, 47)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 47] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 47] 11 47
the point we are trying to find neighbors for  [11, 47]
neighboring cells are:  [[11, 48], [11, 46], [10, 47], [12, 47]]
dealing with [11, 48] at loop 0
[11, 48] is NOT a wall
dealing with [11, 46] at loop 1
[11, 46] is NOT a wall
dealing with [10, 47] at loop 2
[10, 47] is NOT a wall
dealing with [12, 47] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
72[11, 47][11, 48]
the points are:  [11, 47] [11, 48]
type for point in is_valid_node  <class 'list'>
[11, 47] 11 47
type for point in is_valid_node  <class 'list'>
[11, 48] 11 48
the point we are trying to find neighbors for  [11, 48]
neighboring cells are:  [[11, 49], [11, 47], [10, 48], [12, 48]]
dealing with [11, 49] at loop 0
[11, 49] is NOT a wall
dealing with [11, 47] at loop 1
[11, 47] is NOT a wall
dealing with [10, 48] at loop 2
dealing with [12, 48] at loop 3
neighbors of b [[11, 49], [11, 47]]
cost from [11, 47] to [11, 48] is 1
<class 'int'>
1 36 37
1 36 37
37 <class 'int'>
1 36 37
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
72[11, 47][11, 46]
the points are:  [11, 47] [11, 46]
type for point in is_valid_node  <class 'list'>
[11, 47] 11 47
type for point in is_valid_node  <class 'list'>
[11, 46] 11 46
the point we are trying to find neighbors for  [11, 46]
neighboring cells are:  [[11, 47], [11, 45], [10, 46], [12, 46]]
dealing with [11, 47] at loop 0
[11, 47] is NOT a wall
dealing with [11, 45] at loop 1
[11, 45] is NOT a wall
dealing with [10, 46] at loop 2
dealing with [12, 46] at loop 3
neighbors of b [[11, 47], [11, 45]]
cost from [11, 47] to [11, 46] is 1
<class 'int'>
1 34 35
1 34 35
35 <class 'int'>
1 34 35
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
72[11, 47][10, 47]
the points are:  [11, 47] [10, 47]
type for point in is_valid_node  <class 'list'>
[11, 47] 11 47
type for point in is_valid_node  <class 'list'>
[10, 47] 10 47
the point we are trying to find neighbors for  [10, 47]
neighboring cells are:  [[10, 48], [10, 46], [9, 47], [11, 47]]
dealing with [10, 48] at loop 0
dealing with [10, 46] at loop 1
dealing with [9, 47] at loop 2
[9, 47] is NOT a wall
dealing with [11, 47] at loop 3
[11, 47] is NOT a wall
neighbors of b [[9, 47], [11, 47]]
cost from [11, 47] to [10, 47] is 1
[11, 46] (11, 46)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 46] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 46] 11 46
the point we are trying to find neighbors for  [11, 46]
neighboring cells are:  [[11, 47], [11, 45], [10, 46], [12, 46]]
dealing with [11, 47] at loop 0
[11, 47] is NOT a wall
dealing with [11, 45] at loop 1
[11, 45] is NOT a wall
dealing with [10, 46] at loop 2
dealing with [12, 46] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[11, 46][11, 47]
the points are:  [11, 46] [11, 47]
type for point in is_valid_node  <class 'list'>
[11, 46] 11 46
type for point in is_valid_node  <class 'list'>
[11, 47] 11 47
the point we are trying to find neighbors for  [11, 47]
neighboring cells are:  [[11, 48], [11, 46], [10, 47], [12, 47]]
dealing with [11, 48] at loop 0
[11, 48] is NOT a wall
dealing with [11, 46] at loop 1
[11, 46] is NOT a wall
dealing with [10, 47] at loop 2
[10, 47] is NOT a wall
dealing with [12, 47] at loop 3
neighbors of b [[11, 48], [11, 46], [10, 47]]
cost from [11, 46] to [11, 47] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[11, 46][11, 45]
the points are:  [11, 46] [11, 45]
type for point in is_valid_node  <class 'list'>
[11, 46] 11 46
type for point in is_valid_node  <class 'list'>
[11, 45] 11 45
the point we are trying to find neighbors for  [11, 45]
neighboring cells are:  [[11, 46], [11, 44], [10, 45], [12, 45]]
dealing with [11, 46] at loop 0
[11, 46] is NOT a wall
dealing with [11, 44] at loop 1
dealing with [10, 45] at loop 2
dealing with [12, 45] at loop 3
[12, 45] is NOT a wall
neighbors of b [[11, 46], [12, 45]]
cost from [11, 46] to [11, 45] is 1
<class 'int'>
1 33 34
1 33 34
34 <class 'int'>
1 33 34
[11, 45] (11, 45)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 45] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 45] 11 45
the point we are trying to find neighbors for  [11, 45]
neighboring cells are:  [[11, 46], [11, 44], [10, 45], [12, 45]]
dealing with [11, 46] at loop 0
[11, 46] is NOT a wall
dealing with [11, 44] at loop 1
dealing with [10, 45] at loop 2
dealing with [12, 45] at loop 3
[12, 45] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[11, 45][11, 46]
the points are:  [11, 45] [11, 46]
type for point in is_valid_node  <class 'list'>
[11, 45] 11 45
type for point in is_valid_node  <class 'list'>
[11, 46] 11 46
the point we are trying to find neighbors for  [11, 46]
neighboring cells are:  [[11, 47], [11, 45], [10, 46], [12, 46]]
dealing with [11, 47] at loop 0
[11, 47] is NOT a wall
dealing with [11, 45] at loop 1
[11, 45] is NOT a wall
dealing with [10, 46] at loop 2
dealing with [12, 46] at loop 3
neighbors of b [[11, 47], [11, 45]]
cost from [11, 45] to [11, 46] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[11, 45][12, 45]
the points are:  [11, 45] [12, 45]
type for point in is_valid_node  <class 'list'>
[11, 45] 11 45
type for point in is_valid_node  <class 'list'>
[12, 45] 12 45
the point we are trying to find neighbors for  [12, 45]
neighboring cells are:  [[12, 46], [12, 44], [11, 45], [13, 45]]
dealing with [12, 46] at loop 0
dealing with [12, 44] at loop 1
dealing with [11, 45] at loop 2
[11, 45] is NOT a wall
dealing with [13, 45] at loop 3
[13, 45] is NOT a wall
neighbors of b [[11, 45], [13, 45]]
cost from [11, 45] to [12, 45] is 1
<class 'int'>
2 33 35
2 33 35
35 <class 'int'>
2 33 35
[21, 39] (21, 39)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 39] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 39] 21 39
the point we are trying to find neighbors for  [21, 39]
neighboring cells are:  [[21, 40], [21, 38], [20, 39], [22, 39]]
dealing with [21, 40] at loop 0
[21, 40] is NOT a wall
dealing with [21, 38] at loop 1
dealing with [20, 39] at loop 2
[20, 39] is NOT a wall
dealing with [22, 39] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[21, 39][21, 40]
the points are:  [21, 39] [21, 40]
type for point in is_valid_node  <class 'list'>
[21, 39] 21 39
type for point in is_valid_node  <class 'list'>
[21, 40] 21 40
the point we are trying to find neighbors for  [21, 40]
neighboring cells are:  [[21, 41], [21, 39], [20, 40], [22, 40]]
dealing with [21, 41] at loop 0
[21, 41] is NOT a wall
dealing with [21, 39] at loop 1
[21, 39] is NOT a wall
dealing with [20, 40] at loop 2
dealing with [22, 40] at loop 3
neighbors of b [[21, 41], [21, 39]]
cost from [21, 39] to [21, 40] is 1
<class 'int'>
11 28 39
11 28 39
39 <class 'int'>
11 28 39
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[21, 39][20, 39]
the points are:  [21, 39] [20, 39]
type for point in is_valid_node  <class 'list'>
[21, 39] 21 39
type for point in is_valid_node  <class 'list'>
[20, 39] 20 39
the point we are trying to find neighbors for  [20, 39]
neighboring cells are:  [[20, 40], [20, 38], [19, 39], [21, 39]]
dealing with [20, 40] at loop 0
dealing with [20, 38] at loop 1
dealing with [19, 39] at loop 2
[19, 39] is NOT a wall
dealing with [21, 39] at loop 3
[21, 39] is NOT a wall
neighbors of b [[19, 39], [21, 39]]
cost from [21, 39] to [20, 39] is 1
[1, 45] (1, 45)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 45] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 45] 1 45
the point we are trying to find neighbors for  [1, 45]
neighboring cells are:  [[1, 46], [1, 44], [0, 45], [2, 45]]
dealing with [1, 46] at loop 0
[1, 46] is NOT a wall
dealing with [1, 44] at loop 1
[1, 44] is NOT a wall
dealing with [0, 45] at loop 2
dealing with [2, 45] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[1, 45][1, 46]
the points are:  [1, 45] [1, 46]
type for point in is_valid_node  <class 'list'>
[1, 45] 1 45
type for point in is_valid_node  <class 'list'>
[1, 46] 1 46
the point we are trying to find neighbors for  [1, 46]
neighboring cells are:  [[1, 47], [1, 45], [0, 46], [2, 46]]
dealing with [1, 47] at loop 0
[1, 47] is NOT a wall
dealing with [1, 45] at loop 1
[1, 45] is NOT a wall
dealing with [0, 46] at loop 2
dealing with [2, 46] at loop 3
[2, 46] is NOT a wall
neighbors of b [[1, 47], [1, 45], [2, 46]]
cost from [1, 45] to [1, 46] is 1
<class 'int'>
9 34 43
9 34 43
43 <class 'int'>
9 34 43
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
68[1, 45][1, 44]
the points are:  [1, 45] [1, 44]
type for point in is_valid_node  <class 'list'>
[1, 45] 1 45
type for point in is_valid_node  <class 'list'>
[1, 44] 1 44
the point we are trying to find neighbors for  [1, 44]
neighboring cells are:  [[1, 45], [1, 43], [0, 44], [2, 44]]
dealing with [1, 45] at loop 0
[1, 45] is NOT a wall
dealing with [1, 43] at loop 1
[1, 43] is NOT a wall
dealing with [0, 44] at loop 2
dealing with [2, 44] at loop 3
neighbors of b [[1, 45], [1, 43]]
cost from [1, 45] to [1, 44] is 1
[3, 45] (3, 45)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 45] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 45] 3 45
the point we are trying to find neighbors for  [3, 45]
neighboring cells are:  [[3, 46], [3, 44], [2, 45], [4, 45]]
dealing with [3, 46] at loop 0
[3, 46] is NOT a wall
dealing with [3, 44] at loop 1
dealing with [2, 45] at loop 2
dealing with [4, 45] at loop 3
[4, 45] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[3, 45][3, 46]
the points are:  [3, 45] [3, 46]
type for point in is_valid_node  <class 'list'>
[3, 45] 3 45
type for point in is_valid_node  <class 'list'>
[3, 46] 3 46
the point we are trying to find neighbors for  [3, 46]
neighboring cells are:  [[3, 47], [3, 45], [2, 46], [4, 46]]
dealing with [3, 47] at loop 0
[3, 47] is NOT a wall
dealing with [3, 45] at loop 1
[3, 45] is NOT a wall
dealing with [2, 46] at loop 2
[2, 46] is NOT a wall
dealing with [4, 46] at loop 3
neighbors of b [[3, 47], [3, 45], [2, 46]]
cost from [3, 45] to [3, 46] is 1
<class 'int'>
7 34 41
7 34 41
41 <class 'int'>
7 34 41
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[3, 45][4, 45]
the points are:  [3, 45] [4, 45]
type for point in is_valid_node  <class 'list'>
[3, 45] 3 45
type for point in is_valid_node  <class 'list'>
[4, 45] 4 45
the point we are trying to find neighbors for  [4, 45]
neighboring cells are:  [[4, 46], [4, 44], [3, 45], [5, 45]]
dealing with [4, 46] at loop 0
dealing with [4, 44] at loop 1
dealing with [3, 45] at loop 2
[3, 45] is NOT a wall
dealing with [5, 45] at loop 3
[5, 45] is NOT a wall
neighbors of b [[3, 45], [5, 45]]
cost from [3, 45] to [4, 45] is 1
[11, 48] (11, 48)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 48] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 48] 11 48
the point we are trying to find neighbors for  [11, 48]
neighboring cells are:  [[11, 49], [11, 47], [10, 48], [12, 48]]
dealing with [11, 49] at loop 0
[11, 49] is NOT a wall
dealing with [11, 47] at loop 1
[11, 47] is NOT a wall
dealing with [10, 48] at loop 2
dealing with [12, 48] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[11, 48][11, 49]
the points are:  [11, 48] [11, 49]
type for point in is_valid_node  <class 'list'>
[11, 48] 11 48
type for point in is_valid_node  <class 'list'>
[11, 49] 11 49
the point we are trying to find neighbors for  [11, 49]
neighboring cells are:  [[11, 50], [11, 48], [10, 49], [12, 49]]
dealing with [11, 50] at loop 0
[11, 50] is NOT a wall
dealing with [11, 48] at loop 1
[11, 48] is NOT a wall
dealing with [10, 49] at loop 2
dealing with [12, 49] at loop 3
neighbors of b [[11, 50], [11, 48]]
cost from [11, 48] to [11, 49] is 1
<class 'int'>
1 37 38
1 37 38
38 <class 'int'>
1 37 38
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[11, 48][11, 47]
the points are:  [11, 48] [11, 47]
type for point in is_valid_node  <class 'list'>
[11, 48] 11 48
type for point in is_valid_node  <class 'list'>
[11, 47] 11 47
the point we are trying to find neighbors for  [11, 47]
neighboring cells are:  [[11, 48], [11, 46], [10, 47], [12, 47]]
dealing with [11, 48] at loop 0
[11, 48] is NOT a wall
dealing with [11, 46] at loop 1
[11, 46] is NOT a wall
dealing with [10, 47] at loop 2
[10, 47] is NOT a wall
dealing with [12, 47] at loop 3
neighbors of b [[11, 48], [11, 46], [10, 47]]
cost from [11, 48] to [11, 47] is 1
[12, 41] (12, 41)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 41] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 41] 12 41
the point we are trying to find neighbors for  [12, 41]
neighboring cells are:  [[12, 42], [12, 40], [11, 41], [13, 41]]
dealing with [12, 42] at loop 0
dealing with [12, 40] at loop 1
dealing with [11, 41] at loop 2
[11, 41] is NOT a wall
dealing with [13, 41] at loop 3
[13, 41] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[12, 41][11, 41]
the points are:  [12, 41] [11, 41]
type for point in is_valid_node  <class 'list'>
[12, 41] 12 41
type for point in is_valid_node  <class 'list'>
[11, 41] 11 41
the point we are trying to find neighbors for  [11, 41]
neighboring cells are:  [[11, 42], [11, 40], [10, 41], [12, 41]]
dealing with [11, 42] at loop 0
dealing with [11, 40] at loop 1
dealing with [10, 41] at loop 2
[10, 41] is NOT a wall
dealing with [12, 41] at loop 3
[12, 41] is NOT a wall
neighbors of b [[10, 41], [12, 41]]
cost from [12, 41] to [11, 41] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[12, 41][13, 41]
the points are:  [12, 41] [13, 41]
type for point in is_valid_node  <class 'list'>
[12, 41] 12 41
type for point in is_valid_node  <class 'list'>
[13, 41] 13 41
the point we are trying to find neighbors for  [13, 41]
neighboring cells are:  [[13, 42], [13, 40], [12, 41], [14, 41]]
dealing with [13, 42] at loop 0
[13, 42] is NOT a wall
dealing with [13, 40] at loop 1
dealing with [12, 41] at loop 2
[12, 41] is NOT a wall
dealing with [14, 41] at loop 3
neighbors of b [[13, 42], [12, 41]]
cost from [12, 41] to [13, 41] is 1
<class 'int'>
3 29 32
3 29 32
32 <class 'int'>
3 29 32
[12, 45] (12, 45)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 45] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 45] 12 45
the point we are trying to find neighbors for  [12, 45]
neighboring cells are:  [[12, 46], [12, 44], [11, 45], [13, 45]]
dealing with [12, 46] at loop 0
dealing with [12, 44] at loop 1
dealing with [11, 45] at loop 2
[11, 45] is NOT a wall
dealing with [13, 45] at loop 3
[13, 45] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
75[12, 45][11, 45]
the points are:  [12, 45] [11, 45]
type for point in is_valid_node  <class 'list'>
[12, 45] 12 45
type for point in is_valid_node  <class 'list'>
[11, 45] 11 45
the point we are trying to find neighbors for  [11, 45]
neighboring cells are:  [[11, 46], [11, 44], [10, 45], [12, 45]]
dealing with [11, 46] at loop 0
[11, 46] is NOT a wall
dealing with [11, 44] at loop 1
dealing with [10, 45] at loop 2
dealing with [12, 45] at loop 3
[12, 45] is NOT a wall
neighbors of b [[11, 46], [12, 45]]
cost from [12, 45] to [11, 45] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
75[12, 45][13, 45]
the points are:  [12, 45] [13, 45]
type for point in is_valid_node  <class 'list'>
[12, 45] 12 45
type for point in is_valid_node  <class 'list'>
[13, 45] 13 45
the point we are trying to find neighbors for  [13, 45]
neighboring cells are:  [[13, 46], [13, 44], [12, 45], [14, 45]]
dealing with [13, 46] at loop 0
dealing with [13, 44] at loop 1
[13, 44] is NOT a wall
dealing with [12, 45] at loop 2
[12, 45] is NOT a wall
dealing with [14, 45] at loop 3
neighbors of b [[13, 44], [12, 45]]
cost from [12, 45] to [13, 45] is 1
<class 'int'>
3 33 36
3 33 36
36 <class 'int'>
3 33 36
[21, 40] (21, 40)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 40] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 40] 21 40
the point we are trying to find neighbors for  [21, 40]
neighboring cells are:  [[21, 41], [21, 39], [20, 40], [22, 40]]
dealing with [21, 41] at loop 0
[21, 41] is NOT a wall
dealing with [21, 39] at loop 1
[21, 39] is NOT a wall
dealing with [20, 40] at loop 2
dealing with [22, 40] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
71[21, 40][21, 41]
the points are:  [21, 40] [21, 41]
type for point in is_valid_node  <class 'list'>
[21, 40] 21 40
type for point in is_valid_node  <class 'list'>
[21, 41] 21 41
the point we are trying to find neighbors for  [21, 41]
neighboring cells are:  [[21, 42], [21, 40], [20, 41], [22, 41]]
dealing with [21, 42] at loop 0
[21, 42] is NOT a wall
dealing with [21, 40] at loop 1
[21, 40] is NOT a wall
dealing with [20, 41] at loop 2
[20, 41] is NOT a wall
dealing with [22, 41] at loop 3
neighbors of b [[21, 42], [21, 40], [20, 41]]
cost from [21, 40] to [21, 41] is 1
<class 'int'>
11 29 40
11 29 40
40 <class 'int'>
11 29 40
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
71[21, 40][21, 39]
the points are:  [21, 40] [21, 39]
type for point in is_valid_node  <class 'list'>
[21, 40] 21 40
type for point in is_valid_node  <class 'list'>
[21, 39] 21 39
the point we are trying to find neighbors for  [21, 39]
neighboring cells are:  [[21, 40], [21, 38], [20, 39], [22, 39]]
dealing with [21, 40] at loop 0
[21, 40] is NOT a wall
dealing with [21, 38] at loop 1
dealing with [20, 39] at loop 2
[20, 39] is NOT a wall
dealing with [22, 39] at loop 3
neighbors of b [[21, 40], [20, 39]]
cost from [21, 40] to [21, 39] is 1
[1, 46] (1, 46)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 46] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 46] 1 46
the point we are trying to find neighbors for  [1, 46]
neighboring cells are:  [[1, 47], [1, 45], [0, 46], [2, 46]]
dealing with [1, 47] at loop 0
[1, 47] is NOT a wall
dealing with [1, 45] at loop 1
[1, 45] is NOT a wall
dealing with [0, 46] at loop 2
dealing with [2, 46] at loop 3
[2, 46] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[1, 46][1, 47]
the points are:  [1, 46] [1, 47]
type for point in is_valid_node  <class 'list'>
[1, 46] 1 46
type for point in is_valid_node  <class 'list'>
[1, 47] 1 47
the point we are trying to find neighbors for  [1, 47]
neighboring cells are:  [[1, 48], [1, 46], [0, 47], [2, 47]]
dealing with [1, 48] at loop 0
[1, 48] is NOT a wall
dealing with [1, 46] at loop 1
[1, 46] is NOT a wall
dealing with [0, 47] at loop 2
dealing with [2, 47] at loop 3
neighbors of b [[1, 48], [1, 46]]
cost from [1, 46] to [1, 47] is 1
<class 'int'>
9 35 44
9 35 44
44 <class 'int'>
9 35 44
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[1, 46][1, 45]
the points are:  [1, 46] [1, 45]
type for point in is_valid_node  <class 'list'>
[1, 46] 1 46
type for point in is_valid_node  <class 'list'>
[1, 45] 1 45
the point we are trying to find neighbors for  [1, 45]
neighboring cells are:  [[1, 46], [1, 44], [0, 45], [2, 45]]
dealing with [1, 46] at loop 0
[1, 46] is NOT a wall
dealing with [1, 44] at loop 1
[1, 44] is NOT a wall
dealing with [0, 45] at loop 2
dealing with [2, 45] at loop 3
neighbors of b [[1, 46], [1, 44]]
cost from [1, 46] to [1, 45] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
69[1, 46][2, 46]
the points are:  [1, 46] [2, 46]
type for point in is_valid_node  <class 'list'>
[1, 46] 1 46
type for point in is_valid_node  <class 'list'>
[2, 46] 2 46
the point we are trying to find neighbors for  [2, 46]
neighboring cells are:  [[2, 47], [2, 45], [1, 46], [3, 46]]
dealing with [2, 47] at loop 0
dealing with [2, 45] at loop 1
dealing with [1, 46] at loop 2
[1, 46] is NOT a wall
dealing with [3, 46] at loop 3
[3, 46] is NOT a wall
neighbors of b [[1, 46], [3, 46]]
cost from [1, 46] to [2, 46] is 1
<class 'int'>
8 34 42
8 34 42
42 <class 'int'>
8 34 42
[2, 46] (2, 46)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 46] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 46] 2 46
the point we are trying to find neighbors for  [2, 46]
neighboring cells are:  [[2, 47], [2, 45], [1, 46], [3, 46]]
dealing with [2, 47] at loop 0
dealing with [2, 45] at loop 1
dealing with [1, 46] at loop 2
[1, 46] is NOT a wall
dealing with [3, 46] at loop 3
[3, 46] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[2, 46][1, 46]
the points are:  [2, 46] [1, 46]
type for point in is_valid_node  <class 'list'>
[2, 46] 2 46
type for point in is_valid_node  <class 'list'>
[1, 46] 1 46
the point we are trying to find neighbors for  [1, 46]
neighboring cells are:  [[1, 47], [1, 45], [0, 46], [2, 46]]
dealing with [1, 47] at loop 0
[1, 47] is NOT a wall
dealing with [1, 45] at loop 1
[1, 45] is NOT a wall
dealing with [0, 46] at loop 2
dealing with [2, 46] at loop 3
[2, 46] is NOT a wall
neighbors of b [[1, 47], [1, 45], [2, 46]]
cost from [2, 46] to [1, 46] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[2, 46][3, 46]
the points are:  [2, 46] [3, 46]
type for point in is_valid_node  <class 'list'>
[2, 46] 2 46
type for point in is_valid_node  <class 'list'>
[3, 46] 3 46
the point we are trying to find neighbors for  [3, 46]
neighboring cells are:  [[3, 47], [3, 45], [2, 46], [4, 46]]
dealing with [3, 47] at loop 0
[3, 47] is NOT a wall
dealing with [3, 45] at loop 1
[3, 45] is NOT a wall
dealing with [2, 46] at loop 2
[2, 46] is NOT a wall
dealing with [4, 46] at loop 3
neighbors of b [[3, 47], [3, 45], [2, 46]]
cost from [2, 46] to [3, 46] is 1
[3, 46] (3, 46)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 46] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 46] 3 46
the point we are trying to find neighbors for  [3, 46]
neighboring cells are:  [[3, 47], [3, 45], [2, 46], [4, 46]]
dealing with [3, 47] at loop 0
[3, 47] is NOT a wall
dealing with [3, 45] at loop 1
[3, 45] is NOT a wall
dealing with [2, 46] at loop 2
[2, 46] is NOT a wall
dealing with [4, 46] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
71[3, 46][3, 47]
the points are:  [3, 46] [3, 47]
type for point in is_valid_node  <class 'list'>
[3, 46] 3 46
type for point in is_valid_node  <class 'list'>
[3, 47] 3 47
the point we are trying to find neighbors for  [3, 47]
neighboring cells are:  [[3, 48], [3, 46], [2, 47], [4, 47]]
dealing with [3, 48] at loop 0
dealing with [3, 46] at loop 1
[3, 46] is NOT a wall
dealing with [2, 47] at loop 2
dealing with [4, 47] at loop 3
[4, 47] is NOT a wall
neighbors of b [[3, 46], [4, 47]]
cost from [3, 46] to [3, 47] is 1
<class 'int'>
7 35 42
7 35 42
42 <class 'int'>
7 35 42
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
71[3, 46][3, 45]
the points are:  [3, 46] [3, 45]
type for point in is_valid_node  <class 'list'>
[3, 46] 3 46
type for point in is_valid_node  <class 'list'>
[3, 45] 3 45
the point we are trying to find neighbors for  [3, 45]
neighboring cells are:  [[3, 46], [3, 44], [2, 45], [4, 45]]
dealing with [3, 46] at loop 0
[3, 46] is NOT a wall
dealing with [3, 44] at loop 1
dealing with [2, 45] at loop 2
dealing with [4, 45] at loop 3
[4, 45] is NOT a wall
neighbors of b [[3, 46], [4, 45]]
cost from [3, 46] to [3, 45] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
71[3, 46][2, 46]
the points are:  [3, 46] [2, 46]
type for point in is_valid_node  <class 'list'>
[3, 46] 3 46
type for point in is_valid_node  <class 'list'>
[2, 46] 2 46
the point we are trying to find neighbors for  [2, 46]
neighboring cells are:  [[2, 47], [2, 45], [1, 46], [3, 46]]
dealing with [2, 47] at loop 0
dealing with [2, 45] at loop 1
dealing with [1, 46] at loop 2
[1, 46] is NOT a wall
dealing with [3, 46] at loop 3
[3, 46] is NOT a wall
neighbors of b [[1, 46], [3, 46]]
cost from [3, 46] to [2, 46] is 1
[11, 49] (11, 49)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 49] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 49] 11 49
the point we are trying to find neighbors for  [11, 49]
neighboring cells are:  [[11, 50], [11, 48], [10, 49], [12, 49]]
dealing with [11, 50] at loop 0
[11, 50] is NOT a wall
dealing with [11, 48] at loop 1
[11, 48] is NOT a wall
dealing with [10, 49] at loop 2
dealing with [12, 49] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[11, 49][11, 50]
the points are:  [11, 49] [11, 50]
type for point in is_valid_node  <class 'list'>
[11, 49] 11 49
type for point in is_valid_node  <class 'list'>
[11, 50] 11 50
the point we are trying to find neighbors for  [11, 50]
neighboring cells are:  [[11, 51], [11, 49], [10, 50], [12, 50]]
dealing with [11, 51] at loop 0
[11, 51] is NOT a wall
dealing with [11, 49] at loop 1
[11, 49] is NOT a wall
dealing with [10, 50] at loop 2
dealing with [12, 50] at loop 3
neighbors of b [[11, 51], [11, 49]]
cost from [11, 49] to [11, 50] is 1
<class 'int'>
1 38 39
1 38 39
39 <class 'int'>
1 38 39
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[11, 49][11, 48]
the points are:  [11, 49] [11, 48]
type for point in is_valid_node  <class 'list'>
[11, 49] 11 49
type for point in is_valid_node  <class 'list'>
[11, 48] 11 48
the point we are trying to find neighbors for  [11, 48]
neighboring cells are:  [[11, 49], [11, 47], [10, 48], [12, 48]]
dealing with [11, 49] at loop 0
[11, 49] is NOT a wall
dealing with [11, 47] at loop 1
[11, 47] is NOT a wall
dealing with [10, 48] at loop 2
dealing with [12, 48] at loop 3
neighbors of b [[11, 49], [11, 47]]
cost from [11, 49] to [11, 48] is 1
[13, 41] (13, 41)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 41] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 41] 13 41
the point we are trying to find neighbors for  [13, 41]
neighboring cells are:  [[13, 42], [13, 40], [12, 41], [14, 41]]
dealing with [13, 42] at loop 0
[13, 42] is NOT a wall
dealing with [13, 40] at loop 1
dealing with [12, 41] at loop 2
[12, 41] is NOT a wall
dealing with [14, 41] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[13, 41][13, 42]
the points are:  [13, 41] [13, 42]
type for point in is_valid_node  <class 'list'>
[13, 41] 13 41
type for point in is_valid_node  <class 'list'>
[13, 42] 13 42
the point we are trying to find neighbors for  [13, 42]
neighboring cells are:  [[13, 43], [13, 41], [12, 42], [14, 42]]
dealing with [13, 43] at loop 0
[13, 43] is NOT a wall
dealing with [13, 41] at loop 1
[13, 41] is NOT a wall
dealing with [12, 42] at loop 2
dealing with [14, 42] at loop 3
neighbors of b [[13, 43], [13, 41]]
cost from [13, 41] to [13, 42] is 1
<class 'int'>
3 30 33
3 30 33
33 <class 'int'>
3 30 33
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[13, 41][12, 41]
the points are:  [13, 41] [12, 41]
type for point in is_valid_node  <class 'list'>
[13, 41] 13 41
type for point in is_valid_node  <class 'list'>
[12, 41] 12 41
the point we are trying to find neighbors for  [12, 41]
neighboring cells are:  [[12, 42], [12, 40], [11, 41], [13, 41]]
dealing with [12, 42] at loop 0
dealing with [12, 40] at loop 1
dealing with [11, 41] at loop 2
[11, 41] is NOT a wall
dealing with [13, 41] at loop 3
[13, 41] is NOT a wall
neighbors of b [[11, 41], [13, 41]]
cost from [13, 41] to [12, 41] is 1
[13, 45] (13, 45)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 45] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 45] 13 45
the point we are trying to find neighbors for  [13, 45]
neighboring cells are:  [[13, 46], [13, 44], [12, 45], [14, 45]]
dealing with [13, 46] at loop 0
dealing with [13, 44] at loop 1
[13, 44] is NOT a wall
dealing with [12, 45] at loop 2
[12, 45] is NOT a wall
dealing with [14, 45] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
76[13, 45][13, 44]
the points are:  [13, 45] [13, 44]
type for point in is_valid_node  <class 'list'>
[13, 45] 13 45
type for point in is_valid_node  <class 'list'>
[13, 44] 13 44
the point we are trying to find neighbors for  [13, 44]
neighboring cells are:  [[13, 45], [13, 43], [12, 44], [14, 44]]
dealing with [13, 45] at loop 0
[13, 45] is NOT a wall
dealing with [13, 43] at loop 1
[13, 43] is NOT a wall
dealing with [12, 44] at loop 2
dealing with [14, 44] at loop 3
neighbors of b [[13, 45], [13, 43]]
cost from [13, 45] to [13, 44] is 1
<class 'int'>
3 32 35
3 32 35
35 <class 'int'>
3 32 35
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
76[13, 45][12, 45]
the points are:  [13, 45] [12, 45]
type for point in is_valid_node  <class 'list'>
[13, 45] 13 45
type for point in is_valid_node  <class 'list'>
[12, 45] 12 45
the point we are trying to find neighbors for  [12, 45]
neighboring cells are:  [[12, 46], [12, 44], [11, 45], [13, 45]]
dealing with [12, 46] at loop 0
dealing with [12, 44] at loop 1
dealing with [11, 45] at loop 2
[11, 45] is NOT a wall
dealing with [13, 45] at loop 3
[13, 45] is NOT a wall
neighbors of b [[11, 45], [13, 45]]
cost from [13, 45] to [12, 45] is 1
[13, 44] (13, 44)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 44] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 44] 13 44
the point we are trying to find neighbors for  [13, 44]
neighboring cells are:  [[13, 45], [13, 43], [12, 44], [14, 44]]
dealing with [13, 45] at loop 0
[13, 45] is NOT a wall
dealing with [13, 43] at loop 1
[13, 43] is NOT a wall
dealing with [12, 44] at loop 2
dealing with [14, 44] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[13, 44][13, 45]
the points are:  [13, 44] [13, 45]
type for point in is_valid_node  <class 'list'>
[13, 44] 13 44
type for point in is_valid_node  <class 'list'>
[13, 45] 13 45
the point we are trying to find neighbors for  [13, 45]
neighboring cells are:  [[13, 46], [13, 44], [12, 45], [14, 45]]
dealing with [13, 46] at loop 0
dealing with [13, 44] at loop 1
[13, 44] is NOT a wall
dealing with [12, 45] at loop 2
[12, 45] is NOT a wall
dealing with [14, 45] at loop 3
neighbors of b [[13, 44], [12, 45]]
cost from [13, 44] to [13, 45] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[13, 44][13, 43]
the points are:  [13, 44] [13, 43]
type for point in is_valid_node  <class 'list'>
[13, 44] 13 44
type for point in is_valid_node  <class 'list'>
[13, 43] 13 43
the point we are trying to find neighbors for  [13, 43]
neighboring cells are:  [[13, 44], [13, 42], [12, 43], [14, 43]]
dealing with [13, 44] at loop 0
[13, 44] is NOT a wall
dealing with [13, 42] at loop 1
[13, 42] is NOT a wall
dealing with [12, 43] at loop 2
dealing with [14, 43] at loop 3
neighbors of b [[13, 44], [13, 42]]
cost from [13, 44] to [13, 43] is 1
<class 'int'>
3 31 34
3 31 34
34 <class 'int'>
3 31 34
[13, 43] (13, 43)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 43] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 43] 13 43
the point we are trying to find neighbors for  [13, 43]
neighboring cells are:  [[13, 44], [13, 42], [12, 43], [14, 43]]
dealing with [13, 44] at loop 0
[13, 44] is NOT a wall
dealing with [13, 42] at loop 1
[13, 42] is NOT a wall
dealing with [12, 43] at loop 2
dealing with [14, 43] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[13, 43][13, 44]
the points are:  [13, 43] [13, 44]
type for point in is_valid_node  <class 'list'>
[13, 43] 13 43
type for point in is_valid_node  <class 'list'>
[13, 44] 13 44
the point we are trying to find neighbors for  [13, 44]
neighboring cells are:  [[13, 45], [13, 43], [12, 44], [14, 44]]
dealing with [13, 45] at loop 0
[13, 45] is NOT a wall
dealing with [13, 43] at loop 1
[13, 43] is NOT a wall
dealing with [12, 44] at loop 2
dealing with [14, 44] at loop 3
neighbors of b [[13, 45], [13, 43]]
cost from [13, 43] to [13, 44] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[13, 43][13, 42]
the points are:  [13, 43] [13, 42]
type for point in is_valid_node  <class 'list'>
[13, 43] 13 43
type for point in is_valid_node  <class 'list'>
[13, 42] 13 42
the point we are trying to find neighbors for  [13, 42]
neighboring cells are:  [[13, 43], [13, 41], [12, 42], [14, 42]]
dealing with [13, 43] at loop 0
[13, 43] is NOT a wall
dealing with [13, 41] at loop 1
[13, 41] is NOT a wall
dealing with [12, 42] at loop 2
dealing with [14, 42] at loop 3
neighbors of b [[13, 43], [13, 41]]
cost from [13, 43] to [13, 42] is 1
<class 'int'>
3 30 33
3 30 33
33 <class 'int'>
3 30 33
[13, 42] (13, 42)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 42] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 42] 13 42
the point we are trying to find neighbors for  [13, 42]
neighboring cells are:  [[13, 43], [13, 41], [12, 42], [14, 42]]
dealing with [13, 43] at loop 0
[13, 43] is NOT a wall
dealing with [13, 41] at loop 1
[13, 41] is NOT a wall
dealing with [12, 42] at loop 2
dealing with [14, 42] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[13, 42][13, 43]
the points are:  [13, 42] [13, 43]
type for point in is_valid_node  <class 'list'>
[13, 42] 13 42
type for point in is_valid_node  <class 'list'>
[13, 43] 13 43
the point we are trying to find neighbors for  [13, 43]
neighboring cells are:  [[13, 44], [13, 42], [12, 43], [14, 43]]
dealing with [13, 44] at loop 0
[13, 44] is NOT a wall
dealing with [13, 42] at loop 1
[13, 42] is NOT a wall
dealing with [12, 43] at loop 2
dealing with [14, 43] at loop 3
neighbors of b [[13, 44], [13, 42]]
cost from [13, 42] to [13, 43] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[13, 42][13, 41]
the points are:  [13, 42] [13, 41]
type for point in is_valid_node  <class 'list'>
[13, 42] 13 42
type for point in is_valid_node  <class 'list'>
[13, 41] 13 41
the point we are trying to find neighbors for  [13, 41]
neighboring cells are:  [[13, 42], [13, 40], [12, 41], [14, 41]]
dealing with [13, 42] at loop 0
[13, 42] is NOT a wall
dealing with [13, 40] at loop 1
dealing with [12, 41] at loop 2
[12, 41] is NOT a wall
dealing with [14, 41] at loop 3
neighbors of b [[13, 42], [12, 41]]
cost from [13, 42] to [13, 41] is 1
[21, 41] (21, 41)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 41] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 41] 21 41
the point we are trying to find neighbors for  [21, 41]
neighboring cells are:  [[21, 42], [21, 40], [20, 41], [22, 41]]
dealing with [21, 42] at loop 0
[21, 42] is NOT a wall
dealing with [21, 40] at loop 1
[21, 40] is NOT a wall
dealing with [20, 41] at loop 2
[20, 41] is NOT a wall
dealing with [22, 41] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
72[21, 41][21, 42]
the points are:  [21, 41] [21, 42]
type for point in is_valid_node  <class 'list'>
[21, 41] 21 41
type for point in is_valid_node  <class 'list'>
[21, 42] 21 42
the point we are trying to find neighbors for  [21, 42]
neighboring cells are:  [[21, 43], [21, 41], [20, 42], [22, 42]]
dealing with [21, 43] at loop 0
[21, 43] is NOT a wall
dealing with [21, 41] at loop 1
[21, 41] is NOT a wall
dealing with [20, 42] at loop 2
dealing with [22, 42] at loop 3
neighbors of b [[21, 43], [21, 41]]
cost from [21, 41] to [21, 42] is 1
<class 'int'>
11 30 41
11 30 41
41 <class 'int'>
11 30 41
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
72[21, 41][21, 40]
the points are:  [21, 41] [21, 40]
type for point in is_valid_node  <class 'list'>
[21, 41] 21 41
type for point in is_valid_node  <class 'list'>
[21, 40] 21 40
the point we are trying to find neighbors for  [21, 40]
neighboring cells are:  [[21, 41], [21, 39], [20, 40], [22, 40]]
dealing with [21, 41] at loop 0
[21, 41] is NOT a wall
dealing with [21, 39] at loop 1
[21, 39] is NOT a wall
dealing with [20, 40] at loop 2
dealing with [22, 40] at loop 3
neighbors of b [[21, 41], [21, 39]]
cost from [21, 41] to [21, 40] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
72[21, 41][20, 41]
the points are:  [21, 41] [20, 41]
type for point in is_valid_node  <class 'list'>
[21, 41] 21 41
type for point in is_valid_node  <class 'list'>
[20, 41] 20 41
the point we are trying to find neighbors for  [20, 41]
neighboring cells are:  [[20, 42], [20, 40], [19, 41], [21, 41]]
dealing with [20, 42] at loop 0
dealing with [20, 40] at loop 1
dealing with [19, 41] at loop 2
[19, 41] is NOT a wall
dealing with [21, 41] at loop 3
[21, 41] is NOT a wall
neighbors of b [[19, 41], [21, 41]]
cost from [21, 41] to [20, 41] is 1
<class 'int'>
10 29 39
10 29 39
39 <class 'int'>
10 29 39
[20, 41] (20, 41)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[20, 41] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[20, 41] 20 41
the point we are trying to find neighbors for  [20, 41]
neighboring cells are:  [[20, 42], [20, 40], [19, 41], [21, 41]]
dealing with [20, 42] at loop 0
dealing with [20, 40] at loop 1
dealing with [19, 41] at loop 2
[19, 41] is NOT a wall
dealing with [21, 41] at loop 3
[21, 41] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[20, 41][19, 41]
the points are:  [20, 41] [19, 41]
type for point in is_valid_node  <class 'list'>
[20, 41] 20 41
type for point in is_valid_node  <class 'list'>
[19, 41] 19 41
the point we are trying to find neighbors for  [19, 41]
neighboring cells are:  [[19, 42], [19, 40], [18, 41], [20, 41]]
dealing with [19, 42] at loop 0
[19, 42] is NOT a wall
dealing with [19, 40] at loop 1
dealing with [18, 41] at loop 2
dealing with [20, 41] at loop 3
[20, 41] is NOT a wall
neighbors of b [[19, 42], [20, 41]]
cost from [20, 41] to [19, 41] is 1
<class 'int'>
9 29 38
9 29 38
38 <class 'int'>
9 29 38
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[20, 41][21, 41]
the points are:  [20, 41] [21, 41]
type for point in is_valid_node  <class 'list'>
[20, 41] 20 41
type for point in is_valid_node  <class 'list'>
[21, 41] 21 41
the point we are trying to find neighbors for  [21, 41]
neighboring cells are:  [[21, 42], [21, 40], [20, 41], [22, 41]]
dealing with [21, 42] at loop 0
[21, 42] is NOT a wall
dealing with [21, 40] at loop 1
[21, 40] is NOT a wall
dealing with [20, 41] at loop 2
[20, 41] is NOT a wall
dealing with [22, 41] at loop 3
neighbors of b [[21, 42], [21, 40], [20, 41]]
cost from [20, 41] to [21, 41] is 1
[19, 41] (19, 41)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 41] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 41] 19 41
the point we are trying to find neighbors for  [19, 41]
neighboring cells are:  [[19, 42], [19, 40], [18, 41], [20, 41]]
dealing with [19, 42] at loop 0
[19, 42] is NOT a wall
dealing with [19, 40] at loop 1
dealing with [18, 41] at loop 2
dealing with [20, 41] at loop 3
[20, 41] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[19, 41][19, 42]
the points are:  [19, 41] [19, 42]
type for point in is_valid_node  <class 'list'>
[19, 41] 19 41
type for point in is_valid_node  <class 'list'>
[19, 42] 19 42
the point we are trying to find neighbors for  [19, 42]
neighboring cells are:  [[19, 43], [19, 41], [18, 42], [20, 42]]
dealing with [19, 43] at loop 0
[19, 43] is NOT a wall
dealing with [19, 41] at loop 1
[19, 41] is NOT a wall
dealing with [18, 42] at loop 2
dealing with [20, 42] at loop 3
neighbors of b [[19, 43], [19, 41]]
cost from [19, 41] to [19, 42] is 1
<class 'int'>
9 30 39
9 30 39
39 <class 'int'>
9 30 39
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[19, 41][20, 41]
the points are:  [19, 41] [20, 41]
type for point in is_valid_node  <class 'list'>
[19, 41] 19 41
type for point in is_valid_node  <class 'list'>
[20, 41] 20 41
the point we are trying to find neighbors for  [20, 41]
neighboring cells are:  [[20, 42], [20, 40], [19, 41], [21, 41]]
dealing with [20, 42] at loop 0
dealing with [20, 40] at loop 1
dealing with [19, 41] at loop 2
[19, 41] is NOT a wall
dealing with [21, 41] at loop 3
[21, 41] is NOT a wall
neighbors of b [[19, 41], [21, 41]]
cost from [19, 41] to [20, 41] is 1
[1, 47] (1, 47)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 47] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 47] 1 47
the point we are trying to find neighbors for  [1, 47]
neighboring cells are:  [[1, 48], [1, 46], [0, 47], [2, 47]]
dealing with [1, 48] at loop 0
[1, 48] is NOT a wall
dealing with [1, 46] at loop 1
[1, 46] is NOT a wall
dealing with [0, 47] at loop 2
dealing with [2, 47] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[1, 47][1, 48]
the points are:  [1, 47] [1, 48]
type for point in is_valid_node  <class 'list'>
[1, 47] 1 47
type for point in is_valid_node  <class 'list'>
[1, 48] 1 48
the point we are trying to find neighbors for  [1, 48]
neighboring cells are:  [[1, 49], [1, 47], [0, 48], [2, 48]]
dealing with [1, 49] at loop 0
[1, 49] is NOT a wall
dealing with [1, 47] at loop 1
[1, 47] is NOT a wall
dealing with [0, 48] at loop 2
dealing with [2, 48] at loop 3
neighbors of b [[1, 49], [1, 47]]
cost from [1, 47] to [1, 48] is 1
<class 'int'>
9 36 45
9 36 45
45 <class 'int'>
9 36 45
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
70[1, 47][1, 46]
the points are:  [1, 47] [1, 46]
type for point in is_valid_node  <class 'list'>
[1, 47] 1 47
type for point in is_valid_node  <class 'list'>
[1, 46] 1 46
the point we are trying to find neighbors for  [1, 46]
neighboring cells are:  [[1, 47], [1, 45], [0, 46], [2, 46]]
dealing with [1, 47] at loop 0
[1, 47] is NOT a wall
dealing with [1, 45] at loop 1
[1, 45] is NOT a wall
dealing with [0, 46] at loop 2
dealing with [2, 46] at loop 3
[2, 46] is NOT a wall
neighbors of b [[1, 47], [1, 45], [2, 46]]
cost from [1, 47] to [1, 46] is 1
[3, 47] (3, 47)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 47] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 47] 3 47
the point we are trying to find neighbors for  [3, 47]
neighboring cells are:  [[3, 48], [3, 46], [2, 47], [4, 47]]
dealing with [3, 48] at loop 0
dealing with [3, 46] at loop 1
[3, 46] is NOT a wall
dealing with [2, 47] at loop 2
dealing with [4, 47] at loop 3
[4, 47] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
72[3, 47][3, 46]
the points are:  [3, 47] [3, 46]
type for point in is_valid_node  <class 'list'>
[3, 47] 3 47
type for point in is_valid_node  <class 'list'>
[3, 46] 3 46
the point we are trying to find neighbors for  [3, 46]
neighboring cells are:  [[3, 47], [3, 45], [2, 46], [4, 46]]
dealing with [3, 47] at loop 0
[3, 47] is NOT a wall
dealing with [3, 45] at loop 1
[3, 45] is NOT a wall
dealing with [2, 46] at loop 2
[2, 46] is NOT a wall
dealing with [4, 46] at loop 3
neighbors of b [[3, 47], [3, 45], [2, 46]]
cost from [3, 47] to [3, 46] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
72[3, 47][4, 47]
the points are:  [3, 47] [4, 47]
type for point in is_valid_node  <class 'list'>
[3, 47] 3 47
type for point in is_valid_node  <class 'list'>
[4, 47] 4 47
the point we are trying to find neighbors for  [4, 47]
neighboring cells are:  [[4, 48], [4, 46], [3, 47], [5, 47]]
dealing with [4, 48] at loop 0
dealing with [4, 46] at loop 1
dealing with [3, 47] at loop 2
[3, 47] is NOT a wall
dealing with [5, 47] at loop 3
[5, 47] is NOT a wall
neighbors of b [[3, 47], [5, 47]]
cost from [3, 47] to [4, 47] is 1
<class 'int'>
6 35 41
6 35 41
41 <class 'int'>
6 35 41
[4, 47] (4, 47)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 47] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 47] 4 47
the point we are trying to find neighbors for  [4, 47]
neighboring cells are:  [[4, 48], [4, 46], [3, 47], [5, 47]]
dealing with [4, 48] at loop 0
dealing with [4, 46] at loop 1
dealing with [3, 47] at loop 2
[3, 47] is NOT a wall
dealing with [5, 47] at loop 3
[5, 47] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[4, 47][3, 47]
the points are:  [4, 47] [3, 47]
type for point in is_valid_node  <class 'list'>
[4, 47] 4 47
type for point in is_valid_node  <class 'list'>
[3, 47] 3 47
the point we are trying to find neighbors for  [3, 47]
neighboring cells are:  [[3, 48], [3, 46], [2, 47], [4, 47]]
dealing with [3, 48] at loop 0
dealing with [3, 46] at loop 1
[3, 46] is NOT a wall
dealing with [2, 47] at loop 2
dealing with [4, 47] at loop 3
[4, 47] is NOT a wall
neighbors of b [[3, 46], [4, 47]]
cost from [4, 47] to [3, 47] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[4, 47][5, 47]
the points are:  [4, 47] [5, 47]
type for point in is_valid_node  <class 'list'>
[4, 47] 4 47
type for point in is_valid_node  <class 'list'>
[5, 47] 5 47
the point we are trying to find neighbors for  [5, 47]
neighboring cells are:  [[5, 48], [5, 46], [4, 47], [6, 47]]
dealing with [5, 48] at loop 0
dealing with [5, 46] at loop 1
dealing with [4, 47] at loop 2
[4, 47] is NOT a wall
dealing with [6, 47] at loop 3
[6, 47] is NOT a wall
neighbors of b [[4, 47], [6, 47]]
cost from [4, 47] to [5, 47] is 1
<class 'int'>
5 35 40
5 35 40
40 <class 'int'>
5 35 40
[5, 47] (5, 47)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 47] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 47] 5 47
the point we are trying to find neighbors for  [5, 47]
neighboring cells are:  [[5, 48], [5, 46], [4, 47], [6, 47]]
dealing with [5, 48] at loop 0
dealing with [5, 46] at loop 1
dealing with [4, 47] at loop 2
[4, 47] is NOT a wall
dealing with [6, 47] at loop 3
[6, 47] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[5, 47][4, 47]
the points are:  [5, 47] [4, 47]
type for point in is_valid_node  <class 'list'>
[5, 47] 5 47
type for point in is_valid_node  <class 'list'>
[4, 47] 4 47
the point we are trying to find neighbors for  [4, 47]
neighboring cells are:  [[4, 48], [4, 46], [3, 47], [5, 47]]
dealing with [4, 48] at loop 0
dealing with [4, 46] at loop 1
dealing with [3, 47] at loop 2
[3, 47] is NOT a wall
dealing with [5, 47] at loop 3
[5, 47] is NOT a wall
neighbors of b [[3, 47], [5, 47]]
cost from [5, 47] to [4, 47] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[5, 47][6, 47]
the points are:  [5, 47] [6, 47]
type for point in is_valid_node  <class 'list'>
[5, 47] 5 47
type for point in is_valid_node  <class 'list'>
[6, 47] 6 47
the point we are trying to find neighbors for  [6, 47]
neighboring cells are:  [[6, 48], [6, 46], [5, 47], [7, 47]]
dealing with [6, 48] at loop 0
dealing with [6, 46] at loop 1
dealing with [5, 47] at loop 2
[5, 47] is NOT a wall
dealing with [7, 47] at loop 3
[7, 47] is NOT a wall
neighbors of b [[5, 47], [7, 47]]
cost from [5, 47] to [6, 47] is 1
<class 'int'>
4 35 39
4 35 39
39 <class 'int'>
4 35 39
[6, 47] (6, 47)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 47] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 47] 6 47
the point we are trying to find neighbors for  [6, 47]
neighboring cells are:  [[6, 48], [6, 46], [5, 47], [7, 47]]
dealing with [6, 48] at loop 0
dealing with [6, 46] at loop 1
dealing with [5, 47] at loop 2
[5, 47] is NOT a wall
dealing with [7, 47] at loop 3
[7, 47] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
75[6, 47][5, 47]
the points are:  [6, 47] [5, 47]
type for point in is_valid_node  <class 'list'>
[6, 47] 6 47
type for point in is_valid_node  <class 'list'>
[5, 47] 5 47
the point we are trying to find neighbors for  [5, 47]
neighboring cells are:  [[5, 48], [5, 46], [4, 47], [6, 47]]
dealing with [5, 48] at loop 0
dealing with [5, 46] at loop 1
dealing with [4, 47] at loop 2
[4, 47] is NOT a wall
dealing with [6, 47] at loop 3
[6, 47] is NOT a wall
neighbors of b [[4, 47], [6, 47]]
cost from [6, 47] to [5, 47] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
75[6, 47][7, 47]
the points are:  [6, 47] [7, 47]
type for point in is_valid_node  <class 'list'>
[6, 47] 6 47
type for point in is_valid_node  <class 'list'>
[7, 47] 7 47
the point we are trying to find neighbors for  [7, 47]
neighboring cells are:  [[7, 48], [7, 46], [6, 47], [8, 47]]
dealing with [7, 48] at loop 0
[7, 48] is NOT a wall
dealing with [7, 46] at loop 1
dealing with [6, 47] at loop 2
[6, 47] is NOT a wall
dealing with [8, 47] at loop 3
neighbors of b [[7, 48], [6, 47]]
cost from [6, 47] to [7, 47] is 1
<class 'int'>
3 35 38
3 35 38
38 <class 'int'>
3 35 38
[7, 47] (7, 47)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 47] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 47] 7 47
the point we are trying to find neighbors for  [7, 47]
neighboring cells are:  [[7, 48], [7, 46], [6, 47], [8, 47]]
dealing with [7, 48] at loop 0
[7, 48] is NOT a wall
dealing with [7, 46] at loop 1
dealing with [6, 47] at loop 2
[6, 47] is NOT a wall
dealing with [8, 47] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
76[7, 47][7, 48]
the points are:  [7, 47] [7, 48]
type for point in is_valid_node  <class 'list'>
[7, 47] 7 47
type for point in is_valid_node  <class 'list'>
[7, 48] 7 48
the point we are trying to find neighbors for  [7, 48]
neighboring cells are:  [[7, 49], [7, 47], [6, 48], [8, 48]]
dealing with [7, 49] at loop 0
[7, 49] is NOT a wall
dealing with [7, 47] at loop 1
[7, 47] is NOT a wall
dealing with [6, 48] at loop 2
dealing with [8, 48] at loop 3
neighbors of b [[7, 49], [7, 47]]
cost from [7, 47] to [7, 48] is 1
<class 'int'>
3 36 39
3 36 39
39 <class 'int'>
3 36 39
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
76[7, 47][6, 47]
the points are:  [7, 47] [6, 47]
type for point in is_valid_node  <class 'list'>
[7, 47] 7 47
type for point in is_valid_node  <class 'list'>
[6, 47] 6 47
the point we are trying to find neighbors for  [6, 47]
neighboring cells are:  [[6, 48], [6, 46], [5, 47], [7, 47]]
dealing with [6, 48] at loop 0
dealing with [6, 46] at loop 1
dealing with [5, 47] at loop 2
[5, 47] is NOT a wall
dealing with [7, 47] at loop 3
[7, 47] is NOT a wall
neighbors of b [[5, 47], [7, 47]]
cost from [7, 47] to [6, 47] is 1
[11, 50] (11, 50)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 50] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 50] 11 50
the point we are trying to find neighbors for  [11, 50]
neighboring cells are:  [[11, 51], [11, 49], [10, 50], [12, 50]]
dealing with [11, 51] at loop 0
[11, 51] is NOT a wall
dealing with [11, 49] at loop 1
[11, 49] is NOT a wall
dealing with [10, 50] at loop 2
dealing with [12, 50] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
75[11, 50][11, 51]
the points are:  [11, 50] [11, 51]
type for point in is_valid_node  <class 'list'>
[11, 50] 11 50
type for point in is_valid_node  <class 'list'>
[11, 51] 11 51
the point we are trying to find neighbors for  [11, 51]
neighboring cells are:  [[11, 52], [11, 50], [10, 51], [12, 51]]
dealing with [11, 52] at loop 0
[11, 52] is NOT a wall
dealing with [11, 50] at loop 1
[11, 50] is NOT a wall
dealing with [10, 51] at loop 2
[10, 51] is NOT a wall
dealing with [12, 51] at loop 3
[12, 51] is NOT a wall
neighbors of b [[11, 52], [11, 50], [10, 51], [12, 51]]
cost from [11, 50] to [11, 51] is 1
<class 'int'>
1 39 40
1 39 40
40 <class 'int'>
1 39 40
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
75[11, 50][11, 49]
the points are:  [11, 50] [11, 49]
type for point in is_valid_node  <class 'list'>
[11, 50] 11 50
type for point in is_valid_node  <class 'list'>
[11, 49] 11 49
the point we are trying to find neighbors for  [11, 49]
neighboring cells are:  [[11, 50], [11, 48], [10, 49], [12, 49]]
dealing with [11, 50] at loop 0
[11, 50] is NOT a wall
dealing with [11, 48] at loop 1
[11, 48] is NOT a wall
dealing with [10, 49] at loop 2
dealing with [12, 49] at loop 3
neighbors of b [[11, 50], [11, 48]]
cost from [11, 50] to [11, 49] is 1
[13, 42] (13, 42)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 42] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 42] 13 42
the point we are trying to find neighbors for  [13, 42]
neighboring cells are:  [[13, 43], [13, 41], [12, 42], [14, 42]]
dealing with [13, 43] at loop 0
[13, 43] is NOT a wall
dealing with [13, 41] at loop 1
[13, 41] is NOT a wall
dealing with [12, 42] at loop 2
dealing with [14, 42] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[13, 42][13, 43]
the points are:  [13, 42] [13, 43]
type for point in is_valid_node  <class 'list'>
[13, 42] 13 42
type for point in is_valid_node  <class 'list'>
[13, 43] 13 43
the point we are trying to find neighbors for  [13, 43]
neighboring cells are:  [[13, 44], [13, 42], [12, 43], [14, 43]]
dealing with [13, 44] at loop 0
[13, 44] is NOT a wall
dealing with [13, 42] at loop 1
[13, 42] is NOT a wall
dealing with [12, 43] at loop 2
dealing with [14, 43] at loop 3
neighbors of b [[13, 44], [13, 42]]
cost from [13, 42] to [13, 43] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[13, 42][13, 41]
the points are:  [13, 42] [13, 41]
type for point in is_valid_node  <class 'list'>
[13, 42] 13 42
type for point in is_valid_node  <class 'list'>
[13, 41] 13 41
the point we are trying to find neighbors for  [13, 41]
neighboring cells are:  [[13, 42], [13, 40], [12, 41], [14, 41]]
dealing with [13, 42] at loop 0
[13, 42] is NOT a wall
dealing with [13, 40] at loop 1
dealing with [12, 41] at loop 2
[12, 41] is NOT a wall
dealing with [14, 41] at loop 3
neighbors of b [[13, 42], [12, 41]]
cost from [13, 42] to [13, 41] is 1
[19, 42] (19, 42)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 42] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 42] 19 42
the point we are trying to find neighbors for  [19, 42]
neighboring cells are:  [[19, 43], [19, 41], [18, 42], [20, 42]]
dealing with [19, 43] at loop 0
[19, 43] is NOT a wall
dealing with [19, 41] at loop 1
[19, 41] is NOT a wall
dealing with [18, 42] at loop 2
dealing with [20, 42] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
75[19, 42][19, 43]
the points are:  [19, 42] [19, 43]
type for point in is_valid_node  <class 'list'>
[19, 42] 19 42
type for point in is_valid_node  <class 'list'>
[19, 43] 19 43
the point we are trying to find neighbors for  [19, 43]
neighboring cells are:  [[19, 44], [19, 42], [18, 43], [20, 43]]
dealing with [19, 44] at loop 0
dealing with [19, 42] at loop 1
[19, 42] is NOT a wall
dealing with [18, 43] at loop 2
[18, 43] is NOT a wall
dealing with [20, 43] at loop 3
neighbors of b [[19, 42], [18, 43]]
cost from [19, 42] to [19, 43] is 1
<class 'int'>
9 31 40
9 31 40
40 <class 'int'>
9 31 40
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
75[19, 42][19, 41]
the points are:  [19, 42] [19, 41]
type for point in is_valid_node  <class 'list'>
[19, 42] 19 42
type for point in is_valid_node  <class 'list'>
[19, 41] 19 41
the point we are trying to find neighbors for  [19, 41]
neighboring cells are:  [[19, 42], [19, 40], [18, 41], [20, 41]]
dealing with [19, 42] at loop 0
[19, 42] is NOT a wall
dealing with [19, 40] at loop 1
dealing with [18, 41] at loop 2
dealing with [20, 41] at loop 3
[20, 41] is NOT a wall
neighbors of b [[19, 42], [20, 41]]
cost from [19, 42] to [19, 41] is 1
[21, 42] (21, 42)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 42] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 42] 21 42
the point we are trying to find neighbors for  [21, 42]
neighboring cells are:  [[21, 43], [21, 41], [20, 42], [22, 42]]
dealing with [21, 43] at loop 0
[21, 43] is NOT a wall
dealing with [21, 41] at loop 1
[21, 41] is NOT a wall
dealing with [20, 42] at loop 2
dealing with [22, 42] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[21, 42][21, 43]
the points are:  [21, 42] [21, 43]
type for point in is_valid_node  <class 'list'>
[21, 42] 21 42
type for point in is_valid_node  <class 'list'>
[21, 43] 21 43
the point we are trying to find neighbors for  [21, 43]
neighboring cells are:  [[21, 44], [21, 42], [20, 43], [22, 43]]
dealing with [21, 44] at loop 0
dealing with [21, 42] at loop 1
[21, 42] is NOT a wall
dealing with [20, 43] at loop 2
dealing with [22, 43] at loop 3
neighbors of b [[21, 42]]
cost from [21, 42] to [21, 43] is 1
<class 'int'>
11 31 42
11 31 42
42 <class 'int'>
11 31 42
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[21, 42][21, 41]
the points are:  [21, 42] [21, 41]
type for point in is_valid_node  <class 'list'>
[21, 42] 21 42
type for point in is_valid_node  <class 'list'>
[21, 41] 21 41
the point we are trying to find neighbors for  [21, 41]
neighboring cells are:  [[21, 42], [21, 40], [20, 41], [22, 41]]
dealing with [21, 42] at loop 0
[21, 42] is NOT a wall
dealing with [21, 40] at loop 1
[21, 40] is NOT a wall
dealing with [20, 41] at loop 2
[20, 41] is NOT a wall
dealing with [22, 41] at loop 3
neighbors of b [[21, 42], [21, 40], [20, 41]]
cost from [21, 42] to [21, 41] is 1
[1, 48] (1, 48)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 48] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 48] 1 48
the point we are trying to find neighbors for  [1, 48]
neighboring cells are:  [[1, 49], [1, 47], [0, 48], [2, 48]]
dealing with [1, 49] at loop 0
[1, 49] is NOT a wall
dealing with [1, 47] at loop 1
[1, 47] is NOT a wall
dealing with [0, 48] at loop 2
dealing with [2, 48] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
71[1, 48][1, 49]
the points are:  [1, 48] [1, 49]
type for point in is_valid_node  <class 'list'>
[1, 48] 1 48
type for point in is_valid_node  <class 'list'>
[1, 49] 1 49
the point we are trying to find neighbors for  [1, 49]
neighboring cells are:  [[1, 50], [1, 48], [0, 49], [2, 49]]
dealing with [1, 50] at loop 0
[1, 50] is NOT a wall
dealing with [1, 48] at loop 1
[1, 48] is NOT a wall
dealing with [0, 49] at loop 2
dealing with [2, 49] at loop 3
[2, 49] is NOT a wall
neighbors of b [[1, 50], [1, 48], [2, 49]]
cost from [1, 48] to [1, 49] is 1
<class 'int'>
9 37 46
9 37 46
46 <class 'int'>
9 37 46
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
71[1, 48][1, 47]
the points are:  [1, 48] [1, 47]
type for point in is_valid_node  <class 'list'>
[1, 48] 1 48
type for point in is_valid_node  <class 'list'>
[1, 47] 1 47
the point we are trying to find neighbors for  [1, 47]
neighboring cells are:  [[1, 48], [1, 46], [0, 47], [2, 47]]
dealing with [1, 48] at loop 0
[1, 48] is NOT a wall
dealing with [1, 46] at loop 1
[1, 46] is NOT a wall
dealing with [0, 47] at loop 2
dealing with [2, 47] at loop 3
neighbors of b [[1, 48], [1, 46]]
cost from [1, 48] to [1, 47] is 1
[7, 48] (7, 48)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 48] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 48] 7 48
the point we are trying to find neighbors for  [7, 48]
neighboring cells are:  [[7, 49], [7, 47], [6, 48], [8, 48]]
dealing with [7, 49] at loop 0
[7, 49] is NOT a wall
dealing with [7, 47] at loop 1
[7, 47] is NOT a wall
dealing with [6, 48] at loop 2
dealing with [8, 48] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[7, 48][7, 49]
the points are:  [7, 48] [7, 49]
type for point in is_valid_node  <class 'list'>
[7, 48] 7 48
type for point in is_valid_node  <class 'list'>
[7, 49] 7 49
the point we are trying to find neighbors for  [7, 49]
neighboring cells are:  [[7, 50], [7, 48], [6, 49], [8, 49]]
dealing with [7, 50] at loop 0
dealing with [7, 48] at loop 1
[7, 48] is NOT a wall
dealing with [6, 49] at loop 2
dealing with [8, 49] at loop 3
[8, 49] is NOT a wall
neighbors of b [[7, 48], [8, 49]]
cost from [7, 48] to [7, 49] is 1
<class 'int'>
3 37 40
3 37 40
40 <class 'int'>
3 37 40
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[7, 48][7, 47]
the points are:  [7, 48] [7, 47]
type for point in is_valid_node  <class 'list'>
[7, 48] 7 48
type for point in is_valid_node  <class 'list'>
[7, 47] 7 47
the point we are trying to find neighbors for  [7, 47]
neighboring cells are:  [[7, 48], [7, 46], [6, 47], [8, 47]]
dealing with [7, 48] at loop 0
[7, 48] is NOT a wall
dealing with [7, 46] at loop 1
dealing with [6, 47] at loop 2
[6, 47] is NOT a wall
dealing with [8, 47] at loop 3
neighbors of b [[7, 48], [6, 47]]
cost from [7, 48] to [7, 47] is 1
[11, 51] (11, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 51] 11 51
the point we are trying to find neighbors for  [11, 51]
neighboring cells are:  [[11, 52], [11, 50], [10, 51], [12, 51]]
dealing with [11, 52] at loop 0
[11, 52] is NOT a wall
dealing with [11, 50] at loop 1
[11, 50] is NOT a wall
dealing with [10, 51] at loop 2
[10, 51] is NOT a wall
dealing with [12, 51] at loop 3
[12, 51] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
76[11, 51][11, 52]
the points are:  [11, 51] [11, 52]
type for point in is_valid_node  <class 'list'>
[11, 51] 11 51
type for point in is_valid_node  <class 'list'>
[11, 52] 11 52
the point we are trying to find neighbors for  [11, 52]
neighboring cells are:  [[11, 53], [11, 51], [10, 52], [12, 52]]
dealing with [11, 53] at loop 0
[11, 53] is NOT a wall
dealing with [11, 51] at loop 1
[11, 51] is NOT a wall
dealing with [10, 52] at loop 2
dealing with [12, 52] at loop 3
neighbors of b [[11, 53], [11, 51]]
cost from [11, 51] to [11, 52] is 1
<class 'int'>
1 40 41
1 40 41
41 <class 'int'>
1 40 41
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
76[11, 51][11, 50]
the points are:  [11, 51] [11, 50]
type for point in is_valid_node  <class 'list'>
[11, 51] 11 51
type for point in is_valid_node  <class 'list'>
[11, 50] 11 50
the point we are trying to find neighbors for  [11, 50]
neighboring cells are:  [[11, 51], [11, 49], [10, 50], [12, 50]]
dealing with [11, 51] at loop 0
[11, 51] is NOT a wall
dealing with [11, 49] at loop 1
[11, 49] is NOT a wall
dealing with [10, 50] at loop 2
dealing with [12, 50] at loop 3
neighbors of b [[11, 51], [11, 49]]
cost from [11, 51] to [11, 50] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
76[11, 51][10, 51]
the points are:  [11, 51] [10, 51]
type for point in is_valid_node  <class 'list'>
[11, 51] 11 51
type for point in is_valid_node  <class 'list'>
[10, 51] 10 51
the point we are trying to find neighbors for  [10, 51]
neighboring cells are:  [[10, 52], [10, 50], [9, 51], [11, 51]]
dealing with [10, 52] at loop 0
dealing with [10, 50] at loop 1
dealing with [9, 51] at loop 2
[9, 51] is NOT a wall
dealing with [11, 51] at loop 3
[11, 51] is NOT a wall
neighbors of b [[9, 51], [11, 51]]
cost from [11, 51] to [10, 51] is 1
<class 'int'>
0 39 39
0 39 39
39 <class 'int'>
0 39 39
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
76[11, 51][12, 51]
the points are:  [11, 51] [12, 51]
type for point in is_valid_node  <class 'list'>
[11, 51] 11 51
type for point in is_valid_node  <class 'list'>
[12, 51] 12 51
the point we are trying to find neighbors for  [12, 51]
neighboring cells are:  [[12, 52], [12, 50], [11, 51], [13, 51]]
dealing with [12, 52] at loop 0
dealing with [12, 50] at loop 1
dealing with [11, 51] at loop 2
[11, 51] is NOT a wall
dealing with [13, 51] at loop 3
[13, 51] is NOT a wall
neighbors of b [[11, 51], [13, 51]]
cost from [11, 51] to [12, 51] is 1
<class 'int'>
2 39 41
2 39 41
41 <class 'int'>
2 39 41
[10, 51] (10, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[10, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[10, 51] 10 51
the point we are trying to find neighbors for  [10, 51]
neighboring cells are:  [[10, 52], [10, 50], [9, 51], [11, 51]]
dealing with [10, 52] at loop 0
dealing with [10, 50] at loop 1
dealing with [9, 51] at loop 2
[9, 51] is NOT a wall
dealing with [11, 51] at loop 3
[11, 51] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[10, 51][9, 51]
the points are:  [10, 51] [9, 51]
type for point in is_valid_node  <class 'list'>
[10, 51] 10 51
type for point in is_valid_node  <class 'list'>
[9, 51] 9 51
the point we are trying to find neighbors for  [9, 51]
neighboring cells are:  [[9, 52], [9, 50], [8, 51], [10, 51]]
dealing with [9, 52] at loop 0
[9, 52] is NOT a wall
dealing with [9, 50] at loop 1
[9, 50] is NOT a wall
dealing with [8, 51] at loop 2
dealing with [10, 51] at loop 3
[10, 51] is NOT a wall
neighbors of b [[9, 52], [9, 50], [10, 51]]
cost from [10, 51] to [9, 51] is 1
<class 'int'>
1 39 40
1 39 40
40 <class 'int'>
1 39 40
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[10, 51][11, 51]
the points are:  [10, 51] [11, 51]
type for point in is_valid_node  <class 'list'>
[10, 51] 10 51
type for point in is_valid_node  <class 'list'>
[11, 51] 11 51
the point we are trying to find neighbors for  [11, 51]
neighboring cells are:  [[11, 52], [11, 50], [10, 51], [12, 51]]
dealing with [11, 52] at loop 0
[11, 52] is NOT a wall
dealing with [11, 50] at loop 1
[11, 50] is NOT a wall
dealing with [10, 51] at loop 2
[10, 51] is NOT a wall
dealing with [12, 51] at loop 3
[12, 51] is NOT a wall
neighbors of b [[11, 52], [11, 50], [10, 51], [12, 51]]
cost from [10, 51] to [11, 51] is 1
[19, 43] (19, 43)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 43] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 43] 19 43
the point we are trying to find neighbors for  [19, 43]
neighboring cells are:  [[19, 44], [19, 42], [18, 43], [20, 43]]
dealing with [19, 44] at loop 0
dealing with [19, 42] at loop 1
[19, 42] is NOT a wall
dealing with [18, 43] at loop 2
[18, 43] is NOT a wall
dealing with [20, 43] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
76[19, 43][19, 42]
the points are:  [19, 43] [19, 42]
type for point in is_valid_node  <class 'list'>
[19, 43] 19 43
type for point in is_valid_node  <class 'list'>
[19, 42] 19 42
the point we are trying to find neighbors for  [19, 42]
neighboring cells are:  [[19, 43], [19, 41], [18, 42], [20, 42]]
dealing with [19, 43] at loop 0
[19, 43] is NOT a wall
dealing with [19, 41] at loop 1
[19, 41] is NOT a wall
dealing with [18, 42] at loop 2
dealing with [20, 42] at loop 3
neighbors of b [[19, 43], [19, 41]]
cost from [19, 43] to [19, 42] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
76[19, 43][18, 43]
the points are:  [19, 43] [18, 43]
type for point in is_valid_node  <class 'list'>
[19, 43] 19 43
type for point in is_valid_node  <class 'list'>
[18, 43] 18 43
the point we are trying to find neighbors for  [18, 43]
neighboring cells are:  [[18, 44], [18, 42], [17, 43], [19, 43]]
dealing with [18, 44] at loop 0
dealing with [18, 42] at loop 1
dealing with [17, 43] at loop 2
[17, 43] is NOT a wall
dealing with [19, 43] at loop 3
[19, 43] is NOT a wall
neighbors of b [[17, 43], [19, 43]]
cost from [19, 43] to [18, 43] is 1
<class 'int'>
8 31 39
8 31 39
39 <class 'int'>
8 31 39
[18, 43] (18, 43)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 43] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 43] 18 43
the point we are trying to find neighbors for  [18, 43]
neighboring cells are:  [[18, 44], [18, 42], [17, 43], [19, 43]]
dealing with [18, 44] at loop 0
dealing with [18, 42] at loop 1
dealing with [17, 43] at loop 2
[17, 43] is NOT a wall
dealing with [19, 43] at loop 3
[19, 43] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[18, 43][17, 43]
the points are:  [18, 43] [17, 43]
type for point in is_valid_node  <class 'list'>
[18, 43] 18 43
type for point in is_valid_node  <class 'list'>
[17, 43] 17 43
the point we are trying to find neighbors for  [17, 43]
neighboring cells are:  [[17, 44], [17, 42], [16, 43], [18, 43]]
dealing with [17, 44] at loop 0
dealing with [17, 42] at loop 1
dealing with [16, 43] at loop 2
[16, 43] is NOT a wall
dealing with [18, 43] at loop 3
[18, 43] is NOT a wall
neighbors of b [[16, 43], [18, 43]]
cost from [18, 43] to [17, 43] is 1
<class 'int'>
7 31 38
7 31 38
38 <class 'int'>
7 31 38
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[18, 43][19, 43]
the points are:  [18, 43] [19, 43]
type for point in is_valid_node  <class 'list'>
[18, 43] 18 43
type for point in is_valid_node  <class 'list'>
[19, 43] 19 43
the point we are trying to find neighbors for  [19, 43]
neighboring cells are:  [[19, 44], [19, 42], [18, 43], [20, 43]]
dealing with [19, 44] at loop 0
dealing with [19, 42] at loop 1
[19, 42] is NOT a wall
dealing with [18, 43] at loop 2
[18, 43] is NOT a wall
dealing with [20, 43] at loop 3
neighbors of b [[19, 42], [18, 43]]
cost from [18, 43] to [19, 43] is 1
[17, 43] (17, 43)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 43] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 43] 17 43
the point we are trying to find neighbors for  [17, 43]
neighboring cells are:  [[17, 44], [17, 42], [16, 43], [18, 43]]
dealing with [17, 44] at loop 0
dealing with [17, 42] at loop 1
dealing with [16, 43] at loop 2
[16, 43] is NOT a wall
dealing with [18, 43] at loop 3
[18, 43] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[17, 43][16, 43]
the points are:  [17, 43] [16, 43]
type for point in is_valid_node  <class 'list'>
[17, 43] 17 43
type for point in is_valid_node  <class 'list'>
[16, 43] 16 43
the point we are trying to find neighbors for  [16, 43]
neighboring cells are:  [[16, 44], [16, 42], [15, 43], [17, 43]]
dealing with [16, 44] at loop 0
dealing with [16, 42] at loop 1
dealing with [15, 43] at loop 2
[15, 43] is NOT a wall
dealing with [17, 43] at loop 3
[17, 43] is NOT a wall
neighbors of b [[15, 43], [17, 43]]
cost from [17, 43] to [16, 43] is 1
<class 'int'>
6 31 37
6 31 37
37 <class 'int'>
6 31 37
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[17, 43][18, 43]
the points are:  [17, 43] [18, 43]
type for point in is_valid_node  <class 'list'>
[17, 43] 17 43
type for point in is_valid_node  <class 'list'>
[18, 43] 18 43
the point we are trying to find neighbors for  [18, 43]
neighboring cells are:  [[18, 44], [18, 42], [17, 43], [19, 43]]
dealing with [18, 44] at loop 0
dealing with [18, 42] at loop 1
dealing with [17, 43] at loop 2
[17, 43] is NOT a wall
dealing with [19, 43] at loop 3
[19, 43] is NOT a wall
neighbors of b [[17, 43], [19, 43]]
cost from [17, 43] to [18, 43] is 1
[16, 43] (16, 43)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 43] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 43] 16 43
the point we are trying to find neighbors for  [16, 43]
neighboring cells are:  [[16, 44], [16, 42], [15, 43], [17, 43]]
dealing with [16, 44] at loop 0
dealing with [16, 42] at loop 1
dealing with [15, 43] at loop 2
[15, 43] is NOT a wall
dealing with [17, 43] at loop 3
[17, 43] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[16, 43][15, 43]
the points are:  [16, 43] [15, 43]
type for point in is_valid_node  <class 'list'>
[16, 43] 16 43
type for point in is_valid_node  <class 'list'>
[15, 43] 15 43
the point we are trying to find neighbors for  [15, 43]
neighboring cells are:  [[15, 44], [15, 42], [14, 43], [16, 43]]
dealing with [15, 44] at loop 0
[15, 44] is NOT a wall
dealing with [15, 42] at loop 1
dealing with [14, 43] at loop 2
dealing with [16, 43] at loop 3
[16, 43] is NOT a wall
neighbors of b [[15, 44], [16, 43]]
cost from [16, 43] to [15, 43] is 1
<class 'int'>
5 31 36
5 31 36
36 <class 'int'>
5 31 36
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[16, 43][17, 43]
the points are:  [16, 43] [17, 43]
type for point in is_valid_node  <class 'list'>
[16, 43] 16 43
type for point in is_valid_node  <class 'list'>
[17, 43] 17 43
the point we are trying to find neighbors for  [17, 43]
neighboring cells are:  [[17, 44], [17, 42], [16, 43], [18, 43]]
dealing with [17, 44] at loop 0
dealing with [17, 42] at loop 1
dealing with [16, 43] at loop 2
[16, 43] is NOT a wall
dealing with [18, 43] at loop 3
[18, 43] is NOT a wall
neighbors of b [[16, 43], [18, 43]]
cost from [16, 43] to [17, 43] is 1
[15, 43] (15, 43)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 43] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 43] 15 43
the point we are trying to find neighbors for  [15, 43]
neighboring cells are:  [[15, 44], [15, 42], [14, 43], [16, 43]]
dealing with [15, 44] at loop 0
[15, 44] is NOT a wall
dealing with [15, 42] at loop 1
dealing with [14, 43] at loop 2
dealing with [16, 43] at loop 3
[16, 43] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[15, 43][15, 44]
the points are:  [15, 43] [15, 44]
type for point in is_valid_node  <class 'list'>
[15, 43] 15 43
type for point in is_valid_node  <class 'list'>
[15, 44] 15 44
the point we are trying to find neighbors for  [15, 44]
neighboring cells are:  [[15, 45], [15, 43], [14, 44], [16, 44]]
dealing with [15, 45] at loop 0
[15, 45] is NOT a wall
dealing with [15, 43] at loop 1
[15, 43] is NOT a wall
dealing with [14, 44] at loop 2
dealing with [16, 44] at loop 3
neighbors of b [[15, 45], [15, 43]]
cost from [15, 43] to [15, 44] is 1
<class 'int'>
5 32 37
5 32 37
37 <class 'int'>
5 32 37
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[15, 43][16, 43]
the points are:  [15, 43] [16, 43]
type for point in is_valid_node  <class 'list'>
[15, 43] 15 43
type for point in is_valid_node  <class 'list'>
[16, 43] 16 43
the point we are trying to find neighbors for  [16, 43]
neighboring cells are:  [[16, 44], [16, 42], [15, 43], [17, 43]]
dealing with [16, 44] at loop 0
dealing with [16, 42] at loop 1
dealing with [15, 43] at loop 2
[15, 43] is NOT a wall
dealing with [17, 43] at loop 3
[17, 43] is NOT a wall
neighbors of b [[15, 43], [17, 43]]
cost from [15, 43] to [16, 43] is 1
[21, 43] (21, 43)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 43] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 43] 21 43
the point we are trying to find neighbors for  [21, 43]
neighboring cells are:  [[21, 44], [21, 42], [20, 43], [22, 43]]
dealing with [21, 44] at loop 0
dealing with [21, 42] at loop 1
[21, 42] is NOT a wall
dealing with [20, 43] at loop 2
dealing with [22, 43] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[21, 43][21, 42]
the points are:  [21, 43] [21, 42]
type for point in is_valid_node  <class 'list'>
[21, 43] 21 43
type for point in is_valid_node  <class 'list'>
[21, 42] 21 42
the point we are trying to find neighbors for  [21, 42]
neighboring cells are:  [[21, 43], [21, 41], [20, 42], [22, 42]]
dealing with [21, 43] at loop 0
[21, 43] is NOT a wall
dealing with [21, 41] at loop 1
[21, 41] is NOT a wall
dealing with [20, 42] at loop 2
dealing with [22, 42] at loop 3
neighbors of b [[21, 43], [21, 41]]
cost from [21, 43] to [21, 42] is 1
[1, 49] (1, 49)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 49] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 49] 1 49
the point we are trying to find neighbors for  [1, 49]
neighboring cells are:  [[1, 50], [1, 48], [0, 49], [2, 49]]
dealing with [1, 50] at loop 0
[1, 50] is NOT a wall
dealing with [1, 48] at loop 1
[1, 48] is NOT a wall
dealing with [0, 49] at loop 2
dealing with [2, 49] at loop 3
[2, 49] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
72[1, 49][1, 50]
the points are:  [1, 49] [1, 50]
type for point in is_valid_node  <class 'list'>
[1, 49] 1 49
type for point in is_valid_node  <class 'list'>
[1, 50] 1 50
the point we are trying to find neighbors for  [1, 50]
neighboring cells are:  [[1, 51], [1, 49], [0, 50], [2, 50]]
dealing with [1, 51] at loop 0
[1, 51] is NOT a wall
dealing with [1, 49] at loop 1
[1, 49] is NOT a wall
dealing with [0, 50] at loop 2
dealing with [2, 50] at loop 3
neighbors of b [[1, 51], [1, 49]]
cost from [1, 49] to [1, 50] is 1
<class 'int'>
9 38 47
9 38 47
47 <class 'int'>
9 38 47
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
72[1, 49][1, 48]
the points are:  [1, 49] [1, 48]
type for point in is_valid_node  <class 'list'>
[1, 49] 1 49
type for point in is_valid_node  <class 'list'>
[1, 48] 1 48
the point we are trying to find neighbors for  [1, 48]
neighboring cells are:  [[1, 49], [1, 47], [0, 48], [2, 48]]
dealing with [1, 49] at loop 0
[1, 49] is NOT a wall
dealing with [1, 47] at loop 1
[1, 47] is NOT a wall
dealing with [0, 48] at loop 2
dealing with [2, 48] at loop 3
neighbors of b [[1, 49], [1, 47]]
cost from [1, 49] to [1, 48] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
72[1, 49][2, 49]
the points are:  [1, 49] [2, 49]
type for point in is_valid_node  <class 'list'>
[1, 49] 1 49
type for point in is_valid_node  <class 'list'>
[2, 49] 2 49
the point we are trying to find neighbors for  [2, 49]
neighboring cells are:  [[2, 50], [2, 48], [1, 49], [3, 49]]
dealing with [2, 50] at loop 0
dealing with [2, 48] at loop 1
dealing with [1, 49] at loop 2
[1, 49] is NOT a wall
dealing with [3, 49] at loop 3
[3, 49] is NOT a wall
neighbors of b [[1, 49], [3, 49]]
cost from [1, 49] to [2, 49] is 1
<class 'int'>
8 37 45
8 37 45
45 <class 'int'>
8 37 45
[2, 49] (2, 49)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 49] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 49] 2 49
the point we are trying to find neighbors for  [2, 49]
neighboring cells are:  [[2, 50], [2, 48], [1, 49], [3, 49]]
dealing with [2, 50] at loop 0
dealing with [2, 48] at loop 1
dealing with [1, 49] at loop 2
[1, 49] is NOT a wall
dealing with [3, 49] at loop 3
[3, 49] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[2, 49][1, 49]
the points are:  [2, 49] [1, 49]
type for point in is_valid_node  <class 'list'>
[2, 49] 2 49
type for point in is_valid_node  <class 'list'>
[1, 49] 1 49
the point we are trying to find neighbors for  [1, 49]
neighboring cells are:  [[1, 50], [1, 48], [0, 49], [2, 49]]
dealing with [1, 50] at loop 0
[1, 50] is NOT a wall
dealing with [1, 48] at loop 1
[1, 48] is NOT a wall
dealing with [0, 49] at loop 2
dealing with [2, 49] at loop 3
[2, 49] is NOT a wall
neighbors of b [[1, 50], [1, 48], [2, 49]]
cost from [2, 49] to [1, 49] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[2, 49][3, 49]
the points are:  [2, 49] [3, 49]
type for point in is_valid_node  <class 'list'>
[2, 49] 2 49
type for point in is_valid_node  <class 'list'>
[3, 49] 3 49
the point we are trying to find neighbors for  [3, 49]
neighboring cells are:  [[3, 50], [3, 48], [2, 49], [4, 49]]
dealing with [3, 50] at loop 0
dealing with [3, 48] at loop 1
dealing with [2, 49] at loop 2
[2, 49] is NOT a wall
dealing with [4, 49] at loop 3
[4, 49] is NOT a wall
neighbors of b [[2, 49], [4, 49]]
cost from [2, 49] to [3, 49] is 1
<class 'int'>
7 37 44
7 37 44
44 <class 'int'>
7 37 44
[3, 49] (3, 49)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 49] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 49] 3 49
the point we are trying to find neighbors for  [3, 49]
neighboring cells are:  [[3, 50], [3, 48], [2, 49], [4, 49]]
dealing with [3, 50] at loop 0
dealing with [3, 48] at loop 1
dealing with [2, 49] at loop 2
[2, 49] is NOT a wall
dealing with [4, 49] at loop 3
[4, 49] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[3, 49][2, 49]
the points are:  [3, 49] [2, 49]
type for point in is_valid_node  <class 'list'>
[3, 49] 3 49
type for point in is_valid_node  <class 'list'>
[2, 49] 2 49
the point we are trying to find neighbors for  [2, 49]
neighboring cells are:  [[2, 50], [2, 48], [1, 49], [3, 49]]
dealing with [2, 50] at loop 0
dealing with [2, 48] at loop 1
dealing with [1, 49] at loop 2
[1, 49] is NOT a wall
dealing with [3, 49] at loop 3
[3, 49] is NOT a wall
neighbors of b [[1, 49], [3, 49]]
cost from [3, 49] to [2, 49] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[3, 49][4, 49]
the points are:  [3, 49] [4, 49]
type for point in is_valid_node  <class 'list'>
[3, 49] 3 49
type for point in is_valid_node  <class 'list'>
[4, 49] 4 49
the point we are trying to find neighbors for  [4, 49]
neighboring cells are:  [[4, 50], [4, 48], [3, 49], [5, 49]]
dealing with [4, 50] at loop 0
dealing with [4, 48] at loop 1
dealing with [3, 49] at loop 2
[3, 49] is NOT a wall
dealing with [5, 49] at loop 3
[5, 49] is NOT a wall
neighbors of b [[3, 49], [5, 49]]
cost from [3, 49] to [4, 49] is 1
<class 'int'>
6 37 43
6 37 43
43 <class 'int'>
6 37 43
[4, 49] (4, 49)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 49] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 49] 4 49
the point we are trying to find neighbors for  [4, 49]
neighboring cells are:  [[4, 50], [4, 48], [3, 49], [5, 49]]
dealing with [4, 50] at loop 0
dealing with [4, 48] at loop 1
dealing with [3, 49] at loop 2
[3, 49] is NOT a wall
dealing with [5, 49] at loop 3
[5, 49] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
75[4, 49][3, 49]
the points are:  [4, 49] [3, 49]
type for point in is_valid_node  <class 'list'>
[4, 49] 4 49
type for point in is_valid_node  <class 'list'>
[3, 49] 3 49
the point we are trying to find neighbors for  [3, 49]
neighboring cells are:  [[3, 50], [3, 48], [2, 49], [4, 49]]
dealing with [3, 50] at loop 0
dealing with [3, 48] at loop 1
dealing with [2, 49] at loop 2
[2, 49] is NOT a wall
dealing with [4, 49] at loop 3
[4, 49] is NOT a wall
neighbors of b [[2, 49], [4, 49]]
cost from [4, 49] to [3, 49] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
75[4, 49][5, 49]
the points are:  [4, 49] [5, 49]
type for point in is_valid_node  <class 'list'>
[4, 49] 4 49
type for point in is_valid_node  <class 'list'>
[5, 49] 5 49
the point we are trying to find neighbors for  [5, 49]
neighboring cells are:  [[5, 50], [5, 48], [4, 49], [6, 49]]
dealing with [5, 50] at loop 0
[5, 50] is NOT a wall
dealing with [5, 48] at loop 1
dealing with [4, 49] at loop 2
[4, 49] is NOT a wall
dealing with [6, 49] at loop 3
neighbors of b [[5, 50], [4, 49]]
cost from [4, 49] to [5, 49] is 1
<class 'int'>
5 37 42
5 37 42
42 <class 'int'>
5 37 42
[5, 49] (5, 49)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 49] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 49] 5 49
the point we are trying to find neighbors for  [5, 49]
neighboring cells are:  [[5, 50], [5, 48], [4, 49], [6, 49]]
dealing with [5, 50] at loop 0
[5, 50] is NOT a wall
dealing with [5, 48] at loop 1
dealing with [4, 49] at loop 2
[4, 49] is NOT a wall
dealing with [6, 49] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
76[5, 49][5, 50]
the points are:  [5, 49] [5, 50]
type for point in is_valid_node  <class 'list'>
[5, 49] 5 49
type for point in is_valid_node  <class 'list'>
[5, 50] 5 50
the point we are trying to find neighbors for  [5, 50]
neighboring cells are:  [[5, 51], [5, 49], [4, 50], [6, 50]]
dealing with [5, 51] at loop 0
[5, 51] is NOT a wall
dealing with [5, 49] at loop 1
[5, 49] is NOT a wall
dealing with [4, 50] at loop 2
dealing with [6, 50] at loop 3
neighbors of b [[5, 51], [5, 49]]
cost from [5, 49] to [5, 50] is 1
<class 'int'>
5 38 43
5 38 43
43 <class 'int'>
5 38 43
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
76[5, 49][4, 49]
the points are:  [5, 49] [4, 49]
type for point in is_valid_node  <class 'list'>
[5, 49] 5 49
type for point in is_valid_node  <class 'list'>
[4, 49] 4 49
the point we are trying to find neighbors for  [4, 49]
neighboring cells are:  [[4, 50], [4, 48], [3, 49], [5, 49]]
dealing with [4, 50] at loop 0
dealing with [4, 48] at loop 1
dealing with [3, 49] at loop 2
[3, 49] is NOT a wall
dealing with [5, 49] at loop 3
[5, 49] is NOT a wall
neighbors of b [[3, 49], [5, 49]]
cost from [5, 49] to [4, 49] is 1
[7, 49] (7, 49)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 49] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 49] 7 49
the point we are trying to find neighbors for  [7, 49]
neighboring cells are:  [[7, 50], [7, 48], [6, 49], [8, 49]]
dealing with [7, 50] at loop 0
dealing with [7, 48] at loop 1
[7, 48] is NOT a wall
dealing with [6, 49] at loop 2
dealing with [8, 49] at loop 3
[8, 49] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[7, 49][7, 48]
the points are:  [7, 49] [7, 48]
type for point in is_valid_node  <class 'list'>
[7, 49] 7 49
type for point in is_valid_node  <class 'list'>
[7, 48] 7 48
the point we are trying to find neighbors for  [7, 48]
neighboring cells are:  [[7, 49], [7, 47], [6, 48], [8, 48]]
dealing with [7, 49] at loop 0
[7, 49] is NOT a wall
dealing with [7, 47] at loop 1
[7, 47] is NOT a wall
dealing with [6, 48] at loop 2
dealing with [8, 48] at loop 3
neighbors of b [[7, 49], [7, 47]]
cost from [7, 49] to [7, 48] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[7, 49][8, 49]
the points are:  [7, 49] [8, 49]
type for point in is_valid_node  <class 'list'>
[7, 49] 7 49
type for point in is_valid_node  <class 'list'>
[8, 49] 8 49
the point we are trying to find neighbors for  [8, 49]
neighboring cells are:  [[8, 50], [8, 48], [7, 49], [9, 49]]
dealing with [8, 50] at loop 0
dealing with [8, 48] at loop 1
dealing with [7, 49] at loop 2
[7, 49] is NOT a wall
dealing with [9, 49] at loop 3
[9, 49] is NOT a wall
neighbors of b [[7, 49], [9, 49]]
cost from [7, 49] to [8, 49] is 1
<class 'int'>
2 37 39
2 37 39
39 <class 'int'>
2 37 39
[8, 49] (8, 49)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[8, 49] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[8, 49] 8 49
the point we are trying to find neighbors for  [8, 49]
neighboring cells are:  [[8, 50], [8, 48], [7, 49], [9, 49]]
dealing with [8, 50] at loop 0
dealing with [8, 48] at loop 1
dealing with [7, 49] at loop 2
[7, 49] is NOT a wall
dealing with [9, 49] at loop 3
[9, 49] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[8, 49][7, 49]
the points are:  [8, 49] [7, 49]
type for point in is_valid_node  <class 'list'>
[8, 49] 8 49
type for point in is_valid_node  <class 'list'>
[7, 49] 7 49
the point we are trying to find neighbors for  [7, 49]
neighboring cells are:  [[7, 50], [7, 48], [6, 49], [8, 49]]
dealing with [7, 50] at loop 0
dealing with [7, 48] at loop 1
[7, 48] is NOT a wall
dealing with [6, 49] at loop 2
dealing with [8, 49] at loop 3
[8, 49] is NOT a wall
neighbors of b [[7, 48], [8, 49]]
cost from [8, 49] to [7, 49] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[8, 49][9, 49]
the points are:  [8, 49] [9, 49]
type for point in is_valid_node  <class 'list'>
[8, 49] 8 49
type for point in is_valid_node  <class 'list'>
[9, 49] 9 49
the point we are trying to find neighbors for  [9, 49]
neighboring cells are:  [[9, 50], [9, 48], [8, 49], [10, 49]]
dealing with [9, 50] at loop 0
[9, 50] is NOT a wall
dealing with [9, 48] at loop 1
dealing with [8, 49] at loop 2
[8, 49] is NOT a wall
dealing with [10, 49] at loop 3
neighbors of b [[9, 50], [8, 49]]
cost from [8, 49] to [9, 49] is 1
<class 'int'>
1 37 38
1 37 38
38 <class 'int'>
1 37 38
[9, 49] (9, 49)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 49] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 49] 9 49
the point we are trying to find neighbors for  [9, 49]
neighboring cells are:  [[9, 50], [9, 48], [8, 49], [10, 49]]
dealing with [9, 50] at loop 0
[9, 50] is NOT a wall
dealing with [9, 48] at loop 1
dealing with [8, 49] at loop 2
[8, 49] is NOT a wall
dealing with [10, 49] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[9, 49][9, 50]
the points are:  [9, 49] [9, 50]
type for point in is_valid_node  <class 'list'>
[9, 49] 9 49
type for point in is_valid_node  <class 'list'>
[9, 50] 9 50
the point we are trying to find neighbors for  [9, 50]
neighboring cells are:  [[9, 51], [9, 49], [8, 50], [10, 50]]
dealing with [9, 51] at loop 0
[9, 51] is NOT a wall
dealing with [9, 49] at loop 1
[9, 49] is NOT a wall
dealing with [8, 50] at loop 2
dealing with [10, 50] at loop 3
neighbors of b [[9, 51], [9, 49]]
cost from [9, 49] to [9, 50] is 1
<class 'int'>
1 38 39
1 38 39
39 <class 'int'>
1 38 39
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[9, 49][8, 49]
the points are:  [9, 49] [8, 49]
type for point in is_valid_node  <class 'list'>
[9, 49] 9 49
type for point in is_valid_node  <class 'list'>
[8, 49] 8 49
the point we are trying to find neighbors for  [8, 49]
neighboring cells are:  [[8, 50], [8, 48], [7, 49], [9, 49]]
dealing with [8, 50] at loop 0
dealing with [8, 48] at loop 1
dealing with [7, 49] at loop 2
[7, 49] is NOT a wall
dealing with [9, 49] at loop 3
[9, 49] is NOT a wall
neighbors of b [[7, 49], [9, 49]]
cost from [9, 49] to [8, 49] is 1
[9, 51] (9, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 51] 9 51
the point we are trying to find neighbors for  [9, 51]
neighboring cells are:  [[9, 52], [9, 50], [8, 51], [10, 51]]
dealing with [9, 52] at loop 0
[9, 52] is NOT a wall
dealing with [9, 50] at loop 1
[9, 50] is NOT a wall
dealing with [8, 51] at loop 2
dealing with [10, 51] at loop 3
[10, 51] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[9, 51][9, 52]
the points are:  [9, 51] [9, 52]
type for point in is_valid_node  <class 'list'>
[9, 51] 9 51
type for point in is_valid_node  <class 'list'>
[9, 52] 9 52
the point we are trying to find neighbors for  [9, 52]
neighboring cells are:  [[9, 53], [9, 51], [8, 52], [10, 52]]
dealing with [9, 53] at loop 0
[9, 53] is NOT a wall
dealing with [9, 51] at loop 1
[9, 51] is NOT a wall
dealing with [8, 52] at loop 2
dealing with [10, 52] at loop 3
neighbors of b [[9, 53], [9, 51]]
cost from [9, 51] to [9, 52] is 1
<class 'int'>
1 40 41
1 40 41
41 <class 'int'>
1 40 41
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[9, 51][9, 50]
the points are:  [9, 51] [9, 50]
type for point in is_valid_node  <class 'list'>
[9, 51] 9 51
type for point in is_valid_node  <class 'list'>
[9, 50] 9 50
the point we are trying to find neighbors for  [9, 50]
neighboring cells are:  [[9, 51], [9, 49], [8, 50], [10, 50]]
dealing with [9, 51] at loop 0
[9, 51] is NOT a wall
dealing with [9, 49] at loop 1
[9, 49] is NOT a wall
dealing with [8, 50] at loop 2
dealing with [10, 50] at loop 3
neighbors of b [[9, 51], [9, 49]]
cost from [9, 51] to [9, 50] is 1
<class 'int'>
1 38 39
1 38 39
39 <class 'int'>
1 38 39
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[9, 51][10, 51]
the points are:  [9, 51] [10, 51]
type for point in is_valid_node  <class 'list'>
[9, 51] 9 51
type for point in is_valid_node  <class 'list'>
[10, 51] 10 51
the point we are trying to find neighbors for  [10, 51]
neighboring cells are:  [[10, 52], [10, 50], [9, 51], [11, 51]]
dealing with [10, 52] at loop 0
dealing with [10, 50] at loop 1
dealing with [9, 51] at loop 2
[9, 51] is NOT a wall
dealing with [11, 51] at loop 3
[11, 51] is NOT a wall
neighbors of b [[9, 51], [11, 51]]
cost from [9, 51] to [10, 51] is 1
[9, 50] (9, 50)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 50] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 50] 9 50
the point we are trying to find neighbors for  [9, 50]
neighboring cells are:  [[9, 51], [9, 49], [8, 50], [10, 50]]
dealing with [9, 51] at loop 0
[9, 51] is NOT a wall
dealing with [9, 49] at loop 1
[9, 49] is NOT a wall
dealing with [8, 50] at loop 2
dealing with [10, 50] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[9, 50][9, 51]
the points are:  [9, 50] [9, 51]
type for point in is_valid_node  <class 'list'>
[9, 50] 9 50
type for point in is_valid_node  <class 'list'>
[9, 51] 9 51
the point we are trying to find neighbors for  [9, 51]
neighboring cells are:  [[9, 52], [9, 50], [8, 51], [10, 51]]
dealing with [9, 52] at loop 0
[9, 52] is NOT a wall
dealing with [9, 50] at loop 1
[9, 50] is NOT a wall
dealing with [8, 51] at loop 2
dealing with [10, 51] at loop 3
[10, 51] is NOT a wall
neighbors of b [[9, 52], [9, 50], [10, 51]]
cost from [9, 50] to [9, 51] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[9, 50][9, 49]
the points are:  [9, 50] [9, 49]
type for point in is_valid_node  <class 'list'>
[9, 50] 9 50
type for point in is_valid_node  <class 'list'>
[9, 49] 9 49
the point we are trying to find neighbors for  [9, 49]
neighboring cells are:  [[9, 50], [9, 48], [8, 49], [10, 49]]
dealing with [9, 50] at loop 0
[9, 50] is NOT a wall
dealing with [9, 48] at loop 1
dealing with [8, 49] at loop 2
[8, 49] is NOT a wall
dealing with [10, 49] at loop 3
neighbors of b [[9, 50], [8, 49]]
cost from [9, 50] to [9, 49] is 1
[11, 52] (11, 52)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 52] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 52] 11 52
the point we are trying to find neighbors for  [11, 52]
neighboring cells are:  [[11, 53], [11, 51], [10, 52], [12, 52]]
dealing with [11, 53] at loop 0
[11, 53] is NOT a wall
dealing with [11, 51] at loop 1
[11, 51] is NOT a wall
dealing with [10, 52] at loop 2
dealing with [12, 52] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[11, 52][11, 53]
the points are:  [11, 52] [11, 53]
type for point in is_valid_node  <class 'list'>
[11, 52] 11 52
type for point in is_valid_node  <class 'list'>
[11, 53] 11 53
the point we are trying to find neighbors for  [11, 53]
neighboring cells are:  [[11, 54], [11, 52], [10, 53], [12, 53]]
dealing with [11, 54] at loop 0
[11, 54] is NOT a wall
dealing with [11, 52] at loop 1
[11, 52] is NOT a wall
dealing with [10, 53] at loop 2
dealing with [12, 53] at loop 3
neighbors of b [[11, 54], [11, 52]]
cost from [11, 52] to [11, 53] is 1
<class 'int'>
1 41 42
1 41 42
42 <class 'int'>
1 41 42
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[11, 52][11, 51]
the points are:  [11, 52] [11, 51]
type for point in is_valid_node  <class 'list'>
[11, 52] 11 52
type for point in is_valid_node  <class 'list'>
[11, 51] 11 51
the point we are trying to find neighbors for  [11, 51]
neighboring cells are:  [[11, 52], [11, 50], [10, 51], [12, 51]]
dealing with [11, 52] at loop 0
[11, 52] is NOT a wall
dealing with [11, 50] at loop 1
[11, 50] is NOT a wall
dealing with [10, 51] at loop 2
[10, 51] is NOT a wall
dealing with [12, 51] at loop 3
[12, 51] is NOT a wall
neighbors of b [[11, 52], [11, 50], [10, 51], [12, 51]]
cost from [11, 52] to [11, 51] is 1
[12, 51] (12, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 51] 12 51
the point we are trying to find neighbors for  [12, 51]
neighboring cells are:  [[12, 52], [12, 50], [11, 51], [13, 51]]
dealing with [12, 52] at loop 0
dealing with [12, 50] at loop 1
dealing with [11, 51] at loop 2
[11, 51] is NOT a wall
dealing with [13, 51] at loop 3
[13, 51] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[12, 51][11, 51]
the points are:  [12, 51] [11, 51]
type for point in is_valid_node  <class 'list'>
[12, 51] 12 51
type for point in is_valid_node  <class 'list'>
[11, 51] 11 51
the point we are trying to find neighbors for  [11, 51]
neighboring cells are:  [[11, 52], [11, 50], [10, 51], [12, 51]]
dealing with [11, 52] at loop 0
[11, 52] is NOT a wall
dealing with [11, 50] at loop 1
[11, 50] is NOT a wall
dealing with [10, 51] at loop 2
[10, 51] is NOT a wall
dealing with [12, 51] at loop 3
[12, 51] is NOT a wall
neighbors of b [[11, 52], [11, 50], [10, 51], [12, 51]]
cost from [12, 51] to [11, 51] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[12, 51][13, 51]
the points are:  [12, 51] [13, 51]
type for point in is_valid_node  <class 'list'>
[12, 51] 12 51
type for point in is_valid_node  <class 'list'>
[13, 51] 13 51
the point we are trying to find neighbors for  [13, 51]
neighboring cells are:  [[13, 52], [13, 50], [12, 51], [14, 51]]
dealing with [13, 52] at loop 0
dealing with [13, 50] at loop 1
[13, 50] is NOT a wall
dealing with [12, 51] at loop 2
[12, 51] is NOT a wall
dealing with [14, 51] at loop 3
neighbors of b [[13, 50], [12, 51]]
cost from [12, 51] to [13, 51] is 1
<class 'int'>
3 39 42
3 39 42
42 <class 'int'>
3 39 42
[15, 44] (15, 44)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 44] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 44] 15 44
the point we are trying to find neighbors for  [15, 44]
neighboring cells are:  [[15, 45], [15, 43], [14, 44], [16, 44]]
dealing with [15, 45] at loop 0
[15, 45] is NOT a wall
dealing with [15, 43] at loop 1
[15, 43] is NOT a wall
dealing with [14, 44] at loop 2
dealing with [16, 44] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
81[15, 44][15, 45]
the points are:  [15, 44] [15, 45]
type for point in is_valid_node  <class 'list'>
[15, 44] 15 44
type for point in is_valid_node  <class 'list'>
[15, 45] 15 45
the point we are trying to find neighbors for  [15, 45]
neighboring cells are:  [[15, 46], [15, 44], [14, 45], [16, 45]]
dealing with [15, 46] at loop 0
[15, 46] is NOT a wall
dealing with [15, 44] at loop 1
[15, 44] is NOT a wall
dealing with [14, 45] at loop 2
dealing with [16, 45] at loop 3
neighbors of b [[15, 46], [15, 44]]
cost from [15, 44] to [15, 45] is 1
<class 'int'>
5 33 38
5 33 38
38 <class 'int'>
5 33 38
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
81[15, 44][15, 43]
the points are:  [15, 44] [15, 43]
type for point in is_valid_node  <class 'list'>
[15, 44] 15 44
type for point in is_valid_node  <class 'list'>
[15, 43] 15 43
the point we are trying to find neighbors for  [15, 43]
neighboring cells are:  [[15, 44], [15, 42], [14, 43], [16, 43]]
dealing with [15, 44] at loop 0
[15, 44] is NOT a wall
dealing with [15, 42] at loop 1
dealing with [14, 43] at loop 2
dealing with [16, 43] at loop 3
[16, 43] is NOT a wall
neighbors of b [[15, 44], [16, 43]]
cost from [15, 44] to [15, 43] is 1
[1, 50] (1, 50)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 50] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 50] 1 50
the point we are trying to find neighbors for  [1, 50]
neighboring cells are:  [[1, 51], [1, 49], [0, 50], [2, 50]]
dealing with [1, 51] at loop 0
[1, 51] is NOT a wall
dealing with [1, 49] at loop 1
[1, 49] is NOT a wall
dealing with [0, 50] at loop 2
dealing with [2, 50] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[1, 50][1, 51]
the points are:  [1, 50] [1, 51]
type for point in is_valid_node  <class 'list'>
[1, 50] 1 50
type for point in is_valid_node  <class 'list'>
[1, 51] 1 51
the point we are trying to find neighbors for  [1, 51]
neighboring cells are:  [[1, 52], [1, 50], [0, 51], [2, 51]]
dealing with [1, 52] at loop 0
[1, 52] is NOT a wall
dealing with [1, 50] at loop 1
[1, 50] is NOT a wall
dealing with [0, 51] at loop 2
dealing with [2, 51] at loop 3
neighbors of b [[1, 52], [1, 50]]
cost from [1, 50] to [1, 51] is 1
<class 'int'>
9 39 48
9 39 48
48 <class 'int'>
9 39 48
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
73[1, 50][1, 49]
the points are:  [1, 50] [1, 49]
type for point in is_valid_node  <class 'list'>
[1, 50] 1 50
type for point in is_valid_node  <class 'list'>
[1, 49] 1 49
the point we are trying to find neighbors for  [1, 49]
neighboring cells are:  [[1, 50], [1, 48], [0, 49], [2, 49]]
dealing with [1, 50] at loop 0
[1, 50] is NOT a wall
dealing with [1, 48] at loop 1
[1, 48] is NOT a wall
dealing with [0, 49] at loop 2
dealing with [2, 49] at loop 3
[2, 49] is NOT a wall
neighbors of b [[1, 50], [1, 48], [2, 49]]
cost from [1, 50] to [1, 49] is 1
[5, 50] (5, 50)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 50] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 50] 5 50
the point we are trying to find neighbors for  [5, 50]
neighboring cells are:  [[5, 51], [5, 49], [4, 50], [6, 50]]
dealing with [5, 51] at loop 0
[5, 51] is NOT a wall
dealing with [5, 49] at loop 1
[5, 49] is NOT a wall
dealing with [4, 50] at loop 2
dealing with [6, 50] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[5, 50][5, 51]
the points are:  [5, 50] [5, 51]
type for point in is_valid_node  <class 'list'>
[5, 50] 5 50
type for point in is_valid_node  <class 'list'>
[5, 51] 5 51
the point we are trying to find neighbors for  [5, 51]
neighboring cells are:  [[5, 52], [5, 50], [4, 51], [6, 51]]
dealing with [5, 52] at loop 0
[5, 52] is NOT a wall
dealing with [5, 50] at loop 1
[5, 50] is NOT a wall
dealing with [4, 51] at loop 2
[4, 51] is NOT a wall
dealing with [6, 51] at loop 3
[6, 51] is NOT a wall
neighbors of b [[5, 52], [5, 50], [4, 51], [6, 51]]
cost from [5, 50] to [5, 51] is 1
<class 'int'>
5 39 44
5 39 44
44 <class 'int'>
5 39 44
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[5, 50][5, 49]
the points are:  [5, 50] [5, 49]
type for point in is_valid_node  <class 'list'>
[5, 50] 5 50
type for point in is_valid_node  <class 'list'>
[5, 49] 5 49
the point we are trying to find neighbors for  [5, 49]
neighboring cells are:  [[5, 50], [5, 48], [4, 49], [6, 49]]
dealing with [5, 50] at loop 0
[5, 50] is NOT a wall
dealing with [5, 48] at loop 1
dealing with [4, 49] at loop 2
[4, 49] is NOT a wall
dealing with [6, 49] at loop 3
neighbors of b [[5, 50], [4, 49]]
cost from [5, 50] to [5, 49] is 1
[9, 50] (9, 50)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 50] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 50] 9 50
the point we are trying to find neighbors for  [9, 50]
neighboring cells are:  [[9, 51], [9, 49], [8, 50], [10, 50]]
dealing with [9, 51] at loop 0
[9, 51] is NOT a wall
dealing with [9, 49] at loop 1
[9, 49] is NOT a wall
dealing with [8, 50] at loop 2
dealing with [10, 50] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[9, 50][9, 51]
the points are:  [9, 50] [9, 51]
type for point in is_valid_node  <class 'list'>
[9, 50] 9 50
type for point in is_valid_node  <class 'list'>
[9, 51] 9 51
the point we are trying to find neighbors for  [9, 51]
neighboring cells are:  [[9, 52], [9, 50], [8, 51], [10, 51]]
dealing with [9, 52] at loop 0
[9, 52] is NOT a wall
dealing with [9, 50] at loop 1
[9, 50] is NOT a wall
dealing with [8, 51] at loop 2
dealing with [10, 51] at loop 3
[10, 51] is NOT a wall
neighbors of b [[9, 52], [9, 50], [10, 51]]
cost from [9, 50] to [9, 51] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[9, 50][9, 49]
the points are:  [9, 50] [9, 49]
type for point in is_valid_node  <class 'list'>
[9, 50] 9 50
type for point in is_valid_node  <class 'list'>
[9, 49] 9 49
the point we are trying to find neighbors for  [9, 49]
neighboring cells are:  [[9, 50], [9, 48], [8, 49], [10, 49]]
dealing with [9, 50] at loop 0
[9, 50] is NOT a wall
dealing with [9, 48] at loop 1
dealing with [8, 49] at loop 2
[8, 49] is NOT a wall
dealing with [10, 49] at loop 3
neighbors of b [[9, 50], [8, 49]]
cost from [9, 50] to [9, 49] is 1
[9, 52] (9, 52)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 52] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 52] 9 52
the point we are trying to find neighbors for  [9, 52]
neighboring cells are:  [[9, 53], [9, 51], [8, 52], [10, 52]]
dealing with [9, 53] at loop 0
[9, 53] is NOT a wall
dealing with [9, 51] at loop 1
[9, 51] is NOT a wall
dealing with [8, 52] at loop 2
dealing with [10, 52] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[9, 52][9, 53]
the points are:  [9, 52] [9, 53]
type for point in is_valid_node  <class 'list'>
[9, 52] 9 52
type for point in is_valid_node  <class 'list'>
[9, 53] 9 53
the point we are trying to find neighbors for  [9, 53]
neighboring cells are:  [[9, 54], [9, 52], [8, 53], [10, 53]]
dealing with [9, 54] at loop 0
dealing with [9, 52] at loop 1
[9, 52] is NOT a wall
dealing with [8, 53] at loop 2
[8, 53] is NOT a wall
dealing with [10, 53] at loop 3
neighbors of b [[9, 52], [8, 53]]
cost from [9, 52] to [9, 53] is 1
<class 'int'>
1 41 42
1 41 42
42 <class 'int'>
1 41 42
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[9, 52][9, 51]
the points are:  [9, 52] [9, 51]
type for point in is_valid_node  <class 'list'>
[9, 52] 9 52
type for point in is_valid_node  <class 'list'>
[9, 51] 9 51
the point we are trying to find neighbors for  [9, 51]
neighboring cells are:  [[9, 52], [9, 50], [8, 51], [10, 51]]
dealing with [9, 52] at loop 0
[9, 52] is NOT a wall
dealing with [9, 50] at loop 1
[9, 50] is NOT a wall
dealing with [8, 51] at loop 2
dealing with [10, 51] at loop 3
[10, 51] is NOT a wall
neighbors of b [[9, 52], [9, 50], [10, 51]]
cost from [9, 52] to [9, 51] is 1
[11, 53] (11, 53)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 53] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 53] 11 53
the point we are trying to find neighbors for  [11, 53]
neighboring cells are:  [[11, 54], [11, 52], [10, 53], [12, 53]]
dealing with [11, 54] at loop 0
[11, 54] is NOT a wall
dealing with [11, 52] at loop 1
[11, 52] is NOT a wall
dealing with [10, 53] at loop 2
dealing with [12, 53] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[11, 53][11, 54]
the points are:  [11, 53] [11, 54]
type for point in is_valid_node  <class 'list'>
[11, 53] 11 53
type for point in is_valid_node  <class 'list'>
[11, 54] 11 54
the point we are trying to find neighbors for  [11, 54]
neighboring cells are:  [[11, 55], [11, 53], [10, 54], [12, 54]]
dealing with [11, 55] at loop 0
[11, 55] is NOT a wall
dealing with [11, 53] at loop 1
[11, 53] is NOT a wall
dealing with [10, 54] at loop 2
dealing with [12, 54] at loop 3
neighbors of b [[11, 55], [11, 53]]
cost from [11, 53] to [11, 54] is 1
<class 'int'>
1 42 43
1 42 43
43 <class 'int'>
1 42 43
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[11, 53][11, 52]
the points are:  [11, 53] [11, 52]
type for point in is_valid_node  <class 'list'>
[11, 53] 11 53
type for point in is_valid_node  <class 'list'>
[11, 52] 11 52
the point we are trying to find neighbors for  [11, 52]
neighboring cells are:  [[11, 53], [11, 51], [10, 52], [12, 52]]
dealing with [11, 53] at loop 0
[11, 53] is NOT a wall
dealing with [11, 51] at loop 1
[11, 51] is NOT a wall
dealing with [10, 52] at loop 2
dealing with [12, 52] at loop 3
neighbors of b [[11, 53], [11, 51]]
cost from [11, 53] to [11, 52] is 1
[13, 51] (13, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 51] 13 51
the point we are trying to find neighbors for  [13, 51]
neighboring cells are:  [[13, 52], [13, 50], [12, 51], [14, 51]]
dealing with [13, 52] at loop 0
dealing with [13, 50] at loop 1
[13, 50] is NOT a wall
dealing with [12, 51] at loop 2
[12, 51] is NOT a wall
dealing with [14, 51] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[13, 51][13, 50]
the points are:  [13, 51] [13, 50]
type for point in is_valid_node  <class 'list'>
[13, 51] 13 51
type for point in is_valid_node  <class 'list'>
[13, 50] 13 50
the point we are trying to find neighbors for  [13, 50]
neighboring cells are:  [[13, 51], [13, 49], [12, 50], [14, 50]]
dealing with [13, 51] at loop 0
[13, 51] is NOT a wall
dealing with [13, 49] at loop 1
[13, 49] is NOT a wall
dealing with [12, 50] at loop 2
dealing with [14, 50] at loop 3
neighbors of b [[13, 51], [13, 49]]
cost from [13, 51] to [13, 50] is 1
<class 'int'>
3 38 41
3 38 41
41 <class 'int'>
3 38 41
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[13, 51][12, 51]
the points are:  [13, 51] [12, 51]
type for point in is_valid_node  <class 'list'>
[13, 51] 13 51
type for point in is_valid_node  <class 'list'>
[12, 51] 12 51
the point we are trying to find neighbors for  [12, 51]
neighboring cells are:  [[12, 52], [12, 50], [11, 51], [13, 51]]
dealing with [12, 52] at loop 0
dealing with [12, 50] at loop 1
dealing with [11, 51] at loop 2
[11, 51] is NOT a wall
dealing with [13, 51] at loop 3
[13, 51] is NOT a wall
neighbors of b [[11, 51], [13, 51]]
cost from [13, 51] to [12, 51] is 1
[13, 50] (13, 50)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 50] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 50] 13 50
the point we are trying to find neighbors for  [13, 50]
neighboring cells are:  [[13, 51], [13, 49], [12, 50], [14, 50]]
dealing with [13, 51] at loop 0
[13, 51] is NOT a wall
dealing with [13, 49] at loop 1
[13, 49] is NOT a wall
dealing with [12, 50] at loop 2
dealing with [14, 50] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[13, 50][13, 51]
the points are:  [13, 50] [13, 51]
type for point in is_valid_node  <class 'list'>
[13, 50] 13 50
type for point in is_valid_node  <class 'list'>
[13, 51] 13 51
the point we are trying to find neighbors for  [13, 51]
neighboring cells are:  [[13, 52], [13, 50], [12, 51], [14, 51]]
dealing with [13, 52] at loop 0
dealing with [13, 50] at loop 1
[13, 50] is NOT a wall
dealing with [12, 51] at loop 2
[12, 51] is NOT a wall
dealing with [14, 51] at loop 3
neighbors of b [[13, 50], [12, 51]]
cost from [13, 50] to [13, 51] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[13, 50][13, 49]
the points are:  [13, 50] [13, 49]
type for point in is_valid_node  <class 'list'>
[13, 50] 13 50
type for point in is_valid_node  <class 'list'>
[13, 49] 13 49
the point we are trying to find neighbors for  [13, 49]
neighboring cells are:  [[13, 50], [13, 48], [12, 49], [14, 49]]
dealing with [13, 50] at loop 0
[13, 50] is NOT a wall
dealing with [13, 48] at loop 1
[13, 48] is NOT a wall
dealing with [12, 49] at loop 2
dealing with [14, 49] at loop 3
[14, 49] is NOT a wall
neighbors of b [[13, 50], [13, 48], [14, 49]]
cost from [13, 50] to [13, 49] is 1
<class 'int'>
3 37 40
3 37 40
40 <class 'int'>
3 37 40
[13, 49] (13, 49)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 49] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 49] 13 49
the point we are trying to find neighbors for  [13, 49]
neighboring cells are:  [[13, 50], [13, 48], [12, 49], [14, 49]]
dealing with [13, 50] at loop 0
[13, 50] is NOT a wall
dealing with [13, 48] at loop 1
[13, 48] is NOT a wall
dealing with [12, 49] at loop 2
dealing with [14, 49] at loop 3
[14, 49] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[13, 49][13, 50]
the points are:  [13, 49] [13, 50]
type for point in is_valid_node  <class 'list'>
[13, 49] 13 49
type for point in is_valid_node  <class 'list'>
[13, 50] 13 50
the point we are trying to find neighbors for  [13, 50]
neighboring cells are:  [[13, 51], [13, 49], [12, 50], [14, 50]]
dealing with [13, 51] at loop 0
[13, 51] is NOT a wall
dealing with [13, 49] at loop 1
[13, 49] is NOT a wall
dealing with [12, 50] at loop 2
dealing with [14, 50] at loop 3
neighbors of b [[13, 51], [13, 49]]
cost from [13, 49] to [13, 50] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[13, 49][13, 48]
the points are:  [13, 49] [13, 48]
type for point in is_valid_node  <class 'list'>
[13, 49] 13 49
type for point in is_valid_node  <class 'list'>
[13, 48] 13 48
the point we are trying to find neighbors for  [13, 48]
neighboring cells are:  [[13, 49], [13, 47], [12, 48], [14, 48]]
dealing with [13, 49] at loop 0
[13, 49] is NOT a wall
dealing with [13, 47] at loop 1
[13, 47] is NOT a wall
dealing with [12, 48] at loop 2
dealing with [14, 48] at loop 3
neighbors of b [[13, 49], [13, 47]]
cost from [13, 49] to [13, 48] is 1
<class 'int'>
3 36 39
3 36 39
39 <class 'int'>
3 36 39
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[13, 49][14, 49]
the points are:  [13, 49] [14, 49]
type for point in is_valid_node  <class 'list'>
[13, 49] 13 49
type for point in is_valid_node  <class 'list'>
[14, 49] 14 49
the point we are trying to find neighbors for  [14, 49]
neighboring cells are:  [[14, 50], [14, 48], [13, 49], [15, 49]]
dealing with [14, 50] at loop 0
dealing with [14, 48] at loop 1
dealing with [13, 49] at loop 2
[13, 49] is NOT a wall
dealing with [15, 49] at loop 3
[15, 49] is NOT a wall
neighbors of b [[13, 49], [15, 49]]
cost from [13, 49] to [14, 49] is 1
<class 'int'>
4 37 41
4 37 41
41 <class 'int'>
4 37 41
[13, 48] (13, 48)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 48] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 48] 13 48
the point we are trying to find neighbors for  [13, 48]
neighboring cells are:  [[13, 49], [13, 47], [12, 48], [14, 48]]
dealing with [13, 49] at loop 0
[13, 49] is NOT a wall
dealing with [13, 47] at loop 1
[13, 47] is NOT a wall
dealing with [12, 48] at loop 2
dealing with [14, 48] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
81[13, 48][13, 49]
the points are:  [13, 48] [13, 49]
type for point in is_valid_node  <class 'list'>
[13, 48] 13 48
type for point in is_valid_node  <class 'list'>
[13, 49] 13 49
the point we are trying to find neighbors for  [13, 49]
neighboring cells are:  [[13, 50], [13, 48], [12, 49], [14, 49]]
dealing with [13, 50] at loop 0
[13, 50] is NOT a wall
dealing with [13, 48] at loop 1
[13, 48] is NOT a wall
dealing with [12, 49] at loop 2
dealing with [14, 49] at loop 3
[14, 49] is NOT a wall
neighbors of b [[13, 50], [13, 48], [14, 49]]
cost from [13, 48] to [13, 49] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
81[13, 48][13, 47]
the points are:  [13, 48] [13, 47]
type for point in is_valid_node  <class 'list'>
[13, 48] 13 48
type for point in is_valid_node  <class 'list'>
[13, 47] 13 47
the point we are trying to find neighbors for  [13, 47]
neighboring cells are:  [[13, 48], [13, 46], [12, 47], [14, 47]]
dealing with [13, 48] at loop 0
[13, 48] is NOT a wall
dealing with [13, 46] at loop 1
dealing with [12, 47] at loop 2
dealing with [14, 47] at loop 3
neighbors of b [[13, 48]]
cost from [13, 48] to [13, 47] is 1
<class 'int'>
3 35 38
3 35 38
38 <class 'int'>
3 35 38
[13, 47] (13, 47)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 47] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 47] 13 47
the point we are trying to find neighbors for  [13, 47]
neighboring cells are:  [[13, 48], [13, 46], [12, 47], [14, 47]]
dealing with [13, 48] at loop 0
[13, 48] is NOT a wall
dealing with [13, 46] at loop 1
dealing with [12, 47] at loop 2
dealing with [14, 47] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
82[13, 47][13, 48]
the points are:  [13, 47] [13, 48]
type for point in is_valid_node  <class 'list'>
[13, 47] 13 47
type for point in is_valid_node  <class 'list'>
[13, 48] 13 48
the point we are trying to find neighbors for  [13, 48]
neighboring cells are:  [[13, 49], [13, 47], [12, 48], [14, 48]]
dealing with [13, 49] at loop 0
[13, 49] is NOT a wall
dealing with [13, 47] at loop 1
[13, 47] is NOT a wall
dealing with [12, 48] at loop 2
dealing with [14, 48] at loop 3
neighbors of b [[13, 49], [13, 47]]
cost from [13, 47] to [13, 48] is 1
[15, 45] (15, 45)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 45] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 45] 15 45
the point we are trying to find neighbors for  [15, 45]
neighboring cells are:  [[15, 46], [15, 44], [14, 45], [16, 45]]
dealing with [15, 46] at loop 0
[15, 46] is NOT a wall
dealing with [15, 44] at loop 1
[15, 44] is NOT a wall
dealing with [14, 45] at loop 2
dealing with [16, 45] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
82[15, 45][15, 46]
the points are:  [15, 45] [15, 46]
type for point in is_valid_node  <class 'list'>
[15, 45] 15 45
type for point in is_valid_node  <class 'list'>
[15, 46] 15 46
the point we are trying to find neighbors for  [15, 46]
neighboring cells are:  [[15, 47], [15, 45], [14, 46], [16, 46]]
dealing with [15, 47] at loop 0
[15, 47] is NOT a wall
dealing with [15, 45] at loop 1
[15, 45] is NOT a wall
dealing with [14, 46] at loop 2
dealing with [16, 46] at loop 3
neighbors of b [[15, 47], [15, 45]]
cost from [15, 45] to [15, 46] is 1
<class 'int'>
5 34 39
5 34 39
39 <class 'int'>
5 34 39
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
82[15, 45][15, 44]
the points are:  [15, 45] [15, 44]
type for point in is_valid_node  <class 'list'>
[15, 45] 15 45
type for point in is_valid_node  <class 'list'>
[15, 44] 15 44
the point we are trying to find neighbors for  [15, 44]
neighboring cells are:  [[15, 45], [15, 43], [14, 44], [16, 44]]
dealing with [15, 45] at loop 0
[15, 45] is NOT a wall
dealing with [15, 43] at loop 1
[15, 43] is NOT a wall
dealing with [14, 44] at loop 2
dealing with [16, 44] at loop 3
neighbors of b [[15, 45], [15, 43]]
cost from [15, 45] to [15, 44] is 1
[1, 51] (1, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 51] 1 51
the point we are trying to find neighbors for  [1, 51]
neighboring cells are:  [[1, 52], [1, 50], [0, 51], [2, 51]]
dealing with [1, 52] at loop 0
[1, 52] is NOT a wall
dealing with [1, 50] at loop 1
[1, 50] is NOT a wall
dealing with [0, 51] at loop 2
dealing with [2, 51] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[1, 51][1, 52]
the points are:  [1, 51] [1, 52]
type for point in is_valid_node  <class 'list'>
[1, 51] 1 51
type for point in is_valid_node  <class 'list'>
[1, 52] 1 52
the point we are trying to find neighbors for  [1, 52]
neighboring cells are:  [[1, 53], [1, 51], [0, 52], [2, 52]]
dealing with [1, 53] at loop 0
[1, 53] is NOT a wall
dealing with [1, 51] at loop 1
[1, 51] is NOT a wall
dealing with [0, 52] at loop 2
dealing with [2, 52] at loop 3
neighbors of b [[1, 53], [1, 51]]
cost from [1, 51] to [1, 52] is 1
<class 'int'>
9 40 49
9 40 49
49 <class 'int'>
9 40 49
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
74[1, 51][1, 50]
the points are:  [1, 51] [1, 50]
type for point in is_valid_node  <class 'list'>
[1, 51] 1 51
type for point in is_valid_node  <class 'list'>
[1, 50] 1 50
the point we are trying to find neighbors for  [1, 50]
neighboring cells are:  [[1, 51], [1, 49], [0, 50], [2, 50]]
dealing with [1, 51] at loop 0
[1, 51] is NOT a wall
dealing with [1, 49] at loop 1
[1, 49] is NOT a wall
dealing with [0, 50] at loop 2
dealing with [2, 50] at loop 3
neighbors of b [[1, 51], [1, 49]]
cost from [1, 51] to [1, 50] is 1
[5, 51] (5, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 51] 5 51
the point we are trying to find neighbors for  [5, 51]
neighboring cells are:  [[5, 52], [5, 50], [4, 51], [6, 51]]
dealing with [5, 52] at loop 0
[5, 52] is NOT a wall
dealing with [5, 50] at loop 1
[5, 50] is NOT a wall
dealing with [4, 51] at loop 2
[4, 51] is NOT a wall
dealing with [6, 51] at loop 3
[6, 51] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[5, 51][5, 52]
the points are:  [5, 51] [5, 52]
type for point in is_valid_node  <class 'list'>
[5, 51] 5 51
type for point in is_valid_node  <class 'list'>
[5, 52] 5 52
the point we are trying to find neighbors for  [5, 52]
neighboring cells are:  [[5, 53], [5, 51], [4, 52], [6, 52]]
dealing with [5, 53] at loop 0
[5, 53] is NOT a wall
dealing with [5, 51] at loop 1
[5, 51] is NOT a wall
dealing with [4, 52] at loop 2
dealing with [6, 52] at loop 3
neighbors of b [[5, 53], [5, 51]]
cost from [5, 51] to [5, 52] is 1
<class 'int'>
5 40 45
5 40 45
45 <class 'int'>
5 40 45
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[5, 51][5, 50]
the points are:  [5, 51] [5, 50]
type for point in is_valid_node  <class 'list'>
[5, 51] 5 51
type for point in is_valid_node  <class 'list'>
[5, 50] 5 50
the point we are trying to find neighbors for  [5, 50]
neighboring cells are:  [[5, 51], [5, 49], [4, 50], [6, 50]]
dealing with [5, 51] at loop 0
[5, 51] is NOT a wall
dealing with [5, 49] at loop 1
[5, 49] is NOT a wall
dealing with [4, 50] at loop 2
dealing with [6, 50] at loop 3
neighbors of b [[5, 51], [5, 49]]
cost from [5, 51] to [5, 50] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[5, 51][4, 51]
the points are:  [5, 51] [4, 51]
type for point in is_valid_node  <class 'list'>
[5, 51] 5 51
type for point in is_valid_node  <class 'list'>
[4, 51] 4 51
the point we are trying to find neighbors for  [4, 51]
neighboring cells are:  [[4, 52], [4, 50], [3, 51], [5, 51]]
dealing with [4, 52] at loop 0
dealing with [4, 50] at loop 1
dealing with [3, 51] at loop 2
[3, 51] is NOT a wall
dealing with [5, 51] at loop 3
[5, 51] is NOT a wall
neighbors of b [[3, 51], [5, 51]]
cost from [5, 51] to [4, 51] is 1
<class 'int'>
6 39 45
6 39 45
45 <class 'int'>
6 39 45
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[5, 51][6, 51]
the points are:  [5, 51] [6, 51]
type for point in is_valid_node  <class 'list'>
[5, 51] 5 51
type for point in is_valid_node  <class 'list'>
[6, 51] 6 51
the point we are trying to find neighbors for  [6, 51]
neighboring cells are:  [[6, 52], [6, 50], [5, 51], [7, 51]]
dealing with [6, 52] at loop 0
dealing with [6, 50] at loop 1
dealing with [5, 51] at loop 2
[5, 51] is NOT a wall
dealing with [7, 51] at loop 3
[7, 51] is NOT a wall
neighbors of b [[5, 51], [7, 51]]
cost from [5, 51] to [6, 51] is 1
<class 'int'>
4 39 43
4 39 43
43 <class 'int'>
4 39 43
[6, 51] (6, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 51] 6 51
the point we are trying to find neighbors for  [6, 51]
neighboring cells are:  [[6, 52], [6, 50], [5, 51], [7, 51]]
dealing with [6, 52] at loop 0
dealing with [6, 50] at loop 1
dealing with [5, 51] at loop 2
[5, 51] is NOT a wall
dealing with [7, 51] at loop 3
[7, 51] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[6, 51][5, 51]
the points are:  [6, 51] [5, 51]
type for point in is_valid_node  <class 'list'>
[6, 51] 6 51
type for point in is_valid_node  <class 'list'>
[5, 51] 5 51
the point we are trying to find neighbors for  [5, 51]
neighboring cells are:  [[5, 52], [5, 50], [4, 51], [6, 51]]
dealing with [5, 52] at loop 0
[5, 52] is NOT a wall
dealing with [5, 50] at loop 1
[5, 50] is NOT a wall
dealing with [4, 51] at loop 2
[4, 51] is NOT a wall
dealing with [6, 51] at loop 3
[6, 51] is NOT a wall
neighbors of b [[5, 52], [5, 50], [4, 51], [6, 51]]
cost from [6, 51] to [5, 51] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[6, 51][7, 51]
the points are:  [6, 51] [7, 51]
type for point in is_valid_node  <class 'list'>
[6, 51] 6 51
type for point in is_valid_node  <class 'list'>
[7, 51] 7 51
the point we are trying to find neighbors for  [7, 51]
neighboring cells are:  [[7, 52], [7, 50], [6, 51], [8, 51]]
dealing with [7, 52] at loop 0
dealing with [7, 50] at loop 1
dealing with [6, 51] at loop 2
[6, 51] is NOT a wall
dealing with [8, 51] at loop 3
neighbors of b [[6, 51]]
cost from [6, 51] to [7, 51] is 1
<class 'int'>
3 39 42
3 39 42
42 <class 'int'>
3 39 42
[7, 51] (7, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 51] 7 51
the point we are trying to find neighbors for  [7, 51]
neighboring cells are:  [[7, 52], [7, 50], [6, 51], [8, 51]]
dealing with [7, 52] at loop 0
dealing with [7, 50] at loop 1
dealing with [6, 51] at loop 2
[6, 51] is NOT a wall
dealing with [8, 51] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[7, 51][6, 51]
the points are:  [7, 51] [6, 51]
type for point in is_valid_node  <class 'list'>
[7, 51] 7 51
type for point in is_valid_node  <class 'list'>
[6, 51] 6 51
the point we are trying to find neighbors for  [6, 51]
neighboring cells are:  [[6, 52], [6, 50], [5, 51], [7, 51]]
dealing with [6, 52] at loop 0
dealing with [6, 50] at loop 1
dealing with [5, 51] at loop 2
[5, 51] is NOT a wall
dealing with [7, 51] at loop 3
[7, 51] is NOT a wall
neighbors of b [[5, 51], [7, 51]]
cost from [7, 51] to [6, 51] is 1
[9, 53] (9, 53)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 53] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 53] 9 53
the point we are trying to find neighbors for  [9, 53]
neighboring cells are:  [[9, 54], [9, 52], [8, 53], [10, 53]]
dealing with [9, 54] at loop 0
dealing with [9, 52] at loop 1
[9, 52] is NOT a wall
dealing with [8, 53] at loop 2
[8, 53] is NOT a wall
dealing with [10, 53] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[9, 53][9, 52]
the points are:  [9, 53] [9, 52]
type for point in is_valid_node  <class 'list'>
[9, 53] 9 53
type for point in is_valid_node  <class 'list'>
[9, 52] 9 52
the point we are trying to find neighbors for  [9, 52]
neighboring cells are:  [[9, 53], [9, 51], [8, 52], [10, 52]]
dealing with [9, 53] at loop 0
[9, 53] is NOT a wall
dealing with [9, 51] at loop 1
[9, 51] is NOT a wall
dealing with [8, 52] at loop 2
dealing with [10, 52] at loop 3
neighbors of b [[9, 53], [9, 51]]
cost from [9, 53] to [9, 52] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[9, 53][8, 53]
the points are:  [9, 53] [8, 53]
type for point in is_valid_node  <class 'list'>
[9, 53] 9 53
type for point in is_valid_node  <class 'list'>
[8, 53] 8 53
the point we are trying to find neighbors for  [8, 53]
neighboring cells are:  [[8, 54], [8, 52], [7, 53], [9, 53]]
dealing with [8, 54] at loop 0
dealing with [8, 52] at loop 1
dealing with [7, 53] at loop 2
[7, 53] is NOT a wall
dealing with [9, 53] at loop 3
[9, 53] is NOT a wall
neighbors of b [[7, 53], [9, 53]]
cost from [9, 53] to [8, 53] is 1
<class 'int'>
2 41 43
2 41 43
43 <class 'int'>
2 41 43
[11, 54] (11, 54)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 54] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 54] 11 54
the point we are trying to find neighbors for  [11, 54]
neighboring cells are:  [[11, 55], [11, 53], [10, 54], [12, 54]]
dealing with [11, 55] at loop 0
[11, 55] is NOT a wall
dealing with [11, 53] at loop 1
[11, 53] is NOT a wall
dealing with [10, 54] at loop 2
dealing with [12, 54] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[11, 54][11, 55]
the points are:  [11, 54] [11, 55]
type for point in is_valid_node  <class 'list'>
[11, 54] 11 54
type for point in is_valid_node  <class 'list'>
[11, 55] 11 55
the point we are trying to find neighbors for  [11, 55]
neighboring cells are:  [[11, 56], [11, 54], [10, 55], [12, 55]]
dealing with [11, 56] at loop 0
dealing with [11, 54] at loop 1
[11, 54] is NOT a wall
dealing with [10, 55] at loop 2
[10, 55] is NOT a wall
dealing with [12, 55] at loop 3
neighbors of b [[11, 54], [10, 55]]
cost from [11, 54] to [11, 55] is 1
<class 'int'>
1 43 44
1 43 44
44 <class 'int'>
1 43 44
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[11, 54][11, 53]
the points are:  [11, 54] [11, 53]
type for point in is_valid_node  <class 'list'>
[11, 54] 11 54
type for point in is_valid_node  <class 'list'>
[11, 53] 11 53
the point we are trying to find neighbors for  [11, 53]
neighboring cells are:  [[11, 54], [11, 52], [10, 53], [12, 53]]
dealing with [11, 54] at loop 0
[11, 54] is NOT a wall
dealing with [11, 52] at loop 1
[11, 52] is NOT a wall
dealing with [10, 53] at loop 2
dealing with [12, 53] at loop 3
neighbors of b [[11, 54], [11, 52]]
cost from [11, 54] to [11, 53] is 1
[14, 49] (14, 49)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 49] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 49] 14 49
the point we are trying to find neighbors for  [14, 49]
neighboring cells are:  [[14, 50], [14, 48], [13, 49], [15, 49]]
dealing with [14, 50] at loop 0
dealing with [14, 48] at loop 1
dealing with [13, 49] at loop 2
[13, 49] is NOT a wall
dealing with [15, 49] at loop 3
[15, 49] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
81[14, 49][13, 49]
the points are:  [14, 49] [13, 49]
type for point in is_valid_node  <class 'list'>
[14, 49] 14 49
type for point in is_valid_node  <class 'list'>
[13, 49] 13 49
the point we are trying to find neighbors for  [13, 49]
neighboring cells are:  [[13, 50], [13, 48], [12, 49], [14, 49]]
dealing with [13, 50] at loop 0
[13, 50] is NOT a wall
dealing with [13, 48] at loop 1
[13, 48] is NOT a wall
dealing with [12, 49] at loop 2
dealing with [14, 49] at loop 3
[14, 49] is NOT a wall
neighbors of b [[13, 50], [13, 48], [14, 49]]
cost from [14, 49] to [13, 49] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
81[14, 49][15, 49]
the points are:  [14, 49] [15, 49]
type for point in is_valid_node  <class 'list'>
[14, 49] 14 49
type for point in is_valid_node  <class 'list'>
[15, 49] 15 49
the point we are trying to find neighbors for  [15, 49]
neighboring cells are:  [[15, 50], [15, 48], [14, 49], [16, 49]]
dealing with [15, 50] at loop 0
dealing with [15, 48] at loop 1
dealing with [14, 49] at loop 2
[14, 49] is NOT a wall
dealing with [16, 49] at loop 3
[16, 49] is NOT a wall
neighbors of b [[14, 49], [16, 49]]
cost from [14, 49] to [15, 49] is 1
<class 'int'>
5 37 42
5 37 42
42 <class 'int'>
5 37 42
[15, 46] (15, 46)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 46] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 46] 15 46
the point we are trying to find neighbors for  [15, 46]
neighboring cells are:  [[15, 47], [15, 45], [14, 46], [16, 46]]
dealing with [15, 47] at loop 0
[15, 47] is NOT a wall
dealing with [15, 45] at loop 1
[15, 45] is NOT a wall
dealing with [14, 46] at loop 2
dealing with [16, 46] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
83[15, 46][15, 47]
the points are:  [15, 46] [15, 47]
type for point in is_valid_node  <class 'list'>
[15, 46] 15 46
type for point in is_valid_node  <class 'list'>
[15, 47] 15 47
the point we are trying to find neighbors for  [15, 47]
neighboring cells are:  [[15, 48], [15, 46], [14, 47], [16, 47]]
dealing with [15, 48] at loop 0
dealing with [15, 46] at loop 1
[15, 46] is NOT a wall
dealing with [14, 47] at loop 2
dealing with [16, 47] at loop 3
[16, 47] is NOT a wall
neighbors of b [[15, 46], [16, 47]]
cost from [15, 46] to [15, 47] is 1
<class 'int'>
5 35 40
5 35 40
40 <class 'int'>
5 35 40
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
83[15, 46][15, 45]
the points are:  [15, 46] [15, 45]
type for point in is_valid_node  <class 'list'>
[15, 46] 15 46
type for point in is_valid_node  <class 'list'>
[15, 45] 15 45
the point we are trying to find neighbors for  [15, 45]
neighboring cells are:  [[15, 46], [15, 44], [14, 45], [16, 45]]
dealing with [15, 46] at loop 0
[15, 46] is NOT a wall
dealing with [15, 44] at loop 1
[15, 44] is NOT a wall
dealing with [14, 45] at loop 2
dealing with [16, 45] at loop 3
neighbors of b [[15, 46], [15, 44]]
cost from [15, 46] to [15, 45] is 1
[1, 52] (1, 52)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 52] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 52] 1 52
the point we are trying to find neighbors for  [1, 52]
neighboring cells are:  [[1, 53], [1, 51], [0, 52], [2, 52]]
dealing with [1, 53] at loop 0
[1, 53] is NOT a wall
dealing with [1, 51] at loop 1
[1, 51] is NOT a wall
dealing with [0, 52] at loop 2
dealing with [2, 52] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
75[1, 52][1, 53]
the points are:  [1, 52] [1, 53]
type for point in is_valid_node  <class 'list'>
[1, 52] 1 52
type for point in is_valid_node  <class 'list'>
[1, 53] 1 53
the point we are trying to find neighbors for  [1, 53]
neighboring cells are:  [[1, 54], [1, 52], [0, 53], [2, 53]]
dealing with [1, 54] at loop 0
dealing with [1, 52] at loop 1
[1, 52] is NOT a wall
dealing with [0, 53] at loop 2
dealing with [2, 53] at loop 3
[2, 53] is NOT a wall
neighbors of b [[1, 52], [2, 53]]
cost from [1, 52] to [1, 53] is 1
<class 'int'>
9 41 50
9 41 50
50 <class 'int'>
9 41 50
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
75[1, 52][1, 51]
the points are:  [1, 52] [1, 51]
type for point in is_valid_node  <class 'list'>
[1, 52] 1 52
type for point in is_valid_node  <class 'list'>
[1, 51] 1 51
the point we are trying to find neighbors for  [1, 51]
neighboring cells are:  [[1, 52], [1, 50], [0, 51], [2, 51]]
dealing with [1, 52] at loop 0
[1, 52] is NOT a wall
dealing with [1, 50] at loop 1
[1, 50] is NOT a wall
dealing with [0, 51] at loop 2
dealing with [2, 51] at loop 3
neighbors of b [[1, 52], [1, 50]]
cost from [1, 52] to [1, 51] is 1
[4, 51] (4, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 51] 4 51
the point we are trying to find neighbors for  [4, 51]
neighboring cells are:  [[4, 52], [4, 50], [3, 51], [5, 51]]
dealing with [4, 52] at loop 0
dealing with [4, 50] at loop 1
dealing with [3, 51] at loop 2
[3, 51] is NOT a wall
dealing with [5, 51] at loop 3
[5, 51] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[4, 51][3, 51]
the points are:  [4, 51] [3, 51]
type for point in is_valid_node  <class 'list'>
[4, 51] 4 51
type for point in is_valid_node  <class 'list'>
[3, 51] 3 51
the point we are trying to find neighbors for  [3, 51]
neighboring cells are:  [[3, 52], [3, 50], [2, 51], [4, 51]]
dealing with [3, 52] at loop 0
dealing with [3, 50] at loop 1
dealing with [2, 51] at loop 2
dealing with [4, 51] at loop 3
[4, 51] is NOT a wall
neighbors of b [[4, 51]]
cost from [4, 51] to [3, 51] is 1
<class 'int'>
7 39 46
7 39 46
46 <class 'int'>
7 39 46
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[4, 51][5, 51]
the points are:  [4, 51] [5, 51]
type for point in is_valid_node  <class 'list'>
[4, 51] 4 51
type for point in is_valid_node  <class 'list'>
[5, 51] 5 51
the point we are trying to find neighbors for  [5, 51]
neighboring cells are:  [[5, 52], [5, 50], [4, 51], [6, 51]]
dealing with [5, 52] at loop 0
[5, 52] is NOT a wall
dealing with [5, 50] at loop 1
[5, 50] is NOT a wall
dealing with [4, 51] at loop 2
[4, 51] is NOT a wall
dealing with [6, 51] at loop 3
[6, 51] is NOT a wall
neighbors of b [[5, 52], [5, 50], [4, 51], [6, 51]]
cost from [4, 51] to [5, 51] is 1
[5, 52] (5, 52)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 52] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 52] 5 52
the point we are trying to find neighbors for  [5, 52]
neighboring cells are:  [[5, 53], [5, 51], [4, 52], [6, 52]]
dealing with [5, 53] at loop 0
[5, 53] is NOT a wall
dealing with [5, 51] at loop 1
[5, 51] is NOT a wall
dealing with [4, 52] at loop 2
dealing with [6, 52] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[5, 52][5, 53]
the points are:  [5, 52] [5, 53]
type for point in is_valid_node  <class 'list'>
[5, 52] 5 52
type for point in is_valid_node  <class 'list'>
[5, 53] 5 53
the point we are trying to find neighbors for  [5, 53]
neighboring cells are:  [[5, 54], [5, 52], [4, 53], [6, 53]]
dealing with [5, 54] at loop 0
dealing with [5, 52] at loop 1
[5, 52] is NOT a wall
dealing with [4, 53] at loop 2
dealing with [6, 53] at loop 3
neighbors of b [[5, 52]]
cost from [5, 52] to [5, 53] is 1
<class 'int'>
5 41 46
5 41 46
46 <class 'int'>
5 41 46
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[5, 52][5, 51]
the points are:  [5, 52] [5, 51]
type for point in is_valid_node  <class 'list'>
[5, 52] 5 52
type for point in is_valid_node  <class 'list'>
[5, 51] 5 51
the point we are trying to find neighbors for  [5, 51]
neighboring cells are:  [[5, 52], [5, 50], [4, 51], [6, 51]]
dealing with [5, 52] at loop 0
[5, 52] is NOT a wall
dealing with [5, 50] at loop 1
[5, 50] is NOT a wall
dealing with [4, 51] at loop 2
[4, 51] is NOT a wall
dealing with [6, 51] at loop 3
[6, 51] is NOT a wall
neighbors of b [[5, 52], [5, 50], [4, 51], [6, 51]]
cost from [5, 52] to [5, 51] is 1
[8, 53] (8, 53)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[8, 53] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[8, 53] 8 53
the point we are trying to find neighbors for  [8, 53]
neighboring cells are:  [[8, 54], [8, 52], [7, 53], [9, 53]]
dealing with [8, 54] at loop 0
dealing with [8, 52] at loop 1
dealing with [7, 53] at loop 2
[7, 53] is NOT a wall
dealing with [9, 53] at loop 3
[9, 53] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
81[8, 53][7, 53]
the points are:  [8, 53] [7, 53]
type for point in is_valid_node  <class 'list'>
[8, 53] 8 53
type for point in is_valid_node  <class 'list'>
[7, 53] 7 53
the point we are trying to find neighbors for  [7, 53]
neighboring cells are:  [[7, 54], [7, 52], [6, 53], [8, 53]]
dealing with [7, 54] at loop 0
[7, 54] is NOT a wall
dealing with [7, 52] at loop 1
dealing with [6, 53] at loop 2
dealing with [8, 53] at loop 3
[8, 53] is NOT a wall
neighbors of b [[7, 54], [8, 53]]
cost from [8, 53] to [7, 53] is 1
<class 'int'>
3 41 44
3 41 44
44 <class 'int'>
3 41 44
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
81[8, 53][9, 53]
the points are:  [8, 53] [9, 53]
type for point in is_valid_node  <class 'list'>
[8, 53] 8 53
type for point in is_valid_node  <class 'list'>
[9, 53] 9 53
the point we are trying to find neighbors for  [9, 53]
neighboring cells are:  [[9, 54], [9, 52], [8, 53], [10, 53]]
dealing with [9, 54] at loop 0
dealing with [9, 52] at loop 1
[9, 52] is NOT a wall
dealing with [8, 53] at loop 2
[8, 53] is NOT a wall
dealing with [10, 53] at loop 3
neighbors of b [[9, 52], [8, 53]]
cost from [8, 53] to [9, 53] is 1
[11, 55] (11, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 55] 11 55
the point we are trying to find neighbors for  [11, 55]
neighboring cells are:  [[11, 56], [11, 54], [10, 55], [12, 55]]
dealing with [11, 56] at loop 0
dealing with [11, 54] at loop 1
[11, 54] is NOT a wall
dealing with [10, 55] at loop 2
[10, 55] is NOT a wall
dealing with [12, 55] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[11, 55][11, 54]
the points are:  [11, 55] [11, 54]
type for point in is_valid_node  <class 'list'>
[11, 55] 11 55
type for point in is_valid_node  <class 'list'>
[11, 54] 11 54
the point we are trying to find neighbors for  [11, 54]
neighboring cells are:  [[11, 55], [11, 53], [10, 54], [12, 54]]
dealing with [11, 55] at loop 0
[11, 55] is NOT a wall
dealing with [11, 53] at loop 1
[11, 53] is NOT a wall
dealing with [10, 54] at loop 2
dealing with [12, 54] at loop 3
neighbors of b [[11, 55], [11, 53]]
cost from [11, 55] to [11, 54] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[11, 55][10, 55]
the points are:  [11, 55] [10, 55]
type for point in is_valid_node  <class 'list'>
[11, 55] 11 55
type for point in is_valid_node  <class 'list'>
[10, 55] 10 55
the point we are trying to find neighbors for  [10, 55]
neighboring cells are:  [[10, 56], [10, 54], [9, 55], [11, 55]]
dealing with [10, 56] at loop 0
dealing with [10, 54] at loop 1
dealing with [9, 55] at loop 2
[9, 55] is NOT a wall
dealing with [11, 55] at loop 3
[11, 55] is NOT a wall
neighbors of b [[9, 55], [11, 55]]
cost from [11, 55] to [10, 55] is 1
<class 'int'>
0 43 43
0 43 43
43 <class 'int'>
0 43 43
[10, 55] (10, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[10, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[10, 55] 10 55
the point we are trying to find neighbors for  [10, 55]
neighboring cells are:  [[10, 56], [10, 54], [9, 55], [11, 55]]
dealing with [10, 56] at loop 0
dealing with [10, 54] at loop 1
dealing with [9, 55] at loop 2
[9, 55] is NOT a wall
dealing with [11, 55] at loop 3
[11, 55] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
81[10, 55][9, 55]
the points are:  [10, 55] [9, 55]
type for point in is_valid_node  <class 'list'>
[10, 55] 10 55
type for point in is_valid_node  <class 'list'>
[9, 55] 9 55
the point we are trying to find neighbors for  [9, 55]
neighboring cells are:  [[9, 56], [9, 54], [8, 55], [10, 55]]
dealing with [9, 56] at loop 0
[9, 56] is NOT a wall
dealing with [9, 54] at loop 1
dealing with [8, 55] at loop 2
dealing with [10, 55] at loop 3
[10, 55] is NOT a wall
neighbors of b [[9, 56], [10, 55]]
cost from [10, 55] to [9, 55] is 1
<class 'int'>
1 43 44
1 43 44
44 <class 'int'>
1 43 44
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
81[10, 55][11, 55]
the points are:  [10, 55] [11, 55]
type for point in is_valid_node  <class 'list'>
[10, 55] 10 55
type for point in is_valid_node  <class 'list'>
[11, 55] 11 55
the point we are trying to find neighbors for  [11, 55]
neighboring cells are:  [[11, 56], [11, 54], [10, 55], [12, 55]]
dealing with [11, 56] at loop 0
dealing with [11, 54] at loop 1
[11, 54] is NOT a wall
dealing with [10, 55] at loop 2
[10, 55] is NOT a wall
dealing with [12, 55] at loop 3
neighbors of b [[11, 54], [10, 55]]
cost from [10, 55] to [11, 55] is 1
[15, 47] (15, 47)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 47] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 47] 15 47
the point we are trying to find neighbors for  [15, 47]
neighboring cells are:  [[15, 48], [15, 46], [14, 47], [16, 47]]
dealing with [15, 48] at loop 0
dealing with [15, 46] at loop 1
[15, 46] is NOT a wall
dealing with [14, 47] at loop 2
dealing with [16, 47] at loop 3
[16, 47] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
84[15, 47][15, 46]
the points are:  [15, 47] [15, 46]
type for point in is_valid_node  <class 'list'>
[15, 47] 15 47
type for point in is_valid_node  <class 'list'>
[15, 46] 15 46
the point we are trying to find neighbors for  [15, 46]
neighboring cells are:  [[15, 47], [15, 45], [14, 46], [16, 46]]
dealing with [15, 47] at loop 0
[15, 47] is NOT a wall
dealing with [15, 45] at loop 1
[15, 45] is NOT a wall
dealing with [14, 46] at loop 2
dealing with [16, 46] at loop 3
neighbors of b [[15, 47], [15, 45]]
cost from [15, 47] to [15, 46] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
84[15, 47][16, 47]
the points are:  [15, 47] [16, 47]
type for point in is_valid_node  <class 'list'>
[15, 47] 15 47
type for point in is_valid_node  <class 'list'>
[16, 47] 16 47
the point we are trying to find neighbors for  [16, 47]
neighboring cells are:  [[16, 48], [16, 46], [15, 47], [17, 47]]
dealing with [16, 48] at loop 0
dealing with [16, 46] at loop 1
dealing with [15, 47] at loop 2
[15, 47] is NOT a wall
dealing with [17, 47] at loop 3
[17, 47] is NOT a wall
neighbors of b [[15, 47], [17, 47]]
cost from [15, 47] to [16, 47] is 1
<class 'int'>
6 35 41
6 35 41
41 <class 'int'>
6 35 41
[15, 49] (15, 49)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 49] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 49] 15 49
the point we are trying to find neighbors for  [15, 49]
neighboring cells are:  [[15, 50], [15, 48], [14, 49], [16, 49]]
dealing with [15, 50] at loop 0
dealing with [15, 48] at loop 1
dealing with [14, 49] at loop 2
[14, 49] is NOT a wall
dealing with [16, 49] at loop 3
[16, 49] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
82[15, 49][14, 49]
the points are:  [15, 49] [14, 49]
type for point in is_valid_node  <class 'list'>
[15, 49] 15 49
type for point in is_valid_node  <class 'list'>
[14, 49] 14 49
the point we are trying to find neighbors for  [14, 49]
neighboring cells are:  [[14, 50], [14, 48], [13, 49], [15, 49]]
dealing with [14, 50] at loop 0
dealing with [14, 48] at loop 1
dealing with [13, 49] at loop 2
[13, 49] is NOT a wall
dealing with [15, 49] at loop 3
[15, 49] is NOT a wall
neighbors of b [[13, 49], [15, 49]]
cost from [15, 49] to [14, 49] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
82[15, 49][16, 49]
the points are:  [15, 49] [16, 49]
type for point in is_valid_node  <class 'list'>
[15, 49] 15 49
type for point in is_valid_node  <class 'list'>
[16, 49] 16 49
the point we are trying to find neighbors for  [16, 49]
neighboring cells are:  [[16, 50], [16, 48], [15, 49], [17, 49]]
dealing with [16, 50] at loop 0
dealing with [16, 48] at loop 1
dealing with [15, 49] at loop 2
[15, 49] is NOT a wall
dealing with [17, 49] at loop 3
[17, 49] is NOT a wall
neighbors of b [[15, 49], [17, 49]]
cost from [15, 49] to [16, 49] is 1
<class 'int'>
6 37 43
6 37 43
43 <class 'int'>
6 37 43
[1, 53] (1, 53)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 53] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 53] 1 53
the point we are trying to find neighbors for  [1, 53]
neighboring cells are:  [[1, 54], [1, 52], [0, 53], [2, 53]]
dealing with [1, 54] at loop 0
dealing with [1, 52] at loop 1
[1, 52] is NOT a wall
dealing with [0, 53] at loop 2
dealing with [2, 53] at loop 3
[2, 53] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
76[1, 53][1, 52]
the points are:  [1, 53] [1, 52]
type for point in is_valid_node  <class 'list'>
[1, 53] 1 53
type for point in is_valid_node  <class 'list'>
[1, 52] 1 52
the point we are trying to find neighbors for  [1, 52]
neighboring cells are:  [[1, 53], [1, 51], [0, 52], [2, 52]]
dealing with [1, 53] at loop 0
[1, 53] is NOT a wall
dealing with [1, 51] at loop 1
[1, 51] is NOT a wall
dealing with [0, 52] at loop 2
dealing with [2, 52] at loop 3
neighbors of b [[1, 53], [1, 51]]
cost from [1, 53] to [1, 52] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
76[1, 53][2, 53]
the points are:  [1, 53] [2, 53]
type for point in is_valid_node  <class 'list'>
[1, 53] 1 53
type for point in is_valid_node  <class 'list'>
[2, 53] 2 53
the point we are trying to find neighbors for  [2, 53]
neighboring cells are:  [[2, 54], [2, 52], [1, 53], [3, 53]]
dealing with [2, 54] at loop 0
dealing with [2, 52] at loop 1
dealing with [1, 53] at loop 2
[1, 53] is NOT a wall
dealing with [3, 53] at loop 3
[3, 53] is NOT a wall
neighbors of b [[1, 53], [3, 53]]
cost from [1, 53] to [2, 53] is 1
<class 'int'>
8 41 49
8 41 49
49 <class 'int'>
8 41 49
[2, 53] (2, 53)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 53] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 53] 2 53
the point we are trying to find neighbors for  [2, 53]
neighboring cells are:  [[2, 54], [2, 52], [1, 53], [3, 53]]
dealing with [2, 54] at loop 0
dealing with [2, 52] at loop 1
dealing with [1, 53] at loop 2
[1, 53] is NOT a wall
dealing with [3, 53] at loop 3
[3, 53] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[2, 53][1, 53]
the points are:  [2, 53] [1, 53]
type for point in is_valid_node  <class 'list'>
[2, 53] 2 53
type for point in is_valid_node  <class 'list'>
[1, 53] 1 53
the point we are trying to find neighbors for  [1, 53]
neighboring cells are:  [[1, 54], [1, 52], [0, 53], [2, 53]]
dealing with [1, 54] at loop 0
dealing with [1, 52] at loop 1
[1, 52] is NOT a wall
dealing with [0, 53] at loop 2
dealing with [2, 53] at loop 3
[2, 53] is NOT a wall
neighbors of b [[1, 52], [2, 53]]
cost from [2, 53] to [1, 53] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
77[2, 53][3, 53]
the points are:  [2, 53] [3, 53]
type for point in is_valid_node  <class 'list'>
[2, 53] 2 53
type for point in is_valid_node  <class 'list'>
[3, 53] 3 53
the point we are trying to find neighbors for  [3, 53]
neighboring cells are:  [[3, 54], [3, 52], [2, 53], [4, 53]]
dealing with [3, 54] at loop 0
[3, 54] is NOT a wall
dealing with [3, 52] at loop 1
dealing with [2, 53] at loop 2
[2, 53] is NOT a wall
dealing with [4, 53] at loop 3
neighbors of b [[3, 54], [2, 53]]
cost from [2, 53] to [3, 53] is 1
<class 'int'>
7 41 48
7 41 48
48 <class 'int'>
7 41 48
[3, 51] (3, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 51] 3 51
the point we are trying to find neighbors for  [3, 51]
neighboring cells are:  [[3, 52], [3, 50], [2, 51], [4, 51]]
dealing with [3, 52] at loop 0
dealing with [3, 50] at loop 1
dealing with [2, 51] at loop 2
dealing with [4, 51] at loop 3
[4, 51] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[3, 51][4, 51]
the points are:  [3, 51] [4, 51]
type for point in is_valid_node  <class 'list'>
[3, 51] 3 51
type for point in is_valid_node  <class 'list'>
[4, 51] 4 51
the point we are trying to find neighbors for  [4, 51]
neighboring cells are:  [[4, 52], [4, 50], [3, 51], [5, 51]]
dealing with [4, 52] at loop 0
dealing with [4, 50] at loop 1
dealing with [3, 51] at loop 2
[3, 51] is NOT a wall
dealing with [5, 51] at loop 3
[5, 51] is NOT a wall
neighbors of b [[3, 51], [5, 51]]
cost from [3, 51] to [4, 51] is 1
[3, 53] (3, 53)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 53] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 53] 3 53
the point we are trying to find neighbors for  [3, 53]
neighboring cells are:  [[3, 54], [3, 52], [2, 53], [4, 53]]
dealing with [3, 54] at loop 0
[3, 54] is NOT a wall
dealing with [3, 52] at loop 1
dealing with [2, 53] at loop 2
[2, 53] is NOT a wall
dealing with [4, 53] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[3, 53][3, 54]
the points are:  [3, 53] [3, 54]
type for point in is_valid_node  <class 'list'>
[3, 53] 3 53
type for point in is_valid_node  <class 'list'>
[3, 54] 3 54
the point we are trying to find neighbors for  [3, 54]
neighboring cells are:  [[3, 55], [3, 53], [2, 54], [4, 54]]
dealing with [3, 55] at loop 0
[3, 55] is NOT a wall
dealing with [3, 53] at loop 1
[3, 53] is NOT a wall
dealing with [2, 54] at loop 2
dealing with [4, 54] at loop 3
neighbors of b [[3, 55], [3, 53]]
cost from [3, 53] to [3, 54] is 1
<class 'int'>
7 42 49
7 42 49
49 <class 'int'>
7 42 49
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
78[3, 53][2, 53]
the points are:  [3, 53] [2, 53]
type for point in is_valid_node  <class 'list'>
[3, 53] 3 53
type for point in is_valid_node  <class 'list'>
[2, 53] 2 53
the point we are trying to find neighbors for  [2, 53]
neighboring cells are:  [[2, 54], [2, 52], [1, 53], [3, 53]]
dealing with [2, 54] at loop 0
dealing with [2, 52] at loop 1
dealing with [1, 53] at loop 2
[1, 53] is NOT a wall
dealing with [3, 53] at loop 3
[3, 53] is NOT a wall
neighbors of b [[1, 53], [3, 53]]
cost from [3, 53] to [2, 53] is 1
[5, 53] (5, 53)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 53] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 53] 5 53
the point we are trying to find neighbors for  [5, 53]
neighboring cells are:  [[5, 54], [5, 52], [4, 53], [6, 53]]
dealing with [5, 54] at loop 0
dealing with [5, 52] at loop 1
[5, 52] is NOT a wall
dealing with [4, 53] at loop 2
dealing with [6, 53] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[5, 53][5, 52]
the points are:  [5, 53] [5, 52]
type for point in is_valid_node  <class 'list'>
[5, 53] 5 53
type for point in is_valid_node  <class 'list'>
[5, 52] 5 52
the point we are trying to find neighbors for  [5, 52]
neighboring cells are:  [[5, 53], [5, 51], [4, 52], [6, 52]]
dealing with [5, 53] at loop 0
[5, 53] is NOT a wall
dealing with [5, 51] at loop 1
[5, 51] is NOT a wall
dealing with [4, 52] at loop 2
dealing with [6, 52] at loop 3
neighbors of b [[5, 53], [5, 51]]
cost from [5, 53] to [5, 52] is 1
[7, 53] (7, 53)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 53] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 53] 7 53
the point we are trying to find neighbors for  [7, 53]
neighboring cells are:  [[7, 54], [7, 52], [6, 53], [8, 53]]
dealing with [7, 54] at loop 0
[7, 54] is NOT a wall
dealing with [7, 52] at loop 1
dealing with [6, 53] at loop 2
dealing with [8, 53] at loop 3
[8, 53] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
82[7, 53][7, 54]
the points are:  [7, 53] [7, 54]
type for point in is_valid_node  <class 'list'>
[7, 53] 7 53
type for point in is_valid_node  <class 'list'>
[7, 54] 7 54
the point we are trying to find neighbors for  [7, 54]
neighboring cells are:  [[7, 55], [7, 53], [6, 54], [8, 54]]
dealing with [7, 55] at loop 0
[7, 55] is NOT a wall
dealing with [7, 53] at loop 1
[7, 53] is NOT a wall
dealing with [6, 54] at loop 2
dealing with [8, 54] at loop 3
neighbors of b [[7, 55], [7, 53]]
cost from [7, 53] to [7, 54] is 1
<class 'int'>
3 42 45
3 42 45
45 <class 'int'>
3 42 45
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
82[7, 53][8, 53]
the points are:  [7, 53] [8, 53]
type for point in is_valid_node  <class 'list'>
[7, 53] 7 53
type for point in is_valid_node  <class 'list'>
[8, 53] 8 53
the point we are trying to find neighbors for  [8, 53]
neighboring cells are:  [[8, 54], [8, 52], [7, 53], [9, 53]]
dealing with [8, 54] at loop 0
dealing with [8, 52] at loop 1
dealing with [7, 53] at loop 2
[7, 53] is NOT a wall
dealing with [9, 53] at loop 3
[9, 53] is NOT a wall
neighbors of b [[7, 53], [9, 53]]
cost from [7, 53] to [8, 53] is 1
[9, 55] (9, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 55] 9 55
the point we are trying to find neighbors for  [9, 55]
neighboring cells are:  [[9, 56], [9, 54], [8, 55], [10, 55]]
dealing with [9, 56] at loop 0
[9, 56] is NOT a wall
dealing with [9, 54] at loop 1
dealing with [8, 55] at loop 2
dealing with [10, 55] at loop 3
[10, 55] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
82[9, 55][9, 56]
the points are:  [9, 55] [9, 56]
type for point in is_valid_node  <class 'list'>
[9, 55] 9 55
type for point in is_valid_node  <class 'list'>
[9, 56] 9 56
the point we are trying to find neighbors for  [9, 56]
neighboring cells are:  [[9, 57], [9, 55], [8, 56], [10, 56]]
dealing with [9, 57] at loop 0
[9, 57] is NOT a wall
dealing with [9, 55] at loop 1
[9, 55] is NOT a wall
dealing with [8, 56] at loop 2
dealing with [10, 56] at loop 3
neighbors of b [[9, 57], [9, 55]]
cost from [9, 55] to [9, 56] is 1
<class 'int'>
1 44 45
1 44 45
45 <class 'int'>
1 44 45
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
82[9, 55][10, 55]
the points are:  [9, 55] [10, 55]
type for point in is_valid_node  <class 'list'>
[9, 55] 9 55
type for point in is_valid_node  <class 'list'>
[10, 55] 10 55
the point we are trying to find neighbors for  [10, 55]
neighboring cells are:  [[10, 56], [10, 54], [9, 55], [11, 55]]
dealing with [10, 56] at loop 0
dealing with [10, 54] at loop 1
dealing with [9, 55] at loop 2
[9, 55] is NOT a wall
dealing with [11, 55] at loop 3
[11, 55] is NOT a wall
neighbors of b [[9, 55], [11, 55]]
cost from [9, 55] to [10, 55] is 1
[16, 47] (16, 47)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 47] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 47] 16 47
the point we are trying to find neighbors for  [16, 47]
neighboring cells are:  [[16, 48], [16, 46], [15, 47], [17, 47]]
dealing with [16, 48] at loop 0
dealing with [16, 46] at loop 1
dealing with [15, 47] at loop 2
[15, 47] is NOT a wall
dealing with [17, 47] at loop 3
[17, 47] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
85[16, 47][15, 47]
the points are:  [16, 47] [15, 47]
type for point in is_valid_node  <class 'list'>
[16, 47] 16 47
type for point in is_valid_node  <class 'list'>
[15, 47] 15 47
the point we are trying to find neighbors for  [15, 47]
neighboring cells are:  [[15, 48], [15, 46], [14, 47], [16, 47]]
dealing with [15, 48] at loop 0
dealing with [15, 46] at loop 1
[15, 46] is NOT a wall
dealing with [14, 47] at loop 2
dealing with [16, 47] at loop 3
[16, 47] is NOT a wall
neighbors of b [[15, 46], [16, 47]]
cost from [16, 47] to [15, 47] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
85[16, 47][17, 47]
the points are:  [16, 47] [17, 47]
type for point in is_valid_node  <class 'list'>
[16, 47] 16 47
type for point in is_valid_node  <class 'list'>
[17, 47] 17 47
the point we are trying to find neighbors for  [17, 47]
neighboring cells are:  [[17, 48], [17, 46], [16, 47], [18, 47]]
dealing with [17, 48] at loop 0
dealing with [17, 46] at loop 1
[17, 46] is NOT a wall
dealing with [16, 47] at loop 2
[16, 47] is NOT a wall
dealing with [18, 47] at loop 3
neighbors of b [[17, 46], [16, 47]]
cost from [16, 47] to [17, 47] is 1
<class 'int'>
7 35 42
7 35 42
42 <class 'int'>
7 35 42
[16, 49] (16, 49)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 49] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 49] 16 49
the point we are trying to find neighbors for  [16, 49]
neighboring cells are:  [[16, 50], [16, 48], [15, 49], [17, 49]]
dealing with [16, 50] at loop 0
dealing with [16, 48] at loop 1
dealing with [15, 49] at loop 2
[15, 49] is NOT a wall
dealing with [17, 49] at loop 3
[17, 49] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
83[16, 49][15, 49]
the points are:  [16, 49] [15, 49]
type for point in is_valid_node  <class 'list'>
[16, 49] 16 49
type for point in is_valid_node  <class 'list'>
[15, 49] 15 49
the point we are trying to find neighbors for  [15, 49]
neighboring cells are:  [[15, 50], [15, 48], [14, 49], [16, 49]]
dealing with [15, 50] at loop 0
dealing with [15, 48] at loop 1
dealing with [14, 49] at loop 2
[14, 49] is NOT a wall
dealing with [16, 49] at loop 3
[16, 49] is NOT a wall
neighbors of b [[14, 49], [16, 49]]
cost from [16, 49] to [15, 49] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
83[16, 49][17, 49]
the points are:  [16, 49] [17, 49]
type for point in is_valid_node  <class 'list'>
[16, 49] 16 49
type for point in is_valid_node  <class 'list'>
[17, 49] 17 49
the point we are trying to find neighbors for  [17, 49]
neighboring cells are:  [[17, 50], [17, 48], [16, 49], [18, 49]]
dealing with [17, 50] at loop 0
dealing with [17, 48] at loop 1
dealing with [16, 49] at loop 2
[16, 49] is NOT a wall
dealing with [18, 49] at loop 3
neighbors of b [[16, 49]]
cost from [16, 49] to [17, 49] is 1
<class 'int'>
7 37 44
7 37 44
44 <class 'int'>
7 37 44
[3, 54] (3, 54)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 54] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 54] 3 54
the point we are trying to find neighbors for  [3, 54]
neighboring cells are:  [[3, 55], [3, 53], [2, 54], [4, 54]]
dealing with [3, 55] at loop 0
[3, 55] is NOT a wall
dealing with [3, 53] at loop 1
[3, 53] is NOT a wall
dealing with [2, 54] at loop 2
dealing with [4, 54] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[3, 54][3, 55]
the points are:  [3, 54] [3, 55]
type for point in is_valid_node  <class 'list'>
[3, 54] 3 54
type for point in is_valid_node  <class 'list'>
[3, 55] 3 55
the point we are trying to find neighbors for  [3, 55]
neighboring cells are:  [[3, 56], [3, 54], [2, 55], [4, 55]]
dealing with [3, 56] at loop 0
dealing with [3, 54] at loop 1
[3, 54] is NOT a wall
dealing with [2, 55] at loop 2
[2, 55] is NOT a wall
dealing with [4, 55] at loop 3
neighbors of b [[3, 54], [2, 55]]
cost from [3, 54] to [3, 55] is 1
<class 'int'>
7 43 50
7 43 50
50 <class 'int'>
7 43 50
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
79[3, 54][3, 53]
the points are:  [3, 54] [3, 53]
type for point in is_valid_node  <class 'list'>
[3, 54] 3 54
type for point in is_valid_node  <class 'list'>
[3, 53] 3 53
the point we are trying to find neighbors for  [3, 53]
neighboring cells are:  [[3, 54], [3, 52], [2, 53], [4, 53]]
dealing with [3, 54] at loop 0
[3, 54] is NOT a wall
dealing with [3, 52] at loop 1
dealing with [2, 53] at loop 2
[2, 53] is NOT a wall
dealing with [4, 53] at loop 3
neighbors of b [[3, 54], [2, 53]]
cost from [3, 54] to [3, 53] is 1
[7, 54] (7, 54)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 54] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 54] 7 54
the point we are trying to find neighbors for  [7, 54]
neighboring cells are:  [[7, 55], [7, 53], [6, 54], [8, 54]]
dealing with [7, 55] at loop 0
[7, 55] is NOT a wall
dealing with [7, 53] at loop 1
[7, 53] is NOT a wall
dealing with [6, 54] at loop 2
dealing with [8, 54] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
83[7, 54][7, 55]
the points are:  [7, 54] [7, 55]
type for point in is_valid_node  <class 'list'>
[7, 54] 7 54
type for point in is_valid_node  <class 'list'>
[7, 55] 7 55
the point we are trying to find neighbors for  [7, 55]
neighboring cells are:  [[7, 56], [7, 54], [6, 55], [8, 55]]
dealing with [7, 56] at loop 0
dealing with [7, 54] at loop 1
[7, 54] is NOT a wall
dealing with [6, 55] at loop 2
[6, 55] is NOT a wall
dealing with [8, 55] at loop 3
neighbors of b [[7, 54], [6, 55]]
cost from [7, 54] to [7, 55] is 1
<class 'int'>
3 43 46
3 43 46
46 <class 'int'>
3 43 46
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
83[7, 54][7, 53]
the points are:  [7, 54] [7, 53]
type for point in is_valid_node  <class 'list'>
[7, 54] 7 54
type for point in is_valid_node  <class 'list'>
[7, 53] 7 53
the point we are trying to find neighbors for  [7, 53]
neighboring cells are:  [[7, 54], [7, 52], [6, 53], [8, 53]]
dealing with [7, 54] at loop 0
[7, 54] is NOT a wall
dealing with [7, 52] at loop 1
dealing with [6, 53] at loop 2
dealing with [8, 53] at loop 3
[8, 53] is NOT a wall
neighbors of b [[7, 54], [8, 53]]
cost from [7, 54] to [7, 53] is 1
[9, 56] (9, 56)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 56] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 56] 9 56
the point we are trying to find neighbors for  [9, 56]
neighboring cells are:  [[9, 57], [9, 55], [8, 56], [10, 56]]
dealing with [9, 57] at loop 0
[9, 57] is NOT a wall
dealing with [9, 55] at loop 1
[9, 55] is NOT a wall
dealing with [8, 56] at loop 2
dealing with [10, 56] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
83[9, 56][9, 57]
the points are:  [9, 56] [9, 57]
type for point in is_valid_node  <class 'list'>
[9, 56] 9 56
type for point in is_valid_node  <class 'list'>
[9, 57] 9 57
the point we are trying to find neighbors for  [9, 57]
neighboring cells are:  [[9, 58], [9, 56], [8, 57], [10, 57]]
dealing with [9, 58] at loop 0
dealing with [9, 56] at loop 1
[9, 56] is NOT a wall
dealing with [8, 57] at loop 2
[8, 57] is NOT a wall
dealing with [10, 57] at loop 3
neighbors of b [[9, 56], [8, 57]]
cost from [9, 56] to [9, 57] is 1
<class 'int'>
1 45 46
1 45 46
46 <class 'int'>
1 45 46
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
83[9, 56][9, 55]
the points are:  [9, 56] [9, 55]
type for point in is_valid_node  <class 'list'>
[9, 56] 9 56
type for point in is_valid_node  <class 'list'>
[9, 55] 9 55
the point we are trying to find neighbors for  [9, 55]
neighboring cells are:  [[9, 56], [9, 54], [8, 55], [10, 55]]
dealing with [9, 56] at loop 0
[9, 56] is NOT a wall
dealing with [9, 54] at loop 1
dealing with [8, 55] at loop 2
dealing with [10, 55] at loop 3
[10, 55] is NOT a wall
neighbors of b [[9, 56], [10, 55]]
cost from [9, 56] to [9, 55] is 1
[17, 47] (17, 47)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 47] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 47] 17 47
the point we are trying to find neighbors for  [17, 47]
neighboring cells are:  [[17, 48], [17, 46], [16, 47], [18, 47]]
dealing with [17, 48] at loop 0
dealing with [17, 46] at loop 1
[17, 46] is NOT a wall
dealing with [16, 47] at loop 2
[16, 47] is NOT a wall
dealing with [18, 47] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
86[17, 47][17, 46]
the points are:  [17, 47] [17, 46]
type for point in is_valid_node  <class 'list'>
[17, 47] 17 47
type for point in is_valid_node  <class 'list'>
[17, 46] 17 46
the point we are trying to find neighbors for  [17, 46]
neighboring cells are:  [[17, 47], [17, 45], [16, 46], [18, 46]]
dealing with [17, 47] at loop 0
[17, 47] is NOT a wall
dealing with [17, 45] at loop 1
[17, 45] is NOT a wall
dealing with [16, 46] at loop 2
dealing with [18, 46] at loop 3
neighbors of b [[17, 47], [17, 45]]
cost from [17, 47] to [17, 46] is 1
<class 'int'>
7 34 41
7 34 41
41 <class 'int'>
7 34 41
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
86[17, 47][16, 47]
the points are:  [17, 47] [16, 47]
type for point in is_valid_node  <class 'list'>
[17, 47] 17 47
type for point in is_valid_node  <class 'list'>
[16, 47] 16 47
the point we are trying to find neighbors for  [16, 47]
neighboring cells are:  [[16, 48], [16, 46], [15, 47], [17, 47]]
dealing with [16, 48] at loop 0
dealing with [16, 46] at loop 1
dealing with [15, 47] at loop 2
[15, 47] is NOT a wall
dealing with [17, 47] at loop 3
[17, 47] is NOT a wall
neighbors of b [[15, 47], [17, 47]]
cost from [17, 47] to [16, 47] is 1
[17, 46] (17, 46)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 46] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 46] 17 46
the point we are trying to find neighbors for  [17, 46]
neighboring cells are:  [[17, 47], [17, 45], [16, 46], [18, 46]]
dealing with [17, 47] at loop 0
[17, 47] is NOT a wall
dealing with [17, 45] at loop 1
[17, 45] is NOT a wall
dealing with [16, 46] at loop 2
dealing with [18, 46] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
87[17, 46][17, 47]
the points are:  [17, 46] [17, 47]
type for point in is_valid_node  <class 'list'>
[17, 46] 17 46
type for point in is_valid_node  <class 'list'>
[17, 47] 17 47
the point we are trying to find neighbors for  [17, 47]
neighboring cells are:  [[17, 48], [17, 46], [16, 47], [18, 47]]
dealing with [17, 48] at loop 0
dealing with [17, 46] at loop 1
[17, 46] is NOT a wall
dealing with [16, 47] at loop 2
[16, 47] is NOT a wall
dealing with [18, 47] at loop 3
neighbors of b [[17, 46], [16, 47]]
cost from [17, 46] to [17, 47] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
87[17, 46][17, 45]
the points are:  [17, 46] [17, 45]
type for point in is_valid_node  <class 'list'>
[17, 46] 17 46
type for point in is_valid_node  <class 'list'>
[17, 45] 17 45
the point we are trying to find neighbors for  [17, 45]
neighboring cells are:  [[17, 46], [17, 44], [16, 45], [18, 45]]
dealing with [17, 46] at loop 0
[17, 46] is NOT a wall
dealing with [17, 44] at loop 1
dealing with [16, 45] at loop 2
dealing with [18, 45] at loop 3
[18, 45] is NOT a wall
neighbors of b [[17, 46], [18, 45]]
cost from [17, 46] to [17, 45] is 1
<class 'int'>
7 33 40
7 33 40
40 <class 'int'>
7 33 40
[17, 45] (17, 45)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 45] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 45] 17 45
the point we are trying to find neighbors for  [17, 45]
neighboring cells are:  [[17, 46], [17, 44], [16, 45], [18, 45]]
dealing with [17, 46] at loop 0
[17, 46] is NOT a wall
dealing with [17, 44] at loop 1
dealing with [16, 45] at loop 2
dealing with [18, 45] at loop 3
[18, 45] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
88[17, 45][17, 46]
the points are:  [17, 45] [17, 46]
type for point in is_valid_node  <class 'list'>
[17, 45] 17 45
type for point in is_valid_node  <class 'list'>
[17, 46] 17 46
the point we are trying to find neighbors for  [17, 46]
neighboring cells are:  [[17, 47], [17, 45], [16, 46], [18, 46]]
dealing with [17, 47] at loop 0
[17, 47] is NOT a wall
dealing with [17, 45] at loop 1
[17, 45] is NOT a wall
dealing with [16, 46] at loop 2
dealing with [18, 46] at loop 3
neighbors of b [[17, 47], [17, 45]]
cost from [17, 45] to [17, 46] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
88[17, 45][18, 45]
the points are:  [17, 45] [18, 45]
type for point in is_valid_node  <class 'list'>
[17, 45] 17 45
type for point in is_valid_node  <class 'list'>
[18, 45] 18 45
the point we are trying to find neighbors for  [18, 45]
neighboring cells are:  [[18, 46], [18, 44], [17, 45], [19, 45]]
dealing with [18, 46] at loop 0
dealing with [18, 44] at loop 1
dealing with [17, 45] at loop 2
[17, 45] is NOT a wall
dealing with [19, 45] at loop 3
[19, 45] is NOT a wall
neighbors of b [[17, 45], [19, 45]]
cost from [17, 45] to [18, 45] is 1
<class 'int'>
8 33 41
8 33 41
41 <class 'int'>
8 33 41
[17, 49] (17, 49)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 49] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 49] 17 49
the point we are trying to find neighbors for  [17, 49]
neighboring cells are:  [[17, 50], [17, 48], [16, 49], [18, 49]]
dealing with [17, 50] at loop 0
dealing with [17, 48] at loop 1
dealing with [16, 49] at loop 2
[16, 49] is NOT a wall
dealing with [18, 49] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
84[17, 49][16, 49]
the points are:  [17, 49] [16, 49]
type for point in is_valid_node  <class 'list'>
[17, 49] 17 49
type for point in is_valid_node  <class 'list'>
[16, 49] 16 49
the point we are trying to find neighbors for  [16, 49]
neighboring cells are:  [[16, 50], [16, 48], [15, 49], [17, 49]]
dealing with [16, 50] at loop 0
dealing with [16, 48] at loop 1
dealing with [15, 49] at loop 2
[15, 49] is NOT a wall
dealing with [17, 49] at loop 3
[17, 49] is NOT a wall
neighbors of b [[15, 49], [17, 49]]
cost from [17, 49] to [16, 49] is 1
[3, 55] (3, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 55] 3 55
the point we are trying to find neighbors for  [3, 55]
neighboring cells are:  [[3, 56], [3, 54], [2, 55], [4, 55]]
dealing with [3, 56] at loop 0
dealing with [3, 54] at loop 1
[3, 54] is NOT a wall
dealing with [2, 55] at loop 2
[2, 55] is NOT a wall
dealing with [4, 55] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[3, 55][3, 54]
the points are:  [3, 55] [3, 54]
type for point in is_valid_node  <class 'list'>
[3, 55] 3 55
type for point in is_valid_node  <class 'list'>
[3, 54] 3 54
the point we are trying to find neighbors for  [3, 54]
neighboring cells are:  [[3, 55], [3, 53], [2, 54], [4, 54]]
dealing with [3, 55] at loop 0
[3, 55] is NOT a wall
dealing with [3, 53] at loop 1
[3, 53] is NOT a wall
dealing with [2, 54] at loop 2
dealing with [4, 54] at loop 3
neighbors of b [[3, 55], [3, 53]]
cost from [3, 55] to [3, 54] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
80[3, 55][2, 55]
the points are:  [3, 55] [2, 55]
type for point in is_valid_node  <class 'list'>
[3, 55] 3 55
type for point in is_valid_node  <class 'list'>
[2, 55] 2 55
the point we are trying to find neighbors for  [2, 55]
neighboring cells are:  [[2, 56], [2, 54], [1, 55], [3, 55]]
dealing with [2, 56] at loop 0
dealing with [2, 54] at loop 1
dealing with [1, 55] at loop 2
[1, 55] is NOT a wall
dealing with [3, 55] at loop 3
[3, 55] is NOT a wall
neighbors of b [[1, 55], [3, 55]]
cost from [3, 55] to [2, 55] is 1
<class 'int'>
8 43 51
8 43 51
51 <class 'int'>
8 43 51
[7, 55] (7, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 55] 7 55
the point we are trying to find neighbors for  [7, 55]
neighboring cells are:  [[7, 56], [7, 54], [6, 55], [8, 55]]
dealing with [7, 56] at loop 0
dealing with [7, 54] at loop 1
[7, 54] is NOT a wall
dealing with [6, 55] at loop 2
[6, 55] is NOT a wall
dealing with [8, 55] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
84[7, 55][7, 54]
the points are:  [7, 55] [7, 54]
type for point in is_valid_node  <class 'list'>
[7, 55] 7 55
type for point in is_valid_node  <class 'list'>
[7, 54] 7 54
the point we are trying to find neighbors for  [7, 54]
neighboring cells are:  [[7, 55], [7, 53], [6, 54], [8, 54]]
dealing with [7, 55] at loop 0
[7, 55] is NOT a wall
dealing with [7, 53] at loop 1
[7, 53] is NOT a wall
dealing with [6, 54] at loop 2
dealing with [8, 54] at loop 3
neighbors of b [[7, 55], [7, 53]]
cost from [7, 55] to [7, 54] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
84[7, 55][6, 55]
the points are:  [7, 55] [6, 55]
type for point in is_valid_node  <class 'list'>
[7, 55] 7 55
type for point in is_valid_node  <class 'list'>
[6, 55] 6 55
the point we are trying to find neighbors for  [6, 55]
neighboring cells are:  [[6, 56], [6, 54], [5, 55], [7, 55]]
dealing with [6, 56] at loop 0
dealing with [6, 54] at loop 1
dealing with [5, 55] at loop 2
[5, 55] is NOT a wall
dealing with [7, 55] at loop 3
[7, 55] is NOT a wall
neighbors of b [[5, 55], [7, 55]]
cost from [7, 55] to [6, 55] is 1
<class 'int'>
4 43 47
4 43 47
47 <class 'int'>
4 43 47
[9, 57] (9, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 57] 9 57
the point we are trying to find neighbors for  [9, 57]
neighboring cells are:  [[9, 58], [9, 56], [8, 57], [10, 57]]
dealing with [9, 58] at loop 0
dealing with [9, 56] at loop 1
[9, 56] is NOT a wall
dealing with [8, 57] at loop 2
[8, 57] is NOT a wall
dealing with [10, 57] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
84[9, 57][9, 56]
the points are:  [9, 57] [9, 56]
type for point in is_valid_node  <class 'list'>
[9, 57] 9 57
type for point in is_valid_node  <class 'list'>
[9, 56] 9 56
the point we are trying to find neighbors for  [9, 56]
neighboring cells are:  [[9, 57], [9, 55], [8, 56], [10, 56]]
dealing with [9, 57] at loop 0
[9, 57] is NOT a wall
dealing with [9, 55] at loop 1
[9, 55] is NOT a wall
dealing with [8, 56] at loop 2
dealing with [10, 56] at loop 3
neighbors of b [[9, 57], [9, 55]]
cost from [9, 57] to [9, 56] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
84[9, 57][8, 57]
the points are:  [9, 57] [8, 57]
type for point in is_valid_node  <class 'list'>
[9, 57] 9 57
type for point in is_valid_node  <class 'list'>
[8, 57] 8 57
the point we are trying to find neighbors for  [8, 57]
neighboring cells are:  [[8, 58], [8, 56], [7, 57], [9, 57]]
dealing with [8, 58] at loop 0
dealing with [8, 56] at loop 1
dealing with [7, 57] at loop 2
[7, 57] is NOT a wall
dealing with [9, 57] at loop 3
[9, 57] is NOT a wall
neighbors of b [[7, 57], [9, 57]]
cost from [9, 57] to [8, 57] is 1
<class 'int'>
2 45 47
2 45 47
47 <class 'int'>
2 45 47
[18, 45] (18, 45)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 45] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 45] 18 45
the point we are trying to find neighbors for  [18, 45]
neighboring cells are:  [[18, 46], [18, 44], [17, 45], [19, 45]]
dealing with [18, 46] at loop 0
dealing with [18, 44] at loop 1
dealing with [17, 45] at loop 2
[17, 45] is NOT a wall
dealing with [19, 45] at loop 3
[19, 45] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
89[18, 45][17, 45]
the points are:  [18, 45] [17, 45]
type for point in is_valid_node  <class 'list'>
[18, 45] 18 45
type for point in is_valid_node  <class 'list'>
[17, 45] 17 45
the point we are trying to find neighbors for  [17, 45]
neighboring cells are:  [[17, 46], [17, 44], [16, 45], [18, 45]]
dealing with [17, 46] at loop 0
[17, 46] is NOT a wall
dealing with [17, 44] at loop 1
dealing with [16, 45] at loop 2
dealing with [18, 45] at loop 3
[18, 45] is NOT a wall
neighbors of b [[17, 46], [18, 45]]
cost from [18, 45] to [17, 45] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
89[18, 45][19, 45]
the points are:  [18, 45] [19, 45]
type for point in is_valid_node  <class 'list'>
[18, 45] 18 45
type for point in is_valid_node  <class 'list'>
[19, 45] 19 45
the point we are trying to find neighbors for  [19, 45]
neighboring cells are:  [[19, 46], [19, 44], [18, 45], [20, 45]]
dealing with [19, 46] at loop 0
dealing with [19, 44] at loop 1
dealing with [18, 45] at loop 2
[18, 45] is NOT a wall
dealing with [20, 45] at loop 3
[20, 45] is NOT a wall
neighbors of b [[18, 45], [20, 45]]
cost from [18, 45] to [19, 45] is 1
<class 'int'>
9 33 42
9 33 42
42 <class 'int'>
9 33 42
[2, 55] (2, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 55] 2 55
the point we are trying to find neighbors for  [2, 55]
neighboring cells are:  [[2, 56], [2, 54], [1, 55], [3, 55]]
dealing with [2, 56] at loop 0
dealing with [2, 54] at loop 1
dealing with [1, 55] at loop 2
[1, 55] is NOT a wall
dealing with [3, 55] at loop 3
[3, 55] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
81[2, 55][1, 55]
the points are:  [2, 55] [1, 55]
type for point in is_valid_node  <class 'list'>
[2, 55] 2 55
type for point in is_valid_node  <class 'list'>
[1, 55] 1 55
the point we are trying to find neighbors for  [1, 55]
neighboring cells are:  [[1, 56], [1, 54], [0, 55], [2, 55]]
dealing with [1, 56] at loop 0
[1, 56] is NOT a wall
dealing with [1, 54] at loop 1
dealing with [0, 55] at loop 2
dealing with [2, 55] at loop 3
[2, 55] is NOT a wall
neighbors of b [[1, 56], [2, 55]]
cost from [2, 55] to [1, 55] is 1
<class 'int'>
9 43 52
9 43 52
52 <class 'int'>
9 43 52
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
81[2, 55][3, 55]
the points are:  [2, 55] [3, 55]
type for point in is_valid_node  <class 'list'>
[2, 55] 2 55
type for point in is_valid_node  <class 'list'>
[3, 55] 3 55
the point we are trying to find neighbors for  [3, 55]
neighboring cells are:  [[3, 56], [3, 54], [2, 55], [4, 55]]
dealing with [3, 56] at loop 0
dealing with [3, 54] at loop 1
[3, 54] is NOT a wall
dealing with [2, 55] at loop 2
[2, 55] is NOT a wall
dealing with [4, 55] at loop 3
neighbors of b [[3, 54], [2, 55]]
cost from [2, 55] to [3, 55] is 1
[6, 55] (6, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 55] 6 55
the point we are trying to find neighbors for  [6, 55]
neighboring cells are:  [[6, 56], [6, 54], [5, 55], [7, 55]]
dealing with [6, 56] at loop 0
dealing with [6, 54] at loop 1
dealing with [5, 55] at loop 2
[5, 55] is NOT a wall
dealing with [7, 55] at loop 3
[7, 55] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
85[6, 55][5, 55]
the points are:  [6, 55] [5, 55]
type for point in is_valid_node  <class 'list'>
[6, 55] 6 55
type for point in is_valid_node  <class 'list'>
[5, 55] 5 55
the point we are trying to find neighbors for  [5, 55]
neighboring cells are:  [[5, 56], [5, 54], [4, 55], [6, 55]]
dealing with [5, 56] at loop 0
[5, 56] is NOT a wall
dealing with [5, 54] at loop 1
dealing with [4, 55] at loop 2
dealing with [6, 55] at loop 3
[6, 55] is NOT a wall
neighbors of b [[5, 56], [6, 55]]
cost from [6, 55] to [5, 55] is 1
<class 'int'>
5 43 48
5 43 48
48 <class 'int'>
5 43 48
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
85[6, 55][7, 55]
the points are:  [6, 55] [7, 55]
type for point in is_valid_node  <class 'list'>
[6, 55] 6 55
type for point in is_valid_node  <class 'list'>
[7, 55] 7 55
the point we are trying to find neighbors for  [7, 55]
neighboring cells are:  [[7, 56], [7, 54], [6, 55], [8, 55]]
dealing with [7, 56] at loop 0
dealing with [7, 54] at loop 1
[7, 54] is NOT a wall
dealing with [6, 55] at loop 2
[6, 55] is NOT a wall
dealing with [8, 55] at loop 3
neighbors of b [[7, 54], [6, 55]]
cost from [6, 55] to [7, 55] is 1
[8, 57] (8, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[8, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[8, 57] 8 57
the point we are trying to find neighbors for  [8, 57]
neighboring cells are:  [[8, 58], [8, 56], [7, 57], [9, 57]]
dealing with [8, 58] at loop 0
dealing with [8, 56] at loop 1
dealing with [7, 57] at loop 2
[7, 57] is NOT a wall
dealing with [9, 57] at loop 3
[9, 57] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
85[8, 57][7, 57]
the points are:  [8, 57] [7, 57]
type for point in is_valid_node  <class 'list'>
[8, 57] 8 57
type for point in is_valid_node  <class 'list'>
[7, 57] 7 57
the point we are trying to find neighbors for  [7, 57]
neighboring cells are:  [[7, 58], [7, 56], [6, 57], [8, 57]]
dealing with [7, 58] at loop 0
dealing with [7, 56] at loop 1
dealing with [6, 57] at loop 2
dealing with [8, 57] at loop 3
[8, 57] is NOT a wall
neighbors of b [[8, 57]]
cost from [8, 57] to [7, 57] is 1
<class 'int'>
3 45 48
3 45 48
48 <class 'int'>
3 45 48
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
85[8, 57][9, 57]
the points are:  [8, 57] [9, 57]
type for point in is_valid_node  <class 'list'>
[8, 57] 8 57
type for point in is_valid_node  <class 'list'>
[9, 57] 9 57
the point we are trying to find neighbors for  [9, 57]
neighboring cells are:  [[9, 58], [9, 56], [8, 57], [10, 57]]
dealing with [9, 58] at loop 0
dealing with [9, 56] at loop 1
[9, 56] is NOT a wall
dealing with [8, 57] at loop 2
[8, 57] is NOT a wall
dealing with [10, 57] at loop 3
neighbors of b [[9, 56], [8, 57]]
cost from [8, 57] to [9, 57] is 1
[19, 45] (19, 45)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 45] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 45] 19 45
the point we are trying to find neighbors for  [19, 45]
neighboring cells are:  [[19, 46], [19, 44], [18, 45], [20, 45]]
dealing with [19, 46] at loop 0
dealing with [19, 44] at loop 1
dealing with [18, 45] at loop 2
[18, 45] is NOT a wall
dealing with [20, 45] at loop 3
[20, 45] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
90[19, 45][18, 45]
the points are:  [19, 45] [18, 45]
type for point in is_valid_node  <class 'list'>
[19, 45] 19 45
type for point in is_valid_node  <class 'list'>
[18, 45] 18 45
the point we are trying to find neighbors for  [18, 45]
neighboring cells are:  [[18, 46], [18, 44], [17, 45], [19, 45]]
dealing with [18, 46] at loop 0
dealing with [18, 44] at loop 1
dealing with [17, 45] at loop 2
[17, 45] is NOT a wall
dealing with [19, 45] at loop 3
[19, 45] is NOT a wall
neighbors of b [[17, 45], [19, 45]]
cost from [19, 45] to [18, 45] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
90[19, 45][20, 45]
the points are:  [19, 45] [20, 45]
type for point in is_valid_node  <class 'list'>
[19, 45] 19 45
type for point in is_valid_node  <class 'list'>
[20, 45] 20 45
the point we are trying to find neighbors for  [20, 45]
neighboring cells are:  [[20, 46], [20, 44], [19, 45], [21, 45]]
dealing with [20, 46] at loop 0
dealing with [20, 44] at loop 1
dealing with [19, 45] at loop 2
[19, 45] is NOT a wall
dealing with [21, 45] at loop 3
[21, 45] is NOT a wall
neighbors of b [[19, 45], [21, 45]]
cost from [19, 45] to [20, 45] is 1
<class 'int'>
10 33 43
10 33 43
43 <class 'int'>
10 33 43
[1, 55] (1, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 55] 1 55
the point we are trying to find neighbors for  [1, 55]
neighboring cells are:  [[1, 56], [1, 54], [0, 55], [2, 55]]
dealing with [1, 56] at loop 0
[1, 56] is NOT a wall
dealing with [1, 54] at loop 1
dealing with [0, 55] at loop 2
dealing with [2, 55] at loop 3
[2, 55] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
82[1, 55][1, 56]
the points are:  [1, 55] [1, 56]
type for point in is_valid_node  <class 'list'>
[1, 55] 1 55
type for point in is_valid_node  <class 'list'>
[1, 56] 1 56
the point we are trying to find neighbors for  [1, 56]
neighboring cells are:  [[1, 57], [1, 55], [0, 56], [2, 56]]
dealing with [1, 57] at loop 0
[1, 57] is NOT a wall
dealing with [1, 55] at loop 1
[1, 55] is NOT a wall
dealing with [0, 56] at loop 2
dealing with [2, 56] at loop 3
neighbors of b [[1, 57], [1, 55]]
cost from [1, 55] to [1, 56] is 1
<class 'int'>
9 44 53
9 44 53
53 <class 'int'>
9 44 53
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
82[1, 55][2, 55]
the points are:  [1, 55] [2, 55]
type for point in is_valid_node  <class 'list'>
[1, 55] 1 55
type for point in is_valid_node  <class 'list'>
[2, 55] 2 55
the point we are trying to find neighbors for  [2, 55]
neighboring cells are:  [[2, 56], [2, 54], [1, 55], [3, 55]]
dealing with [2, 56] at loop 0
dealing with [2, 54] at loop 1
dealing with [1, 55] at loop 2
[1, 55] is NOT a wall
dealing with [3, 55] at loop 3
[3, 55] is NOT a wall
neighbors of b [[1, 55], [3, 55]]
cost from [1, 55] to [2, 55] is 1
[5, 55] (5, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 55] 5 55
the point we are trying to find neighbors for  [5, 55]
neighboring cells are:  [[5, 56], [5, 54], [4, 55], [6, 55]]
dealing with [5, 56] at loop 0
[5, 56] is NOT a wall
dealing with [5, 54] at loop 1
dealing with [4, 55] at loop 2
dealing with [6, 55] at loop 3
[6, 55] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
86[5, 55][5, 56]
the points are:  [5, 55] [5, 56]
type for point in is_valid_node  <class 'list'>
[5, 55] 5 55
type for point in is_valid_node  <class 'list'>
[5, 56] 5 56
the point we are trying to find neighbors for  [5, 56]
neighboring cells are:  [[5, 57], [5, 55], [4, 56], [6, 56]]
dealing with [5, 57] at loop 0
[5, 57] is NOT a wall
dealing with [5, 55] at loop 1
[5, 55] is NOT a wall
dealing with [4, 56] at loop 2
dealing with [6, 56] at loop 3
neighbors of b [[5, 57], [5, 55]]
cost from [5, 55] to [5, 56] is 1
<class 'int'>
5 44 49
5 44 49
49 <class 'int'>
5 44 49
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
86[5, 55][6, 55]
the points are:  [5, 55] [6, 55]
type for point in is_valid_node  <class 'list'>
[5, 55] 5 55
type for point in is_valid_node  <class 'list'>
[6, 55] 6 55
the point we are trying to find neighbors for  [6, 55]
neighboring cells are:  [[6, 56], [6, 54], [5, 55], [7, 55]]
dealing with [6, 56] at loop 0
dealing with [6, 54] at loop 1
dealing with [5, 55] at loop 2
[5, 55] is NOT a wall
dealing with [7, 55] at loop 3
[7, 55] is NOT a wall
neighbors of b [[5, 55], [7, 55]]
cost from [5, 55] to [6, 55] is 1
[7, 57] (7, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 57] 7 57
the point we are trying to find neighbors for  [7, 57]
neighboring cells are:  [[7, 58], [7, 56], [6, 57], [8, 57]]
dealing with [7, 58] at loop 0
dealing with [7, 56] at loop 1
dealing with [6, 57] at loop 2
dealing with [8, 57] at loop 3
[8, 57] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
86[7, 57][8, 57]
the points are:  [7, 57] [8, 57]
type for point in is_valid_node  <class 'list'>
[7, 57] 7 57
type for point in is_valid_node  <class 'list'>
[8, 57] 8 57
the point we are trying to find neighbors for  [8, 57]
neighboring cells are:  [[8, 58], [8, 56], [7, 57], [9, 57]]
dealing with [8, 58] at loop 0
dealing with [8, 56] at loop 1
dealing with [7, 57] at loop 2
[7, 57] is NOT a wall
dealing with [9, 57] at loop 3
[9, 57] is NOT a wall
neighbors of b [[7, 57], [9, 57]]
cost from [7, 57] to [8, 57] is 1
[20, 45] (20, 45)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[20, 45] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[20, 45] 20 45
the point we are trying to find neighbors for  [20, 45]
neighboring cells are:  [[20, 46], [20, 44], [19, 45], [21, 45]]
dealing with [20, 46] at loop 0
dealing with [20, 44] at loop 1
dealing with [19, 45] at loop 2
[19, 45] is NOT a wall
dealing with [21, 45] at loop 3
[21, 45] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
91[20, 45][19, 45]
the points are:  [20, 45] [19, 45]
type for point in is_valid_node  <class 'list'>
[20, 45] 20 45
type for point in is_valid_node  <class 'list'>
[19, 45] 19 45
the point we are trying to find neighbors for  [19, 45]
neighboring cells are:  [[19, 46], [19, 44], [18, 45], [20, 45]]
dealing with [19, 46] at loop 0
dealing with [19, 44] at loop 1
dealing with [18, 45] at loop 2
[18, 45] is NOT a wall
dealing with [20, 45] at loop 3
[20, 45] is NOT a wall
neighbors of b [[18, 45], [20, 45]]
cost from [20, 45] to [19, 45] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
91[20, 45][21, 45]
the points are:  [20, 45] [21, 45]
type for point in is_valid_node  <class 'list'>
[20, 45] 20 45
type for point in is_valid_node  <class 'list'>
[21, 45] 21 45
the point we are trying to find neighbors for  [21, 45]
neighboring cells are:  [[21, 46], [21, 44], [20, 45], [22, 45]]
dealing with [21, 46] at loop 0
[21, 46] is NOT a wall
dealing with [21, 44] at loop 1
dealing with [20, 45] at loop 2
[20, 45] is NOT a wall
dealing with [22, 45] at loop 3
neighbors of b [[21, 46], [20, 45]]
cost from [20, 45] to [21, 45] is 1
<class 'int'>
11 33 44
11 33 44
44 <class 'int'>
11 33 44
[1, 56] (1, 56)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 56] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 56] 1 56
the point we are trying to find neighbors for  [1, 56]
neighboring cells are:  [[1, 57], [1, 55], [0, 56], [2, 56]]
dealing with [1, 57] at loop 0
[1, 57] is NOT a wall
dealing with [1, 55] at loop 1
[1, 55] is NOT a wall
dealing with [0, 56] at loop 2
dealing with [2, 56] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
83[1, 56][1, 57]
the points are:  [1, 56] [1, 57]
type for point in is_valid_node  <class 'list'>
[1, 56] 1 56
type for point in is_valid_node  <class 'list'>
[1, 57] 1 57
the point we are trying to find neighbors for  [1, 57]
neighboring cells are:  [[1, 58], [1, 56], [0, 57], [2, 57]]
dealing with [1, 58] at loop 0
[1, 58] is NOT a wall
dealing with [1, 56] at loop 1
[1, 56] is NOT a wall
dealing with [0, 57] at loop 2
dealing with [2, 57] at loop 3
[2, 57] is NOT a wall
neighbors of b [[1, 58], [1, 56], [2, 57]]
cost from [1, 56] to [1, 57] is 1
<class 'int'>
9 45 54
9 45 54
54 <class 'int'>
9 45 54
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
83[1, 56][1, 55]
the points are:  [1, 56] [1, 55]
type for point in is_valid_node  <class 'list'>
[1, 56] 1 56
type for point in is_valid_node  <class 'list'>
[1, 55] 1 55
the point we are trying to find neighbors for  [1, 55]
neighboring cells are:  [[1, 56], [1, 54], [0, 55], [2, 55]]
dealing with [1, 56] at loop 0
[1, 56] is NOT a wall
dealing with [1, 54] at loop 1
dealing with [0, 55] at loop 2
dealing with [2, 55] at loop 3
[2, 55] is NOT a wall
neighbors of b [[1, 56], [2, 55]]
cost from [1, 56] to [1, 55] is 1
[5, 56] (5, 56)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 56] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 56] 5 56
the point we are trying to find neighbors for  [5, 56]
neighboring cells are:  [[5, 57], [5, 55], [4, 56], [6, 56]]
dealing with [5, 57] at loop 0
[5, 57] is NOT a wall
dealing with [5, 55] at loop 1
[5, 55] is NOT a wall
dealing with [4, 56] at loop 2
dealing with [6, 56] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
87[5, 56][5, 57]
the points are:  [5, 56] [5, 57]
type for point in is_valid_node  <class 'list'>
[5, 56] 5 56
type for point in is_valid_node  <class 'list'>
[5, 57] 5 57
the point we are trying to find neighbors for  [5, 57]
neighboring cells are:  [[5, 58], [5, 56], [4, 57], [6, 57]]
dealing with [5, 58] at loop 0
dealing with [5, 56] at loop 1
[5, 56] is NOT a wall
dealing with [4, 57] at loop 2
[4, 57] is NOT a wall
dealing with [6, 57] at loop 3
neighbors of b [[5, 56], [4, 57]]
cost from [5, 56] to [5, 57] is 1
<class 'int'>
5 45 50
5 45 50
50 <class 'int'>
5 45 50
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
87[5, 56][5, 55]
the points are:  [5, 56] [5, 55]
type for point in is_valid_node  <class 'list'>
[5, 56] 5 56
type for point in is_valid_node  <class 'list'>
[5, 55] 5 55
the point we are trying to find neighbors for  [5, 55]
neighboring cells are:  [[5, 56], [5, 54], [4, 55], [6, 55]]
dealing with [5, 56] at loop 0
[5, 56] is NOT a wall
dealing with [5, 54] at loop 1
dealing with [4, 55] at loop 2
dealing with [6, 55] at loop 3
[6, 55] is NOT a wall
neighbors of b [[5, 56], [6, 55]]
cost from [5, 56] to [5, 55] is 1
[21, 45] (21, 45)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 45] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 45] 21 45
the point we are trying to find neighbors for  [21, 45]
neighboring cells are:  [[21, 46], [21, 44], [20, 45], [22, 45]]
dealing with [21, 46] at loop 0
[21, 46] is NOT a wall
dealing with [21, 44] at loop 1
dealing with [20, 45] at loop 2
[20, 45] is NOT a wall
dealing with [22, 45] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
92[21, 45][21, 46]
the points are:  [21, 45] [21, 46]
type for point in is_valid_node  <class 'list'>
[21, 45] 21 45
type for point in is_valid_node  <class 'list'>
[21, 46] 21 46
the point we are trying to find neighbors for  [21, 46]
neighboring cells are:  [[21, 47], [21, 45], [20, 46], [22, 46]]
dealing with [21, 47] at loop 0
[21, 47] is NOT a wall
dealing with [21, 45] at loop 1
[21, 45] is NOT a wall
dealing with [20, 46] at loop 2
dealing with [22, 46] at loop 3
neighbors of b [[21, 47], [21, 45]]
cost from [21, 45] to [21, 46] is 1
<class 'int'>
11 34 45
11 34 45
45 <class 'int'>
11 34 45
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
92[21, 45][20, 45]
the points are:  [21, 45] [20, 45]
type for point in is_valid_node  <class 'list'>
[21, 45] 21 45
type for point in is_valid_node  <class 'list'>
[20, 45] 20 45
the point we are trying to find neighbors for  [20, 45]
neighboring cells are:  [[20, 46], [20, 44], [19, 45], [21, 45]]
dealing with [20, 46] at loop 0
dealing with [20, 44] at loop 1
dealing with [19, 45] at loop 2
[19, 45] is NOT a wall
dealing with [21, 45] at loop 3
[21, 45] is NOT a wall
neighbors of b [[19, 45], [21, 45]]
cost from [21, 45] to [20, 45] is 1
[1, 57] (1, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 57] 1 57
the point we are trying to find neighbors for  [1, 57]
neighboring cells are:  [[1, 58], [1, 56], [0, 57], [2, 57]]
dealing with [1, 58] at loop 0
[1, 58] is NOT a wall
dealing with [1, 56] at loop 1
[1, 56] is NOT a wall
dealing with [0, 57] at loop 2
dealing with [2, 57] at loop 3
[2, 57] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
84[1, 57][1, 58]
the points are:  [1, 57] [1, 58]
type for point in is_valid_node  <class 'list'>
[1, 57] 1 57
type for point in is_valid_node  <class 'list'>
[1, 58] 1 58
the point we are trying to find neighbors for  [1, 58]
neighboring cells are:  [[1, 59], [1, 57], [0, 58], [2, 58]]
dealing with [1, 59] at loop 0
[1, 59] is NOT a wall
dealing with [1, 57] at loop 1
[1, 57] is NOT a wall
dealing with [0, 58] at loop 2
dealing with [2, 58] at loop 3
neighbors of b [[1, 59], [1, 57]]
cost from [1, 57] to [1, 58] is 1
<class 'int'>
9 46 55
9 46 55
55 <class 'int'>
9 46 55
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
84[1, 57][1, 56]
the points are:  [1, 57] [1, 56]
type for point in is_valid_node  <class 'list'>
[1, 57] 1 57
type for point in is_valid_node  <class 'list'>
[1, 56] 1 56
the point we are trying to find neighbors for  [1, 56]
neighboring cells are:  [[1, 57], [1, 55], [0, 56], [2, 56]]
dealing with [1, 57] at loop 0
[1, 57] is NOT a wall
dealing with [1, 55] at loop 1
[1, 55] is NOT a wall
dealing with [0, 56] at loop 2
dealing with [2, 56] at loop 3
neighbors of b [[1, 57], [1, 55]]
cost from [1, 57] to [1, 56] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
84[1, 57][2, 57]
the points are:  [1, 57] [2, 57]
type for point in is_valid_node  <class 'list'>
[1, 57] 1 57
type for point in is_valid_node  <class 'list'>
[2, 57] 2 57
the point we are trying to find neighbors for  [2, 57]
neighboring cells are:  [[2, 58], [2, 56], [1, 57], [3, 57]]
dealing with [2, 58] at loop 0
dealing with [2, 56] at loop 1
dealing with [1, 57] at loop 2
[1, 57] is NOT a wall
dealing with [3, 57] at loop 3
[3, 57] is NOT a wall
neighbors of b [[1, 57], [3, 57]]
cost from [1, 57] to [2, 57] is 1
<class 'int'>
8 45 53
8 45 53
53 <class 'int'>
8 45 53
[2, 57] (2, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 57] 2 57
the point we are trying to find neighbors for  [2, 57]
neighboring cells are:  [[2, 58], [2, 56], [1, 57], [3, 57]]
dealing with [2, 58] at loop 0
dealing with [2, 56] at loop 1
dealing with [1, 57] at loop 2
[1, 57] is NOT a wall
dealing with [3, 57] at loop 3
[3, 57] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
85[2, 57][1, 57]
the points are:  [2, 57] [1, 57]
type for point in is_valid_node  <class 'list'>
[2, 57] 2 57
type for point in is_valid_node  <class 'list'>
[1, 57] 1 57
the point we are trying to find neighbors for  [1, 57]
neighboring cells are:  [[1, 58], [1, 56], [0, 57], [2, 57]]
dealing with [1, 58] at loop 0
[1, 58] is NOT a wall
dealing with [1, 56] at loop 1
[1, 56] is NOT a wall
dealing with [0, 57] at loop 2
dealing with [2, 57] at loop 3
[2, 57] is NOT a wall
neighbors of b [[1, 58], [1, 56], [2, 57]]
cost from [2, 57] to [1, 57] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
85[2, 57][3, 57]
the points are:  [2, 57] [3, 57]
type for point in is_valid_node  <class 'list'>
[2, 57] 2 57
type for point in is_valid_node  <class 'list'>
[3, 57] 3 57
the point we are trying to find neighbors for  [3, 57]
neighboring cells are:  [[3, 58], [3, 56], [2, 57], [4, 57]]
dealing with [3, 58] at loop 0
dealing with [3, 56] at loop 1
dealing with [2, 57] at loop 2
[2, 57] is NOT a wall
dealing with [4, 57] at loop 3
[4, 57] is NOT a wall
neighbors of b [[2, 57], [4, 57]]
cost from [2, 57] to [3, 57] is 1
<class 'int'>
7 45 52
7 45 52
52 <class 'int'>
7 45 52
[3, 57] (3, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 57] 3 57
the point we are trying to find neighbors for  [3, 57]
neighboring cells are:  [[3, 58], [3, 56], [2, 57], [4, 57]]
dealing with [3, 58] at loop 0
dealing with [3, 56] at loop 1
dealing with [2, 57] at loop 2
[2, 57] is NOT a wall
dealing with [4, 57] at loop 3
[4, 57] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
86[3, 57][2, 57]
the points are:  [3, 57] [2, 57]
type for point in is_valid_node  <class 'list'>
[3, 57] 3 57
type for point in is_valid_node  <class 'list'>
[2, 57] 2 57
the point we are trying to find neighbors for  [2, 57]
neighboring cells are:  [[2, 58], [2, 56], [1, 57], [3, 57]]
dealing with [2, 58] at loop 0
dealing with [2, 56] at loop 1
dealing with [1, 57] at loop 2
[1, 57] is NOT a wall
dealing with [3, 57] at loop 3
[3, 57] is NOT a wall
neighbors of b [[1, 57], [3, 57]]
cost from [3, 57] to [2, 57] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
86[3, 57][4, 57]
the points are:  [3, 57] [4, 57]
type for point in is_valid_node  <class 'list'>
[3, 57] 3 57
type for point in is_valid_node  <class 'list'>
[4, 57] 4 57
the point we are trying to find neighbors for  [4, 57]
neighboring cells are:  [[4, 58], [4, 56], [3, 57], [5, 57]]
dealing with [4, 58] at loop 0
dealing with [4, 56] at loop 1
dealing with [3, 57] at loop 2
[3, 57] is NOT a wall
dealing with [5, 57] at loop 3
[5, 57] is NOT a wall
neighbors of b [[3, 57], [5, 57]]
cost from [3, 57] to [4, 57] is 1
<class 'int'>
6 45 51
6 45 51
51 <class 'int'>
6 45 51
[4, 57] (4, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 57] 4 57
the point we are trying to find neighbors for  [4, 57]
neighboring cells are:  [[4, 58], [4, 56], [3, 57], [5, 57]]
dealing with [4, 58] at loop 0
dealing with [4, 56] at loop 1
dealing with [3, 57] at loop 2
[3, 57] is NOT a wall
dealing with [5, 57] at loop 3
[5, 57] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
87[4, 57][3, 57]
the points are:  [4, 57] [3, 57]
type for point in is_valid_node  <class 'list'>
[4, 57] 4 57
type for point in is_valid_node  <class 'list'>
[3, 57] 3 57
the point we are trying to find neighbors for  [3, 57]
neighboring cells are:  [[3, 58], [3, 56], [2, 57], [4, 57]]
dealing with [3, 58] at loop 0
dealing with [3, 56] at loop 1
dealing with [2, 57] at loop 2
[2, 57] is NOT a wall
dealing with [4, 57] at loop 3
[4, 57] is NOT a wall
neighbors of b [[2, 57], [4, 57]]
cost from [4, 57] to [3, 57] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
87[4, 57][5, 57]
the points are:  [4, 57] [5, 57]
type for point in is_valid_node  <class 'list'>
[4, 57] 4 57
type for point in is_valid_node  <class 'list'>
[5, 57] 5 57
the point we are trying to find neighbors for  [5, 57]
neighboring cells are:  [[5, 58], [5, 56], [4, 57], [6, 57]]
dealing with [5, 58] at loop 0
dealing with [5, 56] at loop 1
[5, 56] is NOT a wall
dealing with [4, 57] at loop 2
[4, 57] is NOT a wall
dealing with [6, 57] at loop 3
neighbors of b [[5, 56], [4, 57]]
cost from [4, 57] to [5, 57] is 1
[5, 57] (5, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 57] 5 57
the point we are trying to find neighbors for  [5, 57]
neighboring cells are:  [[5, 58], [5, 56], [4, 57], [6, 57]]
dealing with [5, 58] at loop 0
dealing with [5, 56] at loop 1
[5, 56] is NOT a wall
dealing with [4, 57] at loop 2
[4, 57] is NOT a wall
dealing with [6, 57] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
88[5, 57][5, 56]
the points are:  [5, 57] [5, 56]
type for point in is_valid_node  <class 'list'>
[5, 57] 5 57
type for point in is_valid_node  <class 'list'>
[5, 56] 5 56
the point we are trying to find neighbors for  [5, 56]
neighboring cells are:  [[5, 57], [5, 55], [4, 56], [6, 56]]
dealing with [5, 57] at loop 0
[5, 57] is NOT a wall
dealing with [5, 55] at loop 1
[5, 55] is NOT a wall
dealing with [4, 56] at loop 2
dealing with [6, 56] at loop 3
neighbors of b [[5, 57], [5, 55]]
cost from [5, 57] to [5, 56] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
88[5, 57][4, 57]
the points are:  [5, 57] [4, 57]
type for point in is_valid_node  <class 'list'>
[5, 57] 5 57
type for point in is_valid_node  <class 'list'>
[4, 57] 4 57
the point we are trying to find neighbors for  [4, 57]
neighboring cells are:  [[4, 58], [4, 56], [3, 57], [5, 57]]
dealing with [4, 58] at loop 0
dealing with [4, 56] at loop 1
dealing with [3, 57] at loop 2
[3, 57] is NOT a wall
dealing with [5, 57] at loop 3
[5, 57] is NOT a wall
neighbors of b [[3, 57], [5, 57]]
cost from [5, 57] to [4, 57] is 1
[21, 46] (21, 46)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 46] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 46] 21 46
the point we are trying to find neighbors for  [21, 46]
neighboring cells are:  [[21, 47], [21, 45], [20, 46], [22, 46]]
dealing with [21, 47] at loop 0
[21, 47] is NOT a wall
dealing with [21, 45] at loop 1
[21, 45] is NOT a wall
dealing with [20, 46] at loop 2
dealing with [22, 46] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
93[21, 46][21, 47]
the points are:  [21, 46] [21, 47]
type for point in is_valid_node  <class 'list'>
[21, 46] 21 46
type for point in is_valid_node  <class 'list'>
[21, 47] 21 47
the point we are trying to find neighbors for  [21, 47]
neighboring cells are:  [[21, 48], [21, 46], [20, 47], [22, 47]]
dealing with [21, 48] at loop 0
[21, 48] is NOT a wall
dealing with [21, 46] at loop 1
[21, 46] is NOT a wall
dealing with [20, 47] at loop 2
[20, 47] is NOT a wall
dealing with [22, 47] at loop 3
neighbors of b [[21, 48], [21, 46], [20, 47]]
cost from [21, 46] to [21, 47] is 1
<class 'int'>
11 35 46
11 35 46
46 <class 'int'>
11 35 46
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
93[21, 46][21, 45]
the points are:  [21, 46] [21, 45]
type for point in is_valid_node  <class 'list'>
[21, 46] 21 46
type for point in is_valid_node  <class 'list'>
[21, 45] 21 45
the point we are trying to find neighbors for  [21, 45]
neighboring cells are:  [[21, 46], [21, 44], [20, 45], [22, 45]]
dealing with [21, 46] at loop 0
[21, 46] is NOT a wall
dealing with [21, 44] at loop 1
dealing with [20, 45] at loop 2
[20, 45] is NOT a wall
dealing with [22, 45] at loop 3
neighbors of b [[21, 46], [20, 45]]
cost from [21, 46] to [21, 45] is 1
[1, 58] (1, 58)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 58] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 58] 1 58
the point we are trying to find neighbors for  [1, 58]
neighboring cells are:  [[1, 59], [1, 57], [0, 58], [2, 58]]
dealing with [1, 59] at loop 0
[1, 59] is NOT a wall
dealing with [1, 57] at loop 1
[1, 57] is NOT a wall
dealing with [0, 58] at loop 2
dealing with [2, 58] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
85[1, 58][1, 59]
the points are:  [1, 58] [1, 59]
type for point in is_valid_node  <class 'list'>
[1, 58] 1 58
type for point in is_valid_node  <class 'list'>
[1, 59] 1 59
the point we are trying to find neighbors for  [1, 59]
neighboring cells are:  [[1, 60], [1, 58], [0, 59], [2, 59]]
dealing with [1, 60] at loop 0
dealing with [1, 58] at loop 1
[1, 58] is NOT a wall
dealing with [0, 59] at loop 2
dealing with [2, 59] at loop 3
[2, 59] is NOT a wall
neighbors of b [[1, 58], [2, 59]]
cost from [1, 58] to [1, 59] is 1
<class 'int'>
9 47 56
9 47 56
56 <class 'int'>
9 47 56
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
85[1, 58][1, 57]
the points are:  [1, 58] [1, 57]
type for point in is_valid_node  <class 'list'>
[1, 58] 1 58
type for point in is_valid_node  <class 'list'>
[1, 57] 1 57
the point we are trying to find neighbors for  [1, 57]
neighboring cells are:  [[1, 58], [1, 56], [0, 57], [2, 57]]
dealing with [1, 58] at loop 0
[1, 58] is NOT a wall
dealing with [1, 56] at loop 1
[1, 56] is NOT a wall
dealing with [0, 57] at loop 2
dealing with [2, 57] at loop 3
[2, 57] is NOT a wall
neighbors of b [[1, 58], [1, 56], [2, 57]]
cost from [1, 58] to [1, 57] is 1
[21, 47] (21, 47)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 47] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 47] 21 47
the point we are trying to find neighbors for  [21, 47]
neighboring cells are:  [[21, 48], [21, 46], [20, 47], [22, 47]]
dealing with [21, 48] at loop 0
[21, 48] is NOT a wall
dealing with [21, 46] at loop 1
[21, 46] is NOT a wall
dealing with [20, 47] at loop 2
[20, 47] is NOT a wall
dealing with [22, 47] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
94[21, 47][21, 48]
the points are:  [21, 47] [21, 48]
type for point in is_valid_node  <class 'list'>
[21, 47] 21 47
type for point in is_valid_node  <class 'list'>
[21, 48] 21 48
the point we are trying to find neighbors for  [21, 48]
neighboring cells are:  [[21, 49], [21, 47], [20, 48], [22, 48]]
dealing with [21, 49] at loop 0
[21, 49] is NOT a wall
dealing with [21, 47] at loop 1
[21, 47] is NOT a wall
dealing with [20, 48] at loop 2
dealing with [22, 48] at loop 3
neighbors of b [[21, 49], [21, 47]]
cost from [21, 47] to [21, 48] is 1
<class 'int'>
11 36 47
11 36 47
47 <class 'int'>
11 36 47
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
94[21, 47][21, 46]
the points are:  [21, 47] [21, 46]
type for point in is_valid_node  <class 'list'>
[21, 47] 21 47
type for point in is_valid_node  <class 'list'>
[21, 46] 21 46
the point we are trying to find neighbors for  [21, 46]
neighboring cells are:  [[21, 47], [21, 45], [20, 46], [22, 46]]
dealing with [21, 47] at loop 0
[21, 47] is NOT a wall
dealing with [21, 45] at loop 1
[21, 45] is NOT a wall
dealing with [20, 46] at loop 2
dealing with [22, 46] at loop 3
neighbors of b [[21, 47], [21, 45]]
cost from [21, 47] to [21, 46] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
94[21, 47][20, 47]
the points are:  [21, 47] [20, 47]
type for point in is_valid_node  <class 'list'>
[21, 47] 21 47
type for point in is_valid_node  <class 'list'>
[20, 47] 20 47
the point we are trying to find neighbors for  [20, 47]
neighboring cells are:  [[20, 48], [20, 46], [19, 47], [21, 47]]
dealing with [20, 48] at loop 0
dealing with [20, 46] at loop 1
dealing with [19, 47] at loop 2
[19, 47] is NOT a wall
dealing with [21, 47] at loop 3
[21, 47] is NOT a wall
neighbors of b [[19, 47], [21, 47]]
cost from [21, 47] to [20, 47] is 1
<class 'int'>
10 35 45
10 35 45
45 <class 'int'>
10 35 45
[20, 47] (20, 47)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[20, 47] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[20, 47] 20 47
the point we are trying to find neighbors for  [20, 47]
neighboring cells are:  [[20, 48], [20, 46], [19, 47], [21, 47]]
dealing with [20, 48] at loop 0
dealing with [20, 46] at loop 1
dealing with [19, 47] at loop 2
[19, 47] is NOT a wall
dealing with [21, 47] at loop 3
[21, 47] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
95[20, 47][19, 47]
the points are:  [20, 47] [19, 47]
type for point in is_valid_node  <class 'list'>
[20, 47] 20 47
type for point in is_valid_node  <class 'list'>
[19, 47] 19 47
the point we are trying to find neighbors for  [19, 47]
neighboring cells are:  [[19, 48], [19, 46], [18, 47], [20, 47]]
dealing with [19, 48] at loop 0
[19, 48] is NOT a wall
dealing with [19, 46] at loop 1
dealing with [18, 47] at loop 2
dealing with [20, 47] at loop 3
[20, 47] is NOT a wall
neighbors of b [[19, 48], [20, 47]]
cost from [20, 47] to [19, 47] is 1
<class 'int'>
9 35 44
9 35 44
44 <class 'int'>
9 35 44
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
95[20, 47][21, 47]
the points are:  [20, 47] [21, 47]
type for point in is_valid_node  <class 'list'>
[20, 47] 20 47
type for point in is_valid_node  <class 'list'>
[21, 47] 21 47
the point we are trying to find neighbors for  [21, 47]
neighboring cells are:  [[21, 48], [21, 46], [20, 47], [22, 47]]
dealing with [21, 48] at loop 0
[21, 48] is NOT a wall
dealing with [21, 46] at loop 1
[21, 46] is NOT a wall
dealing with [20, 47] at loop 2
[20, 47] is NOT a wall
dealing with [22, 47] at loop 3
neighbors of b [[21, 48], [21, 46], [20, 47]]
cost from [20, 47] to [21, 47] is 1
[19, 47] (19, 47)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 47] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 47] 19 47
the point we are trying to find neighbors for  [19, 47]
neighboring cells are:  [[19, 48], [19, 46], [18, 47], [20, 47]]
dealing with [19, 48] at loop 0
[19, 48] is NOT a wall
dealing with [19, 46] at loop 1
dealing with [18, 47] at loop 2
dealing with [20, 47] at loop 3
[20, 47] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
96[19, 47][19, 48]
the points are:  [19, 47] [19, 48]
type for point in is_valid_node  <class 'list'>
[19, 47] 19 47
type for point in is_valid_node  <class 'list'>
[19, 48] 19 48
the point we are trying to find neighbors for  [19, 48]
neighboring cells are:  [[19, 49], [19, 47], [18, 48], [20, 48]]
dealing with [19, 49] at loop 0
[19, 49] is NOT a wall
dealing with [19, 47] at loop 1
[19, 47] is NOT a wall
dealing with [18, 48] at loop 2
dealing with [20, 48] at loop 3
neighbors of b [[19, 49], [19, 47]]
cost from [19, 47] to [19, 48] is 1
<class 'int'>
9 36 45
9 36 45
45 <class 'int'>
9 36 45
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
96[19, 47][20, 47]
the points are:  [19, 47] [20, 47]
type for point in is_valid_node  <class 'list'>
[19, 47] 19 47
type for point in is_valid_node  <class 'list'>
[20, 47] 20 47
the point we are trying to find neighbors for  [20, 47]
neighboring cells are:  [[20, 48], [20, 46], [19, 47], [21, 47]]
dealing with [20, 48] at loop 0
dealing with [20, 46] at loop 1
dealing with [19, 47] at loop 2
[19, 47] is NOT a wall
dealing with [21, 47] at loop 3
[21, 47] is NOT a wall
neighbors of b [[19, 47], [21, 47]]
cost from [19, 47] to [20, 47] is 1
[1, 59] (1, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[1, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[1, 59] 1 59
the point we are trying to find neighbors for  [1, 59]
neighboring cells are:  [[1, 60], [1, 58], [0, 59], [2, 59]]
dealing with [1, 60] at loop 0
dealing with [1, 58] at loop 1
[1, 58] is NOT a wall
dealing with [0, 59] at loop 2
dealing with [2, 59] at loop 3
[2, 59] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
86[1, 59][1, 58]
the points are:  [1, 59] [1, 58]
type for point in is_valid_node  <class 'list'>
[1, 59] 1 59
type for point in is_valid_node  <class 'list'>
[1, 58] 1 58
the point we are trying to find neighbors for  [1, 58]
neighboring cells are:  [[1, 59], [1, 57], [0, 58], [2, 58]]
dealing with [1, 59] at loop 0
[1, 59] is NOT a wall
dealing with [1, 57] at loop 1
[1, 57] is NOT a wall
dealing with [0, 58] at loop 2
dealing with [2, 58] at loop 3
neighbors of b [[1, 59], [1, 57]]
cost from [1, 59] to [1, 58] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
86[1, 59][2, 59]
the points are:  [1, 59] [2, 59]
type for point in is_valid_node  <class 'list'>
[1, 59] 1 59
type for point in is_valid_node  <class 'list'>
[2, 59] 2 59
the point we are trying to find neighbors for  [2, 59]
neighboring cells are:  [[2, 60], [2, 58], [1, 59], [3, 59]]
dealing with [2, 60] at loop 0
dealing with [2, 58] at loop 1
dealing with [1, 59] at loop 2
[1, 59] is NOT a wall
dealing with [3, 59] at loop 3
[3, 59] is NOT a wall
neighbors of b [[1, 59], [3, 59]]
cost from [1, 59] to [2, 59] is 1
<class 'int'>
8 47 55
8 47 55
55 <class 'int'>
8 47 55
[2, 59] (2, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[2, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[2, 59] 2 59
the point we are trying to find neighbors for  [2, 59]
neighboring cells are:  [[2, 60], [2, 58], [1, 59], [3, 59]]
dealing with [2, 60] at loop 0
dealing with [2, 58] at loop 1
dealing with [1, 59] at loop 2
[1, 59] is NOT a wall
dealing with [3, 59] at loop 3
[3, 59] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
87[2, 59][1, 59]
the points are:  [2, 59] [1, 59]
type for point in is_valid_node  <class 'list'>
[2, 59] 2 59
type for point in is_valid_node  <class 'list'>
[1, 59] 1 59
the point we are trying to find neighbors for  [1, 59]
neighboring cells are:  [[1, 60], [1, 58], [0, 59], [2, 59]]
dealing with [1, 60] at loop 0
dealing with [1, 58] at loop 1
[1, 58] is NOT a wall
dealing with [0, 59] at loop 2
dealing with [2, 59] at loop 3
[2, 59] is NOT a wall
neighbors of b [[1, 58], [2, 59]]
cost from [2, 59] to [1, 59] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
87[2, 59][3, 59]
the points are:  [2, 59] [3, 59]
type for point in is_valid_node  <class 'list'>
[2, 59] 2 59
type for point in is_valid_node  <class 'list'>
[3, 59] 3 59
the point we are trying to find neighbors for  [3, 59]
neighboring cells are:  [[3, 60], [3, 58], [2, 59], [4, 59]]
dealing with [3, 60] at loop 0
dealing with [3, 58] at loop 1
dealing with [2, 59] at loop 2
[2, 59] is NOT a wall
dealing with [4, 59] at loop 3
[4, 59] is NOT a wall
neighbors of b [[2, 59], [4, 59]]
cost from [2, 59] to [3, 59] is 1
<class 'int'>
7 47 54
7 47 54
54 <class 'int'>
7 47 54
[3, 59] (3, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[3, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[3, 59] 3 59
the point we are trying to find neighbors for  [3, 59]
neighboring cells are:  [[3, 60], [3, 58], [2, 59], [4, 59]]
dealing with [3, 60] at loop 0
dealing with [3, 58] at loop 1
dealing with [2, 59] at loop 2
[2, 59] is NOT a wall
dealing with [4, 59] at loop 3
[4, 59] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
88[3, 59][2, 59]
the points are:  [3, 59] [2, 59]
type for point in is_valid_node  <class 'list'>
[3, 59] 3 59
type for point in is_valid_node  <class 'list'>
[2, 59] 2 59
the point we are trying to find neighbors for  [2, 59]
neighboring cells are:  [[2, 60], [2, 58], [1, 59], [3, 59]]
dealing with [2, 60] at loop 0
dealing with [2, 58] at loop 1
dealing with [1, 59] at loop 2
[1, 59] is NOT a wall
dealing with [3, 59] at loop 3
[3, 59] is NOT a wall
neighbors of b [[1, 59], [3, 59]]
cost from [3, 59] to [2, 59] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
88[3, 59][4, 59]
the points are:  [3, 59] [4, 59]
type for point in is_valid_node  <class 'list'>
[3, 59] 3 59
type for point in is_valid_node  <class 'list'>
[4, 59] 4 59
the point we are trying to find neighbors for  [4, 59]
neighboring cells are:  [[4, 60], [4, 58], [3, 59], [5, 59]]
dealing with [4, 60] at loop 0
dealing with [4, 58] at loop 1
dealing with [3, 59] at loop 2
[3, 59] is NOT a wall
dealing with [5, 59] at loop 3
[5, 59] is NOT a wall
neighbors of b [[3, 59], [5, 59]]
cost from [3, 59] to [4, 59] is 1
<class 'int'>
6 47 53
6 47 53
53 <class 'int'>
6 47 53
[4, 59] (4, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[4, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[4, 59] 4 59
the point we are trying to find neighbors for  [4, 59]
neighboring cells are:  [[4, 60], [4, 58], [3, 59], [5, 59]]
dealing with [4, 60] at loop 0
dealing with [4, 58] at loop 1
dealing with [3, 59] at loop 2
[3, 59] is NOT a wall
dealing with [5, 59] at loop 3
[5, 59] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
89[4, 59][3, 59]
the points are:  [4, 59] [3, 59]
type for point in is_valid_node  <class 'list'>
[4, 59] 4 59
type for point in is_valid_node  <class 'list'>
[3, 59] 3 59
the point we are trying to find neighbors for  [3, 59]
neighboring cells are:  [[3, 60], [3, 58], [2, 59], [4, 59]]
dealing with [3, 60] at loop 0
dealing with [3, 58] at loop 1
dealing with [2, 59] at loop 2
[2, 59] is NOT a wall
dealing with [4, 59] at loop 3
[4, 59] is NOT a wall
neighbors of b [[2, 59], [4, 59]]
cost from [4, 59] to [3, 59] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
89[4, 59][5, 59]
the points are:  [4, 59] [5, 59]
type for point in is_valid_node  <class 'list'>
[4, 59] 4 59
type for point in is_valid_node  <class 'list'>
[5, 59] 5 59
the point we are trying to find neighbors for  [5, 59]
neighboring cells are:  [[5, 60], [5, 58], [4, 59], [6, 59]]
dealing with [5, 60] at loop 0
dealing with [5, 58] at loop 1
dealing with [4, 59] at loop 2
[4, 59] is NOT a wall
dealing with [6, 59] at loop 3
[6, 59] is NOT a wall
neighbors of b [[4, 59], [6, 59]]
cost from [4, 59] to [5, 59] is 1
<class 'int'>
5 47 52
5 47 52
52 <class 'int'>
5 47 52
[5, 59] (5, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[5, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[5, 59] 5 59
the point we are trying to find neighbors for  [5, 59]
neighboring cells are:  [[5, 60], [5, 58], [4, 59], [6, 59]]
dealing with [5, 60] at loop 0
dealing with [5, 58] at loop 1
dealing with [4, 59] at loop 2
[4, 59] is NOT a wall
dealing with [6, 59] at loop 3
[6, 59] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
90[5, 59][4, 59]
the points are:  [5, 59] [4, 59]
type for point in is_valid_node  <class 'list'>
[5, 59] 5 59
type for point in is_valid_node  <class 'list'>
[4, 59] 4 59
the point we are trying to find neighbors for  [4, 59]
neighboring cells are:  [[4, 60], [4, 58], [3, 59], [5, 59]]
dealing with [4, 60] at loop 0
dealing with [4, 58] at loop 1
dealing with [3, 59] at loop 2
[3, 59] is NOT a wall
dealing with [5, 59] at loop 3
[5, 59] is NOT a wall
neighbors of b [[3, 59], [5, 59]]
cost from [5, 59] to [4, 59] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
90[5, 59][6, 59]
the points are:  [5, 59] [6, 59]
type for point in is_valid_node  <class 'list'>
[5, 59] 5 59
type for point in is_valid_node  <class 'list'>
[6, 59] 6 59
the point we are trying to find neighbors for  [6, 59]
neighboring cells are:  [[6, 60], [6, 58], [5, 59], [7, 59]]
dealing with [6, 60] at loop 0
dealing with [6, 58] at loop 1
dealing with [5, 59] at loop 2
[5, 59] is NOT a wall
dealing with [7, 59] at loop 3
[7, 59] is NOT a wall
neighbors of b [[5, 59], [7, 59]]
cost from [5, 59] to [6, 59] is 1
<class 'int'>
4 47 51
4 47 51
51 <class 'int'>
4 47 51
[6, 59] (6, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[6, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[6, 59] 6 59
the point we are trying to find neighbors for  [6, 59]
neighboring cells are:  [[6, 60], [6, 58], [5, 59], [7, 59]]
dealing with [6, 60] at loop 0
dealing with [6, 58] at loop 1
dealing with [5, 59] at loop 2
[5, 59] is NOT a wall
dealing with [7, 59] at loop 3
[7, 59] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
91[6, 59][5, 59]
the points are:  [6, 59] [5, 59]
type for point in is_valid_node  <class 'list'>
[6, 59] 6 59
type for point in is_valid_node  <class 'list'>
[5, 59] 5 59
the point we are trying to find neighbors for  [5, 59]
neighboring cells are:  [[5, 60], [5, 58], [4, 59], [6, 59]]
dealing with [5, 60] at loop 0
dealing with [5, 58] at loop 1
dealing with [4, 59] at loop 2
[4, 59] is NOT a wall
dealing with [6, 59] at loop 3
[6, 59] is NOT a wall
neighbors of b [[4, 59], [6, 59]]
cost from [6, 59] to [5, 59] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
91[6, 59][7, 59]
the points are:  [6, 59] [7, 59]
type for point in is_valid_node  <class 'list'>
[6, 59] 6 59
type for point in is_valid_node  <class 'list'>
[7, 59] 7 59
the point we are trying to find neighbors for  [7, 59]
neighboring cells are:  [[7, 60], [7, 58], [6, 59], [8, 59]]
dealing with [7, 60] at loop 0
dealing with [7, 58] at loop 1
dealing with [6, 59] at loop 2
[6, 59] is NOT a wall
dealing with [8, 59] at loop 3
[8, 59] is NOT a wall
neighbors of b [[6, 59], [8, 59]]
cost from [6, 59] to [7, 59] is 1
<class 'int'>
3 47 50
3 47 50
50 <class 'int'>
3 47 50
[7, 59] (7, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[7, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[7, 59] 7 59
the point we are trying to find neighbors for  [7, 59]
neighboring cells are:  [[7, 60], [7, 58], [6, 59], [8, 59]]
dealing with [7, 60] at loop 0
dealing with [7, 58] at loop 1
dealing with [6, 59] at loop 2
[6, 59] is NOT a wall
dealing with [8, 59] at loop 3
[8, 59] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
92[7, 59][6, 59]
the points are:  [7, 59] [6, 59]
type for point in is_valid_node  <class 'list'>
[7, 59] 7 59
type for point in is_valid_node  <class 'list'>
[6, 59] 6 59
the point we are trying to find neighbors for  [6, 59]
neighboring cells are:  [[6, 60], [6, 58], [5, 59], [7, 59]]
dealing with [6, 60] at loop 0
dealing with [6, 58] at loop 1
dealing with [5, 59] at loop 2
[5, 59] is NOT a wall
dealing with [7, 59] at loop 3
[7, 59] is NOT a wall
neighbors of b [[5, 59], [7, 59]]
cost from [7, 59] to [6, 59] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
92[7, 59][8, 59]
the points are:  [7, 59] [8, 59]
type for point in is_valid_node  <class 'list'>
[7, 59] 7 59
type for point in is_valid_node  <class 'list'>
[8, 59] 8 59
the point we are trying to find neighbors for  [8, 59]
neighboring cells are:  [[8, 60], [8, 58], [7, 59], [9, 59]]
dealing with [8, 60] at loop 0
dealing with [8, 58] at loop 1
dealing with [7, 59] at loop 2
[7, 59] is NOT a wall
dealing with [9, 59] at loop 3
[9, 59] is NOT a wall
neighbors of b [[7, 59], [9, 59]]
cost from [7, 59] to [8, 59] is 1
<class 'int'>
2 47 49
2 47 49
49 <class 'int'>
2 47 49
[8, 59] (8, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[8, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[8, 59] 8 59
the point we are trying to find neighbors for  [8, 59]
neighboring cells are:  [[8, 60], [8, 58], [7, 59], [9, 59]]
dealing with [8, 60] at loop 0
dealing with [8, 58] at loop 1
dealing with [7, 59] at loop 2
[7, 59] is NOT a wall
dealing with [9, 59] at loop 3
[9, 59] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
93[8, 59][7, 59]
the points are:  [8, 59] [7, 59]
type for point in is_valid_node  <class 'list'>
[8, 59] 8 59
type for point in is_valid_node  <class 'list'>
[7, 59] 7 59
the point we are trying to find neighbors for  [7, 59]
neighboring cells are:  [[7, 60], [7, 58], [6, 59], [8, 59]]
dealing with [7, 60] at loop 0
dealing with [7, 58] at loop 1
dealing with [6, 59] at loop 2
[6, 59] is NOT a wall
dealing with [8, 59] at loop 3
[8, 59] is NOT a wall
neighbors of b [[6, 59], [8, 59]]
cost from [8, 59] to [7, 59] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
93[8, 59][9, 59]
the points are:  [8, 59] [9, 59]
type for point in is_valid_node  <class 'list'>
[8, 59] 8 59
type for point in is_valid_node  <class 'list'>
[9, 59] 9 59
the point we are trying to find neighbors for  [9, 59]
neighboring cells are:  [[9, 60], [9, 58], [8, 59], [10, 59]]
dealing with [9, 60] at loop 0
dealing with [9, 58] at loop 1
dealing with [8, 59] at loop 2
[8, 59] is NOT a wall
dealing with [10, 59] at loop 3
[10, 59] is NOT a wall
neighbors of b [[8, 59], [10, 59]]
cost from [8, 59] to [9, 59] is 1
<class 'int'>
1 47 48
1 47 48
48 <class 'int'>
1 47 48
[9, 59] (9, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[9, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[9, 59] 9 59
the point we are trying to find neighbors for  [9, 59]
neighboring cells are:  [[9, 60], [9, 58], [8, 59], [10, 59]]
dealing with [9, 60] at loop 0
dealing with [9, 58] at loop 1
dealing with [8, 59] at loop 2
[8, 59] is NOT a wall
dealing with [10, 59] at loop 3
[10, 59] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
94[9, 59][8, 59]
the points are:  [9, 59] [8, 59]
type for point in is_valid_node  <class 'list'>
[9, 59] 9 59
type for point in is_valid_node  <class 'list'>
[8, 59] 8 59
the point we are trying to find neighbors for  [8, 59]
neighboring cells are:  [[8, 60], [8, 58], [7, 59], [9, 59]]
dealing with [8, 60] at loop 0
dealing with [8, 58] at loop 1
dealing with [7, 59] at loop 2
[7, 59] is NOT a wall
dealing with [9, 59] at loop 3
[9, 59] is NOT a wall
neighbors of b [[7, 59], [9, 59]]
cost from [9, 59] to [8, 59] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
94[9, 59][10, 59]
the points are:  [9, 59] [10, 59]
type for point in is_valid_node  <class 'list'>
[9, 59] 9 59
type for point in is_valid_node  <class 'list'>
[10, 59] 10 59
the point we are trying to find neighbors for  [10, 59]
neighboring cells are:  [[10, 60], [10, 58], [9, 59], [11, 59]]
dealing with [10, 60] at loop 0
dealing with [10, 58] at loop 1
dealing with [9, 59] at loop 2
[9, 59] is NOT a wall
dealing with [11, 59] at loop 3
[11, 59] is NOT a wall
neighbors of b [[9, 59], [11, 59]]
cost from [9, 59] to [10, 59] is 1
<class 'int'>
0 47 47
0 47 47
47 <class 'int'>
0 47 47
[10, 59] (10, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[10, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[10, 59] 10 59
the point we are trying to find neighbors for  [10, 59]
neighboring cells are:  [[10, 60], [10, 58], [9, 59], [11, 59]]
dealing with [10, 60] at loop 0
dealing with [10, 58] at loop 1
dealing with [9, 59] at loop 2
[9, 59] is NOT a wall
dealing with [11, 59] at loop 3
[11, 59] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
95[10, 59][9, 59]
the points are:  [10, 59] [9, 59]
type for point in is_valid_node  <class 'list'>
[10, 59] 10 59
type for point in is_valid_node  <class 'list'>
[9, 59] 9 59
the point we are trying to find neighbors for  [9, 59]
neighboring cells are:  [[9, 60], [9, 58], [8, 59], [10, 59]]
dealing with [9, 60] at loop 0
dealing with [9, 58] at loop 1
dealing with [8, 59] at loop 2
[8, 59] is NOT a wall
dealing with [10, 59] at loop 3
[10, 59] is NOT a wall
neighbors of b [[8, 59], [10, 59]]
cost from [10, 59] to [9, 59] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
95[10, 59][11, 59]
the points are:  [10, 59] [11, 59]
type for point in is_valid_node  <class 'list'>
[10, 59] 10 59
type for point in is_valid_node  <class 'list'>
[11, 59] 11 59
the point we are trying to find neighbors for  [11, 59]
neighboring cells are:  [[11, 60], [11, 58], [10, 59], [12, 59]]
dealing with [11, 60] at loop 0
dealing with [11, 58] at loop 1
[11, 58] is NOT a wall
dealing with [10, 59] at loop 2
[10, 59] is NOT a wall
dealing with [12, 59] at loop 3
neighbors of b [[11, 58], [10, 59]]
cost from [10, 59] to [11, 59] is 1
<class 'int'>
1 47 48
1 47 48
48 <class 'int'>
1 47 48
[19, 48] (19, 48)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 48] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 48] 19 48
the point we are trying to find neighbors for  [19, 48]
neighboring cells are:  [[19, 49], [19, 47], [18, 48], [20, 48]]
dealing with [19, 49] at loop 0
[19, 49] is NOT a wall
dealing with [19, 47] at loop 1
[19, 47] is NOT a wall
dealing with [18, 48] at loop 2
dealing with [20, 48] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
97[19, 48][19, 49]
the points are:  [19, 48] [19, 49]
type for point in is_valid_node  <class 'list'>
[19, 48] 19 48
type for point in is_valid_node  <class 'list'>
[19, 49] 19 49
the point we are trying to find neighbors for  [19, 49]
neighboring cells are:  [[19, 50], [19, 48], [18, 49], [20, 49]]
dealing with [19, 50] at loop 0
[19, 50] is NOT a wall
dealing with [19, 48] at loop 1
[19, 48] is NOT a wall
dealing with [18, 49] at loop 2
dealing with [20, 49] at loop 3
neighbors of b [[19, 50], [19, 48]]
cost from [19, 48] to [19, 49] is 1
<class 'int'>
9 37 46
9 37 46
46 <class 'int'>
9 37 46
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
97[19, 48][19, 47]
the points are:  [19, 48] [19, 47]
type for point in is_valid_node  <class 'list'>
[19, 48] 19 48
type for point in is_valid_node  <class 'list'>
[19, 47] 19 47
the point we are trying to find neighbors for  [19, 47]
neighboring cells are:  [[19, 48], [19, 46], [18, 47], [20, 47]]
dealing with [19, 48] at loop 0
[19, 48] is NOT a wall
dealing with [19, 46] at loop 1
dealing with [18, 47] at loop 2
dealing with [20, 47] at loop 3
[20, 47] is NOT a wall
neighbors of b [[19, 48], [20, 47]]
cost from [19, 48] to [19, 47] is 1
[21, 48] (21, 48)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 48] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 48] 21 48
the point we are trying to find neighbors for  [21, 48]
neighboring cells are:  [[21, 49], [21, 47], [20, 48], [22, 48]]
dealing with [21, 49] at loop 0
[21, 49] is NOT a wall
dealing with [21, 47] at loop 1
[21, 47] is NOT a wall
dealing with [20, 48] at loop 2
dealing with [22, 48] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
95[21, 48][21, 49]
the points are:  [21, 48] [21, 49]
type for point in is_valid_node  <class 'list'>
[21, 48] 21 48
type for point in is_valid_node  <class 'list'>
[21, 49] 21 49
the point we are trying to find neighbors for  [21, 49]
neighboring cells are:  [[21, 50], [21, 48], [20, 49], [22, 49]]
dealing with [21, 50] at loop 0
[21, 50] is NOT a wall
dealing with [21, 48] at loop 1
[21, 48] is NOT a wall
dealing with [20, 49] at loop 2
dealing with [22, 49] at loop 3
neighbors of b [[21, 50], [21, 48]]
cost from [21, 48] to [21, 49] is 1
<class 'int'>
11 37 48
11 37 48
48 <class 'int'>
11 37 48
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
95[21, 48][21, 47]
the points are:  [21, 48] [21, 47]
type for point in is_valid_node  <class 'list'>
[21, 48] 21 48
type for point in is_valid_node  <class 'list'>
[21, 47] 21 47
the point we are trying to find neighbors for  [21, 47]
neighboring cells are:  [[21, 48], [21, 46], [20, 47], [22, 47]]
dealing with [21, 48] at loop 0
[21, 48] is NOT a wall
dealing with [21, 46] at loop 1
[21, 46] is NOT a wall
dealing with [20, 47] at loop 2
[20, 47] is NOT a wall
dealing with [22, 47] at loop 3
neighbors of b [[21, 48], [21, 46], [20, 47]]
cost from [21, 48] to [21, 47] is 1
[11, 59] (11, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 59] 11 59
the point we are trying to find neighbors for  [11, 59]
neighboring cells are:  [[11, 60], [11, 58], [10, 59], [12, 59]]
dealing with [11, 60] at loop 0
dealing with [11, 58] at loop 1
[11, 58] is NOT a wall
dealing with [10, 59] at loop 2
[10, 59] is NOT a wall
dealing with [12, 59] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
96[11, 59][11, 58]
the points are:  [11, 59] [11, 58]
type for point in is_valid_node  <class 'list'>
[11, 59] 11 59
type for point in is_valid_node  <class 'list'>
[11, 58] 11 58
the point we are trying to find neighbors for  [11, 58]
neighboring cells are:  [[11, 59], [11, 57], [10, 58], [12, 58]]
dealing with [11, 59] at loop 0
[11, 59] is NOT a wall
dealing with [11, 57] at loop 1
[11, 57] is NOT a wall
dealing with [10, 58] at loop 2
dealing with [12, 58] at loop 3
neighbors of b [[11, 59], [11, 57]]
cost from [11, 59] to [11, 58] is 1
<class 'int'>
1 46 47
1 46 47
47 <class 'int'>
1 46 47
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
96[11, 59][10, 59]
the points are:  [11, 59] [10, 59]
type for point in is_valid_node  <class 'list'>
[11, 59] 11 59
type for point in is_valid_node  <class 'list'>
[10, 59] 10 59
the point we are trying to find neighbors for  [10, 59]
neighboring cells are:  [[10, 60], [10, 58], [9, 59], [11, 59]]
dealing with [10, 60] at loop 0
dealing with [10, 58] at loop 1
dealing with [9, 59] at loop 2
[9, 59] is NOT a wall
dealing with [11, 59] at loop 3
[11, 59] is NOT a wall
neighbors of b [[9, 59], [11, 59]]
cost from [11, 59] to [10, 59] is 1
[11, 58] (11, 58)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 58] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 58] 11 58
the point we are trying to find neighbors for  [11, 58]
neighboring cells are:  [[11, 59], [11, 57], [10, 58], [12, 58]]
dealing with [11, 59] at loop 0
[11, 59] is NOT a wall
dealing with [11, 57] at loop 1
[11, 57] is NOT a wall
dealing with [10, 58] at loop 2
dealing with [12, 58] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
97[11, 58][11, 59]
the points are:  [11, 58] [11, 59]
type for point in is_valid_node  <class 'list'>
[11, 58] 11 58
type for point in is_valid_node  <class 'list'>
[11, 59] 11 59
the point we are trying to find neighbors for  [11, 59]
neighboring cells are:  [[11, 60], [11, 58], [10, 59], [12, 59]]
dealing with [11, 60] at loop 0
dealing with [11, 58] at loop 1
[11, 58] is NOT a wall
dealing with [10, 59] at loop 2
[10, 59] is NOT a wall
dealing with [12, 59] at loop 3
neighbors of b [[11, 58], [10, 59]]
cost from [11, 58] to [11, 59] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
97[11, 58][11, 57]
the points are:  [11, 58] [11, 57]
type for point in is_valid_node  <class 'list'>
[11, 58] 11 58
type for point in is_valid_node  <class 'list'>
[11, 57] 11 57
the point we are trying to find neighbors for  [11, 57]
neighboring cells are:  [[11, 58], [11, 56], [10, 57], [12, 57]]
dealing with [11, 58] at loop 0
[11, 58] is NOT a wall
dealing with [11, 56] at loop 1
dealing with [10, 57] at loop 2
dealing with [12, 57] at loop 3
[12, 57] is NOT a wall
neighbors of b [[11, 58], [12, 57]]
cost from [11, 58] to [11, 57] is 1
<class 'int'>
1 45 46
1 45 46
46 <class 'int'>
1 45 46
[11, 57] (11, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[11, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[11, 57] 11 57
the point we are trying to find neighbors for  [11, 57]
neighboring cells are:  [[11, 58], [11, 56], [10, 57], [12, 57]]
dealing with [11, 58] at loop 0
[11, 58] is NOT a wall
dealing with [11, 56] at loop 1
dealing with [10, 57] at loop 2
dealing with [12, 57] at loop 3
[12, 57] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
98[11, 57][11, 58]
the points are:  [11, 57] [11, 58]
type for point in is_valid_node  <class 'list'>
[11, 57] 11 57
type for point in is_valid_node  <class 'list'>
[11, 58] 11 58
the point we are trying to find neighbors for  [11, 58]
neighboring cells are:  [[11, 59], [11, 57], [10, 58], [12, 58]]
dealing with [11, 59] at loop 0
[11, 59] is NOT a wall
dealing with [11, 57] at loop 1
[11, 57] is NOT a wall
dealing with [10, 58] at loop 2
dealing with [12, 58] at loop 3
neighbors of b [[11, 59], [11, 57]]
cost from [11, 57] to [11, 58] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
98[11, 57][12, 57]
the points are:  [11, 57] [12, 57]
type for point in is_valid_node  <class 'list'>
[11, 57] 11 57
type for point in is_valid_node  <class 'list'>
[12, 57] 12 57
the point we are trying to find neighbors for  [12, 57]
neighboring cells are:  [[12, 58], [12, 56], [11, 57], [13, 57]]
dealing with [12, 58] at loop 0
dealing with [12, 56] at loop 1
dealing with [11, 57] at loop 2
[11, 57] is NOT a wall
dealing with [13, 57] at loop 3
[13, 57] is NOT a wall
neighbors of b [[11, 57], [13, 57]]
cost from [11, 57] to [12, 57] is 1
<class 'int'>
2 45 47
2 45 47
47 <class 'int'>
2 45 47
[19, 49] (19, 49)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 49] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 49] 19 49
the point we are trying to find neighbors for  [19, 49]
neighboring cells are:  [[19, 50], [19, 48], [18, 49], [20, 49]]
dealing with [19, 50] at loop 0
[19, 50] is NOT a wall
dealing with [19, 48] at loop 1
[19, 48] is NOT a wall
dealing with [18, 49] at loop 2
dealing with [20, 49] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
98[19, 49][19, 50]
the points are:  [19, 49] [19, 50]
type for point in is_valid_node  <class 'list'>
[19, 49] 19 49
type for point in is_valid_node  <class 'list'>
[19, 50] 19 50
the point we are trying to find neighbors for  [19, 50]
neighboring cells are:  [[19, 51], [19, 49], [18, 50], [20, 50]]
dealing with [19, 51] at loop 0
[19, 51] is NOT a wall
dealing with [19, 49] at loop 1
[19, 49] is NOT a wall
dealing with [18, 50] at loop 2
dealing with [20, 50] at loop 3
neighbors of b [[19, 51], [19, 49]]
cost from [19, 49] to [19, 50] is 1
<class 'int'>
9 38 47
9 38 47
47 <class 'int'>
9 38 47
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
98[19, 49][19, 48]
the points are:  [19, 49] [19, 48]
type for point in is_valid_node  <class 'list'>
[19, 49] 19 49
type for point in is_valid_node  <class 'list'>
[19, 48] 19 48
the point we are trying to find neighbors for  [19, 48]
neighboring cells are:  [[19, 49], [19, 47], [18, 48], [20, 48]]
dealing with [19, 49] at loop 0
[19, 49] is NOT a wall
dealing with [19, 47] at loop 1
[19, 47] is NOT a wall
dealing with [18, 48] at loop 2
dealing with [20, 48] at loop 3
neighbors of b [[19, 49], [19, 47]]
cost from [19, 49] to [19, 48] is 1
[21, 49] (21, 49)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 49] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 49] 21 49
the point we are trying to find neighbors for  [21, 49]
neighboring cells are:  [[21, 50], [21, 48], [20, 49], [22, 49]]
dealing with [21, 50] at loop 0
[21, 50] is NOT a wall
dealing with [21, 48] at loop 1
[21, 48] is NOT a wall
dealing with [20, 49] at loop 2
dealing with [22, 49] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
96[21, 49][21, 50]
the points are:  [21, 49] [21, 50]
type for point in is_valid_node  <class 'list'>
[21, 49] 21 49
type for point in is_valid_node  <class 'list'>
[21, 50] 21 50
the point we are trying to find neighbors for  [21, 50]
neighboring cells are:  [[21, 51], [21, 49], [20, 50], [22, 50]]
dealing with [21, 51] at loop 0
[21, 51] is NOT a wall
dealing with [21, 49] at loop 1
[21, 49] is NOT a wall
dealing with [20, 50] at loop 2
dealing with [22, 50] at loop 3
neighbors of b [[21, 51], [21, 49]]
cost from [21, 49] to [21, 50] is 1
<class 'int'>
11 38 49
11 38 49
49 <class 'int'>
11 38 49
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
96[21, 49][21, 48]
the points are:  [21, 49] [21, 48]
type for point in is_valid_node  <class 'list'>
[21, 49] 21 49
type for point in is_valid_node  <class 'list'>
[21, 48] 21 48
the point we are trying to find neighbors for  [21, 48]
neighboring cells are:  [[21, 49], [21, 47], [20, 48], [22, 48]]
dealing with [21, 49] at loop 0
[21, 49] is NOT a wall
dealing with [21, 47] at loop 1
[21, 47] is NOT a wall
dealing with [20, 48] at loop 2
dealing with [22, 48] at loop 3
neighbors of b [[21, 49], [21, 47]]
cost from [21, 49] to [21, 48] is 1
[12, 57] (12, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[12, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[12, 57] 12 57
the point we are trying to find neighbors for  [12, 57]
neighboring cells are:  [[12, 58], [12, 56], [11, 57], [13, 57]]
dealing with [12, 58] at loop 0
dealing with [12, 56] at loop 1
dealing with [11, 57] at loop 2
[11, 57] is NOT a wall
dealing with [13, 57] at loop 3
[13, 57] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
99[12, 57][11, 57]
the points are:  [12, 57] [11, 57]
type for point in is_valid_node  <class 'list'>
[12, 57] 12 57
type for point in is_valid_node  <class 'list'>
[11, 57] 11 57
the point we are trying to find neighbors for  [11, 57]
neighboring cells are:  [[11, 58], [11, 56], [10, 57], [12, 57]]
dealing with [11, 58] at loop 0
[11, 58] is NOT a wall
dealing with [11, 56] at loop 1
dealing with [10, 57] at loop 2
dealing with [12, 57] at loop 3
[12, 57] is NOT a wall
neighbors of b [[11, 58], [12, 57]]
cost from [12, 57] to [11, 57] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
99[12, 57][13, 57]
the points are:  [12, 57] [13, 57]
type for point in is_valid_node  <class 'list'>
[12, 57] 12 57
type for point in is_valid_node  <class 'list'>
[13, 57] 13 57
the point we are trying to find neighbors for  [13, 57]
neighboring cells are:  [[13, 58], [13, 56], [12, 57], [14, 57]]
dealing with [13, 58] at loop 0
dealing with [13, 56] at loop 1
dealing with [12, 57] at loop 2
[12, 57] is NOT a wall
dealing with [14, 57] at loop 3
[14, 57] is NOT a wall
neighbors of b [[12, 57], [14, 57]]
cost from [12, 57] to [13, 57] is 1
<class 'int'>
3 45 48
3 45 48
48 <class 'int'>
3 45 48
[19, 50] (19, 50)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 50] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 50] 19 50
the point we are trying to find neighbors for  [19, 50]
neighboring cells are:  [[19, 51], [19, 49], [18, 50], [20, 50]]
dealing with [19, 51] at loop 0
[19, 51] is NOT a wall
dealing with [19, 49] at loop 1
[19, 49] is NOT a wall
dealing with [18, 50] at loop 2
dealing with [20, 50] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
99[19, 50][19, 51]
the points are:  [19, 50] [19, 51]
type for point in is_valid_node  <class 'list'>
[19, 50] 19 50
type for point in is_valid_node  <class 'list'>
[19, 51] 19 51
the point we are trying to find neighbors for  [19, 51]
neighboring cells are:  [[19, 52], [19, 50], [18, 51], [20, 51]]
dealing with [19, 52] at loop 0
dealing with [19, 50] at loop 1
[19, 50] is NOT a wall
dealing with [18, 51] at loop 2
[18, 51] is NOT a wall
dealing with [20, 51] at loop 3
neighbors of b [[19, 50], [18, 51]]
cost from [19, 50] to [19, 51] is 1
<class 'int'>
9 39 48
9 39 48
48 <class 'int'>
9 39 48
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
99[19, 50][19, 49]
the points are:  [19, 50] [19, 49]
type for point in is_valid_node  <class 'list'>
[19, 50] 19 50
type for point in is_valid_node  <class 'list'>
[19, 49] 19 49
the point we are trying to find neighbors for  [19, 49]
neighboring cells are:  [[19, 50], [19, 48], [18, 49], [20, 49]]
dealing with [19, 50] at loop 0
[19, 50] is NOT a wall
dealing with [19, 48] at loop 1
[19, 48] is NOT a wall
dealing with [18, 49] at loop 2
dealing with [20, 49] at loop 3
neighbors of b [[19, 50], [19, 48]]
cost from [19, 50] to [19, 49] is 1
[21, 50] (21, 50)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 50] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 50] 21 50
the point we are trying to find neighbors for  [21, 50]
neighboring cells are:  [[21, 51], [21, 49], [20, 50], [22, 50]]
dealing with [21, 51] at loop 0
[21, 51] is NOT a wall
dealing with [21, 49] at loop 1
[21, 49] is NOT a wall
dealing with [20, 50] at loop 2
dealing with [22, 50] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
97[21, 50][21, 51]
the points are:  [21, 50] [21, 51]
type for point in is_valid_node  <class 'list'>
[21, 50] 21 50
type for point in is_valid_node  <class 'list'>
[21, 51] 21 51
the point we are trying to find neighbors for  [21, 51]
neighboring cells are:  [[21, 52], [21, 50], [20, 51], [22, 51]]
dealing with [21, 52] at loop 0
[21, 52] is NOT a wall
dealing with [21, 50] at loop 1
[21, 50] is NOT a wall
dealing with [20, 51] at loop 2
dealing with [22, 51] at loop 3
neighbors of b [[21, 52], [21, 50]]
cost from [21, 50] to [21, 51] is 1
<class 'int'>
11 39 50
11 39 50
50 <class 'int'>
11 39 50
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
97[21, 50][21, 49]
the points are:  [21, 50] [21, 49]
type for point in is_valid_node  <class 'list'>
[21, 50] 21 50
type for point in is_valid_node  <class 'list'>
[21, 49] 21 49
the point we are trying to find neighbors for  [21, 49]
neighboring cells are:  [[21, 50], [21, 48], [20, 49], [22, 49]]
dealing with [21, 50] at loop 0
[21, 50] is NOT a wall
dealing with [21, 48] at loop 1
[21, 48] is NOT a wall
dealing with [20, 49] at loop 2
dealing with [22, 49] at loop 3
neighbors of b [[21, 50], [21, 48]]
cost from [21, 50] to [21, 49] is 1
[13, 57] (13, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 57] 13 57
the point we are trying to find neighbors for  [13, 57]
neighboring cells are:  [[13, 58], [13, 56], [12, 57], [14, 57]]
dealing with [13, 58] at loop 0
dealing with [13, 56] at loop 1
dealing with [12, 57] at loop 2
[12, 57] is NOT a wall
dealing with [14, 57] at loop 3
[14, 57] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
100[13, 57][12, 57]
the points are:  [13, 57] [12, 57]
type for point in is_valid_node  <class 'list'>
[13, 57] 13 57
type for point in is_valid_node  <class 'list'>
[12, 57] 12 57
the point we are trying to find neighbors for  [12, 57]
neighboring cells are:  [[12, 58], [12, 56], [11, 57], [13, 57]]
dealing with [12, 58] at loop 0
dealing with [12, 56] at loop 1
dealing with [11, 57] at loop 2
[11, 57] is NOT a wall
dealing with [13, 57] at loop 3
[13, 57] is NOT a wall
neighbors of b [[11, 57], [13, 57]]
cost from [13, 57] to [12, 57] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
100[13, 57][14, 57]
the points are:  [13, 57] [14, 57]
type for point in is_valid_node  <class 'list'>
[13, 57] 13 57
type for point in is_valid_node  <class 'list'>
[14, 57] 14 57
the point we are trying to find neighbors for  [14, 57]
neighboring cells are:  [[14, 58], [14, 56], [13, 57], [15, 57]]
dealing with [14, 58] at loop 0
dealing with [14, 56] at loop 1
dealing with [13, 57] at loop 2
[13, 57] is NOT a wall
dealing with [15, 57] at loop 3
[15, 57] is NOT a wall
neighbors of b [[13, 57], [15, 57]]
cost from [13, 57] to [14, 57] is 1
<class 'int'>
4 45 49
4 45 49
49 <class 'int'>
4 45 49
[19, 51] (19, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 51] 19 51
the point we are trying to find neighbors for  [19, 51]
neighboring cells are:  [[19, 52], [19, 50], [18, 51], [20, 51]]
dealing with [19, 52] at loop 0
dealing with [19, 50] at loop 1
[19, 50] is NOT a wall
dealing with [18, 51] at loop 2
[18, 51] is NOT a wall
dealing with [20, 51] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
100[19, 51][19, 50]
the points are:  [19, 51] [19, 50]
type for point in is_valid_node  <class 'list'>
[19, 51] 19 51
type for point in is_valid_node  <class 'list'>
[19, 50] 19 50
the point we are trying to find neighbors for  [19, 50]
neighboring cells are:  [[19, 51], [19, 49], [18, 50], [20, 50]]
dealing with [19, 51] at loop 0
[19, 51] is NOT a wall
dealing with [19, 49] at loop 1
[19, 49] is NOT a wall
dealing with [18, 50] at loop 2
dealing with [20, 50] at loop 3
neighbors of b [[19, 51], [19, 49]]
cost from [19, 51] to [19, 50] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
100[19, 51][18, 51]
the points are:  [19, 51] [18, 51]
type for point in is_valid_node  <class 'list'>
[19, 51] 19 51
type for point in is_valid_node  <class 'list'>
[18, 51] 18 51
the point we are trying to find neighbors for  [18, 51]
neighboring cells are:  [[18, 52], [18, 50], [17, 51], [19, 51]]
dealing with [18, 52] at loop 0
dealing with [18, 50] at loop 1
dealing with [17, 51] at loop 2
[17, 51] is NOT a wall
dealing with [19, 51] at loop 3
[19, 51] is NOT a wall
neighbors of b [[17, 51], [19, 51]]
cost from [19, 51] to [18, 51] is 1
<class 'int'>
8 39 47
8 39 47
47 <class 'int'>
8 39 47
[18, 51] (18, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 51] 18 51
the point we are trying to find neighbors for  [18, 51]
neighboring cells are:  [[18, 52], [18, 50], [17, 51], [19, 51]]
dealing with [18, 52] at loop 0
dealing with [18, 50] at loop 1
dealing with [17, 51] at loop 2
[17, 51] is NOT a wall
dealing with [19, 51] at loop 3
[19, 51] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
101[18, 51][17, 51]
the points are:  [18, 51] [17, 51]
type for point in is_valid_node  <class 'list'>
[18, 51] 18 51
type for point in is_valid_node  <class 'list'>
[17, 51] 17 51
the point we are trying to find neighbors for  [17, 51]
neighboring cells are:  [[17, 52], [17, 50], [16, 51], [18, 51]]
dealing with [17, 52] at loop 0
dealing with [17, 50] at loop 1
dealing with [16, 51] at loop 2
[16, 51] is NOT a wall
dealing with [18, 51] at loop 3
[18, 51] is NOT a wall
neighbors of b [[16, 51], [18, 51]]
cost from [18, 51] to [17, 51] is 1
<class 'int'>
7 39 46
7 39 46
46 <class 'int'>
7 39 46
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
101[18, 51][19, 51]
the points are:  [18, 51] [19, 51]
type for point in is_valid_node  <class 'list'>
[18, 51] 18 51
type for point in is_valid_node  <class 'list'>
[19, 51] 19 51
the point we are trying to find neighbors for  [19, 51]
neighboring cells are:  [[19, 52], [19, 50], [18, 51], [20, 51]]
dealing with [19, 52] at loop 0
dealing with [19, 50] at loop 1
[19, 50] is NOT a wall
dealing with [18, 51] at loop 2
[18, 51] is NOT a wall
dealing with [20, 51] at loop 3
neighbors of b [[19, 50], [18, 51]]
cost from [18, 51] to [19, 51] is 1
[17, 51] (17, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 51] 17 51
the point we are trying to find neighbors for  [17, 51]
neighboring cells are:  [[17, 52], [17, 50], [16, 51], [18, 51]]
dealing with [17, 52] at loop 0
dealing with [17, 50] at loop 1
dealing with [16, 51] at loop 2
[16, 51] is NOT a wall
dealing with [18, 51] at loop 3
[18, 51] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
102[17, 51][16, 51]
the points are:  [17, 51] [16, 51]
type for point in is_valid_node  <class 'list'>
[17, 51] 17 51
type for point in is_valid_node  <class 'list'>
[16, 51] 16 51
the point we are trying to find neighbors for  [16, 51]
neighboring cells are:  [[16, 52], [16, 50], [15, 51], [17, 51]]
dealing with [16, 52] at loop 0
dealing with [16, 50] at loop 1
dealing with [15, 51] at loop 2
[15, 51] is NOT a wall
dealing with [17, 51] at loop 3
[17, 51] is NOT a wall
neighbors of b [[15, 51], [17, 51]]
cost from [17, 51] to [16, 51] is 1
<class 'int'>
6 39 45
6 39 45
45 <class 'int'>
6 39 45
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
102[17, 51][18, 51]
the points are:  [17, 51] [18, 51]
type for point in is_valid_node  <class 'list'>
[17, 51] 17 51
type for point in is_valid_node  <class 'list'>
[18, 51] 18 51
the point we are trying to find neighbors for  [18, 51]
neighboring cells are:  [[18, 52], [18, 50], [17, 51], [19, 51]]
dealing with [18, 52] at loop 0
dealing with [18, 50] at loop 1
dealing with [17, 51] at loop 2
[17, 51] is NOT a wall
dealing with [19, 51] at loop 3
[19, 51] is NOT a wall
neighbors of b [[17, 51], [19, 51]]
cost from [17, 51] to [18, 51] is 1
[16, 51] (16, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 51] 16 51
the point we are trying to find neighbors for  [16, 51]
neighboring cells are:  [[16, 52], [16, 50], [15, 51], [17, 51]]
dealing with [16, 52] at loop 0
dealing with [16, 50] at loop 1
dealing with [15, 51] at loop 2
[15, 51] is NOT a wall
dealing with [17, 51] at loop 3
[17, 51] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
103[16, 51][15, 51]
the points are:  [16, 51] [15, 51]
type for point in is_valid_node  <class 'list'>
[16, 51] 16 51
type for point in is_valid_node  <class 'list'>
[15, 51] 15 51
the point we are trying to find neighbors for  [15, 51]
neighboring cells are:  [[15, 52], [15, 50], [14, 51], [16, 51]]
dealing with [15, 52] at loop 0
[15, 52] is NOT a wall
dealing with [15, 50] at loop 1
dealing with [14, 51] at loop 2
dealing with [16, 51] at loop 3
[16, 51] is NOT a wall
neighbors of b [[15, 52], [16, 51]]
cost from [16, 51] to [15, 51] is 1
<class 'int'>
5 39 44
5 39 44
44 <class 'int'>
5 39 44
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
103[16, 51][17, 51]
the points are:  [16, 51] [17, 51]
type for point in is_valid_node  <class 'list'>
[16, 51] 16 51
type for point in is_valid_node  <class 'list'>
[17, 51] 17 51
the point we are trying to find neighbors for  [17, 51]
neighboring cells are:  [[17, 52], [17, 50], [16, 51], [18, 51]]
dealing with [17, 52] at loop 0
dealing with [17, 50] at loop 1
dealing with [16, 51] at loop 2
[16, 51] is NOT a wall
dealing with [18, 51] at loop 3
[18, 51] is NOT a wall
neighbors of b [[16, 51], [18, 51]]
cost from [16, 51] to [17, 51] is 1
[15, 51] (15, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 51] 15 51
the point we are trying to find neighbors for  [15, 51]
neighboring cells are:  [[15, 52], [15, 50], [14, 51], [16, 51]]
dealing with [15, 52] at loop 0
[15, 52] is NOT a wall
dealing with [15, 50] at loop 1
dealing with [14, 51] at loop 2
dealing with [16, 51] at loop 3
[16, 51] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
104[15, 51][15, 52]
the points are:  [15, 51] [15, 52]
type for point in is_valid_node  <class 'list'>
[15, 51] 15 51
type for point in is_valid_node  <class 'list'>
[15, 52] 15 52
the point we are trying to find neighbors for  [15, 52]
neighboring cells are:  [[15, 53], [15, 51], [14, 52], [16, 52]]
dealing with [15, 53] at loop 0
[15, 53] is NOT a wall
dealing with [15, 51] at loop 1
[15, 51] is NOT a wall
dealing with [14, 52] at loop 2
dealing with [16, 52] at loop 3
neighbors of b [[15, 53], [15, 51]]
cost from [15, 51] to [15, 52] is 1
<class 'int'>
5 40 45
5 40 45
45 <class 'int'>
5 40 45
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
104[15, 51][16, 51]
the points are:  [15, 51] [16, 51]
type for point in is_valid_node  <class 'list'>
[15, 51] 15 51
type for point in is_valid_node  <class 'list'>
[16, 51] 16 51
the point we are trying to find neighbors for  [16, 51]
neighboring cells are:  [[16, 52], [16, 50], [15, 51], [17, 51]]
dealing with [16, 52] at loop 0
dealing with [16, 50] at loop 1
dealing with [15, 51] at loop 2
[15, 51] is NOT a wall
dealing with [17, 51] at loop 3
[17, 51] is NOT a wall
neighbors of b [[15, 51], [17, 51]]
cost from [15, 51] to [16, 51] is 1
[21, 51] (21, 51)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 51] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 51] 21 51
the point we are trying to find neighbors for  [21, 51]
neighboring cells are:  [[21, 52], [21, 50], [20, 51], [22, 51]]
dealing with [21, 52] at loop 0
[21, 52] is NOT a wall
dealing with [21, 50] at loop 1
[21, 50] is NOT a wall
dealing with [20, 51] at loop 2
dealing with [22, 51] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
98[21, 51][21, 52]
the points are:  [21, 51] [21, 52]
type for point in is_valid_node  <class 'list'>
[21, 51] 21 51
type for point in is_valid_node  <class 'list'>
[21, 52] 21 52
the point we are trying to find neighbors for  [21, 52]
neighboring cells are:  [[21, 53], [21, 51], [20, 52], [22, 52]]
dealing with [21, 53] at loop 0
[21, 53] is NOT a wall
dealing with [21, 51] at loop 1
[21, 51] is NOT a wall
dealing with [20, 52] at loop 2
dealing with [22, 52] at loop 3
neighbors of b [[21, 53], [21, 51]]
cost from [21, 51] to [21, 52] is 1
<class 'int'>
11 40 51
11 40 51
51 <class 'int'>
11 40 51
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
98[21, 51][21, 50]
the points are:  [21, 51] [21, 50]
type for point in is_valid_node  <class 'list'>
[21, 51] 21 51
type for point in is_valid_node  <class 'list'>
[21, 50] 21 50
the point we are trying to find neighbors for  [21, 50]
neighboring cells are:  [[21, 51], [21, 49], [20, 50], [22, 50]]
dealing with [21, 51] at loop 0
[21, 51] is NOT a wall
dealing with [21, 49] at loop 1
[21, 49] is NOT a wall
dealing with [20, 50] at loop 2
dealing with [22, 50] at loop 3
neighbors of b [[21, 51], [21, 49]]
cost from [21, 51] to [21, 50] is 1
[14, 57] (14, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 57] 14 57
the point we are trying to find neighbors for  [14, 57]
neighboring cells are:  [[14, 58], [14, 56], [13, 57], [15, 57]]
dealing with [14, 58] at loop 0
dealing with [14, 56] at loop 1
dealing with [13, 57] at loop 2
[13, 57] is NOT a wall
dealing with [15, 57] at loop 3
[15, 57] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
101[14, 57][13, 57]
the points are:  [14, 57] [13, 57]
type for point in is_valid_node  <class 'list'>
[14, 57] 14 57
type for point in is_valid_node  <class 'list'>
[13, 57] 13 57
the point we are trying to find neighbors for  [13, 57]
neighboring cells are:  [[13, 58], [13, 56], [12, 57], [14, 57]]
dealing with [13, 58] at loop 0
dealing with [13, 56] at loop 1
dealing with [12, 57] at loop 2
[12, 57] is NOT a wall
dealing with [14, 57] at loop 3
[14, 57] is NOT a wall
neighbors of b [[12, 57], [14, 57]]
cost from [14, 57] to [13, 57] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
101[14, 57][15, 57]
the points are:  [14, 57] [15, 57]
type for point in is_valid_node  <class 'list'>
[14, 57] 14 57
type for point in is_valid_node  <class 'list'>
[15, 57] 15 57
the point we are trying to find neighbors for  [15, 57]
neighboring cells are:  [[15, 58], [15, 56], [14, 57], [16, 57]]
dealing with [15, 58] at loop 0
dealing with [15, 56] at loop 1
[15, 56] is NOT a wall
dealing with [14, 57] at loop 2
[14, 57] is NOT a wall
dealing with [16, 57] at loop 3
neighbors of b [[15, 56], [14, 57]]
cost from [14, 57] to [15, 57] is 1
<class 'int'>
5 45 50
5 45 50
50 <class 'int'>
5 45 50
[15, 52] (15, 52)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 52] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 52] 15 52
the point we are trying to find neighbors for  [15, 52]
neighboring cells are:  [[15, 53], [15, 51], [14, 52], [16, 52]]
dealing with [15, 53] at loop 0
[15, 53] is NOT a wall
dealing with [15, 51] at loop 1
[15, 51] is NOT a wall
dealing with [14, 52] at loop 2
dealing with [16, 52] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
105[15, 52][15, 53]
the points are:  [15, 52] [15, 53]
type for point in is_valid_node  <class 'list'>
[15, 52] 15 52
type for point in is_valid_node  <class 'list'>
[15, 53] 15 53
the point we are trying to find neighbors for  [15, 53]
neighboring cells are:  [[15, 54], [15, 52], [14, 53], [16, 53]]
dealing with [15, 54] at loop 0
dealing with [15, 52] at loop 1
[15, 52] is NOT a wall
dealing with [14, 53] at loop 2
[14, 53] is NOT a wall
dealing with [16, 53] at loop 3
neighbors of b [[15, 52], [14, 53]]
cost from [15, 52] to [15, 53] is 1
<class 'int'>
5 41 46
5 41 46
46 <class 'int'>
5 41 46
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
105[15, 52][15, 51]
the points are:  [15, 52] [15, 51]
type for point in is_valid_node  <class 'list'>
[15, 52] 15 52
type for point in is_valid_node  <class 'list'>
[15, 51] 15 51
the point we are trying to find neighbors for  [15, 51]
neighboring cells are:  [[15, 52], [15, 50], [14, 51], [16, 51]]
dealing with [15, 52] at loop 0
[15, 52] is NOT a wall
dealing with [15, 50] at loop 1
dealing with [14, 51] at loop 2
dealing with [16, 51] at loop 3
[16, 51] is NOT a wall
neighbors of b [[15, 52], [16, 51]]
cost from [15, 52] to [15, 51] is 1
[21, 52] (21, 52)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 52] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 52] 21 52
the point we are trying to find neighbors for  [21, 52]
neighboring cells are:  [[21, 53], [21, 51], [20, 52], [22, 52]]
dealing with [21, 53] at loop 0
[21, 53] is NOT a wall
dealing with [21, 51] at loop 1
[21, 51] is NOT a wall
dealing with [20, 52] at loop 2
dealing with [22, 52] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
99[21, 52][21, 53]
the points are:  [21, 52] [21, 53]
type for point in is_valid_node  <class 'list'>
[21, 52] 21 52
type for point in is_valid_node  <class 'list'>
[21, 53] 21 53
the point we are trying to find neighbors for  [21, 53]
neighboring cells are:  [[21, 54], [21, 52], [20, 53], [22, 53]]
dealing with [21, 54] at loop 0
[21, 54] is NOT a wall
dealing with [21, 52] at loop 1
[21, 52] is NOT a wall
dealing with [20, 53] at loop 2
dealing with [22, 53] at loop 3
neighbors of b [[21, 54], [21, 52]]
cost from [21, 52] to [21, 53] is 1
<class 'int'>
11 41 52
11 41 52
52 <class 'int'>
11 41 52
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
99[21, 52][21, 51]
the points are:  [21, 52] [21, 51]
type for point in is_valid_node  <class 'list'>
[21, 52] 21 52
type for point in is_valid_node  <class 'list'>
[21, 51] 21 51
the point we are trying to find neighbors for  [21, 51]
neighboring cells are:  [[21, 52], [21, 50], [20, 51], [22, 51]]
dealing with [21, 52] at loop 0
[21, 52] is NOT a wall
dealing with [21, 50] at loop 1
[21, 50] is NOT a wall
dealing with [20, 51] at loop 2
dealing with [22, 51] at loop 3
neighbors of b [[21, 52], [21, 50]]
cost from [21, 52] to [21, 51] is 1
[15, 53] (15, 53)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 53] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 53] 15 53
the point we are trying to find neighbors for  [15, 53]
neighboring cells are:  [[15, 54], [15, 52], [14, 53], [16, 53]]
dealing with [15, 54] at loop 0
dealing with [15, 52] at loop 1
[15, 52] is NOT a wall
dealing with [14, 53] at loop 2
[14, 53] is NOT a wall
dealing with [16, 53] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
106[15, 53][15, 52]
the points are:  [15, 53] [15, 52]
type for point in is_valid_node  <class 'list'>
[15, 53] 15 53
type for point in is_valid_node  <class 'list'>
[15, 52] 15 52
the point we are trying to find neighbors for  [15, 52]
neighboring cells are:  [[15, 53], [15, 51], [14, 52], [16, 52]]
dealing with [15, 53] at loop 0
[15, 53] is NOT a wall
dealing with [15, 51] at loop 1
[15, 51] is NOT a wall
dealing with [14, 52] at loop 2
dealing with [16, 52] at loop 3
neighbors of b [[15, 53], [15, 51]]
cost from [15, 53] to [15, 52] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
106[15, 53][14, 53]
the points are:  [15, 53] [14, 53]
type for point in is_valid_node  <class 'list'>
[15, 53] 15 53
type for point in is_valid_node  <class 'list'>
[14, 53] 14 53
the point we are trying to find neighbors for  [14, 53]
neighboring cells are:  [[14, 54], [14, 52], [13, 53], [15, 53]]
dealing with [14, 54] at loop 0
dealing with [14, 52] at loop 1
dealing with [13, 53] at loop 2
[13, 53] is NOT a wall
dealing with [15, 53] at loop 3
[15, 53] is NOT a wall
neighbors of b [[13, 53], [15, 53]]
cost from [15, 53] to [14, 53] is 1
<class 'int'>
4 41 45
4 41 45
45 <class 'int'>
4 41 45
[14, 53] (14, 53)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 53] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 53] 14 53
the point we are trying to find neighbors for  [14, 53]
neighboring cells are:  [[14, 54], [14, 52], [13, 53], [15, 53]]
dealing with [14, 54] at loop 0
dealing with [14, 52] at loop 1
dealing with [13, 53] at loop 2
[13, 53] is NOT a wall
dealing with [15, 53] at loop 3
[15, 53] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
107[14, 53][13, 53]
the points are:  [14, 53] [13, 53]
type for point in is_valid_node  <class 'list'>
[14, 53] 14 53
type for point in is_valid_node  <class 'list'>
[13, 53] 13 53
the point we are trying to find neighbors for  [13, 53]
neighboring cells are:  [[13, 54], [13, 52], [12, 53], [14, 53]]
dealing with [13, 54] at loop 0
[13, 54] is NOT a wall
dealing with [13, 52] at loop 1
dealing with [12, 53] at loop 2
dealing with [14, 53] at loop 3
[14, 53] is NOT a wall
neighbors of b [[13, 54], [14, 53]]
cost from [14, 53] to [13, 53] is 1
<class 'int'>
3 41 44
3 41 44
44 <class 'int'>
3 41 44
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
107[14, 53][15, 53]
the points are:  [14, 53] [15, 53]
type for point in is_valid_node  <class 'list'>
[14, 53] 14 53
type for point in is_valid_node  <class 'list'>
[15, 53] 15 53
the point we are trying to find neighbors for  [15, 53]
neighboring cells are:  [[15, 54], [15, 52], [14, 53], [16, 53]]
dealing with [15, 54] at loop 0
dealing with [15, 52] at loop 1
[15, 52] is NOT a wall
dealing with [14, 53] at loop 2
[14, 53] is NOT a wall
dealing with [16, 53] at loop 3
neighbors of b [[15, 52], [14, 53]]
cost from [14, 53] to [15, 53] is 1
[13, 53] (13, 53)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 53] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 53] 13 53
the point we are trying to find neighbors for  [13, 53]
neighboring cells are:  [[13, 54], [13, 52], [12, 53], [14, 53]]
dealing with [13, 54] at loop 0
[13, 54] is NOT a wall
dealing with [13, 52] at loop 1
dealing with [12, 53] at loop 2
dealing with [14, 53] at loop 3
[14, 53] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
108[13, 53][13, 54]
the points are:  [13, 53] [13, 54]
type for point in is_valid_node  <class 'list'>
[13, 53] 13 53
type for point in is_valid_node  <class 'list'>
[13, 54] 13 54
the point we are trying to find neighbors for  [13, 54]
neighboring cells are:  [[13, 55], [13, 53], [12, 54], [14, 54]]
dealing with [13, 55] at loop 0
[13, 55] is NOT a wall
dealing with [13, 53] at loop 1
[13, 53] is NOT a wall
dealing with [12, 54] at loop 2
dealing with [14, 54] at loop 3
neighbors of b [[13, 55], [13, 53]]
cost from [13, 53] to [13, 54] is 1
<class 'int'>
3 42 45
3 42 45
45 <class 'int'>
3 42 45
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
108[13, 53][14, 53]
the points are:  [13, 53] [14, 53]
type for point in is_valid_node  <class 'list'>
[13, 53] 13 53
type for point in is_valid_node  <class 'list'>
[14, 53] 14 53
the point we are trying to find neighbors for  [14, 53]
neighboring cells are:  [[14, 54], [14, 52], [13, 53], [15, 53]]
dealing with [14, 54] at loop 0
dealing with [14, 52] at loop 1
dealing with [13, 53] at loop 2
[13, 53] is NOT a wall
dealing with [15, 53] at loop 3
[15, 53] is NOT a wall
neighbors of b [[13, 53], [15, 53]]
cost from [13, 53] to [14, 53] is 1
[15, 57] (15, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 57] 15 57
the point we are trying to find neighbors for  [15, 57]
neighboring cells are:  [[15, 58], [15, 56], [14, 57], [16, 57]]
dealing with [15, 58] at loop 0
dealing with [15, 56] at loop 1
[15, 56] is NOT a wall
dealing with [14, 57] at loop 2
[14, 57] is NOT a wall
dealing with [16, 57] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
102[15, 57][15, 56]
the points are:  [15, 57] [15, 56]
type for point in is_valid_node  <class 'list'>
[15, 57] 15 57
type for point in is_valid_node  <class 'list'>
[15, 56] 15 56
the point we are trying to find neighbors for  [15, 56]
neighboring cells are:  [[15, 57], [15, 55], [14, 56], [16, 56]]
dealing with [15, 57] at loop 0
[15, 57] is NOT a wall
dealing with [15, 55] at loop 1
[15, 55] is NOT a wall
dealing with [14, 56] at loop 2
dealing with [16, 56] at loop 3
neighbors of b [[15, 57], [15, 55]]
cost from [15, 57] to [15, 56] is 1
<class 'int'>
5 44 49
5 44 49
49 <class 'int'>
5 44 49
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
102[15, 57][14, 57]
the points are:  [15, 57] [14, 57]
type for point in is_valid_node  <class 'list'>
[15, 57] 15 57
type for point in is_valid_node  <class 'list'>
[14, 57] 14 57
the point we are trying to find neighbors for  [14, 57]
neighboring cells are:  [[14, 58], [14, 56], [13, 57], [15, 57]]
dealing with [14, 58] at loop 0
dealing with [14, 56] at loop 1
dealing with [13, 57] at loop 2
[13, 57] is NOT a wall
dealing with [15, 57] at loop 3
[15, 57] is NOT a wall
neighbors of b [[13, 57], [15, 57]]
cost from [15, 57] to [14, 57] is 1
[15, 56] (15, 56)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 56] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 56] 15 56
the point we are trying to find neighbors for  [15, 56]
neighboring cells are:  [[15, 57], [15, 55], [14, 56], [16, 56]]
dealing with [15, 57] at loop 0
[15, 57] is NOT a wall
dealing with [15, 55] at loop 1
[15, 55] is NOT a wall
dealing with [14, 56] at loop 2
dealing with [16, 56] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
103[15, 56][15, 57]
the points are:  [15, 56] [15, 57]
type for point in is_valid_node  <class 'list'>
[15, 56] 15 56
type for point in is_valid_node  <class 'list'>
[15, 57] 15 57
the point we are trying to find neighbors for  [15, 57]
neighboring cells are:  [[15, 58], [15, 56], [14, 57], [16, 57]]
dealing with [15, 58] at loop 0
dealing with [15, 56] at loop 1
[15, 56] is NOT a wall
dealing with [14, 57] at loop 2
[14, 57] is NOT a wall
dealing with [16, 57] at loop 3
neighbors of b [[15, 56], [14, 57]]
cost from [15, 56] to [15, 57] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
103[15, 56][15, 55]
the points are:  [15, 56] [15, 55]
type for point in is_valid_node  <class 'list'>
[15, 56] 15 56
type for point in is_valid_node  <class 'list'>
[15, 55] 15 55
the point we are trying to find neighbors for  [15, 55]
neighboring cells are:  [[15, 56], [15, 54], [14, 55], [16, 55]]
dealing with [15, 56] at loop 0
[15, 56] is NOT a wall
dealing with [15, 54] at loop 1
dealing with [14, 55] at loop 2
[14, 55] is NOT a wall
dealing with [16, 55] at loop 3
neighbors of b [[15, 56], [14, 55]]
cost from [15, 56] to [15, 55] is 1
<class 'int'>
5 43 48
5 43 48
48 <class 'int'>
5 43 48
[15, 55] (15, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 55] 15 55
the point we are trying to find neighbors for  [15, 55]
neighboring cells are:  [[15, 56], [15, 54], [14, 55], [16, 55]]
dealing with [15, 56] at loop 0
[15, 56] is NOT a wall
dealing with [15, 54] at loop 1
dealing with [14, 55] at loop 2
[14, 55] is NOT a wall
dealing with [16, 55] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
104[15, 55][15, 56]
the points are:  [15, 55] [15, 56]
type for point in is_valid_node  <class 'list'>
[15, 55] 15 55
type for point in is_valid_node  <class 'list'>
[15, 56] 15 56
the point we are trying to find neighbors for  [15, 56]
neighboring cells are:  [[15, 57], [15, 55], [14, 56], [16, 56]]
dealing with [15, 57] at loop 0
[15, 57] is NOT a wall
dealing with [15, 55] at loop 1
[15, 55] is NOT a wall
dealing with [14, 56] at loop 2
dealing with [16, 56] at loop 3
neighbors of b [[15, 57], [15, 55]]
cost from [15, 55] to [15, 56] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
104[15, 55][14, 55]
the points are:  [15, 55] [14, 55]
type for point in is_valid_node  <class 'list'>
[15, 55] 15 55
type for point in is_valid_node  <class 'list'>
[14, 55] 14 55
the point we are trying to find neighbors for  [14, 55]
neighboring cells are:  [[14, 56], [14, 54], [13, 55], [15, 55]]
dealing with [14, 56] at loop 0
dealing with [14, 54] at loop 1
dealing with [13, 55] at loop 2
[13, 55] is NOT a wall
dealing with [15, 55] at loop 3
[15, 55] is NOT a wall
neighbors of b [[13, 55], [15, 55]]
cost from [15, 55] to [14, 55] is 1
<class 'int'>
4 43 47
4 43 47
47 <class 'int'>
4 43 47
[14, 55] (14, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 55] 14 55
the point we are trying to find neighbors for  [14, 55]
neighboring cells are:  [[14, 56], [14, 54], [13, 55], [15, 55]]
dealing with [14, 56] at loop 0
dealing with [14, 54] at loop 1
dealing with [13, 55] at loop 2
[13, 55] is NOT a wall
dealing with [15, 55] at loop 3
[15, 55] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
105[14, 55][13, 55]
the points are:  [14, 55] [13, 55]
type for point in is_valid_node  <class 'list'>
[14, 55] 14 55
type for point in is_valid_node  <class 'list'>
[13, 55] 13 55
the point we are trying to find neighbors for  [13, 55]
neighboring cells are:  [[13, 56], [13, 54], [12, 55], [14, 55]]
dealing with [13, 56] at loop 0
dealing with [13, 54] at loop 1
[13, 54] is NOT a wall
dealing with [12, 55] at loop 2
dealing with [14, 55] at loop 3
[14, 55] is NOT a wall
neighbors of b [[13, 54], [14, 55]]
cost from [14, 55] to [13, 55] is 1
<class 'int'>
3 43 46
3 43 46
46 <class 'int'>
3 43 46
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
105[14, 55][15, 55]
the points are:  [14, 55] [15, 55]
type for point in is_valid_node  <class 'list'>
[14, 55] 14 55
type for point in is_valid_node  <class 'list'>
[15, 55] 15 55
the point we are trying to find neighbors for  [15, 55]
neighboring cells are:  [[15, 56], [15, 54], [14, 55], [16, 55]]
dealing with [15, 56] at loop 0
[15, 56] is NOT a wall
dealing with [15, 54] at loop 1
dealing with [14, 55] at loop 2
[14, 55] is NOT a wall
dealing with [16, 55] at loop 3
neighbors of b [[15, 56], [14, 55]]
cost from [14, 55] to [15, 55] is 1
[13, 55] (13, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 55] 13 55
the point we are trying to find neighbors for  [13, 55]
neighboring cells are:  [[13, 56], [13, 54], [12, 55], [14, 55]]
dealing with [13, 56] at loop 0
dealing with [13, 54] at loop 1
[13, 54] is NOT a wall
dealing with [12, 55] at loop 2
dealing with [14, 55] at loop 3
[14, 55] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
106[13, 55][13, 54]
the points are:  [13, 55] [13, 54]
type for point in is_valid_node  <class 'list'>
[13, 55] 13 55
type for point in is_valid_node  <class 'list'>
[13, 54] 13 54
the point we are trying to find neighbors for  [13, 54]
neighboring cells are:  [[13, 55], [13, 53], [12, 54], [14, 54]]
dealing with [13, 55] at loop 0
[13, 55] is NOT a wall
dealing with [13, 53] at loop 1
[13, 53] is NOT a wall
dealing with [12, 54] at loop 2
dealing with [14, 54] at loop 3
neighbors of b [[13, 55], [13, 53]]
cost from [13, 55] to [13, 54] is 1
<class 'int'>
3 42 45
3 42 45
45 <class 'int'>
3 42 45
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
106[13, 55][14, 55]
the points are:  [13, 55] [14, 55]
type for point in is_valid_node  <class 'list'>
[13, 55] 13 55
type for point in is_valid_node  <class 'list'>
[14, 55] 14 55
the point we are trying to find neighbors for  [14, 55]
neighboring cells are:  [[14, 56], [14, 54], [13, 55], [15, 55]]
dealing with [14, 56] at loop 0
dealing with [14, 54] at loop 1
dealing with [13, 55] at loop 2
[13, 55] is NOT a wall
dealing with [15, 55] at loop 3
[15, 55] is NOT a wall
neighbors of b [[13, 55], [15, 55]]
cost from [13, 55] to [14, 55] is 1
[13, 54] (13, 54)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 54] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 54] 13 54
the point we are trying to find neighbors for  [13, 54]
neighboring cells are:  [[13, 55], [13, 53], [12, 54], [14, 54]]
dealing with [13, 55] at loop 0
[13, 55] is NOT a wall
dealing with [13, 53] at loop 1
[13, 53] is NOT a wall
dealing with [12, 54] at loop 2
dealing with [14, 54] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
107[13, 54][13, 55]
the points are:  [13, 54] [13, 55]
type for point in is_valid_node  <class 'list'>
[13, 54] 13 54
type for point in is_valid_node  <class 'list'>
[13, 55] 13 55
the point we are trying to find neighbors for  [13, 55]
neighboring cells are:  [[13, 56], [13, 54], [12, 55], [14, 55]]
dealing with [13, 56] at loop 0
dealing with [13, 54] at loop 1
[13, 54] is NOT a wall
dealing with [12, 55] at loop 2
dealing with [14, 55] at loop 3
[14, 55] is NOT a wall
neighbors of b [[13, 54], [14, 55]]
cost from [13, 54] to [13, 55] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
107[13, 54][13, 53]
the points are:  [13, 54] [13, 53]
type for point in is_valid_node  <class 'list'>
[13, 54] 13 54
type for point in is_valid_node  <class 'list'>
[13, 53] 13 53
the point we are trying to find neighbors for  [13, 53]
neighboring cells are:  [[13, 54], [13, 52], [12, 53], [14, 53]]
dealing with [13, 54] at loop 0
[13, 54] is NOT a wall
dealing with [13, 52] at loop 1
dealing with [12, 53] at loop 2
dealing with [14, 53] at loop 3
[14, 53] is NOT a wall
neighbors of b [[13, 54], [14, 53]]
cost from [13, 54] to [13, 53] is 1
[21, 53] (21, 53)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 53] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 53] 21 53
the point we are trying to find neighbors for  [21, 53]
neighboring cells are:  [[21, 54], [21, 52], [20, 53], [22, 53]]
dealing with [21, 54] at loop 0
[21, 54] is NOT a wall
dealing with [21, 52] at loop 1
[21, 52] is NOT a wall
dealing with [20, 53] at loop 2
dealing with [22, 53] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
100[21, 53][21, 54]
the points are:  [21, 53] [21, 54]
type for point in is_valid_node  <class 'list'>
[21, 53] 21 53
type for point in is_valid_node  <class 'list'>
[21, 54] 21 54
the point we are trying to find neighbors for  [21, 54]
neighboring cells are:  [[21, 55], [21, 53], [20, 54], [22, 54]]
dealing with [21, 55] at loop 0
[21, 55] is NOT a wall
dealing with [21, 53] at loop 1
[21, 53] is NOT a wall
dealing with [20, 54] at loop 2
dealing with [22, 54] at loop 3
neighbors of b [[21, 55], [21, 53]]
cost from [21, 53] to [21, 54] is 1
<class 'int'>
11 42 53
11 42 53
53 <class 'int'>
11 42 53
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
100[21, 53][21, 52]
the points are:  [21, 53] [21, 52]
type for point in is_valid_node  <class 'list'>
[21, 53] 21 53
type for point in is_valid_node  <class 'list'>
[21, 52] 21 52
the point we are trying to find neighbors for  [21, 52]
neighboring cells are:  [[21, 53], [21, 51], [20, 52], [22, 52]]
dealing with [21, 53] at loop 0
[21, 53] is NOT a wall
dealing with [21, 51] at loop 1
[21, 51] is NOT a wall
dealing with [20, 52] at loop 2
dealing with [22, 52] at loop 3
neighbors of b [[21, 53], [21, 51]]
cost from [21, 53] to [21, 52] is 1
[13, 54] (13, 54)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 54] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 54] 13 54
the point we are trying to find neighbors for  [13, 54]
neighboring cells are:  [[13, 55], [13, 53], [12, 54], [14, 54]]
dealing with [13, 55] at loop 0
[13, 55] is NOT a wall
dealing with [13, 53] at loop 1
[13, 53] is NOT a wall
dealing with [12, 54] at loop 2
dealing with [14, 54] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
107[13, 54][13, 55]
the points are:  [13, 54] [13, 55]
type for point in is_valid_node  <class 'list'>
[13, 54] 13 54
type for point in is_valid_node  <class 'list'>
[13, 55] 13 55
the point we are trying to find neighbors for  [13, 55]
neighboring cells are:  [[13, 56], [13, 54], [12, 55], [14, 55]]
dealing with [13, 56] at loop 0
dealing with [13, 54] at loop 1
[13, 54] is NOT a wall
dealing with [12, 55] at loop 2
dealing with [14, 55] at loop 3
[14, 55] is NOT a wall
neighbors of b [[13, 54], [14, 55]]
cost from [13, 54] to [13, 55] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
107[13, 54][13, 53]
the points are:  [13, 54] [13, 53]
type for point in is_valid_node  <class 'list'>
[13, 54] 13 54
type for point in is_valid_node  <class 'list'>
[13, 53] 13 53
the point we are trying to find neighbors for  [13, 53]
neighboring cells are:  [[13, 54], [13, 52], [12, 53], [14, 53]]
dealing with [13, 54] at loop 0
[13, 54] is NOT a wall
dealing with [13, 52] at loop 1
dealing with [12, 53] at loop 2
dealing with [14, 53] at loop 3
[14, 53] is NOT a wall
neighbors of b [[13, 54], [14, 53]]
cost from [13, 54] to [13, 53] is 1
[21, 54] (21, 54)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 54] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 54] 21 54
the point we are trying to find neighbors for  [21, 54]
neighboring cells are:  [[21, 55], [21, 53], [20, 54], [22, 54]]
dealing with [21, 55] at loop 0
[21, 55] is NOT a wall
dealing with [21, 53] at loop 1
[21, 53] is NOT a wall
dealing with [20, 54] at loop 2
dealing with [22, 54] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
101[21, 54][21, 55]
the points are:  [21, 54] [21, 55]
type for point in is_valid_node  <class 'list'>
[21, 54] 21 54
type for point in is_valid_node  <class 'list'>
[21, 55] 21 55
the point we are trying to find neighbors for  [21, 55]
neighboring cells are:  [[21, 56], [21, 54], [20, 55], [22, 55]]
dealing with [21, 56] at loop 0
dealing with [21, 54] at loop 1
[21, 54] is NOT a wall
dealing with [20, 55] at loop 2
[20, 55] is NOT a wall
dealing with [22, 55] at loop 3
neighbors of b [[21, 54], [20, 55]]
cost from [21, 54] to [21, 55] is 1
<class 'int'>
11 43 54
11 43 54
54 <class 'int'>
11 43 54
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
101[21, 54][21, 53]
the points are:  [21, 54] [21, 53]
type for point in is_valid_node  <class 'list'>
[21, 54] 21 54
type for point in is_valid_node  <class 'list'>
[21, 53] 21 53
the point we are trying to find neighbors for  [21, 53]
neighboring cells are:  [[21, 54], [21, 52], [20, 53], [22, 53]]
dealing with [21, 54] at loop 0
[21, 54] is NOT a wall
dealing with [21, 52] at loop 1
[21, 52] is NOT a wall
dealing with [20, 53] at loop 2
dealing with [22, 53] at loop 3
neighbors of b [[21, 54], [21, 52]]
cost from [21, 54] to [21, 53] is 1
[21, 55] (21, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 55] 21 55
the point we are trying to find neighbors for  [21, 55]
neighboring cells are:  [[21, 56], [21, 54], [20, 55], [22, 55]]
dealing with [21, 56] at loop 0
dealing with [21, 54] at loop 1
[21, 54] is NOT a wall
dealing with [20, 55] at loop 2
[20, 55] is NOT a wall
dealing with [22, 55] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
102[21, 55][21, 54]
the points are:  [21, 55] [21, 54]
type for point in is_valid_node  <class 'list'>
[21, 55] 21 55
type for point in is_valid_node  <class 'list'>
[21, 54] 21 54
the point we are trying to find neighbors for  [21, 54]
neighboring cells are:  [[21, 55], [21, 53], [20, 54], [22, 54]]
dealing with [21, 55] at loop 0
[21, 55] is NOT a wall
dealing with [21, 53] at loop 1
[21, 53] is NOT a wall
dealing with [20, 54] at loop 2
dealing with [22, 54] at loop 3
neighbors of b [[21, 55], [21, 53]]
cost from [21, 55] to [21, 54] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
102[21, 55][20, 55]
the points are:  [21, 55] [20, 55]
type for point in is_valid_node  <class 'list'>
[21, 55] 21 55
type for point in is_valid_node  <class 'list'>
[20, 55] 20 55
the point we are trying to find neighbors for  [20, 55]
neighboring cells are:  [[20, 56], [20, 54], [19, 55], [21, 55]]
dealing with [20, 56] at loop 0
dealing with [20, 54] at loop 1
dealing with [19, 55] at loop 2
[19, 55] is NOT a wall
dealing with [21, 55] at loop 3
[21, 55] is NOT a wall
neighbors of b [[19, 55], [21, 55]]
cost from [21, 55] to [20, 55] is 1
<class 'int'>
10 43 53
10 43 53
53 <class 'int'>
10 43 53
[20, 55] (20, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[20, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[20, 55] 20 55
the point we are trying to find neighbors for  [20, 55]
neighboring cells are:  [[20, 56], [20, 54], [19, 55], [21, 55]]
dealing with [20, 56] at loop 0
dealing with [20, 54] at loop 1
dealing with [19, 55] at loop 2
[19, 55] is NOT a wall
dealing with [21, 55] at loop 3
[21, 55] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
103[20, 55][19, 55]
the points are:  [20, 55] [19, 55]
type for point in is_valid_node  <class 'list'>
[20, 55] 20 55
type for point in is_valid_node  <class 'list'>
[19, 55] 19 55
the point we are trying to find neighbors for  [19, 55]
neighboring cells are:  [[19, 56], [19, 54], [18, 55], [20, 55]]
dealing with [19, 56] at loop 0
dealing with [19, 54] at loop 1
dealing with [18, 55] at loop 2
[18, 55] is NOT a wall
dealing with [20, 55] at loop 3
[20, 55] is NOT a wall
neighbors of b [[18, 55], [20, 55]]
cost from [20, 55] to [19, 55] is 1
<class 'int'>
9 43 52
9 43 52
52 <class 'int'>
9 43 52
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
103[20, 55][21, 55]
the points are:  [20, 55] [21, 55]
type for point in is_valid_node  <class 'list'>
[20, 55] 20 55
type for point in is_valid_node  <class 'list'>
[21, 55] 21 55
the point we are trying to find neighbors for  [21, 55]
neighboring cells are:  [[21, 56], [21, 54], [20, 55], [22, 55]]
dealing with [21, 56] at loop 0
dealing with [21, 54] at loop 1
[21, 54] is NOT a wall
dealing with [20, 55] at loop 2
[20, 55] is NOT a wall
dealing with [22, 55] at loop 3
neighbors of b [[21, 54], [20, 55]]
cost from [20, 55] to [21, 55] is 1
[19, 55] (19, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 55] 19 55
the point we are trying to find neighbors for  [19, 55]
neighboring cells are:  [[19, 56], [19, 54], [18, 55], [20, 55]]
dealing with [19, 56] at loop 0
dealing with [19, 54] at loop 1
dealing with [18, 55] at loop 2
[18, 55] is NOT a wall
dealing with [20, 55] at loop 3
[20, 55] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
104[19, 55][18, 55]
the points are:  [19, 55] [18, 55]
type for point in is_valid_node  <class 'list'>
[19, 55] 19 55
type for point in is_valid_node  <class 'list'>
[18, 55] 18 55
the point we are trying to find neighbors for  [18, 55]
neighboring cells are:  [[18, 56], [18, 54], [17, 55], [19, 55]]
dealing with [18, 56] at loop 0
dealing with [18, 54] at loop 1
dealing with [17, 55] at loop 2
[17, 55] is NOT a wall
dealing with [19, 55] at loop 3
[19, 55] is NOT a wall
neighbors of b [[17, 55], [19, 55]]
cost from [19, 55] to [18, 55] is 1
<class 'int'>
8 43 51
8 43 51
51 <class 'int'>
8 43 51
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
104[19, 55][20, 55]
the points are:  [19, 55] [20, 55]
type for point in is_valid_node  <class 'list'>
[19, 55] 19 55
type for point in is_valid_node  <class 'list'>
[20, 55] 20 55
the point we are trying to find neighbors for  [20, 55]
neighboring cells are:  [[20, 56], [20, 54], [19, 55], [21, 55]]
dealing with [20, 56] at loop 0
dealing with [20, 54] at loop 1
dealing with [19, 55] at loop 2
[19, 55] is NOT a wall
dealing with [21, 55] at loop 3
[21, 55] is NOT a wall
neighbors of b [[19, 55], [21, 55]]
cost from [19, 55] to [20, 55] is 1
[18, 55] (18, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 55] 18 55
the point we are trying to find neighbors for  [18, 55]
neighboring cells are:  [[18, 56], [18, 54], [17, 55], [19, 55]]
dealing with [18, 56] at loop 0
dealing with [18, 54] at loop 1
dealing with [17, 55] at loop 2
[17, 55] is NOT a wall
dealing with [19, 55] at loop 3
[19, 55] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
105[18, 55][17, 55]
the points are:  [18, 55] [17, 55]
type for point in is_valid_node  <class 'list'>
[18, 55] 18 55
type for point in is_valid_node  <class 'list'>
[17, 55] 17 55
the point we are trying to find neighbors for  [17, 55]
neighboring cells are:  [[17, 56], [17, 54], [16, 55], [18, 55]]
dealing with [17, 56] at loop 0
[17, 56] is NOT a wall
dealing with [17, 54] at loop 1
[17, 54] is NOT a wall
dealing with [16, 55] at loop 2
dealing with [18, 55] at loop 3
[18, 55] is NOT a wall
neighbors of b [[17, 56], [17, 54], [18, 55]]
cost from [18, 55] to [17, 55] is 1
<class 'int'>
7 43 50
7 43 50
50 <class 'int'>
7 43 50
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
105[18, 55][19, 55]
the points are:  [18, 55] [19, 55]
type for point in is_valid_node  <class 'list'>
[18, 55] 18 55
type for point in is_valid_node  <class 'list'>
[19, 55] 19 55
the point we are trying to find neighbors for  [19, 55]
neighboring cells are:  [[19, 56], [19, 54], [18, 55], [20, 55]]
dealing with [19, 56] at loop 0
dealing with [19, 54] at loop 1
dealing with [18, 55] at loop 2
[18, 55] is NOT a wall
dealing with [20, 55] at loop 3
[20, 55] is NOT a wall
neighbors of b [[18, 55], [20, 55]]
cost from [18, 55] to [19, 55] is 1
[17, 55] (17, 55)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 55] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 55] 17 55
the point we are trying to find neighbors for  [17, 55]
neighboring cells are:  [[17, 56], [17, 54], [16, 55], [18, 55]]
dealing with [17, 56] at loop 0
[17, 56] is NOT a wall
dealing with [17, 54] at loop 1
[17, 54] is NOT a wall
dealing with [16, 55] at loop 2
dealing with [18, 55] at loop 3
[18, 55] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
106[17, 55][17, 56]
the points are:  [17, 55] [17, 56]
type for point in is_valid_node  <class 'list'>
[17, 55] 17 55
type for point in is_valid_node  <class 'list'>
[17, 56] 17 56
the point we are trying to find neighbors for  [17, 56]
neighboring cells are:  [[17, 57], [17, 55], [16, 56], [18, 56]]
dealing with [17, 57] at loop 0
[17, 57] is NOT a wall
dealing with [17, 55] at loop 1
[17, 55] is NOT a wall
dealing with [16, 56] at loop 2
dealing with [18, 56] at loop 3
neighbors of b [[17, 57], [17, 55]]
cost from [17, 55] to [17, 56] is 1
<class 'int'>
7 44 51
7 44 51
51 <class 'int'>
7 44 51
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
106[17, 55][17, 54]
the points are:  [17, 55] [17, 54]
type for point in is_valid_node  <class 'list'>
[17, 55] 17 55
type for point in is_valid_node  <class 'list'>
[17, 54] 17 54
the point we are trying to find neighbors for  [17, 54]
neighboring cells are:  [[17, 55], [17, 53], [16, 54], [18, 54]]
dealing with [17, 55] at loop 0
[17, 55] is NOT a wall
dealing with [17, 53] at loop 1
[17, 53] is NOT a wall
dealing with [16, 54] at loop 2
dealing with [18, 54] at loop 3
neighbors of b [[17, 55], [17, 53]]
cost from [17, 55] to [17, 54] is 1
<class 'int'>
7 42 49
7 42 49
49 <class 'int'>
7 42 49
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
106[17, 55][18, 55]
the points are:  [17, 55] [18, 55]
type for point in is_valid_node  <class 'list'>
[17, 55] 17 55
type for point in is_valid_node  <class 'list'>
[18, 55] 18 55
the point we are trying to find neighbors for  [18, 55]
neighboring cells are:  [[18, 56], [18, 54], [17, 55], [19, 55]]
dealing with [18, 56] at loop 0
dealing with [18, 54] at loop 1
dealing with [17, 55] at loop 2
[17, 55] is NOT a wall
dealing with [19, 55] at loop 3
[19, 55] is NOT a wall
neighbors of b [[17, 55], [19, 55]]
cost from [17, 55] to [18, 55] is 1
[17, 54] (17, 54)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 54] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 54] 17 54
the point we are trying to find neighbors for  [17, 54]
neighboring cells are:  [[17, 55], [17, 53], [16, 54], [18, 54]]
dealing with [17, 55] at loop 0
[17, 55] is NOT a wall
dealing with [17, 53] at loop 1
[17, 53] is NOT a wall
dealing with [16, 54] at loop 2
dealing with [18, 54] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
107[17, 54][17, 55]
the points are:  [17, 54] [17, 55]
type for point in is_valid_node  <class 'list'>
[17, 54] 17 54
type for point in is_valid_node  <class 'list'>
[17, 55] 17 55
the point we are trying to find neighbors for  [17, 55]
neighboring cells are:  [[17, 56], [17, 54], [16, 55], [18, 55]]
dealing with [17, 56] at loop 0
[17, 56] is NOT a wall
dealing with [17, 54] at loop 1
[17, 54] is NOT a wall
dealing with [16, 55] at loop 2
dealing with [18, 55] at loop 3
[18, 55] is NOT a wall
neighbors of b [[17, 56], [17, 54], [18, 55]]
cost from [17, 54] to [17, 55] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
107[17, 54][17, 53]
the points are:  [17, 54] [17, 53]
type for point in is_valid_node  <class 'list'>
[17, 54] 17 54
type for point in is_valid_node  <class 'list'>
[17, 53] 17 53
the point we are trying to find neighbors for  [17, 53]
neighboring cells are:  [[17, 54], [17, 52], [16, 53], [18, 53]]
dealing with [17, 54] at loop 0
[17, 54] is NOT a wall
dealing with [17, 52] at loop 1
dealing with [16, 53] at loop 2
dealing with [18, 53] at loop 3
[18, 53] is NOT a wall
neighbors of b [[17, 54], [18, 53]]
cost from [17, 54] to [17, 53] is 1
<class 'int'>
7 41 48
7 41 48
48 <class 'int'>
7 41 48
[17, 53] (17, 53)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 53] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 53] 17 53
the point we are trying to find neighbors for  [17, 53]
neighboring cells are:  [[17, 54], [17, 52], [16, 53], [18, 53]]
dealing with [17, 54] at loop 0
[17, 54] is NOT a wall
dealing with [17, 52] at loop 1
dealing with [16, 53] at loop 2
dealing with [18, 53] at loop 3
[18, 53] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
108[17, 53][17, 54]
the points are:  [17, 53] [17, 54]
type for point in is_valid_node  <class 'list'>
[17, 53] 17 53
type for point in is_valid_node  <class 'list'>
[17, 54] 17 54
the point we are trying to find neighbors for  [17, 54]
neighboring cells are:  [[17, 55], [17, 53], [16, 54], [18, 54]]
dealing with [17, 55] at loop 0
[17, 55] is NOT a wall
dealing with [17, 53] at loop 1
[17, 53] is NOT a wall
dealing with [16, 54] at loop 2
dealing with [18, 54] at loop 3
neighbors of b [[17, 55], [17, 53]]
cost from [17, 53] to [17, 54] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
108[17, 53][18, 53]
the points are:  [17, 53] [18, 53]
type for point in is_valid_node  <class 'list'>
[17, 53] 17 53
type for point in is_valid_node  <class 'list'>
[18, 53] 18 53
the point we are trying to find neighbors for  [18, 53]
neighboring cells are:  [[18, 54], [18, 52], [17, 53], [19, 53]]
dealing with [18, 54] at loop 0
dealing with [18, 52] at loop 1
dealing with [17, 53] at loop 2
[17, 53] is NOT a wall
dealing with [19, 53] at loop 3
[19, 53] is NOT a wall
neighbors of b [[17, 53], [19, 53]]
cost from [17, 53] to [18, 53] is 1
<class 'int'>
8 41 49
8 41 49
49 <class 'int'>
8 41 49
[17, 56] (17, 56)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 56] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 56] 17 56
the point we are trying to find neighbors for  [17, 56]
neighboring cells are:  [[17, 57], [17, 55], [16, 56], [18, 56]]
dealing with [17, 57] at loop 0
[17, 57] is NOT a wall
dealing with [17, 55] at loop 1
[17, 55] is NOT a wall
dealing with [16, 56] at loop 2
dealing with [18, 56] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
107[17, 56][17, 57]
the points are:  [17, 56] [17, 57]
type for point in is_valid_node  <class 'list'>
[17, 56] 17 56
type for point in is_valid_node  <class 'list'>
[17, 57] 17 57
the point we are trying to find neighbors for  [17, 57]
neighboring cells are:  [[17, 58], [17, 56], [16, 57], [18, 57]]
dealing with [17, 58] at loop 0
[17, 58] is NOT a wall
dealing with [17, 56] at loop 1
[17, 56] is NOT a wall
dealing with [16, 57] at loop 2
dealing with [18, 57] at loop 3
neighbors of b [[17, 58], [17, 56]]
cost from [17, 56] to [17, 57] is 1
<class 'int'>
7 45 52
7 45 52
52 <class 'int'>
7 45 52
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
107[17, 56][17, 55]
the points are:  [17, 56] [17, 55]
type for point in is_valid_node  <class 'list'>
[17, 56] 17 56
type for point in is_valid_node  <class 'list'>
[17, 55] 17 55
the point we are trying to find neighbors for  [17, 55]
neighboring cells are:  [[17, 56], [17, 54], [16, 55], [18, 55]]
dealing with [17, 56] at loop 0
[17, 56] is NOT a wall
dealing with [17, 54] at loop 1
[17, 54] is NOT a wall
dealing with [16, 55] at loop 2
dealing with [18, 55] at loop 3
[18, 55] is NOT a wall
neighbors of b [[17, 56], [17, 54], [18, 55]]
cost from [17, 56] to [17, 55] is 1
[18, 53] (18, 53)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 53] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 53] 18 53
the point we are trying to find neighbors for  [18, 53]
neighboring cells are:  [[18, 54], [18, 52], [17, 53], [19, 53]]
dealing with [18, 54] at loop 0
dealing with [18, 52] at loop 1
dealing with [17, 53] at loop 2
[17, 53] is NOT a wall
dealing with [19, 53] at loop 3
[19, 53] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
109[18, 53][17, 53]
the points are:  [18, 53] [17, 53]
type for point in is_valid_node  <class 'list'>
[18, 53] 18 53
type for point in is_valid_node  <class 'list'>
[17, 53] 17 53
the point we are trying to find neighbors for  [17, 53]
neighboring cells are:  [[17, 54], [17, 52], [16, 53], [18, 53]]
dealing with [17, 54] at loop 0
[17, 54] is NOT a wall
dealing with [17, 52] at loop 1
dealing with [16, 53] at loop 2
dealing with [18, 53] at loop 3
[18, 53] is NOT a wall
neighbors of b [[17, 54], [18, 53]]
cost from [18, 53] to [17, 53] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
109[18, 53][19, 53]
the points are:  [18, 53] [19, 53]
type for point in is_valid_node  <class 'list'>
[18, 53] 18 53
type for point in is_valid_node  <class 'list'>
[19, 53] 19 53
the point we are trying to find neighbors for  [19, 53]
neighboring cells are:  [[19, 54], [19, 52], [18, 53], [20, 53]]
dealing with [19, 54] at loop 0
dealing with [19, 52] at loop 1
dealing with [18, 53] at loop 2
[18, 53] is NOT a wall
dealing with [20, 53] at loop 3
neighbors of b [[18, 53]]
cost from [18, 53] to [19, 53] is 1
<class 'int'>
9 41 50
9 41 50
50 <class 'int'>
9 41 50
[17, 57] (17, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 57] 17 57
the point we are trying to find neighbors for  [17, 57]
neighboring cells are:  [[17, 58], [17, 56], [16, 57], [18, 57]]
dealing with [17, 58] at loop 0
[17, 58] is NOT a wall
dealing with [17, 56] at loop 1
[17, 56] is NOT a wall
dealing with [16, 57] at loop 2
dealing with [18, 57] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
108[17, 57][17, 58]
the points are:  [17, 57] [17, 58]
type for point in is_valid_node  <class 'list'>
[17, 57] 17 57
type for point in is_valid_node  <class 'list'>
[17, 58] 17 58
the point we are trying to find neighbors for  [17, 58]
neighboring cells are:  [[17, 59], [17, 57], [16, 58], [18, 58]]
dealing with [17, 59] at loop 0
[17, 59] is NOT a wall
dealing with [17, 57] at loop 1
[17, 57] is NOT a wall
dealing with [16, 58] at loop 2
dealing with [18, 58] at loop 3
neighbors of b [[17, 59], [17, 57]]
cost from [17, 57] to [17, 58] is 1
<class 'int'>
7 46 53
7 46 53
53 <class 'int'>
7 46 53
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
108[17, 57][17, 56]
the points are:  [17, 57] [17, 56]
type for point in is_valid_node  <class 'list'>
[17, 57] 17 57
type for point in is_valid_node  <class 'list'>
[17, 56] 17 56
the point we are trying to find neighbors for  [17, 56]
neighboring cells are:  [[17, 57], [17, 55], [16, 56], [18, 56]]
dealing with [17, 57] at loop 0
[17, 57] is NOT a wall
dealing with [17, 55] at loop 1
[17, 55] is NOT a wall
dealing with [16, 56] at loop 2
dealing with [18, 56] at loop 3
neighbors of b [[17, 57], [17, 55]]
cost from [17, 57] to [17, 56] is 1
[19, 53] (19, 53)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 53] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 53] 19 53
the point we are trying to find neighbors for  [19, 53]
neighboring cells are:  [[19, 54], [19, 52], [18, 53], [20, 53]]
dealing with [19, 54] at loop 0
dealing with [19, 52] at loop 1
dealing with [18, 53] at loop 2
[18, 53] is NOT a wall
dealing with [20, 53] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
110[19, 53][18, 53]
the points are:  [19, 53] [18, 53]
type for point in is_valid_node  <class 'list'>
[19, 53] 19 53
type for point in is_valid_node  <class 'list'>
[18, 53] 18 53
the point we are trying to find neighbors for  [18, 53]
neighboring cells are:  [[18, 54], [18, 52], [17, 53], [19, 53]]
dealing with [18, 54] at loop 0
dealing with [18, 52] at loop 1
dealing with [17, 53] at loop 2
[17, 53] is NOT a wall
dealing with [19, 53] at loop 3
[19, 53] is NOT a wall
neighbors of b [[17, 53], [19, 53]]
cost from [19, 53] to [18, 53] is 1
[17, 58] (17, 58)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 58] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 58] 17 58
the point we are trying to find neighbors for  [17, 58]
neighboring cells are:  [[17, 59], [17, 57], [16, 58], [18, 58]]
dealing with [17, 59] at loop 0
[17, 59] is NOT a wall
dealing with [17, 57] at loop 1
[17, 57] is NOT a wall
dealing with [16, 58] at loop 2
dealing with [18, 58] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
109[17, 58][17, 59]
the points are:  [17, 58] [17, 59]
type for point in is_valid_node  <class 'list'>
[17, 58] 17 58
type for point in is_valid_node  <class 'list'>
[17, 59] 17 59
the point we are trying to find neighbors for  [17, 59]
neighboring cells are:  [[17, 60], [17, 58], [16, 59], [18, 59]]
dealing with [17, 60] at loop 0
dealing with [17, 58] at loop 1
[17, 58] is NOT a wall
dealing with [16, 59] at loop 2
[16, 59] is NOT a wall
dealing with [18, 59] at loop 3
[18, 59] is NOT a wall
neighbors of b [[17, 58], [16, 59], [18, 59]]
cost from [17, 58] to [17, 59] is 1
<class 'int'>
7 47 54
7 47 54
54 <class 'int'>
7 47 54
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
109[17, 58][17, 57]
the points are:  [17, 58] [17, 57]
type for point in is_valid_node  <class 'list'>
[17, 58] 17 58
type for point in is_valid_node  <class 'list'>
[17, 57] 17 57
the point we are trying to find neighbors for  [17, 57]
neighboring cells are:  [[17, 58], [17, 56], [16, 57], [18, 57]]
dealing with [17, 58] at loop 0
[17, 58] is NOT a wall
dealing with [17, 56] at loop 1
[17, 56] is NOT a wall
dealing with [16, 57] at loop 2
dealing with [18, 57] at loop 3
neighbors of b [[17, 58], [17, 56]]
cost from [17, 58] to [17, 57] is 1
[17, 59] (17, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[17, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[17, 59] 17 59
the point we are trying to find neighbors for  [17, 59]
neighboring cells are:  [[17, 60], [17, 58], [16, 59], [18, 59]]
dealing with [17, 60] at loop 0
dealing with [17, 58] at loop 1
[17, 58] is NOT a wall
dealing with [16, 59] at loop 2
[16, 59] is NOT a wall
dealing with [18, 59] at loop 3
[18, 59] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
110[17, 59][17, 58]
the points are:  [17, 59] [17, 58]
type for point in is_valid_node  <class 'list'>
[17, 59] 17 59
type for point in is_valid_node  <class 'list'>
[17, 58] 17 58
the point we are trying to find neighbors for  [17, 58]
neighboring cells are:  [[17, 59], [17, 57], [16, 58], [18, 58]]
dealing with [17, 59] at loop 0
[17, 59] is NOT a wall
dealing with [17, 57] at loop 1
[17, 57] is NOT a wall
dealing with [16, 58] at loop 2
dealing with [18, 58] at loop 3
neighbors of b [[17, 59], [17, 57]]
cost from [17, 59] to [17, 58] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
110[17, 59][16, 59]
the points are:  [17, 59] [16, 59]
type for point in is_valid_node  <class 'list'>
[17, 59] 17 59
type for point in is_valid_node  <class 'list'>
[16, 59] 16 59
the point we are trying to find neighbors for  [16, 59]
neighboring cells are:  [[16, 60], [16, 58], [15, 59], [17, 59]]
dealing with [16, 60] at loop 0
dealing with [16, 58] at loop 1
dealing with [15, 59] at loop 2
[15, 59] is NOT a wall
dealing with [17, 59] at loop 3
[17, 59] is NOT a wall
neighbors of b [[15, 59], [17, 59]]
cost from [17, 59] to [16, 59] is 1
<class 'int'>
6 47 53
6 47 53
53 <class 'int'>
6 47 53
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
110[17, 59][18, 59]
the points are:  [17, 59] [18, 59]
type for point in is_valid_node  <class 'list'>
[17, 59] 17 59
type for point in is_valid_node  <class 'list'>
[18, 59] 18 59
the point we are trying to find neighbors for  [18, 59]
neighboring cells are:  [[18, 60], [18, 58], [17, 59], [19, 59]]
dealing with [18, 60] at loop 0
dealing with [18, 58] at loop 1
dealing with [17, 59] at loop 2
[17, 59] is NOT a wall
dealing with [19, 59] at loop 3
[19, 59] is NOT a wall
neighbors of b [[17, 59], [19, 59]]
cost from [17, 59] to [18, 59] is 1
<class 'int'>
8 47 55
8 47 55
55 <class 'int'>
8 47 55
[16, 59] (16, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[16, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[16, 59] 16 59
the point we are trying to find neighbors for  [16, 59]
neighboring cells are:  [[16, 60], [16, 58], [15, 59], [17, 59]]
dealing with [16, 60] at loop 0
dealing with [16, 58] at loop 1
dealing with [15, 59] at loop 2
[15, 59] is NOT a wall
dealing with [17, 59] at loop 3
[17, 59] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
111[16, 59][15, 59]
the points are:  [16, 59] [15, 59]
type for point in is_valid_node  <class 'list'>
[16, 59] 16 59
type for point in is_valid_node  <class 'list'>
[15, 59] 15 59
the point we are trying to find neighbors for  [15, 59]
neighboring cells are:  [[15, 60], [15, 58], [14, 59], [16, 59]]
dealing with [15, 60] at loop 0
dealing with [15, 58] at loop 1
dealing with [14, 59] at loop 2
[14, 59] is NOT a wall
dealing with [16, 59] at loop 3
[16, 59] is NOT a wall
neighbors of b [[14, 59], [16, 59]]
cost from [16, 59] to [15, 59] is 1
<class 'int'>
5 47 52
5 47 52
52 <class 'int'>
5 47 52
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
111[16, 59][17, 59]
the points are:  [16, 59] [17, 59]
type for point in is_valid_node  <class 'list'>
[16, 59] 16 59
type for point in is_valid_node  <class 'list'>
[17, 59] 17 59
the point we are trying to find neighbors for  [17, 59]
neighboring cells are:  [[17, 60], [17, 58], [16, 59], [18, 59]]
dealing with [17, 60] at loop 0
dealing with [17, 58] at loop 1
[17, 58] is NOT a wall
dealing with [16, 59] at loop 2
[16, 59] is NOT a wall
dealing with [18, 59] at loop 3
[18, 59] is NOT a wall
neighbors of b [[17, 58], [16, 59], [18, 59]]
cost from [16, 59] to [17, 59] is 1
[15, 59] (15, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[15, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[15, 59] 15 59
the point we are trying to find neighbors for  [15, 59]
neighboring cells are:  [[15, 60], [15, 58], [14, 59], [16, 59]]
dealing with [15, 60] at loop 0
dealing with [15, 58] at loop 1
dealing with [14, 59] at loop 2
[14, 59] is NOT a wall
dealing with [16, 59] at loop 3
[16, 59] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
112[15, 59][14, 59]
the points are:  [15, 59] [14, 59]
type for point in is_valid_node  <class 'list'>
[15, 59] 15 59
type for point in is_valid_node  <class 'list'>
[14, 59] 14 59
the point we are trying to find neighbors for  [14, 59]
neighboring cells are:  [[14, 60], [14, 58], [13, 59], [15, 59]]
dealing with [14, 60] at loop 0
dealing with [14, 58] at loop 1
dealing with [13, 59] at loop 2
[13, 59] is NOT a wall
dealing with [15, 59] at loop 3
[15, 59] is NOT a wall
neighbors of b [[13, 59], [15, 59]]
cost from [15, 59] to [14, 59] is 1
<class 'int'>
4 47 51
4 47 51
51 <class 'int'>
4 47 51
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
112[15, 59][16, 59]
the points are:  [15, 59] [16, 59]
type for point in is_valid_node  <class 'list'>
[15, 59] 15 59
type for point in is_valid_node  <class 'list'>
[16, 59] 16 59
the point we are trying to find neighbors for  [16, 59]
neighboring cells are:  [[16, 60], [16, 58], [15, 59], [17, 59]]
dealing with [16, 60] at loop 0
dealing with [16, 58] at loop 1
dealing with [15, 59] at loop 2
[15, 59] is NOT a wall
dealing with [17, 59] at loop 3
[17, 59] is NOT a wall
neighbors of b [[15, 59], [17, 59]]
cost from [15, 59] to [16, 59] is 1
[14, 59] (14, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[14, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[14, 59] 14 59
the point we are trying to find neighbors for  [14, 59]
neighboring cells are:  [[14, 60], [14, 58], [13, 59], [15, 59]]
dealing with [14, 60] at loop 0
dealing with [14, 58] at loop 1
dealing with [13, 59] at loop 2
[13, 59] is NOT a wall
dealing with [15, 59] at loop 3
[15, 59] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
113[14, 59][13, 59]
the points are:  [14, 59] [13, 59]
type for point in is_valid_node  <class 'list'>
[14, 59] 14 59
type for point in is_valid_node  <class 'list'>
[13, 59] 13 59
the point we are trying to find neighbors for  [13, 59]
neighboring cells are:  [[13, 60], [13, 58], [12, 59], [14, 59]]
dealing with [13, 60] at loop 0
dealing with [13, 58] at loop 1
dealing with [12, 59] at loop 2
dealing with [14, 59] at loop 3
[14, 59] is NOT a wall
neighbors of b [[14, 59]]
cost from [14, 59] to [13, 59] is 1
<class 'int'>
3 47 50
3 47 50
50 <class 'int'>
3 47 50
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
113[14, 59][15, 59]
the points are:  [14, 59] [15, 59]
type for point in is_valid_node  <class 'list'>
[14, 59] 14 59
type for point in is_valid_node  <class 'list'>
[15, 59] 15 59
the point we are trying to find neighbors for  [15, 59]
neighboring cells are:  [[15, 60], [15, 58], [14, 59], [16, 59]]
dealing with [15, 60] at loop 0
dealing with [15, 58] at loop 1
dealing with [14, 59] at loop 2
[14, 59] is NOT a wall
dealing with [16, 59] at loop 3
[16, 59] is NOT a wall
neighbors of b [[14, 59], [16, 59]]
cost from [14, 59] to [15, 59] is 1
[13, 59] (13, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[13, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[13, 59] 13 59
the point we are trying to find neighbors for  [13, 59]
neighboring cells are:  [[13, 60], [13, 58], [12, 59], [14, 59]]
dealing with [13, 60] at loop 0
dealing with [13, 58] at loop 1
dealing with [12, 59] at loop 2
dealing with [14, 59] at loop 3
[14, 59] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
114[13, 59][14, 59]
the points are:  [13, 59] [14, 59]
type for point in is_valid_node  <class 'list'>
[13, 59] 13 59
type for point in is_valid_node  <class 'list'>
[14, 59] 14 59
the point we are trying to find neighbors for  [14, 59]
neighboring cells are:  [[14, 60], [14, 58], [13, 59], [15, 59]]
dealing with [14, 60] at loop 0
dealing with [14, 58] at loop 1
dealing with [13, 59] at loop 2
[13, 59] is NOT a wall
dealing with [15, 59] at loop 3
[15, 59] is NOT a wall
neighbors of b [[13, 59], [15, 59]]
cost from [13, 59] to [14, 59] is 1
[18, 59] (18, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[18, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[18, 59] 18 59
the point we are trying to find neighbors for  [18, 59]
neighboring cells are:  [[18, 60], [18, 58], [17, 59], [19, 59]]
dealing with [18, 60] at loop 0
dealing with [18, 58] at loop 1
dealing with [17, 59] at loop 2
[17, 59] is NOT a wall
dealing with [19, 59] at loop 3
[19, 59] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
111[18, 59][17, 59]
the points are:  [18, 59] [17, 59]
type for point in is_valid_node  <class 'list'>
[18, 59] 18 59
type for point in is_valid_node  <class 'list'>
[17, 59] 17 59
the point we are trying to find neighbors for  [17, 59]
neighboring cells are:  [[17, 60], [17, 58], [16, 59], [18, 59]]
dealing with [17, 60] at loop 0
dealing with [17, 58] at loop 1
[17, 58] is NOT a wall
dealing with [16, 59] at loop 2
[16, 59] is NOT a wall
dealing with [18, 59] at loop 3
[18, 59] is NOT a wall
neighbors of b [[17, 58], [16, 59], [18, 59]]
cost from [18, 59] to [17, 59] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
111[18, 59][19, 59]
the points are:  [18, 59] [19, 59]
type for point in is_valid_node  <class 'list'>
[18, 59] 18 59
type for point in is_valid_node  <class 'list'>
[19, 59] 19 59
the point we are trying to find neighbors for  [19, 59]
neighboring cells are:  [[19, 60], [19, 58], [18, 59], [20, 59]]
dealing with [19, 60] at loop 0
dealing with [19, 58] at loop 1
[19, 58] is NOT a wall
dealing with [18, 59] at loop 2
[18, 59] is NOT a wall
dealing with [20, 59] at loop 3
neighbors of b [[19, 58], [18, 59]]
cost from [18, 59] to [19, 59] is 1
<class 'int'>
9 47 56
9 47 56
56 <class 'int'>
9 47 56
[19, 59] (19, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 59] 19 59
the point we are trying to find neighbors for  [19, 59]
neighboring cells are:  [[19, 60], [19, 58], [18, 59], [20, 59]]
dealing with [19, 60] at loop 0
dealing with [19, 58] at loop 1
[19, 58] is NOT a wall
dealing with [18, 59] at loop 2
[18, 59] is NOT a wall
dealing with [20, 59] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
112[19, 59][19, 58]
the points are:  [19, 59] [19, 58]
type for point in is_valid_node  <class 'list'>
[19, 59] 19 59
type for point in is_valid_node  <class 'list'>
[19, 58] 19 58
the point we are trying to find neighbors for  [19, 58]
neighboring cells are:  [[19, 59], [19, 57], [18, 58], [20, 58]]
dealing with [19, 59] at loop 0
[19, 59] is NOT a wall
dealing with [19, 57] at loop 1
[19, 57] is NOT a wall
dealing with [18, 58] at loop 2
dealing with [20, 58] at loop 3
neighbors of b [[19, 59], [19, 57]]
cost from [19, 59] to [19, 58] is 1
<class 'int'>
9 46 55
9 46 55
55 <class 'int'>
9 46 55
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
112[19, 59][18, 59]
the points are:  [19, 59] [18, 59]
type for point in is_valid_node  <class 'list'>
[19, 59] 19 59
type for point in is_valid_node  <class 'list'>
[18, 59] 18 59
the point we are trying to find neighbors for  [18, 59]
neighboring cells are:  [[18, 60], [18, 58], [17, 59], [19, 59]]
dealing with [18, 60] at loop 0
dealing with [18, 58] at loop 1
dealing with [17, 59] at loop 2
[17, 59] is NOT a wall
dealing with [19, 59] at loop 3
[19, 59] is NOT a wall
neighbors of b [[17, 59], [19, 59]]
cost from [19, 59] to [18, 59] is 1
[19, 58] (19, 58)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 58] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 58] 19 58
the point we are trying to find neighbors for  [19, 58]
neighboring cells are:  [[19, 59], [19, 57], [18, 58], [20, 58]]
dealing with [19, 59] at loop 0
[19, 59] is NOT a wall
dealing with [19, 57] at loop 1
[19, 57] is NOT a wall
dealing with [18, 58] at loop 2
dealing with [20, 58] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
113[19, 58][19, 59]
the points are:  [19, 58] [19, 59]
type for point in is_valid_node  <class 'list'>
[19, 58] 19 58
type for point in is_valid_node  <class 'list'>
[19, 59] 19 59
the point we are trying to find neighbors for  [19, 59]
neighboring cells are:  [[19, 60], [19, 58], [18, 59], [20, 59]]
dealing with [19, 60] at loop 0
dealing with [19, 58] at loop 1
[19, 58] is NOT a wall
dealing with [18, 59] at loop 2
[18, 59] is NOT a wall
dealing with [20, 59] at loop 3
neighbors of b [[19, 58], [18, 59]]
cost from [19, 58] to [19, 59] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
113[19, 58][19, 57]
the points are:  [19, 58] [19, 57]
type for point in is_valid_node  <class 'list'>
[19, 58] 19 58
type for point in is_valid_node  <class 'list'>
[19, 57] 19 57
the point we are trying to find neighbors for  [19, 57]
neighboring cells are:  [[19, 58], [19, 56], [18, 57], [20, 57]]
dealing with [19, 58] at loop 0
[19, 58] is NOT a wall
dealing with [19, 56] at loop 1
dealing with [18, 57] at loop 2
dealing with [20, 57] at loop 3
[20, 57] is NOT a wall
neighbors of b [[19, 58], [20, 57]]
cost from [19, 58] to [19, 57] is 1
<class 'int'>
9 45 54
9 45 54
54 <class 'int'>
9 45 54
[19, 57] (19, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[19, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[19, 57] 19 57
the point we are trying to find neighbors for  [19, 57]
neighboring cells are:  [[19, 58], [19, 56], [18, 57], [20, 57]]
dealing with [19, 58] at loop 0
[19, 58] is NOT a wall
dealing with [19, 56] at loop 1
dealing with [18, 57] at loop 2
dealing with [20, 57] at loop 3
[20, 57] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
114[19, 57][19, 58]
the points are:  [19, 57] [19, 58]
type for point in is_valid_node  <class 'list'>
[19, 57] 19 57
type for point in is_valid_node  <class 'list'>
[19, 58] 19 58
the point we are trying to find neighbors for  [19, 58]
neighboring cells are:  [[19, 59], [19, 57], [18, 58], [20, 58]]
dealing with [19, 59] at loop 0
[19, 59] is NOT a wall
dealing with [19, 57] at loop 1
[19, 57] is NOT a wall
dealing with [18, 58] at loop 2
dealing with [20, 58] at loop 3
neighbors of b [[19, 59], [19, 57]]
cost from [19, 57] to [19, 58] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
114[19, 57][20, 57]
the points are:  [19, 57] [20, 57]
type for point in is_valid_node  <class 'list'>
[19, 57] 19 57
type for point in is_valid_node  <class 'list'>
[20, 57] 20 57
the point we are trying to find neighbors for  [20, 57]
neighboring cells are:  [[20, 58], [20, 56], [19, 57], [21, 57]]
dealing with [20, 58] at loop 0
dealing with [20, 56] at loop 1
dealing with [19, 57] at loop 2
[19, 57] is NOT a wall
dealing with [21, 57] at loop 3
[21, 57] is NOT a wall
neighbors of b [[19, 57], [21, 57]]
cost from [19, 57] to [20, 57] is 1
<class 'int'>
10 45 55
10 45 55
55 <class 'int'>
10 45 55
[20, 57] (20, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[20, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[20, 57] 20 57
the point we are trying to find neighbors for  [20, 57]
neighboring cells are:  [[20, 58], [20, 56], [19, 57], [21, 57]]
dealing with [20, 58] at loop 0
dealing with [20, 56] at loop 1
dealing with [19, 57] at loop 2
[19, 57] is NOT a wall
dealing with [21, 57] at loop 3
[21, 57] is NOT a wall
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
115[20, 57][19, 57]
the points are:  [20, 57] [19, 57]
type for point in is_valid_node  <class 'list'>
[20, 57] 20 57
type for point in is_valid_node  <class 'list'>
[19, 57] 19 57
the point we are trying to find neighbors for  [19, 57]
neighboring cells are:  [[19, 58], [19, 56], [18, 57], [20, 57]]
dealing with [19, 58] at loop 0
[19, 58] is NOT a wall
dealing with [19, 56] at loop 1
dealing with [18, 57] at loop 2
dealing with [20, 57] at loop 3
[20, 57] is NOT a wall
neighbors of b [[19, 58], [20, 57]]
cost from [20, 57] to [19, 57] is 1
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
115[20, 57][21, 57]
the points are:  [20, 57] [21, 57]
type for point in is_valid_node  <class 'list'>
[20, 57] 20 57
type for point in is_valid_node  <class 'list'>
[21, 57] 21 57
the point we are trying to find neighbors for  [21, 57]
neighboring cells are:  [[21, 58], [21, 56], [20, 57], [22, 57]]
dealing with [21, 58] at loop 0
[21, 58] is NOT a wall
dealing with [21, 56] at loop 1
dealing with [20, 57] at loop 2
[20, 57] is NOT a wall
dealing with [22, 57] at loop 3
neighbors of b [[21, 58], [20, 57]]
cost from [20, 57] to [21, 57] is 1
<class 'int'>
11 45 56
11 45 56
56 <class 'int'>
11 45 56
[21, 57] (21, 57)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 57] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 57] 21 57
the point we are trying to find neighbors for  [21, 57]
neighboring cells are:  [[21, 58], [21, 56], [20, 57], [22, 57]]
dealing with [21, 58] at loop 0
[21, 58] is NOT a wall
dealing with [21, 56] at loop 1
dealing with [20, 57] at loop 2
[20, 57] is NOT a wall
dealing with [22, 57] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
116[21, 57][21, 58]
the points are:  [21, 57] [21, 58]
type for point in is_valid_node  <class 'list'>
[21, 57] 21 57
type for point in is_valid_node  <class 'list'>
[21, 58] 21 58
the point we are trying to find neighbors for  [21, 58]
neighboring cells are:  [[21, 59], [21, 57], [20, 58], [22, 58]]
dealing with [21, 59] at loop 0
[21, 59] is NOT a wall
dealing with [21, 57] at loop 1
[21, 57] is NOT a wall
dealing with [20, 58] at loop 2
dealing with [22, 58] at loop 3
neighbors of b [[21, 59], [21, 57]]
cost from [21, 57] to [21, 58] is 1
<class 'int'>
11 46 57
11 46 57
57 <class 'int'>
11 46 57
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
116[21, 57][20, 57]
the points are:  [21, 57] [20, 57]
type for point in is_valid_node  <class 'list'>
[21, 57] 21 57
type for point in is_valid_node  <class 'list'>
[20, 57] 20 57
the point we are trying to find neighbors for  [20, 57]
neighboring cells are:  [[20, 58], [20, 56], [19, 57], [21, 57]]
dealing with [20, 58] at loop 0
dealing with [20, 56] at loop 1
dealing with [19, 57] at loop 2
[19, 57] is NOT a wall
dealing with [21, 57] at loop 3
[21, 57] is NOT a wall
neighbors of b [[19, 57], [21, 57]]
cost from [21, 57] to [20, 57] is 1
[21, 58] (21, 58)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 58] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 58] 21 58
the point we are trying to find neighbors for  [21, 58]
neighboring cells are:  [[21, 59], [21, 57], [20, 58], [22, 58]]
dealing with [21, 59] at loop 0
[21, 59] is NOT a wall
dealing with [21, 57] at loop 1
[21, 57] is NOT a wall
dealing with [20, 58] at loop 2
dealing with [22, 58] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
117[21, 58][21, 59]
the points are:  [21, 58] [21, 59]
type for point in is_valid_node  <class 'list'>
[21, 58] 21 58
type for point in is_valid_node  <class 'list'>
[21, 59] 21 59
the point we are trying to find neighbors for  [21, 59]
neighboring cells are:  [[21, 60], [21, 58], [20, 59], [22, 59]]
dealing with [21, 60] at loop 0
dealing with [21, 58] at loop 1
[21, 58] is NOT a wall
dealing with [20, 59] at loop 2
dealing with [22, 59] at loop 3
neighbors of b [[21, 58]]
cost from [21, 58] to [21, 59] is 1
<class 'int'>
11 47 58
11 47 58
58 <class 'int'>
11 47 58
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
117[21, 58][21, 57]
the points are:  [21, 58] [21, 57]
type for point in is_valid_node  <class 'list'>
[21, 58] 21 58
type for point in is_valid_node  <class 'list'>
[21, 57] 21 57
the point we are trying to find neighbors for  [21, 57]
neighboring cells are:  [[21, 58], [21, 56], [20, 57], [22, 57]]
dealing with [21, 58] at loop 0
[21, 58] is NOT a wall
dealing with [21, 56] at loop 1
dealing with [20, 57] at loop 2
[20, 57] is NOT a wall
dealing with [22, 57] at loop 3
neighbors of b [[21, 58], [20, 57]]
cost from [21, 58] to [21, 57] is 1
[21, 59] (21, 59)
current_l:<class 'list'>, current_t <class 'tuple'>
BEFORE THE BREAK line
[21, 59] [10, 12] <class 'list'> <class 'list'>
type for point in is_valid_node  <class 'list'>
[21, 59] 21 59
the point we are trying to find neighbors for  [21, 59]
neighboring cells are:  [[21, 60], [21, 58], [20, 59], [22, 59]]
dealing with [21, 60] at loop 0
dealing with [21, 58] at loop 1
[21, 58] is NOT a wall
dealing with [20, 59] at loop 2
dealing with [22, 59] at loop 3
Where is the problem?
next:<class 'list'>, next_t <class 'tuple'>
118[21, 59][21, 58]
the points are:  [21, 59] [21, 58]
type for point in is_valid_node  <class 'list'>
[21, 59] 21 59
type for point in is_valid_node  <class 'list'>
[21, 58] 21 58
the point we are trying to find neighbors for  [21, 58]
neighboring cells are:  [[21, 59], [21, 57], [20, 58], [22, 58]]
dealing with [21, 59] at loop 0
[21, 59] is NOT a wall
dealing with [21, 57] at loop 1
[21, 57] is NOT a wall
dealing with [20, 58] at loop 2
dealing with [22, 58] at loop 3
neighbors of b [[21, 59], [21, 57]]
cost from [21, 59] to [21, 58] is 1
